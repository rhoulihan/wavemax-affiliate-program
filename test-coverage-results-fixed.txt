
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (128 ms)
    ✓ should be a winston logger instance (18 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (54 ms)
    ✓ should verify password correctly (166 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured (1 ms)
      ✓ should return false when not configured

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params (1 ms)
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages
    ✓ should handle floating point numbers (1 ms)
    ✓ should preserve other query parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (1 ms)
      ✓ should log email operations (1 ms)
      ✓ should handle email errors
    Email Templates
      ✓ should process email templates
      ✓ should handle missing template variables
    Email Validation
      ✓ should validate email addresses (1 ms)
    Email Queue
      ✓ should queue emails for sending (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (17 ms)
      ✓ should export vendors as CSV (4 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (3 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (3 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (3 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields
    ✓ should configure Facebook strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (6 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (14 ms)
    GET /api/orders/export
      ✓ should export orders (3 ms)
    GET /api/orders/search
      ✓ should search orders (3 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (3 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (2 ms)
    GET /api/orders/:orderId
      ✓ should get order details (3 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (2 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (3 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:34.987Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:35.124Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:16:35.158Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:35.306Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:35.422Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:36.036Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:16:36.150Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (143 ms)
      ✓ should update existing token if one exists (181 ms)
      ✓ should calculate expiration time correctly (117 ms)
    getCurrentToken
      ✓ should return the most recent token (143 ms)
      ✓ should return null if no tokens exist (103 ms)
    clearTokens
      ✓ should remove all tokens (229 ms)
    token expiration
      ✓ should identify expired tokens (139 ms)
      ✓ should handle tokens without refresh token (113 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (247 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (14 ms)
    ✓ GET /api/orders/export - should export orders (3 ms)
    ✓ GET /api/orders/search - should search orders (2 ms)
    ✓ GET /api/orders/statistics - should get statistics (2 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (3 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (13 ms)
    ✓ GET /api/orders/:orderId - should get order details (3 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (2 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (3 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (2 ms)
    ✓ Error handling - should return 404 for unknown routes (3 ms)
    ✓ Error handling - should handle controller errors (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (13 ms)
      ✓ should reject invalid credentials (3 ms)
    POST /api/auth/register
      ✓ should register new user (3 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (3 ms)
      ✓ should reject logout without token (2 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (2 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (2 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (2 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (2 ms)
      ✓ should reject without token (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (17 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values
      ✓ should parse string amounts (1 ms)
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts
      ✓ should round to 2 decimal places (1 ms)
    formatDate
      ✓ should format date with short format by default (6 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format
      ✓ should handle string dates
      ✓ should handle null and undefined dates
      ✓ should handle invalid dates
      ✓ should handle different format cases (1 ms)
    generateRandomString
      ✓ should generate a string of default length 10
      ✓ should generate strings of specified length (1 ms)
      ✓ should generate different strings on each call
      ✓ should only use alphanumeric characters
    sanitizeForCSV
      ✓ should return empty string for null and undefined (1 ms)
      ✓ should convert non-string values to strings
      ✓ should leave simple strings unchanged
      ✓ should escape double quotes by doubling them (1 ms)
      ✓ should wrap strings containing commas in quotes
      ✓ should wrap strings containing newlines in quotes
      ✓ should handle complex strings with multiple special characters
    calculatePercentage
      ✓ should calculate percentage correctly
      ✓ should handle zero total
      ✓ should handle null or undefined total
      ✓ should respect decimal places parameter (1 ms)
      ✓ should round correctly
      ✓ should handle edge cases (1 ms)
      ✓ should handle negative values

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (20 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter (1 ms)
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets (1 ms)
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly (1 ms)
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string (1 ms)
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats
      ✓ should handle admin with different email formats (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (6 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (5 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (3 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (2 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (2 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (3 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (6 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (2 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle JSON parsing errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (501 ms)
      ✓ should authenticate valid x-auth-token header (225 ms)
      ✓ should reject request with no token (212 ms)
      ✓ should reject request with invalid token (212 ms)
      ✓ should reject request with expired token (210 ms)
      ✓ should handle malformed Authorization header (211 ms)
      ✓ should reject blacklisted token (210 ms)
    authorize
      ✓ should authorize user with correct role (213 ms)
      ✓ should authorize user with one of multiple roles (217 ms)
      ✓ should reject user with incorrect role (226 ms)
      ✓ should reject user with no role (211 ms)
      ✓ should reject when user is not set (212 ms)
    authLimiter
      ✓ should be a function (210 ms)
      ✓ should have rate limit configuration (213 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (1 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields (1 ms)
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing
      ✓ should not warn when all required variables are present (2 ms)
    getEnvironment
      ✓ should return configured environment (1 ms)
      ✓ should default to production if not configured (1 ms)
    getMerchantId
      ✓ should return merchant ID when configured (1 ms)
      ✓ should throw error when not configured (9 ms)
    getFormId
      ✓ should return form ID when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormActionUrl
      ✓ should return configured form action URL (1 ms)
      ✓ should return default URL when not configured (1 ms)
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured
    isConfigured
      ✓ should return true when all required config is present (1 ms)
      ✓ should return false and log error when config is incomplete (1 ms)
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing
      ✓ should set testModeEnabled to false when not configured
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter (1 ms)
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer (1 ms)
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token (1 ms)
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly (1 ms)
      ✓ should validate customer ID format
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (8 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (8 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (3 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (2 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (12 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (3 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (2 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (3 ms)
      ✓ should handle POST callback routes (2 ms)
      ✓ should handle multiple callback paths (3 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (2 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle empty request bodies (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (13 ms)
      ✓ should allow access in test environment (3 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (2 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (3 ms)
      ✓ should deny access when referer contains /embed (1 ms)
      ✓ should allow access with normal referer (2 ms)
    Route Handlers
      ✓ should serve index.html at root path (2 ms)
      ✓ should serve critical-files page (3 ms)
      ✓ should serve test-templates page (2 ms)
      ✓ should serve action-plan page (3 ms)
      ✓ should return 404 for non-existent pages (2 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (2 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (3 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (2 ms)
      ✓ should return valid HTML for 404 page (2 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (6 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (4 ms)
      ✓ should handle specific route handlers (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/errorHandler.test.js (5.054 s)
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (11 ms)
      ✓ should handle custom status codes
      ✓ should handle Mongoose validation errors
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors
      ✓ should handle JWT token expiration errors
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message
      ✓ should handle errors with code property (1 ms)
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code (5 ms)
      ✓ should have stack trace (1 ms)
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (2 ms)
      ✓ should handle undefined error (1 ms)
      ✓ should handle non-error objects
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderWithSystemConfig.test.js (9.622 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (831 ms)
      ✓ should use default rate when SystemConfig is not available (963 ms)
      ✓ should calculate estimated total using SystemConfig rate (648 ms)
      ✓ should calculate actual total using SystemConfig rate (637 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (654 ms)
      ✓ should calculate commission for zero delivery fee (649 ms)
      ✓ should handle commission calculation for large orders (649 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (638 ms)
      ✓ should update calculations when base rate changes (772 ms)
      ✓ should validate minimum and maximum base rates (853 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1147 ms)
      ✓ should match revenue calculator with different parameters (638 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (3 ms)
      ✓ should reject invalid email addresses (1 ms)
    isValidPhone
      ✓ should validate correct US phone numbers
      ✓ should reject invalid phone numbers
    isValidUsername
      ✓ should validate correct usernames (1 ms)
      ✓ should reject invalid usernames
    isValidZipCode
      ✓ should validate correct US zip codes (1 ms)
      ✓ should reject invalid zip codes (1 ms)
    isValidTimeFormat
      ✓ should validate correct time formats
      ✓ should reject invalid time formats (1 ms)
    isValidName
      ✓ should validate correct names (1 ms)
      ✓ should reject invalid names
    mongooseValidators
      ✓ should provide email validator
      ✓ should provide phone validator
      ✓ should provide username validator (1 ms)
      ✓ should provide zipCode validator
      ✓ should provide timeFormat validator
      ✓ should provide name validator (1 ms)
    expressValidators
      ✓ should provide email validator function
      ✓ should provide phone validator function
      ✓ should provide username validator function (1 ms)
      ✓ should provide zipCode validator function
      ✓ should provide timeFormat validator function
      ✓ should provide name validator function
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails
      validatePhone
        ✓ should return validation result for phones
      validateUsername
        ✓ should return validation result for usernames
      validateZipCode
        ✓ should return validation result for zip codes
      validateTimeFormat
        ✓ should return validation result for time formats (1 ms)
      validateName
        ✓ should return validation result for names

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (148 ms)
      ✓ should use default values for blacklistedAt and reason (110 ms)
      ✓ should require all mandatory fields (86 ms)
      ✓ should enforce unique token constraint (237 ms)
      ✓ should validate userType enum (77 ms)
      ✓ should accept all valid userTypes (211 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (108 ms)
        ✓ should use default reason when not provided (109 ms)
        ✓ should return null when token already blacklisted (238 ms)
        ✓ should handle custom reasons (109 ms)
        ✓ should propagate non-duplicate errors (77 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (138 ms)
        ✓ should return false for non-blacklisted token (102 ms)
        ✓ should handle empty token (107 ms)
        ✓ should handle null token (103 ms)
      cleanupExpired
        ✓ should delete expired tokens (224 ms)
        ✓ should return 0 when no expired tokens (194 ms)
        ✓ should handle empty collection (102 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (9 ms)
      ✓ should throw error when encryption key is missing (1 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (1 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (56 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (178 ms)
      ✓ should return false for invalid salt format (67 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format
      ✓ should generate unique barcodes
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (9 ms)
      ✓ should handle unicode and special characters (1 ms)
      ✓ should produce different IVs for same input (1 ms)
      ✓ should validate encryption output structure (2 ms)
      ✓ should handle password edge cases (1432 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/models.test.js (6.586 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (613 ms)
      ✓ should require required fields (308 ms)
      ✓ should enforce unique constraints (600 ms)
      ✓ should handle payment information correctly (339 ms)
    Customer Model
      ✓ should create a valid customer (338 ms)
    Order Model
      ✓ should create a valid order (371 ms)
      ✓ should calculate estimated total correctly (367 ms)
      ✓ should calculate actual total and commission when weight is set (366 ms)
      ✓ should update timestamps for status changes (459 ms)
    Transaction Model
      ✓ should create a valid transaction (345 ms)
      ✓ should validate transaction type (303 ms)
      ✓ should validate transaction status (309 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (342 ms)
      ✓ should validate user type (307 ms)
      ✓ should check if token is expired (375 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (15 ms)
      ✓ should handle errors when fetching public configs (6 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (3 ms)
      ✓ should return 404 for non-existent public config (2 ms)
      ✓ should handle errors when fetching specific config (4 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (2 ms)
      ✓ should filter configurations by category (3 ms)
      ✓ should handle errors when fetching all configs (3 ms)
      ✓ should require authentication (2 ms)
      ✓ should require administrator role (73 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (9 ms)
      ✓ should require system_config permission (60 ms)
      ✓ should handle validation errors (4 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (3 ms)
      ✓ should handle errors during initialization (2 ms)
      ✓ should require authentication and admin role (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (156 ms)
      ✓ should generate ADM002 when ADM001 exists (291 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (294 ms)
      ✓ should handle non-sequential admin IDs correctly (305 ms)
      ✓ should handle double-digit admin IDs (219 ms)
      ✓ should handle triple-digit admin IDs (214 ms)
      ✓ should handle large admin ID numbers (248 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (104 ms)
      ✓ should handle numbers above 999 without padding issues (105 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (105 ms)
      ✓ should handle edge cases in admin ID parsing (106 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (276 ms)
      ✓ should work correctly with different creation dates (268 ms)
      ✓ should work correctly with different permissions (273 ms)
    Performance and reliability
      ✓ should handle database query efficiently (214 ms)
      ✓ should handle concurrent admin creation scenario (253 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (5 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (1 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF (4 ms)
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints (1 ms)
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (2 ms)
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes (1 ms)
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods (1 ms)
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes
        ✓ should not match partial paths (1 ms)
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array (1 ms)
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully (1 ms)
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array (1 ms)
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles
      ✓ should not expose sensitive fields in public view (1 ms)
      ✓ should include appropriate fields for each role
    getFilteredData
      ✓ should filter data based on admin role (1 ms)
      ✓ should filter data based on public role
      ✓ should handle self context for customers (1 ms)
      ✓ should handle arrays of data
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method
      ✓ should filter response data when _filterType is provided (1 ms)
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated (1 ms)
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property (1 ms)
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (23 ms)
      ✓ should handle empty store IP (1 ms)
      ✓ should load additional IPs from environment (1 ms)
      ✓ should trim whitespace from IPs (1 ms)
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment (1 ms)
      ✓ should handle empty IP ranges (1 ms)
    Session renewal configuration
      ✓ should use default session renewal settings (2 ms)
      ✓ should load custom session renewal settings from environment (1 ms)
      ✓ should handle invalid numeric values (2 ms)
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs (1 ms)
      ✓ should return false for non-whitelisted IPs (2 ms)
      ✓ should check IP ranges (7 ms)
      ✓ should return false for IPs outside ranges (1 ms)
    isInRange function
      ✓ should correctly check IPs in /24 subnet (1 ms)
      ✓ should correctly check IPs in /16 subnet (1 ms)
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host)
      ✓ should correctly check IPs in /0 subnet (all IPs) (1 ms)
      ✓ should handle invalid CIDR notation
      ✓ should handle invalid mask bits
      ✓ should handle invalid IP addresses (1 ms)
      ✓ should handle IP parts out of range (1 ms)
      ✓ should handle edge cases with console error (1 ms)
      ✓ should correctly handle boundary cases (1 ms)
      ✓ should handle various subnet sizes correctly
    Configuration export structure
      ✓ should export all required properties and functions
      ✓ should have correct session renewal properties (1 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully (1 ms)
      ✓ should return null when no callbacks available
    releaseCallback
      ✓ should release callback successfully
      ✓ should handle null callback gracefully (1 ms)
    getPoolStatus
      ✓ should return pool status with all handler details
      ✓ should handle empty pool (1 ms)
    startCleanupJob
      ✓ should start cleanup interval (1 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (1 ms)
      ✓ should not log when no locks are released
    stopCleanupJob
      ✓ should stop cleanup interval when running (1 ms)
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters
        ✓ should require lowercase letters (1 ms)
        ✓ should require numbers
        ✓ should require special characters (1 ms)
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should reject sequential characters
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords (6 ms)
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password (1 ms)
        ✓ should handle case-insensitive username/email checks
    customPasswordValidator
      ✓ should work as express-validator custom validator (15 ms)
      ✓ should include validation errors in thrown message (1 ms)
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success (1 ms)
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (68 ms)
      ✓ should handle null/undefined history (1 ms)
    getPasswordStrength
      ✓ should return higher scores for stronger passwords
      ✓ should score length appropriately (1 ms)
      ✓ should score character variety
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords (1 ms)
      ✓ should contain domain-specific passwords

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPool.test.js (6.305 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (152 ms)
      ✓ should have default values (146 ms)
      ✓ should have unique constraint on callbackPath (137 ms)
      ✓ should create document with defaults (174 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (195 ms)
        ✓ should increment usage count on each lock (283 ms)
        ✓ should update lastUsedAt timestamp (198 ms)
      release()
        ✓ should release locked callback (254 ms)
        ✓ should handle releasing already unlocked callback (193 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (203 ms)
        ✓ should use least recently used callback (237 ms)
        ✓ should acquire expired locked callback (237 ms)
        ✓ should return null when no callbacks available (233 ms)
        ✓ should increment usage count atomically (212 ms)
      releaseCallback()
        ✓ should release callback by payment token (199 ms)
        ✓ should return null if no callback found with token (161 ms)
        ✓ should only release callback locked by specific token (223 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (262 ms)
        ✓ should not release recently locked callbacks (234 ms)
        ✓ should handle custom timeout values (238 ms)
        ✓ should return 0 when no expired locks (247 ms)
        ✓ should handle empty collection (226 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (172 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (763 ms)
      ✓ should handle invalid ObjectId gracefully (168 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (1 ms)
      ✓ should sanitize arrays recursively (1 ms)
      ✓ should sanitize objects recursively
      ✓ should handle null values
      ✓ should handle undefined values
      ✓ should handle numbers (1 ms)
      ✓ should handle booleans
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects (1 ms)
      ✓ should not modify prototype properties
    sanitizeRequest
      ✓ should sanitize request body (1 ms)
      ✓ should sanitize query parameters
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string (1 ms)
      ✓ should validate complex email formats
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters (1 ms)
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters
      ✓ should remove spaces
      ✓ should handle script injection attempts (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format (1 ms)
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes (1 ms)
    Integration tests
      ✓ should work with express middleware chain
      ✓ should handle complex nested structures (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (161 ms)
      ✓ should handle email sending failures gracefully (139 ms)
      ✓ should return error for invalid customer (53 ms)
      ✓ should return error for invalid affiliate (53 ms)
      ✓ should enforce authorization (54 ms)
    getOrderDetails
      ✓ should return order details for authorized user (58 ms)
      ✓ should return 404 for non-existent order (51 ms)
      ✓ should enforce authorization for customers (51 ms)
    updateOrderStatus
      ✓ should successfully update order status (51 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (51 ms)
      ✓ should send commission email when complete (52 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (1 ms)
      ✓ should have unique event names (1 ms)
    logAuditEvent
      ✓ should log basic audit event
      ✓ should add request context when provided (1 ms)
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events
      ✓ should handle missing user context (1 ms)
      ✓ should handle connection.remoteAddress fallback
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses (1 ms)
      ✓ should include request context in logs
    logLoginAttempt
      ✓ should log successful login (1 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access (1 ms)
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level
      ✓ should include request context (1 ms)
      ✓ should merge all details
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminScript.test.js (9.878 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (355 ms)
      ✓ should contain required functionality markers (362 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (574 ms)
      ✓ should calculate next admin ID correctly (629 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (354 ms)
      ✓ should accept strong passwords for admins (681 ms)
    Permission System Validation
      ✓ should validate all permission types (434 ms)
      ✓ should handle partial permission sets (445 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (539 ms)
      ✓ should prevent duplicate emails (526 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (449 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (452 ms)
      ✓ should normalize email addresses (460 ms)
      ✓ should validate email format (662 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (444 ms)
      ✓ should work with password hashing middleware (458 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (375 ms)
      ✓ should handle invalid input gracefully (373 ms)
    Security Considerations
      ✓ should not log or expose passwords (357 ms)
      ✓ should generate secure random passwords when needed (372 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/oAuthSession.test.js (6.628 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (248 ms)
      ✓ should require sessionId field (213 ms)
      ✓ should require result field (204 ms)
      ✓ should automatically set createdAt (237 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (240 ms)
      ✓ should enforce unique sessionId (274 ms)
      ✓ should allow complex result objects (234 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (293 ms)
        ✓ should throw error for duplicate session IDs (281 ms)
        ✓ should handle database errors (227 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (275 ms)
        ✓ should return null for non-existent session (230 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (285 ms)
        ✓ should return null when consuming non-existent session (233 ms)
        ✓ should handle race conditions safely (293 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (444 ms)
        ✓ should return zero deletions when no expired sessions exist (289 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (227 ms)
      ✓ should respect custom expiresAt when provided (234 ms)
    Data Integrity
      ✓ should preserve all data types in result field (240 ms)
      ✓ should handle empty and minimal result objects (364 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (203 ms)
      ✓ should handle very large result objects (311 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (10 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (3 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (3 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (2 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (2 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (8 ms)
      ✓ should validate required fields for social registration (3 ms)
      ✓ should validate service radius range (2 ms)
      ✓ should validate payment method (2 ms)
    Social Account Linking Route
      ✓ should handle social account linking (8 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (2 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (2 ms)
      ✓ should validate customer registration fields (4 ms)
      ✓ should validate service frequency (3 ms)
    Error Handling
      ✓ should handle errors gracefully (15 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (56 ms)
      ✓ should return error when Paygistix is not configured (62 ms)
      ✓ should handle errors gracefully (56 ms)
    logSubmission
      ✓ should log payment submission successfully (52 ms)
      ✓ should handle logging errors (53 ms)
    createPaymentToken
      ✓ should create payment token successfully (53 ms)
      ✓ should handle no available callbacks (53 ms)
      ✓ should handle token creation errors (52 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (72 ms)
      ✓ should handle token not found (56 ms)
      ✓ should handle database errors (59 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (52 ms)
      ✓ should not cancel non-pending tokens (53 ms)
      ✓ should handle token not found (54 ms)
    updatePaymentStatus
      ✓ should update payment status to success (53 ms)
      ✓ should update payment status to failed (52 ms)
    handleFormCallback
      ✓ should process callback successfully (53 ms)
      ✓ should handle no pending payment for callback (57 ms)
      ✓ should handle callback processing errors (53 ms)
    processCallbackResult
      ✓ should process successful payment from query params (53 ms)
      ✓ should process failed payment (54 ms)
      ✓ should handle body parameters (52 ms)
      ✓ should redirect with all parameters (55 ms)
    getPoolStats
      ✓ should return pool statistics (53 ms)
      ✓ should handle stats retrieval errors (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/payment.test.js (7.176 s)
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (53 ms)
      ✓ should require orderId (57 ms)
      ✓ should require customerId (55 ms)
      ✓ should require paymentMethodId (56 ms)
      ✓ should require paygistixId (56 ms)
      ✓ should require amount (59 ms)
      ✓ should validate amount is non-negative (55 ms)
      ✓ should default currency to USD (55 ms)
      ✓ should validate currency enum (53 ms)
      ✓ should reject invalid currency (52 ms)
      ✓ should validate status enum (53 ms)
      ✓ should reject invalid status (55 ms)
      ✓ should default status to pending (52 ms)
    Default Values
      ✓ should default capturedAmount to 0 (51 ms)
      ✓ should default refundedAmount to 0 (56 ms)
      ✓ should default hasDispute to false (51 ms)
      ✓ should have empty refunds array (54 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (52 ms)
      ✓ should handle zero amounts (55 ms)
      ✓ should handle full refund (52 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (52 ms)
        ✓ should allow refund when status is partially_refunded (51 ms)
        ✓ should not allow refund when status is pending (51 ms)
        ✓ should not allow refund when fully refunded (51 ms)
        ✓ should validate refund amount (58 ms)
        ✓ should handle null amount parameter (52 ms)
      canCapture()
        ✓ should allow capture when status is authorized (51 ms)
        ✓ should not allow capture when status is captured (51 ms)
        ✓ should not allow capture when status is pending (51 ms)
      addRefund()
        ✓ should add refund to refunds array (54 ms)
        ✓ should update refundedAmount (52 ms)
        ✓ should update lastRefundAt (55 ms)
        ✓ should set status to partially_refunded for partial refund (51 ms)
        ✓ should set status to refunded for full refund (55 ms)
        ✓ should handle multiple refunds (56 ms)
        ✓ should handle refund that exceeds captured amount (52 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (52 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (53 ms)
        ✓ should accept custom limit (51 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (52 ms)
    Middleware
      ✓ should have pre-save middleware defined (52 ms)
      ○ skipped should prevent modification of paygistixId
      ○ skipped should prevent modification of orderId
    Refund Schema
      ✓ should validate refund subdocument (52 ms)
      ✓ should require refundId in refund (53 ms)
      ✓ should require amount in refund (54 ms)
      ✓ should validate refund amount is non-negative (53 ms)
      ✓ should set default createdAt for refund (52 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (53 ms)
      ✓ should allow dispute fields when hasDispute is true (51 ms)
      ✓ should validate dispute amount is non-negative (52 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (52 ms)
      ✓ should store response as mixed type (53 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (7 ms)
        ✓ should handle success status as well as approved (3 ms)
        ✓ should update existing payment if found (2 ms)
        ✓ should handle customer not found gracefully (2 ms)
        ✓ should handle email send failure gracefully (2 ms)
        ✓ should not update customer if already active (8 ms)
      Failed payment
        ✓ should handle declined payment (3 ms)
        ✓ should handle failed status (1 ms)
        ✓ should increment payment attempts on failure (2 ms)
        ✓ should use default error message when none provided (1 ms)
      Error handling
        ✓ should handle order not found (1 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle database errors gracefully (1 ms)
        ✓ should handle payment save error (2 ms)
      Edge cases
        ✓ should handle missing amount parameter (1 ms)
        ✓ should handle malformed maskedCard (1 ms)
        ✓ should log callback parameters (2 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (5 ms)
      ✓ should handle POST callback errors (2 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-27T14:17:57.546Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:57.861Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:17:57.862Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-27T15:17:57.862Z","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:57.895Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:57.895Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:58.006Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:58.098Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:58.099Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:17:58.183Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:17:58.241Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T15:17:58.484Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:58.867Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-27T14:17:58.946Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:59.024Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:59.102Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-27T14:17:59.339Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-27T14:17:59.417Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:59.574Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-27T14:17:59.653Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (84 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (86 ms)
      ✓ should delete verifier after retrieval (95 ms)
      ✓ should clean up old PKCE files (77 ms)
    Authorization URL
      ✓ should generate correct authorization URL (79 ms)
      ✓ should use provided state if given (78 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (144 ms)
      ✓ should throw error if PKCE verifier not found (94 ms)
      ✓ should handle token exchange errors (79 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (202 ms)
      ✓ should throw error if no refresh token available (103 ms)
    Access Token Management
      ✓ should return valid access token if not expired (169 ms)
      ✓ should refresh token if expired (112 ms)
      ✓ should throw error if no valid token and no refresh token (102 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (79 ms)
      ✓ should handle envelope creation errors (79 ms)
      ✓ should return mock envelope in test mode (77 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (77 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (76 ms)
      ✓ should reject invalid webhook signature (78 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (81 ms)
      ✓ should handle declined envelope (78 ms)
    Envelope Status
      ✓ should get envelope status (79 ms)
    Document Download
      ✓ should download completed W9 document (78 ms)
    Envelope Voiding
      ✓ should void an envelope (77 ms)

(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (7 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully (1 ms)
    exportPaymentSummary
      ✓ should export payment summary as JSON (1 ms)
      ✓ should export payment summary as CSV (1 ms)
      ✓ should return 400 when dates are missing
      ✓ should return 404 when no payable commissions found (1 ms)
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (1 ms)
      ✓ should return 400 when required parameters are missing
      ✓ should return 404 when affiliate not found (1 ms)
      ✓ should return 400 when affiliate has no verified W-9
    getExportHistory
      ✓ should get export history (1 ms)
      ✓ should filter by type (8 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (57 ms)
      ✓ should require customerId (63 ms)
      ✓ should require paygistixId (63 ms)
      ✓ should validate type enum (55 ms)
      ✓ should reject invalid type (56 ms)
      ✓ should default type to card (57 ms)
    Card Validation
      ✓ should require card details when type is card (53 ms)
      ✓ should validate card last4 length (56 ms)
      ✓ should validate card brand enum (54 ms)
      ✓ should reject invalid card brand (52 ms)
      ✓ should validate expiry month range (53 ms)
      ✓ should validate expiry year is not in the past (51 ms)
      ✓ should require card fingerprint (52 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (54 ms)
      ✓ should require bank account details when type is bank_account (52 ms)
      ✓ should validate bank account last4 length (51 ms)
      ✓ should validate account type enum (51 ms)
      ✓ should reject invalid account type (51 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (51 ms)
      ✓ should require wallet type when type is wallet (54 ms)
      ✓ should validate wallet type enum (53 ms)
    Default Values
      ✓ should default isDefault to false (50 ms)
      ✓ should default isActive to true (51 ms)
      ✓ should default isVerified to false (75 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (51 ms)
        ✓ should format bank account display name (52 ms)
        ✓ should format wallet display name (51 ms)
        ✓ should handle google_pay formatting (52 ms)
        ✓ should return default for unknown type (51 ms)
      isExpired
        ✓ should return false for non-card types (53 ms)
        ✓ should return false for future expiry (51 ms)
        ✓ should return true for past year (51 ms)
        ✓ should return true for current year past month (51 ms)
        ✓ should return false for current year future month (52 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (52 ms)
        ✓ should not allow use of inactive payment method (51 ms)
        ✓ should not allow use of expired card (52 ms)
        ✓ should not allow use of unverified bank account (51 ms)
        ✓ should allow use of verified bank account (53 ms)
      markAsUsed()
        ✓ should update lastUsedAt (58 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (53 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (52 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (53 ms)
        ✓ should return null if no duplicate found (52 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (51 ms)
      Pre-save default handling
        ○ skipped should remove default from other payment methods when setting default
        ○ skipped should prevent modification of paygistixId
        ○ skipped should prevent modification of customerId
      Pre-save auto-default
        ○ skipped should set first payment method as default
        ○ skipped should not set as default if other active methods exist
    Metadata Field
      ✓ should store metadata as Map (53 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (2 ms)
        ✓ should accept passwords with 8 or more characters
      Character Type Requirements
        ✓ should require at least one uppercase letter (1 ms)
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (2 ms)
        ✓ should accept non-common passwords
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers (1 ms)
        ✓ should reject passwords with sequential letters
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters
      Username/Email Inclusion Check
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores
      ✓ should return correct strength labels
    isPasswordInHistory
      ✓ should return true for passwords in history (1 ms)
      ✓ should return false for passwords not in history
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function
      ✓ should validate passwords correctly in express-validator context (1 ms)
      ✓ should throw for invalid passwords in express-validator context (21 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request
      ✓ should include strength assessment in response for invalid passwords (1 ms)
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully
      ✓ should handle very long passwords (1 ms)
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administrator.test.js (7.668 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (208 ms)
      ✓ should require all mandatory fields (84 ms)
      ✓ should enforce email format validation (136 ms)
      ✓ should enforce unique email constraint (513 ms)
      ✓ should enforce unique adminId constraint (509 ms)
      ✓ should validate permission enum values (140 ms)
      ✓ should accept valid permissions (168 ms)
      ✓ should trim whitespace from string fields (158 ms)
      ✓ should convert email to lowercase (168 ms)
      ✓ should not allow role to be changed after creation (227 ms)
    Password Handling
      ✓ should store password as hash and salt (192 ms)
      ✓ should verify correct password (244 ms)
      ✓ should reject incorrect password (261 ms)
      ✓ should not expose password in JSON output (178 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (220 ms)
      ✓ should lock account after 5 failed attempts (235 ms)
      ✓ should reset login attempts on successful login (220 ms)
      ✓ should reset attempts if lock has expired (218 ms)
      ✓ should correctly identify locked accounts (160 ms)
    Password Reset
      ✓ should generate password reset token (167 ms)
      ✓ should set password reset expiry to 30 minutes (171 ms)
    Permissions
      ✓ should check single permission correctly (175 ms)
      ✓ should check multiple permissions with AND operation (173 ms)
      ✓ should check multiple permissions with OR operation (191 ms)
      ✓ should set default permissions if none provided (163 ms)
    Static Methods
      ✓ should find active administrators (300 ms)
      ✓ should find administrator by email with password (194 ms)
      ✓ should handle case-insensitive email search (196 ms)
      ✓ should return null for non-existent email (105 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (160 ms)
      ✓ should update updatedAt on modification (306 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (249 ms)
      ✓ should not override provided admin ID (163 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/generalPaymentCallback.test.js
  General Payment Callback Routes
    GET /
      Registration Payment
        ✓ should redirect to success page on approved registration payment (6 ms)
        ✓ should redirect to success page on success status (2 ms)
        ✓ should redirect to register page with error on failed registration payment (1 ms)
        ✓ should handle missing response message on failure (2 ms)
        ✓ should handle registration payment callback errors (1 ms)
      Order Payment
        ✓ should handle approved order payment successfully (4 ms)
        ✓ should handle success status for order payment (2 ms)
        ✓ should update existing payment record (2 ms)
        ✓ should handle declined order payment (2 ms)
        ✓ should handle failed order payment (2 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle order not found (2 ms)
        ✓ should handle missing orderId in query (3 ms)
        ✓ should handle email service failure gracefully (2 ms)
        ✓ should skip customer update if customer not found (2 ms)
        ✓ should not update already active customer (1 ms)
        ✓ should handle payment callback errors (2 ms)
        ✓ should use order amount if payment amount not provided (8 ms)
        ✓ should handle partial masked card (3 ms)
        ✓ should handle missing masked card (2 ms)
      General error handling
        ✓ should handle general callback errors (2 ms)
    POST /
      Registration Payment
        ✓ should create customer on approved registration payment with session (7 ms)
        ✓ should handle success status for registration (4 ms)
        ✓ should handle customer creation error (3 ms)
        ✓ should handle no pending registration (2 ms)
        ✓ should handle declined registration payment (2 ms)
        ✓ should handle failed registration payment without message (2 ms)
      Order Payment POST
        ✓ should acknowledge order payment callback (2 ms)
        ✓ should handle order payment with explicit type (1 ms)
      General POST error handling
        ✓ should handle POST callback errors (15 ms)
        ✓ should log POST callback data (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:822:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:365:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      843 |     });
      844 |   } catch (error) {
    > 845 |     console.error('Token verification error:', error);
          |             ^
      846 |     res.status(500).json({
      847 |       success: false,
      848 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:845:13)
      at Object.verifyToken (tests/unit/authController.test.js:365:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (3 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password (1 ms)
    customerLogin
      ✓ should successfully login a customer with valid credentials (18 ms)
      ✓ should return 401 for non-existent customer
      ✓ should login customer using emailOrUsername field (2 ms)
      ✓ should prioritize emailOrUsername over username field (13 ms)
      ✓ should return error when neither username nor emailOrUsername provided (1 ms)
    verifyToken
      ✓ should verify a valid JWT token (2 ms)
      ✓ should handle missing user data (38 ms)
      ✓ should return customer user data (1 ms)
    refreshToken
      ✓ should refresh token successfully (2 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator
    operatorLogin
      ✓ should successfully login operator with PIN
      ✓ should increment login attempts on failure (1 ms)
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate
      ✓ should handle non-existent email gracefully (1 ms)
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy (1 ms)
      ✓ should reject when user has lower role in hierarchy
      ✓ should handle array of required roles (1 ms)
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources (2 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role
      ✓ should accept admin for any combination of roles
    checkResourceOwnership Middleware
      ✓ should reject when no user is present
      ✓ should allow admin access to any resource (1 ms)
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body (1 ms)
      ✓ should allow operator access to own resource
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID (1 ms)
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (1 ms)
      ✓ should handle array of required permissions
      ✓ should reject when administrator lacks any required permission (1 ms)
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found
      ✓ should reject when operator is not active (1 ms)
      ✓ should reject when operator is not on shift
      ✓ should accept active operator on shift (1 ms)
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions (1 ms)
      ✓ should handle nested field permissions
      ✓ should handle array data (1 ms)
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields (1 ms)
      ✓ should handle non-object data gracefully
      ✓ should handle empty allowed fields

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (4 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials (1 ms)
      ✓ should configure LinkedIn strategy when credentials are present (1 ms)
    Google OAuth Strategy
      ✓ should handle database errors (1 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (1 ms)
        ✓ should return new affiliate user data
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (9 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (1 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (1 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (58 ms)
      ✓ should generate exportId automatically (56 ms)
      ✓ should require type field (58 ms)
      ✓ should validate type enum values (57 ms)
      ✓ should reject invalid type values (57 ms)
      ✓ should require generatedBy field (57 ms)
    Period Fields
      ✓ should store period dates for payment summary (54 ms)
      ✓ should store period dates for commission detail (52 ms)
    Export Data
      ✓ should store vendor export data (52 ms)
      ✓ should store payment summary data (53 ms)
      ✓ should store commission detail data (52 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (59 ms)
      ✓ should store single affiliate ID for commission detail (52 ms)
      ✓ should allow empty affiliate IDs array (53 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (51 ms)
    Indexes
      ✓ should have required indexes defined (52 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (55 ms)
      ✓ should handle payment summary export type correctly (61 ms)
      ✓ should handle commission detail export type correctly (62 ms)
    Export ID Generation
      ✓ should generate unique export IDs (52 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (55 ms)
      ✓ should accept valid ObjectId for generatedBy (52 ms)
    Instance Methods
      markDownloaded()
        ✓ should mark export as downloaded (191 ms)
        ✓ should increment download count on multiple downloads (244 ms)
        ✓ should not change status if already downloaded (173 ms)
        ✓ should update downloadedAt timestamp (179 ms)
      updateImportStatus()
        ✓ should update import status to success (167 ms)
        ✓ should update import status to failed (164 ms)
        ✓ should handle partial import status (169 ms)
    Static Methods
      findByPeriod()
        ✓ should find exports within period (143 ms)
        ✓ should filter by type when specified (144 ms)
        ✓ should return empty array when no matches (141 ms)
        ✓ should sort by generatedAt descending (175 ms)
      existsForPeriod()
        ✓ should find existing export for period (148 ms)
        ✓ should not find export for different period (144 ms)
        ✓ should exclude failed exports (175 ms)
        ✓ should find export with non-failed status (173 ms)
    Virtual Properties
      ageInDays
        ✓ should calculate age in days correctly (83 ms)
        ✓ should return 1 for exports created today (91 ms)
        ✓ should handle exports created in the past correctly (53 ms)
        ✓ should update as time passes (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/systemConfig.test.js (7.735 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (121 ms)
      ✓ should require mandatory fields (81 ms)
      ✓ should enforce unique key constraint (290 ms)
      ✓ should validate category enum (77 ms)
      ✓ should validate dataType enum (78 ms)
      ✓ should accept all valid categories (371 ms)
      ✓ should accept all valid data types (239 ms)
      ✓ should trim string fields (107 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (77 ms)
        ✓ should enforce minimum value validation (77 ms)
        ✓ should enforce maximum value validation (77 ms)
        ✓ should accept valid number within range (111 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (77 ms)
        ✓ should accept boolean values (109 ms)
      String validation
        ✓ should reject non-string values for string dataType (77 ms)
        ✓ should enforce regex validation (77 ms)
        ✓ should accept valid string matching regex (127 ms)
      Array validation
        ✓ should reject non-array values for array dataType (77 ms)
        ✓ should accept array values (107 ms)
      Object validation
        ✓ should reject non-object values for object dataType (78 ms)
        ✓ should reject arrays for object dataType (79 ms)
        ✓ should accept object values (113 ms)
      Allowed values validation
        ✓ should enforce allowed values (78 ms)
        ✓ should accept allowed values (108 ms)
    Static Methods
      getValue
        ✓ should return config value (139 ms)
        ✓ should return defaultValue when value is undefined (139 ms)
        ✓ should return provided default when config not found (102 ms)
        ✓ should return null when config not found and no default provided (107 ms)
      setValue
        ✓ should update config value (167 ms)
        ✓ should throw error for non-existent config (103 ms)
        ✓ should throw error for non-editable config (137 ms)
        ✓ should update updatedBy when provided (169 ms)
        ✓ should validate new value according to dataType (144 ms)
      getByCategory
        ✓ should return all configs for a category (146 ms)
        ✓ should return only public configs when specified (149 ms)
        ✓ should return empty array for non-existent category (138 ms)
        ✓ should sort by key (175 ms)
      getPublicConfigs
        ✓ should return only public configs (136 ms)
        ✓ should sort by category then key (142 ms)
      initializeDefaults
        ✓ should create default configurations (501 ms)
        ✓ should not overwrite existing configurations (461 ms)
        ✓ should add missing configurations (459 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (110 ms)
      ✓ should update updatedAt on modification (238 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (119 ms)
      ✓ should use defaultValue when value is undefined (110 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (112 ms)
      ✓ should handle empty validation object (114 ms)
      ✓ should skip validation when value is not modified (136 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:18:34.008Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1055 |             await OAuthSession.createSession(sessionId, message);
      1056 |           } catch (dbError) {
    > 1057 |             console.error('Error storing OAuth session:', dbError);
           |                     ^
      1058 |           }
      1059 |         }
      1060 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:1057:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1735:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1797:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T14:18:34.528Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T14:18:35.173Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T14:18:35.543Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:18:36.023Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-27T14:18:36.024Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:18:36.341Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-27T14:18:36.501Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1707 |
      1708 |   } catch (error) {
    > 1709 |     console.error('OAuth session polling error:', error);
           |             ^
      1710 |     res.status(500).json({
      1711 |       success: false,
      1712 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1709:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.499 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (337 ms)
      ✓ should handle customer context from state parameter (176 ms)
      ✓ should handle missing user data gracefully (164 ms)
      ✓ should handle OAuth session creation errors (183 ms)
      ✓ should extract profile data correctly for different providers (159 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (160 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (179 ms)
      ✓ should sanitize social data and reject if fields become empty (160 ms)
      ✓ should check for existing email and username (165 ms)
      ✓ should check for existing social account (161 ms)
      ✓ should generate unique username from social data (161 ms)
      ✓ should handle JWT verification errors (158 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (214 ms)
      ✓ should validate affiliate existence (159 ms)
      ✓ should sanitize customer social data (157 ms)
    socialLogin
      ✓ should login existing affiliate with social account (160 ms)
      ✓ should return error for non-existent social account (157 ms)
      ✓ should login existing customer with social account (160 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (160 ms)
      ✓ should prevent linking already existing social account (160 ms)
      ✓ should handle user not found error (164 ms)
    pollOAuthSession
      ✓ should return complete session data when available (165 ms)
      ✓ should return social-auth-login session data (159 ms)
      ✓ should return social-auth-error session data (163 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (159 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (160 ms)
      ✓ should return pending status when session not ready (159 ms)
      ✓ should handle database errors gracefully (168 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (166 ms)
      ✓ should handle database connection errors (161 ms)
      ✓ should handle missing required fields in social data (158 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/operator.test.js (10.638 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (171 ms)
      ✓ should require all mandatory fields (85 ms)
      ✓ should enforce email format validation (83 ms)
      ✓ should enforce unique email constraint (655 ms)
      ✓ should enforce unique username constraint (648 ms)
      ✓ should validate username format (78 ms)
      ✓ should validate shift time format (78 ms)
      ✓ should accept valid shift times (161 ms)
      ✓ should enforce quality score range (88 ms)
      ✓ should trim whitespace from string fields (164 ms)
      ✓ should convert email and username to lowercase (157 ms)
      ✓ should not allow role to be changed after creation (229 ms)
    Password Handling
      ✓ should hash password on save (187 ms)
      ✓ should verify correct password (234 ms)
      ✓ should reject incorrect password (240 ms)
      ✓ should not expose password in JSON output (162 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (229 ms)
      ✓ should lock account after 5 failed attempts (448 ms)
      ✓ should lock for 30 minutes (444 ms)
      ✓ should reset login attempts on successful login (279 ms)
      ✓ should reset attempts if lock has expired (245 ms)
      ✓ should correctly identify locked accounts (170 ms)
    Password Reset
      ✓ should generate password reset token (78 ms)
      ✓ should set password reset expiry to 30 minutes (78 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (85 ms)
        ✓ should correctly identify operator on shift during normal hours (77 ms)
        ✓ should correctly identify operator off shift (77 ms)
        ✓ should handle overnight shifts correctly (87 ms)
    Processing Statistics
      ✓ should update processing stats correctly (204 ms)
      ✓ should handle first order processing (198 ms)
      ✓ should update quality score with passing result (189 ms)
      ✓ should update quality score with failing result (201 ms)
    Static Methods
      findActive
        ✓ should find only active operators (271 ms)
      findOnShift
        ✓ should find only operators on shift (302 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (204 ms)
        ✓ should handle case-insensitive email search (203 ms)
        ✓ should return null for non-existent email (103 ms)
      findAvailableOperators
        ✓ should find operators with low order count (290 ms)
        ✓ should sort by current order count (274 ms)
        ✓ should respect limit parameter (959 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (162 ms)
      ✓ should update updatedAt on modification (304 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (263 ms)
      ✓ should not override provided operator ID (169 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:54:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2237:70)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:926:9)

      2243 |     });
      2244 |   } catch (error) {
    > 2245 |     console.error('Error updating operator profile:', error);
           |             ^
      2246 |     res.status(500).json({
      2247 |       success: false,
      2248 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2245:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:926:9)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query
        ✓ should handle database errors (60 ms)
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId (1 ms)
      createAdministrator
        ✓ should create new administrator with valid data (49 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (10 ms)
        ✓ should prevent self-deletion (1 ms)
        ✓ should prevent deletion of last administrator (1 ms)
      resetAdministratorPassword
        ✓ should reset administrator password (53 ms)
        ✓ should handle email sending failure (54 ms)
      getPermissions
        ✓ should return all available permissions
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator
        ✓ should handle non-existent operator (1 ms)
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment (1 ms)
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields (2 ms)
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

PASS tests/unit/w9ControllerDocuSign.test.js (7.946 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (150 ms)
      ✓ should return authorization URL if no valid token (121 ms)
      ✓ should handle service errors (119 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (116 ms)
      ✓ should handle missing authorization code (120 ms)
      ✓ should handle missing state parameter (113 ms)
      ✓ should display error page on token exchange failure (113 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (199 ms)
      ✓ should return existing envelope if one is in progress (172 ms)
      ✓ should require DocuSign authorization if no valid token (140 ms)
      ✓ should handle affiliate not found (164 ms)
      ✓ should handle envelope creation errors (145 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (729 ms)
      ✓ should handle mismatched envelope ID (174 ms)
      ✓ should handle affiliate with no W9 information (212 ms)
      ✓ should return local status if DocuSign API fails (172 ms)
      ✓ should clear envelope ID if declined (236 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (234 ms)
      ✓ should reject webhook with invalid signature (119 ms)
      ✓ should handle affiliate not found (144 ms)
      ✓ should process completed W9 without downloading document (233 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (115 ms)
      ✓ should return authorized false if no valid token (116 ms)
      ✓ should handle service errors (123 ms)
    Get W9 Signing Status
      ✓ should return W9 status for affiliate (117 ms)
      ✓ should include tax info for verified W9 (131 ms)
      ✓ should check DocuSign status for in-progress envelopes (119 ms)
      ✓ should handle affiliate not found (114 ms)
      ✓ should handle errors gracefully (117 ms)
    Cancel W9 Signing
      ✓ should cancel W9 signing successfully (208 ms)
      ✓ should handle no W9 signing in progress (156 ms)
      ✓ should handle affiliate not found (134 ms)
      ✓ should handle void envelope errors (147 ms)
    Resend W9 Request
      ✓ should resend W9 request successfully (149 ms)
      ✓ should handle affiliate not found (115 ms)
      ✓ should continue if voiding existing envelope fails (174 ms)
      ✓ should handle envelope creation errors (115 ms)
    Send W9 To Affiliate
      ✓ should send W9 to affiliate successfully (146 ms)
      ✓ should handle affiliate not found (114 ms)
      ✓ should prevent sending to affiliate with verified W9 (115 ms)
      ✓ should prevent sending to affiliate with submitted W9 (116 ms)
      ✓ should handle authorization errors (124 ms)
      ✓ should handle template configuration errors (117 ms)
      ✓ should handle general errors (117 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (1 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (26 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (11 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (2 ms)
      ✓ should handle password change
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method (4 ms)
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods (1 ms)
      ✓ should handle missing customers gracefully
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (1 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate
    Error handling
      ✓ should handle database connection errors (2 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion (1 ms)
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

  console.error
    Get customer dashboard stats error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:688:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      498 |     });
      499 |   } catch (error) {
    > 500 |     console.error('Get customer dashboard stats error:', error);
          |             ^
      501 |     res.status(500).json({
      502 |       success: false,
      503 |       message: 'An error occurred while retrieving dashboard statistics'

      at Object.error [as getCustomerDashboardStats] (server/controllers/customerController.js:500:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:690:7)

  console.error
    Update payment info error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:792:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      552 |     });
      553 |   } catch (error) {
    > 554 |     console.error('Update payment info error:', error);
          |             ^
      555 |     res.status(500).json({
      556 |       success: false,
      557 |       message: 'An error occurred while updating payment information'

      at Object.error [as updatePaymentInfo] (server/controllers/customerController.js:554:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:794:7)

  console.error
    Update customer password error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:957:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      682 |     });
      683 |   } catch (error) {
    > 684 |     console.error('Update customer password error:', error);
          |             ^
      685 |     res.status(500).json({
      686 |       success: false,
      687 |       message: 'An error occurred while updating password'

      at Object.error [as updateCustomerPassword] (server/controllers/customerController.js:684:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:959:7)

  console.error
    Get customers for admin error: TypeError: Cannot read properties of undefined (reading 'search')
        at Object.search [as getCustomersForAdmin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/customerController.js:702:19)
        at Object.getCustomersForAdmin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1192:32)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      779 |     });
      780 |   } catch (error) {
    > 781 |     console.error('Get customers for admin error:', error);
          |             ^
      782 |     res.status(500).json({
      783 |       success: false,
      784 |       message: 'Failed to retrieve customers'

      at Object.error [as getCustomersForAdmin] (server/controllers/customerController.js:781:13)
      at Object.getCustomersForAdmin (tests/unit/customerController.test.js:1192:32)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Customer registration error: Error: Database save failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1259:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |     });
      153 |   } catch (error) {
    > 154 |     console.error('Customer registration error:', error);
          |             ^
      155 |     res.status(500).json({
      156 |       success: false,
      157 |       message: 'An error occurred during registration'

      at Object.error [as registerCustomer] (server/controllers/customerController.js:154:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:1278:7)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST999

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (14 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (2 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion (1 ms)
      ✓ should handle deletion errors (19 ms)
      ✓ should return 404 for non-existent customer
    getCustomerDashboardStats
      ✓ should return dashboard stats for authorized customer (2 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access
      ✓ should allow affiliate access to their customer dashboard (1 ms)
      ✓ should handle database errors gracefully (9 ms)
    updatePaymentInfo
      ✓ should successfully update payment information (1 ms)
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should allow admin to update customer payment info (1 ms)
      ✓ should handle database errors (1 ms)
    updateCustomerPassword
      ✓ should successfully update password
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password length
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access
      ✓ should handle missing new password
      ✓ should handle database errors (2 ms)
    getCustomersForAdmin
      ✓ should return all customers for admin (1 ms)
      ✓ should filter customers by search query
      ✓ should filter customers by affiliate (1 ms)
      ✓ should filter customers by active status
      ✓ should filter customers by inactive status (1 ms)
      ✓ should filter new customers with no orders
      ✓ should handle combined filters (1 ms)
      ✓ should handle database errors (12 ms)
      ✓ should ignore "all" filter values
    validation errors
      ✓ should return validation errors for registerCustomer
    error handling for registration
      ✓ should handle database save errors during registration (2 ms)
      ✓ should handle missing payment info gracefully (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1068:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1595:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)
      at Object.<anonymous> (tests/unit/operatorController.test.js:1597:7)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getOrderQueue
      ✓ should return available orders for operator workstation (1 ms)
    claimOrder
      ✓ should allow operator to claim an order
      ✓ should fail if order is already claimed (1 ms)
      ✓ should fail if order not found
      ✓ should handle database error during claim (1 ms)
    updateOrderStatus
      ✓ should update order status
      ✓ should handle invalid status transition (1 ms)
      ✓ should handle order not found
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation
      ✓ should set processingCompleted when status is ready (1 ms)
      ✓ should handle database error
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check
    getMyOrders
      ✓ should return orders assigned to operator
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found
      ✓ should end shift successfully (1 ms)
      ✓ should handle database error
    getPerformanceStats
      ✓ should return operator performance statistics (1 ms)
    getCustomerDetails
      ✓ should return customer details for an order (1 ms)
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getOrderQueue
      ✓ should handle different filters in getOrderQueue (1 ms)
      ✓ should handle operator at max capacity in claimOrder
      ✓ should handle quality check failure in performQualityCheck (1 ms)
      ✓ should handle workstation conflict in updateShiftStatus
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus (1 ms)
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats (1 ms)
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails
      ✓ should handle filters in getMyOrders
    scanCustomer
      ✓ should scan customer and return current order (1 ms)
      ✓ should handle customer not found (6 ms)
    scanBag
      ✓ should redirect to scanCustomer
      ✓ should handle error in scanBag (30 ms)
    receiveOrder
      ✓ should receive order and update status (1 ms)
      ✓ should handle order not found (1 ms)
    markBagProcessed
      ✓ should mark bag as processed
      ✓ should update order status when all bags processed (181 ms)
    confirmPickup
      ✓ should confirm pickup and complete order (1 ms)
      ✓ should handle partial pickup (1 ms)
    getTodayStats
      ✓ should return today's operator statistics (1 ms)
      ✓ should handle no orders for today
    getWorkstationStatus
      ✓ should return workstation status for all workstations (1 ms)
      ✓ should handle database error
    Additional coverage tests
      ✓ should handle error in getMyOrders (1 ms)
      ✓ should handle different performance stat periods
      ✓ should handle error in getPerformanceStats (1 ms)
      ✓ should handle error in getCustomerDetails
      ✓ should handle no active order in scanCustomer
      ✓ should handle different scan actions in scanCustomer
      ✓ should handle affiliate lookup in scanCustomer
      ✓ should handle error in scanCustomer (8 ms)
      ✓ should handle error in receiveOrder
      ✓ should handle order not found in markBagProcessed
      ✓ should handle error in markBagProcessed (1 ms)
      ✓ should handle order not found in confirmPickup
      ✓ should handle error in confirmPickup (1 ms)
      ✓ should handle error in getTodayStats
      ✓ should handle markOrderReady (deprecated function) (1 ms)
      ✓ should handle markOrderReady with affiliate notification
      ✓ should handle errors in markOrderReady (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:375:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:378:7)

  console.error
    Error fetching administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:809:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |
      110 |   } catch (error) {
    > 111 |     console.error('Error fetching administrator:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'Failed to fetch administrator'

      at Object.error [as getAdministratorById] (server/controllers/administratorController.js:111:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:812:7)

  console.error
    Error changing administrator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:924:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      526 |
      527 |   } catch (error) {
    > 528 |     console.error('Error changing administrator password:', error);
          |             ^
      529 |     res.status(500).json({
      530 |       success: false,
      531 |       message: 'Failed to change password'

      at Object.error [as changeAdministratorPassword] (server/controllers/administratorController.js:528:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:927:7)

  console.error
    Error fetching operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:991:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      831 |
      832 |   } catch (error) {
    > 833 |     console.error('Error fetching operator:', error);
          |             ^
      834 |     res.status(500).json({
      835 |       success: false,
      836 |       message: 'Failed to fetch operator details'

      at Object.error [as getOperatorById] (server/controllers/administratorController.js:833:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:994:7)

  console.error
    Error resetting operator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1057:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1016 |
      1017 |   } catch (error) {
    > 1018 |     console.error('Error resetting operator password:', error);
           |             ^
      1019 |     res.status(500).json({
      1020 |       success: false,
      1021 |       message: 'Failed to reset operator password'

      at Object.error [as resetOperatorPassword] (server/controllers/administratorController.js:1018:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1059:7)

  console.error
    Error fetching operator analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1112:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1492 |
      1493 |   } catch (error) {
    > 1494 |     console.error('Error fetching operator analytics:', error);
           |             ^
      1495 |     res.status(500).json({
      1496 |       success: false,
      1497 |       message: 'Failed to fetch operator analytics'

      at Object.error [as getOperatorAnalytics] (server/controllers/administratorController.js:1494:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1114:7)

  console.error
    Error fetching affiliate analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1166:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1594 |
      1595 |   } catch (error) {
    > 1596 |     console.error('Error fetching affiliate analytics:', error);
           |             ^
      1597 |     res.status(500).json({
      1598 |       success: false,
      1599 |       message: 'Failed to fetch affiliate analytics'

      at Object.error [as getAffiliateAnalytics] (server/controllers/administratorController.js:1596:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1168:7)

  console.error
    Error exporting report: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1288:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1659 |
      1660 |   } catch (error) {
    > 1661 |     console.error('Error exporting report:', error);
           |             ^
      1662 |     res.status(500).json({
      1663 |       success: false,
      1664 |       message: 'Failed to export report'

      at Object.error [as exportReport] (server/controllers/administratorController.js:1661:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1291:7)

  console.error
    Error fetching affiliates list: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1334:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1712 |     });
      1713 |   } catch (error) {
    > 1714 |     console.error('Error fetching affiliates list:', error);
           |             ^
      1715 |     res.status(500).json({
      1716 |       success: false,
      1717 |       message: 'Failed to fetch affiliates list',

      at Object.error [as getAffiliatesList] (server/controllers/administratorController.js:1714:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1337:7)

  console.error
    Error updating operator stats: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1515:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2062 |     });
      2063 |   } catch (error) {
    > 2064 |     console.error('Error updating operator stats:', error);
           |             ^
      2065 |     res.status(500).json({
      2066 |       success: false,
      2067 |       message: 'An error occurred while updating operator statistics'

      at Object.error [as updateOperatorStats] (server/controllers/administratorController.js:2064:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1517:7)

  console.error
    Error getting available operators: TypeError: Operator.find(...).sort(...).limit is not a function
        at Object.limit [as getAvailableOperators] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2085:8)
        at Object.getAvailableOperators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1565:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2091 |     });
      2092 |   } catch (error) {
    > 2093 |     console.error('Error getting available operators:', error);
           |             ^
      2094 |     res.status(500).json({
      2095 |       success: false,
      2096 |       message: 'An error occurred while fetching available operators'

      at Object.error [as getAvailableOperators] (server/controllers/administratorController.js:2093:13)
      at Object.getAvailableOperators (tests/unit/administratorController.test.js:1565:37)

  console.error
    Error deleting operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1619:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2141 |     });
      2142 |   } catch (error) {
    > 2143 |     console.error('Error deleting operator:', error);
           |             ^
      2144 |     res.status(500).json({
      2145 |       success: false,
      2146 |       message: 'An error occurred while deleting the operator'

      at Object.error [as deleteOperator] (server/controllers/administratorController.js:2143:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1621:7)

  console.error
    Error resetting operator PIN: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1679:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2189 |     });
      2190 |   } catch (error) {
    > 2191 |     console.error('Error resetting operator PIN:', error);
           |             ^
      2192 |     res.status(500).json({
      2193 |       success: false,
      2194 |       message: 'An error occurred while resetting the PIN'

      at Object.error [as resetOperatorPin] (server/controllers/administratorController.js:2191:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1681:7)

  console.error
    Error fetching environment variables: TypeError: Cannot read properties of undefined (reading 'DEFAULT_ADMIN_EMAIL')
        at Object.DEFAULT_ADMIN_EMAIL [as getEnvironmentVariables] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2384:56)
        at Object.getEnvironmentVariables (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1727:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2425 |
      2426 |   } catch (error) {
    > 2427 |     console.error('Error fetching environment variables:', error);
           |             ^
      2428 |     res.status(500).json({
      2429 |       success: false,
      2430 |       message: 'Failed to fetch environment variables'

      at Object.error [as getEnvironmentVariables] (server/controllers/administratorController.js:2427:13)
      at Object.getEnvironmentVariables (tests/unit/administratorController.test.js:1727:37)

  console.error
    Error updating administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1847:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      295 |
      296 |   } catch (error) {
    > 297 |     console.error('Error updating administrator:', error);
          |             ^
      298 |     res.status(500).json({
      299 |       success: false,
      300 |       message: 'Failed to update administrator'

      at Object.error [as updateAdministrator] (server/controllers/administratorController.js:297:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1850:7)

  console.error
    Error deleting administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1884:44)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      367 |
      368 |   } catch (error) {
    > 369 |     console.error('Error deleting administrator:', error);
          |             ^
      370 |     res.status(500).json({
      371 |       success: false,
      372 |       message: 'Failed to delete administrator'

      at Object.error [as deleteAdministrator] (server/controllers/administratorController.js:369:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1886:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (2 ms)
      ✓ should handle errors (38 ms)
    createAdministrator
      ✓ should create administrator (1 ms)
      ✓ should handle validation errors (1 ms)
    updateAdministrator
      ✓ should update administrator (1 ms)
      ✓ should prevent self-deactivation
    deleteAdministrator
      ✓ should delete administrator
      ✓ should prevent self-deletion (1 ms)
    resetAdministratorPassword
      ✓ should reset password
    Operator Management
      ✓ createOperator should create new operator
      ✓ getOperators should return operators list (1 ms)
      ✓ updateOperator should update operator details
      ✓ deactivateOperator should deactivate operator
    Analytics Functions
      ✓ getDashboard should return dashboard data (1 ms)
      ✓ getOrderAnalytics should return order analytics (1 ms)
    System Configuration
      ✓ getSystemConfig should return configurations
      ✓ updateSystemConfig should update configuration (1 ms)
    getPermissions
      ✓ should return available permissions
    getAdministratorById
      ✓ should get administrator by id (1 ms)
      ✓ should handle not found
      ✓ should handle errors (2 ms)
    changeAdministratorPassword
      ✓ should change password successfully
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password strength
      ✓ should handle errors (1 ms)
    getOperatorById
      ✓ should get operator by id
      ✓ should handle operator not found
      ✓ should handle errors (1 ms)
    resetOperatorPassword
      ✓ should reset operator password (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    getOperatorAnalytics
      ✓ should get operator analytics
      ✓ should handle errors (1 ms)
    getAffiliateAnalytics
      ✓ should get affiliate analytics (1 ms)
      ✓ should handle errors (2 ms)
    exportReport
      ✓ should export orders report (1 ms)
      ✓ should export operators report
      ✓ should handle invalid report type (1 ms)
      ✓ should handle errors (2 ms)
    getAffiliatesList
      ✓ should get affiliates list
      ✓ should handle errors (2 ms)
    getSystemHealth
      ✓ should get system health status (1 ms)
      ✓ should handle database connection issues
      ✓ should handle errors (1 ms)
    updateOperatorStats
      ✓ should update operator stats with processing time (1 ms)
      ✓ should handle operator not found
      ✓ should validate processing time
      ✓ should handle errors (1 ms)
    getAvailableOperators
      ✓ should get available operators (1 ms)
      ✓ should handle errors (25 ms)
    deleteOperator
      ✓ should delete operator (1 ms)
      ✓ should prevent deletion with active orders
      ✓ should handle errors (8 ms)
    resetOperatorPin
      ✓ should reset operator PIN (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (2 ms)
    getEnvironmentVariables
      ✓ should get environment variables (1 ms)
      ✓ should handle errors (2 ms)
    Additional coverage for getAdministrators
      ✓ should handle search with active filter (1 ms)
    Additional coverage for createAdministrator
      ✓ should handle duplicate email (1 ms)
      ✓ should handle password validation failure
    Additional coverage for updateAdministrator
      ✓ should handle administrator not found (1 ms)
      ✓ should handle database errors (1 ms)
    Additional coverage for deleteAdministrator
      ✓ should prevent deleting last super admin (1 ms)
      ✓ should handle database errors (1 ms)
    Additional coverage for resetAdministratorPassword
      ✓ should handle admin not found
      ✓ should handle weak password

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error loading email template affiliate-password-reset: [Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'] {
      errno: -2,
      code: 'ENOENT',
      syscall: 'open',
      path: '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'
    }

      75 |     }
      76 |   } catch (error) {
    > 77 |     console.error(`Error loading email template ${templateName}:`, error);
         |             ^
      78 |     // Return a basic template as fallback
      79 |     return `
      80 |       <!DOCTYPE html>

      at error (server/utils/emailService.js:77:13)
      at Object.<anonymous>.exports.sendAffiliatePasswordResetEmail (server/utils/emailService.js:871:22)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.warn
    Email template placeholder [EMAIL_CONTENT] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliatePasswordResetEmail] (server/utils/emailService.js:881:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.log
    Missing template: password-reset.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.log
    Missing template: order-confirmation.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.warn
    Email template placeholder [AFFILIATE_ID] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliateWelcomeEmail] (server/utils/emailService.js:336:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:223:9)

  console.log
    === EMAIL CONSOLE LOG ===

      at Object.log [as sendMail] (server/utils/emailService.js:18:17)

  console.log
    From: test@wavemax.promo

      at Object.log [as sendMail] (server/utils/emailService.js:19:17)

  console.log
    To: undefined

      at Object.log [as sendMail] (server/utils/emailService.js:20:17)

  console.log
    Subject: Welcome to WaveMAX Laundry Affiliate Program

      at Object.log [as sendMail] (server/utils/emailService.js:21:17)

  console.log
    HTML Preview: [HTML content logged to console]

      at Object.log [as sendMail] (server/utils/emailService.js:22:17)

  console.log
    ========================

      at Object.log [as sendMail] (server/utils/emailService.js:23:17)

  console.log
    Email sent: console-1751033944796

      at log (server/utils/emailService.js:154:13)

PASS tests/integration/emailService.integration.test.js
  Email Service Integration
    Email Service Configuration
      ✓ should load and configure the email service correctly (154 ms)
      ✓ should have all required email functions (4 ms)
    Console Email Provider
      ✓ should log affiliate welcome emails to console (7 ms)
      ✓ should log customer welcome emails to console (4 ms)
      ✓ should log password reset emails to console (20 ms)
    Email Template Verification
      ✓ should verify email templates directory exists (1 ms)
      ✓ should verify essential email templates exist (1 ms)
    Mailcow SMTP Configuration
      ✓ should handle Mailcow SMTP configuration (3 ms)
      ✓ should handle secure Mailcow SMTP on port 465 (2 ms)
    Error Handling
      ✓ should handle missing required fields gracefully (10 ms)
      ✓ should handle invalid email addresses (3 ms)
    Bulk Email Operations
      ✓ should handle multiple email sends efficiently (3 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:05.507Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:05.823Z"}
  console.log
    CSRF token generation: {
      sessionID: '4e14a4f91b22b7b425dc622f04b19bff',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LroUwRC0-ixhBf5u352KHpywy2-8tY1ZZk4Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4e14a4f91b22b7b425dc622f04b19bff

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HyGz8rpQH2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.712 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:06.536Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:06.874Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:06.874Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:06.960Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-6a36f415-fa08-49c4-999a-dcfafced644f",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 158.875 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:07.182Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:07.184Z"}
[0mGET /api/v1/payments/config [32m200[0m 2.519 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.033Z"}
  console.log
    CSRF token generation: {
      sessionID: '7bdc5c5b6d0cc91c88d4d87b8efb382b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2ad4wR3x-4Ld4OqMXXRxNayqWREqctxMGMeg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7bdc5c5b6d0cc91c88d4d87b8efb382b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4QrS1NDZDF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.965 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.183Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.498Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.499Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.584Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-9b17cd77-a844-469e-954c-9a007a017653",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.552 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.789Z"}
[32minfo[39m: Acquired callback handler for payment token mcewehyv-ry7z2ti: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.826Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:08.859Z","token":"mcewehyv-ry7z2ti"}
[0mPOST /api/v1/payments/create-token [32m200[0m 69.647 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:09.627Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e1894e004c9d75da2a008be10157a25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4RJjdX3h-3thPvYuDoGK0vn226mzWcLFgZIc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5e1894e004c9d75da2a008be10157a25

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: met55nF-BH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.068 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:09.767Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.082Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.083Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.167Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-3efb7916-4913-4f2c-9cc4-82226f0c3d45",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 142.838 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.371Z"}
[32minfo[39m: Acquired callback handler for payment token mcewej6t-ztgthh5: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.403Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.436Z","token":"mcewej6t-ztgthh5"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.810 ms - 283[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mcewej6t-ztgthh5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:10.438Z"}
[0mGET /api/v1/payments/check-status/mcewej6t-ztgthh5 [32m200[0m 29.921 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:11.262Z"}
  console.log
    CSRF token generation: {
      sessionID: '460823cefc96e01ee31fb790bb128126',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nkbDkLOq-97RcdVpmkmfmRhuFrTSlbYVLio8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 460823cefc96e01ee31fb790bb128126

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: g9qHvZZMjg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.642 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:11.405Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:11.743Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:11.744Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:11.845Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-c1eb6d4d-a905-4870-bbfc-e3ce96dec18e",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 154.139 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.068Z"}
[32minfo[39m: Acquired callback handler for payment token mcewekhx-c6qa030: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.102Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.145Z","token":"mcewekhx-c6qa030"}
[0mPOST /api/v1/payments/create-token [32m200[0m 78.180 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcewekhx-c6qa030 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.151Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcewekhx-c6qa030 {
      sessionID: '460823cefc96e01ee31fb790bb128126',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A460823cefc96e01ee31fb790bb128126.RRY3sJ6NuKVUTOZD7NR1mzohQNLBWpb3Q%2ByW6qudTMo',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcewekhx-c6qa030: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.251Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:12.252Z","token":"mcewekhx-c6qa030"}
[0mPOST /api/v1/payments/cancel-token/mcewekhx-c6qa030 [32m200[0m 100.771 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.022Z"}
  console.log
    CSRF token generation: {
      sessionID: '5d83d36618d3eb376963b52fcc367955',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4ysMKOn0-UW-aV8lIPB-c7HXRH1nSVOorGQg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5d83d36618d3eb376963b52fcc367955

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: S2a7HyQJeO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 13.284 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.176Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.486Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.486Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.570Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-361b200b-ae49-4fd4-b994-8d9fe4df446f",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.812 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.776Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.779Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.781Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.783Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.785Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.787Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.789Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.791Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.792Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.794Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltd-p4wxvly: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.807Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltg-kw9csqi: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.810Z"}
[32minfo[39m: Acquired callback handler for payment token mcewelti-6jlczaf: {"callbackPath":"/api/v1/payments/callback/handler-3","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-3","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.816Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltk-vnjxl7h: {"callbackPath":"/api/v1/payments/callback/handler-4","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-4","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.817Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltm-0fuxji5: {"callbackPath":"/api/v1/payments/callback/handler-5","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-5","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.819Z"}
[32minfo[39m: Acquired callback handler for payment token mcewelto-o275syv: {"callbackPath":"/api/v1/payments/callback/handler-6","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-6","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.821Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltr-9au0r8p: {"callbackPath":"/api/v1/payments/callback/handler-9","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-9","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.829Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltv-cpcsf8r: {"callbackPath":"/api/v1/payments/callback/handler-10","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-10","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.832Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltq-g6h872w: {"callbackPath":"/api/v1/payments/callback/handler-7","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-7","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.833Z"}
[32minfo[39m: Acquired callback handler for payment token mceweltt-dm6ad6p: {"callbackPath":"/api/v1/payments/callback/handler-8","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-8","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.835Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"customer0@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.837Z","token":"mceweltd-p4wxvly"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.523 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"customer1@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.843Z","token":"mceweltg-kw9csqi"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.334 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-4","customerEmail":"customer3@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.847Z","token":"mceweltk-vnjxl7h"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.096 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-3","customerEmail":"customer2@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.847Z","token":"mcewelti-6jlczaf"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.845 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-6","customerEmail":"customer5@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.851Z","token":"mcewelto-o275syv"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.640 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-5","customerEmail":"customer4@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.852Z","token":"mceweltm-0fuxji5"}
[0mPOST /api/v1/payments/create-token [32m200[0m 67.806 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-9","customerEmail":"customer7@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.859Z","token":"mceweltr-9au0r8p"}
[0mPOST /api/v1/payments/create-token [32m200[0m 68.741 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-10","customerEmail":"customer9@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.862Z","token":"mceweltv-cpcsf8r"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-7","customerEmail":"customer6@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.863Z","token":"mceweltq-g6h872w"}
[0mPOST /api/v1/payments/create-token [32m200[0m 67.894 ms - 285[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 74.908 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-8","customerEmail":"customer8@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.866Z","token":"mceweltt-dm6ad6p"}
[0mPOST /api/v1/payments/create-token [32m200[0m 73.406 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.875Z"}
[33mwarn[39m: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:13.903Z"}
[0mPOST /api/v1/payments/create-token [31m503[0m 28.405 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:14.639Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ca9b6e7d9341b7f1d9905510785b6764',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QN9yJrXw-ZW6XjA9CF1lol3BOk8n85Oz5l_g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ca9b6e7d9341b7f1d9905510785b6764

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WRXrsCK7m9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.588 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:14.776Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.077Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.077Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.159Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-880caf29-b159-45d2-a87a-892fd4587921",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 159.730 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.379Z"}
[32minfo[39m: Acquired callback handler for payment token mcewen1w-j7y478j: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.411Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"cancel@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.441Z","token":"mcewen1w-j7y478j"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.809 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcewen1w-j7y478j {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.444Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcewen1w-j7y478j {
      sessionID: 'ca9b6e7d9341b7f1d9905510785b6764',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aca9b6e7d9341b7f1d9905510785b6764.5eV54KhXd1Tafvdnif50mGFIkm8hm1G4CexPoHEPOws',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcewen1w-j7y478j: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.532Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.532Z","token":"mcewen1w-j7y478j"}
[0mPOST /api/v1/payments/cancel-token/mcewen1w-j7y478j [32m200[0m 87.677 ms - 73[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.535Z"}
[32minfo[39m: Acquired callback handler for payment token mcewen68-nncoklj: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.566Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"new@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:15.595Z","token":"mcewen68-nncoklj"}
[0mPOST /api/v1/payments/create-token [32m200[0m 60.028 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:16.329Z"}
  console.log
    CSRF token generation: {
      sessionID: '7aa7178eb45f23ee0add28b6995d9058',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: T5msaTsr-WCc3yRpdzMoA6vXy1E6AxV67iwc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7aa7178eb45f23ee0add28b6995d9058

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nmI8fmIXs0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.040 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:16.467Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:16.770Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:16.770Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:16.856Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-3fd19a17-272b-474c-80d9-97e7b809dc7e",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 131.960 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:17.047Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 29.068 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:17.814Z"}
PASS tests/integration/payment.test.js (13.371 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2221 ms)
    Payment Token Tests
      ✓ should create payment token (1594 ms)
      ✓ should check payment status (1635 ms)
      ✓ should cancel payment token (1759 ms)
    Payment Callback Tests
      ✓ should return 503 when all callback handlers are locked (1618 ms)
      ✓ should release callback handler when payment is cancelled (1690 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1486 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:18.662Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:19.536Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:19.716Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 180.685 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:20.794Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:20.939Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.787 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-4f486eb7-f8cf-40b7-bb3b-7ac0feb9636e/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:20.952Z"}
[0mGET /api/v1/affiliates/AFF-4f486eb7-f8cf-40b7-bb3b-7ac0feb9636e/customers [32m200[0m 113.130 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:22.003Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:22.165Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 162.430 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-3ede921f-4132-4b3d-aa6a-d95a7ee19ec3/customers?customerId=CUST-18cf8780-5d9b-4161-a838-2de53868bc71 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:22.271Z"}
[0mGET /api/v1/affiliates/AFF-3ede921f-4132-4b3d-aa6a-d95a7ee19ec3/customers?customerId=CUST-18cf8780-5d9b-4161-a838-2de53868bc71 [32m200[0m 110.134 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:23.293Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:23.438Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.074 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-249d6c76-20bb-4185-82dd-411e4341c88b/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:23.442Z"}
[0mGET /api/v1/affiliates/AFF-249d6c76-20bb-4185-82dd-411e4341c88b/customers?customerId=NONEXISTENT123 [32m200[0m 109.023 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:24.478Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:24.628Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.735 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-b71cd09a-1488-4c27-af21-fac75c772d00/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:24.631Z"}
[0mGET /api/v1/affiliates/AFF-b71cd09a-1488-4c27-af21-fac75c772d00/customers [33m401[0m 0.992 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:25.590Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:25.733Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.578 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:25.737Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:25.873Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 137.022 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c03e9a99-632c-4b51-9017-bce68cbe4c96/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:25.877Z"}
[0mGET /api/v1/affiliates/AFF-c03e9a99-632c-4b51-9017-bce68cbe4c96/customers [32m200[0m 109.387 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c03e9a99-632c-4b51-9017-bce68cbe4c96/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:25.989Z"}
[0mGET /api/v1/affiliates/AFF-c03e9a99-632c-4b51-9017-bce68cbe4c96/dashboard [32m200[0m 136.073 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:27.051Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:27.212Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 161.390 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:28.135Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:28.282Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.763 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-34b97496-1848-47fe-81ea-c991847bebb4 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:28.285Z"}
[0mGET /api/v1/affiliates/AFF-34b97496-1848-47fe-81ea-c991847bebb4 [32m200[0m 56.763 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:29.258Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:29.404Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.298 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6b329df8-f06e-4ae8-9a35-945fd442d684/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:29.413Z"}
[0mGET /api/v1/affiliates/AFF-6b329df8-f06e-4ae8-9a35-945fd442d684/dashboard [32m200[0m 137.266 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:30.464Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:30.631Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 166.733 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-01995e89-e592-4241-83df-d2380e92524e/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:30.634Z"}
[0mGET /api/v1/affiliates/AFF-01995e89-e592-4241-83df-d2380e92524e/customers?customerId=INVALID_ID [32m200[0m 109.954 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:31.658Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:31.798Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 140.547 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:31.801Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 28.433 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:32.745Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:32.886Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 141.362 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-02483e54-2c25-4d12-8fe1-12fe090e521e/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:32.889Z"}
[0mGET /api/v1/affiliates/AFF-02483e54-2c25-4d12-8fe1-12fe090e521e/customers [32m200[0m 110.461 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (15.805 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (1666 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1215 ms)
      ✓ should filter customers by customerId when provided (1301 ms)
      ✓ should return empty array when filtering by non-existent customerId (1170 ms)
      ✓ should require authentication to access customer list (1073 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1511 ms)
      ✓ should handle URL parameters correctly throughout the flow (1081 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1124 ms)
      ✓ should load dashboard statistics correctly (1206 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1193 ms)
      ✓ should handle invalid affiliate ID (1085 ms)
      ✓ should handle database connection issues gracefully (1169 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:34.522Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:34.852Z"}
  console.log
    CSRF token generation: {
      sessionID: '4311d8008ce1602d8bb1afeae9c67698',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AiPPXIVc-jDrIBFRW5g8XiVsApfqd6AxOIXo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4311d8008ce1602d8bb1afeae9c67698

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _XaFuLbZwa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.836 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:35.049Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 503.598 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:36.382Z"}
  console.log
    CSRF token generation: {
      sessionID: '2eaad70e66c76a3b7a07b9cf82a8a019',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JbLu1FPa-6kjqO7tQZwhE-OLEWgGnMGhAx-4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2eaad70e66c76a3b7a07b9cf82a8a019

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mC_G5Am1rd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.981 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-72a2e12f-a498-4d19-9e64-12c1b8fca42a {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:36.421Z"}
[0mGET /api/v1/affiliates/AFF-72a2e12f-a498-4d19-9e64-12c1b8fca42a [32m200[0m 54.802 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:37.211Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aee5049ba4d6ffcee7cbf8509a32d528',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MtitMvOo-hRr8slI3Pw76cC_HUAg-nmJ2vik

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aee5049ba4d6ffcee7cbf8509a32d528

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U9mRrPEZBv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.499 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-be7a526d-3908-48ab-a95b-3c51cc248981 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:37.251Z"}
[0mPUT /api/v1/affiliates/AFF-be7a526d-3908-48ab-a95b-3c51cc248981 [32m200[0m 88.194 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:38.109Z"}
  console.log
    CSRF token generation: {
      sessionID: '3899b98aa349c7ad4840dbed079444eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: msTH7XxE-28YwnpSSEkubqSEcv8OUksyKoIc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3899b98aa349c7ad4840dbed079444eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: iFuN66pOK0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.956 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:38.227Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:19:38.370Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.032 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:39.116Z"}
  console.log
    CSRF token generation: {
      sessionID: '9713a17c9e0b63602b67f3fe037b7bca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JVWVel3U-5_7B9CTMAHOeW_S9T-sJedA1CBQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9713a17c9e0b63602b67f3fe037b7bca

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qgcvGLeX7Y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.568 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-99475453-03da-44ac-a3b2-73622211ebb3/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:39.225Z"}
[0mGET /api/v1/affiliates/AFF-99475453-03da-44ac-a3b2-73622211ebb3/customers?page=1&limit=10 [32m200[0m 114.091 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:40.089Z"}
  console.log
    CSRF token generation: {
      sessionID: '7602e992847d325f82e92297a1c6b684',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UtCKHF2N-5x7VAtbTT7MgiKR2YL5FNBeJvbE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7602e992847d325f82e92297a1c6b684

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aX5O2Xdtoy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.581 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-920790d3-1e31-4cee-a422-78ffd72c2710/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:40.197Z"}
[0mGET /api/v1/affiliates/AFF-920790d3-1e31-4cee-a422-78ffd72c2710/orders?page=1&limit=10 [32m200[0m 118.218 ms - 576[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:41.068Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f1172a7161fa5c23e9d4d23e7534e116',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D2eyX9C9-22G70ypornP62ZayX5tgMLMxQ5E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f1172a7161fa5c23e9d4d23e7534e116

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: i_VAn8kNcI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.516 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-4a44f013-be06-4169-86ef-94543faa75d8/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:41.143Z"}
[0mGET /api/v1/affiliates/AFF-4a44f013-be06-4169-86ef-94543faa75d8/transactions?page=1&limit=10 [32m200[0m 111.320 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:41.986Z"}
  console.log
    CSRF token generation: {
      sessionID: '3162f82d8f90b9405a4fb0d049d66cb8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OwzJft8c-dUs7HoR8SB1uW6ZWJDqHSg_Y5r0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3162f82d8f90b9405a4fb0d049d66cb8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dUC8-cmksL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.108 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-0f70bb80-d753-489f-b36e-4f5b46edba9e/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:42.117Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-0f70bb80-d753-489f-b36e-4f5b46edba9e/delete-all-data {
      sessionID: '3162f82d8f90b9405a4fb0d049d66cb8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3162f82d8f90b9405a4fb0d049d66cb8.hEfHdA0HMwnWfFbAewBrchMSOq0GSzeU8AVtxEhLy4Y',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-0f70bb80-d753-489f-b36e-4f5b46edba9e/delete-all-data [32m200[0m 210.576 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:43.149Z"}
  console.log
    CSRF token generation: {
      sessionID: 'edc4da45eac43ab5296e04a578387f33',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WQIxZMUz-MjK3dfJ8OqNzCx52g96NCknGa7k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: edc4da45eac43ab5296e04a578387f33

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GqrI3LuGVn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.254 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-31ea7ae6-7418-43fd-bc2c-42ddce21c229/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:43.190Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-31ea7ae6-7418-43fd-bc2c-42ddce21c229/delete-all-data {
      sessionID: 'edc4da45eac43ab5296e04a578387f33',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aedc4da45eac43ab5296e04a578387f33.tBn4rVIxKWNMKlb4lBtGWTrzf5FCe%2FAtXUdE3jRwH5A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-31ea7ae6-7418-43fd-bc2c-42ddce21c229/delete-all-data [33m403[0m 31.001 ms - 59[0m
PASS tests/integration/affiliate.test.js (10.09 s)
  Affiliate API
    ✓ should register a new affiliate (1538 ms)
    ✓ should get affiliate profile (823 ms)
    ✓ should update affiliate profile (903 ms)
    ✓ should login affiliate (1006 ms)
    ✓ should get affiliate's customers list (974 ms)
    ✓ should get affiliate's orders (978 ms)
    ✓ should get affiliate's earnings/transactions (918 ms)
    ✓ Delete all affiliate data (development only) (1163 ms)
    ✓ Reject delete in production environment (800 ms)
    ○ skipped should update payment information
    ○ skipped should handle commission-related endpoints

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/integration/adminCreation.test.js (7.057 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (196 ms)
      ✓ should create admin with next sequential ID when admins exist (327 ms)
      ✓ should handle admin creation with all permissions (197 ms)
      ✓ should handle admin creation with partial permissions (192 ms)
    Admin Model Validation
      ✓ should require email field (152 ms)
      ✓ should save admins with different adminIds successfully (273 ms)
      ✓ should save admins with different emails successfully (269 ms)
    Password Handling
      ✓ should hash password before saving (198 ms)
      ✓ should validate password with verifyPassword method (289 ms)
    Admin Query Operations
      ✓ should find admin by adminId (321 ms)
      ✓ should find admin by email (586 ms)
      ✓ should find active admins only (580 ms)
      ✓ should find admins with specific permissions (1129 ms)
      ✓ should get last admin for ID generation (802 ms)
    Email Integration
      ✓ should call email service after admin creation (447 ms)
      ✓ should handle email service failures gracefully (220 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:51.920Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.660Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 45.313 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.709Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.711Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 2.611 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.778Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"env_123456","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685ea888473cc8d740098b73","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T14:19:52.876Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 98.519 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.907Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 82.899 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:52.993Z"}
[32minfo[39m: W9 status updated for affiliate AFF000001: {"details":{"envelopeId":"env_123456","event":"envelope-completed","status":"completed","success":true},"docusignStatus":"completed","envelopeId":"env_123456","performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"system@docusign","userName":"DocuSign System","userType":"system"},"service":"wavemax-affiliate","status":"verified","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T14:19:53.053Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 61.062 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:53.986Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 57.473 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:54.876Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 84.824 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:55.822Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"new_env_after_refresh","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685ea88b473cc8d740098c07","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T14:19:55.911Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 89.144 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:56.726Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T14:19:56.786Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 60.069 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:57.603Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T14:19:57.661Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 58.439 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:58.472Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:58.474Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.208 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:19:59.332Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 54.868 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:00.220Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 28.350 ms - 65[0m
PASS tests/integration/docusignW9.test.js (9.877 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (1670 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (889 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (944 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (931 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (883 ms)
      ✓ should handle network errors during envelope creation (870 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (829 ms)
      ✓ should prevent accessing another affiliates envelope status (916 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (843 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:01.766Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:03.312Z"}
[0mGET /api/v1/system/config/public [32m200[0m 30.465 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:04.553Z"}
[0mGET /api/v1/system/config/public [32m200[0m 31.436 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:05.737Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 28.408 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:06.845Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 26.924 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:08.004Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 27.421 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:09.161Z"}
[0mGET /api/v1/system/config [32m200[0m 61.753 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:10.339Z"}
[0mGET /api/v1/system/config [33m401[0m 1.171 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:11.459Z"}
[0mGET /api/v1/system/config [33m403[0m 27.692 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:12.592Z"}
  console.log
    CSRF token generation: {
      sessionID: '7523a6b766cbb466728bdea69d0dba96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: j2F5AkLD-cSA9iUibY2ei3JmWeIF63msDm_g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7523a6b766cbb466728bdea69d0dba96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DR30AwD49l...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.698 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:12.741Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '7523a6b766cbb466728bdea69d0dba96',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7523a6b766cbb466728bdea69d0dba96.T82BjclkIbVlUA1lxlF8fd%2B8sfANc0uU4uh%2FNGc7m4Q',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 118.724 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:14.062Z"}
  console.log
    CSRF token generation: {
      sessionID: '24c134ee6b366997e6d2bb7ac1824a24',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hy2nzJxw-4NQi6ZrM4qNcCb-3zJlF5MEM1Ts

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 24c134ee6b366997e6d2bb7ac1824a24

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ofi6_9aRPP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.398 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:14.184Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '24c134ee6b366997e6d2bb7ac1824a24',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A24c134ee6b366997e6d2bb7ac1824a24.xTnrLOi4dEfU5LMSYEYSVV6l%2FJixpn2aPPgH1aDSTIQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 88.582 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:15.365Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd15da12233ba3eb74c0aceecf7a4923',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Hwhw5ZzN-UD8gnR-huJk0oODHcJys1OoQU1w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cd15da12233ba3eb74c0aceecf7a4923

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rPMsYJ4dJX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.750 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:15.488Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'cd15da12233ba3eb74c0aceecf7a4923',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd15da12233ba3eb74c0aceecf7a4923.L3qm5KQbUMHTEoY87wH2osZuG6FfI5crCEm3vXCI6tc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 92.402 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:16.670Z"}
  console.log
    CSRF token generation: {
      sessionID: '74ecb0b4c81ec6452760959c40f6847c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: z023L9Jg-xxq1TmknrjHBp6AYLadtVneIaYs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 74ecb0b4c81ec6452760959c40f6847c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: M3L0w0HI1E...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.527 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:16.814Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: '74ecb0b4c81ec6452760959c40f6847c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A74ecb0b4c81ec6452760959c40f6847c.09L6NG5pBLuY%2Bd6BVwopUFHJtWNksh%2FDGFlpFROE57A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 87.303 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:18.036Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f9bb7b80ef74956843ce47c0c1cc5f87',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Si7GwX8Q-omWLY4Qb4Yj9qMX66eYitZ3lHFw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f9bb7b80ef74956843ce47c0c1cc5f87

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JgC0aZdmYk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.030 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:18.234Z"}
  console.log
    CSRF token generation: {
      sessionID: '6e5d338387690f5fc2d45a5d0c780a52',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6C3iR4yc-Ro2rUrTo0ZtLgn2dZ0sZg6LYgek

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6e5d338387690f5fc2d45a5d0c780a52

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Fwp5XOZmwP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.599 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:18.243Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '6e5d338387690f5fc2d45a5d0c780a52',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6e5d338387690f5fc2d45a5d0c780a52.VfHCy1fDy9J6pExZfIK0FTmiASLN5DY55ehdmtFaBGM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 57.489 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:19.419Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2f1f66f32a29ce8e9bd0c3379bd9c9e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: q9soXymP-1aKciDn2fJbZtuYAtJEcscRZs78

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2f1f66f32a29ce8e9bd0c3379bd9c9e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GLUREOfNLW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.728 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:19.458Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'c2f1f66f32a29ce8e9bd0c3379bd9c9e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac2f1f66f32a29ce8e9bd0c3379bd9c9e.adxG6fXtMIjvwOqlQxlGBkwwKNVb0jTvx75kmX7%2F2yI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 324.046 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:20.883Z"}
  console.log
    CSRF token generation: {
      sessionID: '2e8c370a83f217f4a32aa21080735f29',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4BWpterx-KgPKpD0wLicj2CKAMDmWu_1xbD4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2e8c370a83f217f4a32aa21080735f29

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uuZNdUSFGa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.036 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:20.949Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '2e8c370a83f217f4a32aa21080735f29',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2e8c370a83f217f4a32aa21080735f29.sNS2r7mj%2FGcJ5YSP6ymR6OvyDgYIwwl8hRHwGkmTI7U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 323.574 ms - 48[0m
PASS tests/integration/systemConfig.test.js (22.431 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1527 ms)
        ✓ should not return private configurations (1202 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1132 ms)
        ✓ should return 404 for non-existent config (1123 ms)
        ✓ should return 404 for private config accessed via public endpoint (1177 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1173 ms)
        ✓ should return 401 without authentication (1132 ms)
        ✓ should return 403 for non-admin users (1120 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1486 ms)
        ✓ should validate value based on data type (1301 ms)
        ✓ should validate value against min/max constraints (1313 ms)
        ✓ should not allow updating non-editable configs (1359 ms)
        ✓ should require system_config permission (1389 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1467 ms)
        ✓ should not overwrite existing configurations (1589 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1329 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:24.488Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:24.997Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e71ea60eba08e102a146b4c1248dc7d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dMDCridr-BGnTveJJpoq1FJ2_gUC9wZh4JBc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e71ea60eba08e102a146b4c1248dc7d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aNQbBE4VYS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.728 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:25.011Z"}
[0mGET /api/v1/auth/google [36m302[0m 3.909 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:26.195Z"}
  console.log
    CSRF token generation: {
      sessionID: '310b9abef08314080e4b18cfa06c8356',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TYkSrJ9q-Xox-kOzX7ksRspPqDxwVTO5npKo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 310b9abef08314080e4b18cfa06c8356

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qxQlRDxgl6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.475 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:26.978Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f68947f6cedc130f79975006480f9cf0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GnvQVxHj-GM8jFBmt5ryfjvNLcNmtCDMMYBI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f68947f6cedc130f79975006480f9cf0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BOH53K3inn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.128 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:27.758Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd8d4760a43e077a3fb1eaadc977dc5ca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: J8Y3OlFS-FnII4MSBN2HLYrzpRvz223DDphk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d8d4760a43e077a3fb1eaadc977dc5ca

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HIlvTs-eiw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.759 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:27.768Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.317 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:28.543Z"}
  console.log
    CSRF token generation: {
      sessionID: '501434a9742851a60f56dc2a345a9225',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jGhQBCr9-gcFEqcN7MVAOAF708N0FhBJmGJc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 501434a9742851a60f56dc2a345a9225

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lPPs08UhYi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.108 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:28.554Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-3b71aa99-d6f4-445e-8030-d288d1291f9b","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:20:28.762Z","userId":"685ea8ac34741973653061bf","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 208.402 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:29.569Z"}
  console.log
    CSRF token generation: {
      sessionID: '1cb477daae1e87fcb210bb43f8d5fc45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zP6hxoHI-IBG5qRBfWTp4m9r47fcuX5oC1DQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1cb477daae1e87fcb210bb43f8d5fc45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pKPyTKNqbO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.808 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:29.578Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.104 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:30.347Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce7e83bcba54e8fab4f58343302d1e45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kYefq9it-Cncts2TT5R47JVNyt3drhydjhf4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ce7e83bcba54e8fab4f58343302d1e45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0hYtOWD_SN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.086 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:30.357Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.156 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:31.126Z"}
  console.log
    CSRF token generation: {
      sessionID: '42823f7a2907bcea89e35b0b7f68c2c6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3BIvMoUu-UuqIPlhwHQaPJe4dSAxbn0_dTJ0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 42823f7a2907bcea89e35b0b7f68c2c6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DN4GrAJ00o...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.288 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:31.231Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.234 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:32.010Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ed267583835f4b0eaeeaed3e09d06c6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gp8RilAV-OgKis0ZMhpkiuTuITzqEKZXY1dg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ed267583835f4b0eaeeaed3e09d06c6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: H6ViO8tIyi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.159 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:32.019Z"}
  console.log
    CSRF token generation: {
      sessionID: '94ad93fe5ab1668c832e89420e19fa09',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: A0WsKgsX-p1RLnk-dz1xPoeSVHXBR52EZIVE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 94ad93fe5ab1668c832e89420e19fa09

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: POP4_b4aEc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.229 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:32.116Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '94ad93fe5ab1668c832e89420e19fa09',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A94ad93fe5ab1668c832e89420e19fa09.9T5W%2FJ%2FCjJTrmvY0Lkx1w1BdQfR2%2FjtlmgtMo6UiIE8',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T14:20:32.206Z","userId":"685ea8b0347419736530623a","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 89.940 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:33.015Z"}
  console.log
    CSRF token generation: {
      sessionID: '71a0a11eb74536296e3b6ceab68184c0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9S7HAtu6-olIVVuzHJ5sriJyuSHZgTy_uEA8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 71a0a11eb74536296e3b6ceab68184c0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AJtysnoyBy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.871 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:33.023Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f8beb6dd63caa5a8de5650d5b2986561',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YeZXb44Q-jU4EGGi0Zsa7uUgwCL3r-0Z-wYQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f8beb6dd63caa5a8de5650d5b2986561

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u3vAD1a2Lp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.192 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:33.177Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'f8beb6dd63caa5a8de5650d5b2986561',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af8beb6dd63caa5a8de5650d5b2986561.yuvuVE2GqQusp9GQ8xhw%2B54D3i5jFCA%2BUCXdoAxLlDQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 31.903 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:33.979Z"}
  console.log
    CSRF token generation: {
      sessionID: '2dd1feaf7738681a2e5a9ca163052a32',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rdKTErNn-88d7M7JK-yDC3ftO-y8WMTsrH5w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2dd1feaf7738681a2e5a9ca163052a32

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X_gHnD1-k5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.581 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:33.989Z"}
  console.log
    CSRF token generation: {
      sessionID: '81b3dda032f7f94ce4c4f63330726a16',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UQ7atKNx-HCZB2cMPGa4yjNdlWNqhDZ-cdPQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 81b3dda032f7f94ce4c4f63330726a16

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZS9gpDzBm7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.821 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:34.090Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '81b3dda032f7f94ce4c4f63330726a16',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A81b3dda032f7f94ce4c4f63330726a16.sCwDMuPSsp%2BSbovdIBbf%2BgGAN17VAAm6QKQb7A9Qd6E',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:20:34.187Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-d844a378-c751-4e19-a248-76acbf2bf13b","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T14:20:34.187Z","userId":"685ea8b2347419736530627f","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 97.098 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:34.993Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b2a4724d6368bbe8229070eaa62f0c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aW2jOihc-HdCHr-YLg20avaaS9zkK3-Sbe1I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b2a4724d6368bbe8229070eaa62f0c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fJl-4INlPN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.282 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:35.001Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd58d17ef375cb2b1e49fc53084a70203',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qh3q1w73-51WAVwRI4W9mcP-AT3HCdzPzn4g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d58d17ef375cb2b1e49fc53084a70203

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fl7tMqqGDs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.523 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:35.095Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'd58d17ef375cb2b1e49fc53084a70203',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad58d17ef375cb2b1e49fc53084a70203.M5iRMvG1z%2BFz1E3fHhJ8gts2aLBtdKfWXB2q2LKFRAY',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:20:35.237Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-57096974-a5db-4ef4-b494-7e3c9ee217f0","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T14:20:35.238Z","userId":"685ea8b334741973653062a3","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 143.257 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:36.059Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dd7d2105fe04a8bddcdb5e64777f4a9a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ffapVYEv-1xdJpNLj7LYJu6kYHTncouPmpYA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dd7d2105fe04a8bddcdb5e64777f4a9a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3wkKOJq6DQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.090 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:36.068Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.711 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:36.840Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eac2e6c8f76d5799790a0beedd99acb6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2VRDkYKa-DOoWycLxu70vFD3UKZF7aRzJPlc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eac2e6c8f76d5799790a0beedd99acb6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: svxcQ-KC5G...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.927 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:36.850Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.152 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:37.619Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fc2892266faf9d07d50a399243b3e02d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4E326JMK-HF3mNfpbnlVmWk3OErkM061-pBY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fc2892266faf9d07d50a399243b3e02d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0czdCObUAA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.921 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:37.629Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.144 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:38.405Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b88bf1429ba33239a3eef3ec741c6839',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MexV0l5N-BohrPnedO8e9eplHzat3jjQXqiM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b88bf1429ba33239a3eef3ec741c6839

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zmzWylvyhY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.973 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:38.413Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1439 |
      1440 |   } catch (error) {
    > 1441 |     console.error('Social registration error:', error);
           |             ^
      1442 |     res.status(500).json({
      1443 |       success: false,
      1444 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1441:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 85.639 ms - 49[0m
PASS tests/integration/socialAuth.test.js (15.645 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (1387 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (782 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (780 ms)
      ✓ should return 404 for unconfigured OAuth providers (786 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (1025 ms)
      ✓ should reject social registration with invalid social token (778 ms)
      ✓ should reject social registration with missing required fields (778 ms)
      ✓ should prevent duplicate social registrations (882 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (1004 ms)
      ✓ should reject linking if social account already exists (968 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (1013 ms)
      ✓ should update social account tokens on login (1066 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (781 ms)
      ✓ should handle expired social tokens (779 ms)
      ✓ should sanitize social profile data (786 ms)
      ✓ should handle database errors during social registration (872 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:40.096Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:41.427Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-6d9170a4-d24d-4ba7-bcd9-6bb3fe3dd8cb

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 109.795 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:43.046Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-40e79bfc-f8b4-4590-8dc3-1df6d97cddc4

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 88.843 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:44.521Z"}
[0mGET /api/v1/quickbooks/vendors [33m404[0m 54.248 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:45.877Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 120.955 ms - 318[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:47.335Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json [32m200[0m 116.233 ms - 955[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:48.795Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m400[0m 27.658 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:50.132Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 [33m404[0m 79.243 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:51.650Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 145.050 ms - 169[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:53.115Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 [33m400[0m 28.697 ms - 81[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:54.528Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 [33m400[0m 54.129 ms - 76[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:55.969Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 [33m404[0m 56.053 ms - 49[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:57.348Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-53255a4e-85fb-4a9a-8c4c-4a0129ad2130

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 88.549 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:57.439Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 80.184 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:57.522Z"}
[0mGET /api/v1/quickbooks/history [32m200[0m 99.498 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:59.012Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-6859fd5d-424e-49fd-a882-34cf573f89f1

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 89.065 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:59.104Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 82.567 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?type=vendor {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:20:59.189Z"}
[0mGET /api/v1/quickbooks/history?type=vendor [32m200[0m 81.817 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:00.622Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-c06f84d4-2718-4a81-bb7d-8a34d8ae0e59

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 87.581 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:00.712Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 79.808 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:00.795Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-61f05076-c282-4a67-8078-f842d75cefc8

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 89.467 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:00.886Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-f532cb4e-8689-439b-9349-ecfc19432b1e

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 88.993 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:00.978Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-f381cfd8-813f-4769-83ac-4c21ca3debdf

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 89.413 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:01.070Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-49785abf-788b-4bcd-9ffa-d785daecbde0

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 90.248 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:01.162Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-227f737d-e8da-4737-b959-a5d774ff46f3

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 89.049 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?limit=3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:01.254Z"}
[0mGET /api/v1/quickbooks/history?limit=3 [32m200[0m 82.983 ms - -[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:02.681Z"}
[0mGET /api/v1/quickbooks/vendors [33m401[0m 1.042 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:02.686Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m401[0m 0.878 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:02.689Z"}
[0mGET /api/v1/quickbooks/commission-detail [33m401[0m 0.932 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:02.692Z"}
[0mGET /api/v1/quickbooks/history [33m401[0m 0.841 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:04.027Z"}
  console.log
    Authorization failed for path: /vendors - User role: affiliate Allowed roles: [ 'administrator' ]

      at log (server/middleware/auth.js:184:15)

[0mGET /api/v1/quickbooks/vendors [33m403[0m 30.938 ms - 54[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:05.455Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-56361345-4b4f-44b5-984e-12f001d3e1fc

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 89.208 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:06.903Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 119.108 ms - 318[0m
PASS tests/integration/quickbooks.test.js (28.394 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✓ should export verified vendors as CSV (2090 ms)
      ✓ should export vendors as JSON (1432 ms)
      ✓ should handle no verified vendors gracefully (1409 ms)
    Payment Summary Export
      ✓ should export payment summary for date range as CSV (1442 ms)
      ✓ should export payment summary as JSON with correct aggregations (1463 ms)
      ✓ should require date parameters (1342 ms)
      ✓ should handle empty date range (1393 ms)
    Commission Detail Export
      ✓ should export commission details for specific affiliate (1579 ms)
      ✓ should require all parameters (1367 ms)
      ✓ should reject unverified affiliate export (1424 ms)
      ✓ should handle non-existent affiliate (1445 ms)
    Export History
      ✓ should retrieve export history (1612 ms)
      ✓ should filter export history by type (1643 ms)
      ✓ should limit export history results (2064 ms)
    Security and Permissions
      ✓ should require admin authentication for all QuickBooks endpoints (1360 ms)
      ✓ should not allow affiliate access to QuickBooks exports (1361 ms)
    CSV Format Validation
      ✓ should generate QuickBooks-compatible vendor CSV (1475 ms)
      ✓ should generate QuickBooks-compatible payment CSV (1476 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:08.861Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:09.188Z"}
  console.log
    CSRF token generation: {
      sessionID: '62b1130e8c789577d0eae2f731ecac2b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F7TdPiFG-RIuyMWXH0cntymbbpUKD1bvCOgA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 62b1130e8c789577d0eae2f731ecac2b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xK1bzGOYy5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.133 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:09.834Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-92374790-2acc-4d2a-b978-166981ea5414

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 184.964 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:10.854Z"}
  console.log
    CSRF token generation: {
      sessionID: '5fb7da7da782edea0ab0b9c352cd755e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CdqrsH0W-B3ZVwMpqg-4jNzMQVSGksWrBitQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5fb7da7da782edea0ab0b9c352cd755e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WYB1ZW0p8g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.338 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:11.145Z"}
[0mPOST /api/v1/customers/register [33m400[0m 30.160 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:11.937Z"}
  console.log
    CSRF token generation: {
      sessionID: '66f82756389fdaf76ef71f798db7a31a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sidsRXgD-TN5tqHrCTjOcWK3fBX_RbAcT_Tg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66f82756389fdaf76ef71f798db7a31a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XqsLgQlJ1t...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.156 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:12.192Z"}
[0mPOST /api/v1/customers/register [33m400[0m 55.762 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:12.973Z"}
  console.log
    CSRF token generation: {
      sessionID: '1785ef6c23f381362123c412fc8fe490',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OpwnNtcb-YUl19Ati_ncz7vjyQFEMzBkvNgQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1785ef6c23f381362123c412fc8fe490

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _NC83RutIi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.981 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:13.243Z"}
[0mPOST /api/v1/customers/register [33m400[0m 54.694 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:14.036Z"}
  console.log
    CSRF token generation: {
      sessionID: '45f1154c4f172725a2e89ee9a9e8bac5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fXt2nXeC-JUim-FApC_QENnm_W3iax38BroY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 45f1154c4f172725a2e89ee9a9e8bac5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h8Tn3-OWjU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.496 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:14.292Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 86.992 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:15.114Z"}
  console.log
    CSRF token generation: {
      sessionID: '6bd73acee1d07a0ddb2722dd96bca624',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QLnzeeEM--yKvFRn2xtlv_oE6vYOeApgXns8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6bd73acee1d07a0ddb2722dd96bca624

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WmJrvnTvwW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.147 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:15.386Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 83.573 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:16.207Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fcb4c182fc039e2e6e810e0c51a5c8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1AWVddju-_qZIW1NlSX7OoPpl3bSBR_5ikCc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3fcb4c182fc039e2e6e810e0c51a5c8b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RdanE6RGwb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.402 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:16.471Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 57.606 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:17.270Z"}
  console.log
    CSRF token generation: {
      sessionID: '75936ce807a1295f86702d061260ab0d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FwPK8mCt-gBkn3eNP4AD5hVJvyIR4SLnvluk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 75936ce807a1295f86702d061260ab0d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K3Ocq0Zjog...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.432 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:17.523Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 54.839 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:18.301Z"}
  console.log
    CSRF token generation: {
      sessionID: '9a64f1911085142affd67ffa6ac1113d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rqsApsd5-bgjG1o3KJpYGEWzDCZRM2NnRUxs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9a64f1911085142affd67ffa6ac1113d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8B4SDJDsE5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.861 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:18.560Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 87.246 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:19.417Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ba6b1eae93ff0ee3dbffb4a789b0511',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Sop1FVft-PO8g35x6a5Krsxeg5WtaVeaqCyw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ba6b1eae93ff0ee3dbffb4a789b0511

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Aa9hKXxVg5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.744 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:19.688Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 81.107 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:20.515Z"}
  console.log
    CSRF token generation: {
      sessionID: '0aeacda2e19d4fd1c26da69b9c615d27',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: m3HafTmz-nhHXKw8SnoGDekm2DK3ha62WI20

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0aeacda2e19d4fd1c26da69b9c615d27

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: os27BYQVDF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.058 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:20.808Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 109.690 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:21.647Z"}
  console.log
    CSRF token generation: {
      sessionID: '63a1246a99b4ff27d10ae1d601d7b145',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i8RHX2c6-wrw9gGrR9K2LNhzSJ_JhleJaTSM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 63a1246a99b4ff27d10ae1d601d7b145

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QA6r3Lm_B4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.682 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:21.939Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 107.625 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:22.789Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b5624d8ecb89893d37717ca1b298d492',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2TtZe3tD-iYVy3C-x7cskrpisndxhbqfZ7lQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b5624d8ecb89893d37717ca1b298d492

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lzkO7FmYDO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.364 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:23.050Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'b5624d8ecb89893d37717ca1b298d492',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab5624d8ecb89893d37717ca1b298d492.aClySyO8Fa8T12VbAXCf3Ti4A49PPWVUPImF%2BTbenAg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 187.913 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:23.240Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 148.591 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:24.114Z"}
  console.log
    CSRF token generation: {
      sessionID: 'abf7e08e4d88654dd1ecbede70928509',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: e0t7OoFn-TMdws8oMQeoP13y9ZfdCwtbe2nw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: abf7e08e4d88654dd1ecbede70928509

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QkQl4hLZSq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.390 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:24.374Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'abf7e08e4d88654dd1ecbede70928509',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aabf7e08e4d88654dd1ecbede70928509.A%2FRT2S2nbZxvt8%2BR%2FH9mIuM5WlBfbgYZUX2e9Ea2CUk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 106.543 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:25.203Z"}
  console.log
    CSRF token generation: {
      sessionID: '78ea68f2d9709cd512138defe9cbb8a0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uSKqIcof-_XpVwTTt3Yp2Kv1cXp8Yrkp8Y_0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 78ea68f2d9709cd512138defe9cbb8a0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: F6X4G56Wu4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.250 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:25.489Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '78ea68f2d9709cd512138defe9cbb8a0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A78ea68f2d9709cd512138defe9cbb8a0.tTvGMD8uihFYIhhPfQKnR%2FGUAScJGnBjkaCSrvrueJM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 107.647 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:26.330Z"}
  console.log
    CSRF token generation: {
      sessionID: '102af4e427a466819e78a5d151726c3d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Q5vA1OsV-oIupI-sMPxZ0su-nzpKZC8XgvgM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 102af4e427a466819e78a5d151726c3d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: w0dTOAa9ij...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.935 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:26.635Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 137.949 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:27.506Z"}
  console.log
    CSRF token generation: {
      sessionID: '4c61e765964ba9579b4482afae04163a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hFkoDuGU-Qe7NuZE4E8SvLDausIIlmcnvNUI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4c61e765964ba9579b4482afae04163a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _1c8cYKYd9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.262 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:27.794Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 139.389 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:28.667Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe6b76893bf6c1fb21cd452fdc32af86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4bH2GgOJ-sWeORB19Kq2dq_QYiM7m01wOjMA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe6b76893bf6c1fb21cd452fdc32af86

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0QMNNfEP0j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.734 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:28.959Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 136.144 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:29.831Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e02525ef9a1707dd54ffe0b13b73cba0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Yr7Bb4e7-AUU3ULGkYCfIb948CqojY-DWdvA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e02525ef9a1707dd54ffe0b13b73cba0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: t8gWu1Eagf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.856 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:30.146Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'e02525ef9a1707dd54ffe0b13b73cba0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae02525ef9a1707dd54ffe0b13b73cba0.u2Z5aiHBdOcJ8BjREB%2BnJGrPUyjCZbB%2FuMyqbT8UeMQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 117.221 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:31.044Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bca8b2e6716a511ac4ae853f8365ec57',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: t75hpXOJ-nW6I4hGDXbNbT4yVX7_NzqIWuDE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bca8b2e6716a511ac4ae853f8365ec57

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: flKL9r5HaH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.568 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:31.296Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'bca8b2e6716a511ac4ae853f8365ec57',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abca8b2e6716a511ac4ae853f8365ec57.kDTXzIujzOSJQPEHnVmfKVkIMpwgrtNiqLH8eICQJ0E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.133 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:32.056Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a5f33bfb9c8d5d73a30ba6ef4b93e746',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: trni8Cvq-qZhXe-64P2Yk4btDjaebkzvlEkM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a5f33bfb9c8d5d73a30ba6ef4b93e746

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _fsclWOPVY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.925 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:32.381Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'a5f33bfb9c8d5d73a30ba6ef4b93e746',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa5f33bfb9c8d5d73a30ba6ef4b93e746.D83EN1XueMkJP4skqqB67p%2BLNbPgA0hC6Of5CTBtdY8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 28.572 ms - 63[0m
PASS tests/integration/customer.test.js (25.277 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1685 ms)
      ✓ should fail with invalid affiliate ID (1083 ms)
      ✓ should fail with duplicate email (1036 ms)
      ✓ should fail with duplicate username (1061 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1079 ms)
      ✓ should return customer profile for affiliate (1092 ms)
      ✓ should fail for unauthorized customer (1063 ms)
      ✓ should return limited data without authentication (1032 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1116 ms)
      ✓ should not update protected fields (1098 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1132 ms)
      ✓ should filter orders by status (1137 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1329 ms)
      ✓ should fail with incorrect current password (1089 ms)
      ✓ should fail with weak new password (1127 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1176 ms)
      ✓ should return monthly statistics (1161 ms)
      ✓ should allow affiliate to view customer dashboard (1164 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1213 ms)
      ✓ should reject deletion in production environment (1012 ms)
      ✓ should reject unauthorized deletion (1137 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:34.203Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:35.083Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c6392429d535184be6b1acc84a962f4e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vb92kmtU-iQgWbVTGoOwaEwCQlbpPCie8b4E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c6392429d535184be6b1acc84a962f4e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6PeprXeRBJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.019 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:35.202Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.778 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:35.503Z"}
[0mGET /api/v1/administrators [32m200[0m 124.275 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:36.576Z"}
  console.log
    CSRF token generation: {
      sessionID: '706ac7b6fdfc9dfc714ac98f74367ad0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lvzPjatk-MYNp4ztNyvp_el3RhBq6XYLwiLw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 706ac7b6fdfc9dfc714ac98f74367ad0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8AqJvgafE-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.651 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:36.666Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.877 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:36.892Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 110.458 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:37.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '92424fdfd2604fc31ccae4ac7efb3c07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PHYBRTN5-4Kj988dCpoYDiKmWmz6ayuL-TQI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 92424fdfd2604fc31ccae4ac7efb3c07

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8z3mx54mtx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.160 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:37.960Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.520 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:39.042Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 112.556 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:40.018Z"}
  console.log
    CSRF token generation: {
      sessionID: '9b307f82f41e5ad66f45984402c278de',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h3to6Cbr-IeSRV8IGlABIt5ZXv0NdI89jiJY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9b307f82f41e5ad66f45984402c278de

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SE-p6pXCFL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.921 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:40.109Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.227 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:40.257Z"}
[0mGET /api/v1/administrators [33m401[0m 1.023 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:41.108Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dff9c91a9bc93a24ce3c4b86998a4526',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lDM2A5eB-xwsXa21FHozPIlaIeyaTmuiFt9E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dff9c91a9bc93a24ce3c4b86998a4526

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Byh6XU7jZ1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.716 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:41.196Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.720 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:41.431Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.119 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:41.573Z"}
[0mGET /api/v1/administrators [33m403[0m 27.892 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:42.459Z"}
  console.log
    CSRF token generation: {
      sessionID: '771b423dbcb4a1597cf4cdb746770d0e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fNiYLH9W-iH_05asWTjchDZRV3QYf6P9J7sU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 771b423dbcb4a1597cf4cdb746770d0e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CAiqilCWZU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.127 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:42.556Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.810 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685ea8f6191ff65232dd396a {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:42.784Z"}
[0mGET /api/v1/administrators/685ea8f6191ff65232dd396a [32m200[0m 85.155 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:43.722Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a0992b5ccb331383b9615385a2d3cd23',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: m5nSOkqN-UeD-5xM_NmDqudI66hE7rivOwe0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a0992b5ccb331383b9615385a2d3cd23

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rce0RIBsLl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.527 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:43.810Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.243 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685ea8f7191ff65232dd3995 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:43.954Z"}
[0mGET /api/v1/administrators/685ea8f7191ff65232dd3995 [33m404[0m 82.173 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:44.887Z"}
  console.log
    CSRF token generation: {
      sessionID: '9b3bd4d7fe51976a73baa73d50d858f5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: X3ZUrSpo-4ELm1u9I69jV8zU1nISoK1l3teA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9b3bd4d7fe51976a73baa73d50d858f5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 020wLfkF9T...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.707 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:44.981Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.096 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:45.125Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 55.604 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:46.030Z"}
  console.log
    CSRF token generation: {
      sessionID: '1cb90d9a91b945e69e0a83bb53b8e719',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XurEicui-N87g3d5pmQRMQzNycG2q8cpTatQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1cb90d9a91b945e69e0a83bb53b8e719

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: i8G9xJ_3JA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.443 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:46.120Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.614 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:46.264Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '1cb90d9a91b945e69e0a83bb53b8e719',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1cb90d9a91b945e69e0a83bb53b8e719.A%2BciozFObWoAcRIJDoCo00G4qCERFJXLKSHaJ8PqiVA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [32m201[0m 190.705 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:46.459Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.465 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:47.468Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f1a0e2795d1a7e5373c7fcda87be1bc1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UvUbzQVc-xCkH3VJDDD7xRyOIZm8-nSts4VE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f1a0e2795d1a7e5373c7fcda87be1bc1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ozBhEffeyD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.155 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:47.559Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.377 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:47.704Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'f1a0e2795d1a7e5373c7fcda87be1bc1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af1a0e2795d1a7e5373c7fcda87be1bc1.ttuBbeYPp9iRNqEfVxXGV59TmMN31cZEw50NyBTPKBY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 58.534 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:48.608Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fd4f158e2f8208012cf2557b77052a79',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gGIuNY9y-j_QVEjcirgImVmnjAFtstY0N1Zw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fd4f158e2f8208012cf2557b77052a79

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7VFKazgUM_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.804 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:48.696Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.003 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:48.841Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'fd4f158e2f8208012cf2557b77052a79',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afd4f158e2f8208012cf2557b77052a79.IxALFHx37R23XDtbNB9QcU7%2FdHDvrwWDleApTUbO9Po',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 58.846 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:49.753Z"}
  console.log
    CSRF token generation: {
      sessionID: '698d43e70b6d7e10e6a2004897c3e29c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: woRhs3aL-VRH3rsUx72GA0ESlQ0hWBR6SrYE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 698d43e70b6d7e10e6a2004897c3e29c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xH-mmcfsg6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.164 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:49.846Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.617 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:49.989Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '698d43e70b6d7e10e6a2004897c3e29c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A698d43e70b6d7e10e6a2004897c3e29c.KN0hszhCcLss3S%2FkpNUkM%2FU7HmMpa4rJyQit3TCF2pc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 58.408 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:50.900Z"}
  console.log
    CSRF token generation: {
      sessionID: '024cba99f6ab662904ff2158cb957dcb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kJrq6Row-d6KL0sZ8NHf-agPV-TAmLlVmqN4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 024cba99f6ab662904ff2158cb957dcb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eshj6XDu9N...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.552 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:50.991Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.353 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:51.136Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '024cba99f6ab662904ff2158cb957dcb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A024cba99f6ab662904ff2158cb957dcb.h28n3KahEP5wZtT5KtoVvQiBmlE4r0%2FHvfq07S8K%2Bec',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m409[0m 83.946 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:52.073Z"}
  console.log
    CSRF token generation: {
      sessionID: '56fe1b3b546a705763a253a3dc6f1f7f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lKk4Xsfu-Sd47ZDA8g7BXVgl3LybLgCbOFow

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 56fe1b3b546a705763a253a3dc6f1f7f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5Vs_BYQHDQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.112 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:52.161Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.156 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:52.410Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd01800b3788333ce19263b5319f85588',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HIKHH3Qu-UYWGYxUpTLH5JzSN7sYIICOIP4s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d01800b3788333ce19263b5319f85588

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EaZv5yDIX6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.722 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:52.419Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.165 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:52.596Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'd01800b3788333ce19263b5319f85588',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad01800b3788333ce19263b5319f85588.Jh7SElXjD%2FMreUQm2RQQuI2ugJFgW%2BZmgWfk5IyTTaE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m403[0m 57.488 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:53.502Z"}
  console.log
    CSRF token generation: {
      sessionID: '63abb4bfbc5838d7ab7069c133c7bf89',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mquF2gtp-BmEM0Dhs0bqqIDIiOJ4zFmzn4K4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 63abb4bfbc5838d7ab7069c133c7bf89

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mkbNblU1E_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.821 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:53.596Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.077 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea901191ff65232dd3ae6 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:53.827Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea901191ff65232dd3ae6 {
      sessionID: '63abb4bfbc5838d7ab7069c133c7bf89',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A63abb4bfbc5838d7ab7069c133c7bf89.Fw%2FcYGti%2B5QmLHtasAmWiaY8n9knMoq9SsHXNXFpD9I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea901191ff65232dd3ae6 [32m200[0m 90.729 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:54.769Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7b0b188b7c7d91bd75eaad89710605b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Pc3nQcpi-1p_22Bq5ZGMaFZkGHUQaowhaldo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7b0b188b7c7d91bd75eaad89710605b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e5o72mNNUH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.742 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:54.866Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.019 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea903191ff65232dd3b11 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:55.120Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea903191ff65232dd3b11 {
      sessionID: 'f7b0b188b7c7d91bd75eaad89710605b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af7b0b188b7c7d91bd75eaad89710605b.pYyDFsFlk4e3JGgPluSLte73OXLYNBawj4iUkweaVEw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea903191ff65232dd3b11 [32m200[0m 117.536 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:56.089Z"}
  console.log
    CSRF token generation: {
      sessionID: '00902d8848f32b39ad63a4677cd08c63',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UAATBgvt-IZ-e546MZPQ3_OlQ4DgwLKnE1H0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 00902d8848f32b39ad63a4677cd08c63

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: iegaRaUHwt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.174 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:56.180Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.161 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea904191ff65232dd3b3d {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:56.417Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea904191ff65232dd3b3d {
      sessionID: '00902d8848f32b39ad63a4677cd08c63',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A00902d8848f32b39ad63a4677cd08c63.liPoXQB141YrrY%2BSlrwpmO3wO0LQUVq%2ByUeBNL7eEo0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea904191ff65232dd3b3d [32m200[0m 143.580 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:56.564Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2fdb998255910709990d49d7ccc4d4a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: utXXwd69-kizH46z2jJiCtCUSY1sxQhgrF10

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b2fdb998255910709990d49d7ccc4d4a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qhNxok9vFT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.774 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:56.576Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.762 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:57.580Z"}
  console.log
    CSRF token generation: {
      sessionID: '712f8b5a2564506d812d32551caa48dc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6LpZd1Vt-cyKzv9ZNGK8Wa-ho32J57zNiPX0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 712f8b5a2564506d812d32551caa48dc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qjEtUQmNCr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.348 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:57.676Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.763 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea905191ff65232dd3b6c {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:57.906Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea905191ff65232dd3b6c {
      sessionID: '712f8b5a2564506d812d32551caa48dc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A712f8b5a2564506d812d32551caa48dc.4J30ajjko3Ub49kqgjJnLihzdxhpB7nCKP2WOiuMjCI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea905191ff65232dd3b6c [32m200[0m 106.847 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:58.016Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.511 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:58.898Z"}
  console.log
    CSRF token generation: {
      sessionID: '3905a2bb4339fd16487b031014442013',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uOtMcmg8-pJ90U3-mxFEEulKBSRqMobBRdH0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3905a2bb4339fd16487b031014442013

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OQ4GeDmZec...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.788 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:58.988Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.105 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea907191ff65232dd3b98 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:21:59.255Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea907191ff65232dd3b98 {
      sessionID: '3905a2bb4339fd16487b031014442013',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3905a2bb4339fd16487b031014442013.2Tq%2FSDpITMHDxtIeVB2AyaxvHiGczzJdfagq%2BtYAMs4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea907191ff65232dd3b98 [32m200[0m 86.442 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:00.190Z"}
  console.log
    CSRF token generation: {
      sessionID: '17bc4cca2782c6f4743433bc4086a734',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ilY0gLpr-_LZqXw724V_frNTgAQOeq7cfukw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 17bc4cca2782c6f4743433bc4086a734

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9MtOKU55V6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.096 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:00.293Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.500 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea908191ff65232dd3bc3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:00.525Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea908191ff65232dd3bc3 {
      sessionID: '17bc4cca2782c6f4743433bc4086a734',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A17bc4cca2782c6f4743433bc4086a734.F%2FZW6K6ZtPf0gmwjMyf1HBemuOllNAVP1FBwbg4Q2aM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea908191ff65232dd3bc3 [33m409[0m 85.688 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:01.470Z"}
  console.log
    CSRF token generation: {
      sessionID: '40cb482573a9fa774dfa944a79f3fa91',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: puSpydX0-6ji0N3H676tZqYz-xffAdeHnEL4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 40cb482573a9fa774dfa944a79f3fa91

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nR9nwPfnkN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.101 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:01.580Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.275 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea909191ff65232dd3be8 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:01.808Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea909191ff65232dd3be8 {
      sessionID: '40cb482573a9fa774dfa944a79f3fa91',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A40cb482573a9fa774dfa944a79f3fa91.lGh8j9boLV6NlQ2mmzMFGUEa28lnduuFqSFHYGCQOmM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea909191ff65232dd3be8 [33m400[0m 58.458 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:02.716Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b40b20b19e4897a1da380bdf7854dcd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Wk8969Br-b6ilRgfU2knGruXtm4SY62Pk0Wg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b40b20b19e4897a1da380bdf7854dcd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bq71eVlcMN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.554 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:02.806Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.546 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:03.124Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efcdfaffcec9db7116bd9d0609ae195',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a9DItkx7-4vVVnsaMiw67tap8y-YkGj6-Cuc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efcdfaffcec9db7116bd9d0609ae195

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6qmBiRp3io...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.474 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:03.137Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.661 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ea90b191ff65232dd3c18 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:03.280Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea90b191ff65232dd3c18 {
      sessionID: '8efcdfaffcec9db7116bd9d0609ae195',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8efcdfaffcec9db7116bd9d0609ae195.eKn0S1McehZwyDbA0pJNV7qKCcanqXTKqzUlCAX14gE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ea90b191ff65232dd3c18 [33m403[0m 56.887 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:04.183Z"}
  console.log
    CSRF token generation: {
      sessionID: '1fd41ec215c3d1f2f1990cf517abad58',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GcxEUAWJ-ck9GYAD_38RLn_xPOJlPDTYUNA4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1fd41ec215c3d1f2f1990cf517abad58

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ---JowWCQy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.324 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:04.276Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.992 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ea90c191ff65232dd3c48 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:04.499Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea90c191ff65232dd3c48 {
      sessionID: '1fd41ec215c3d1f2f1990cf517abad58',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1fd41ec215c3d1f2f1990cf517abad58.BAHpUPIac7vaRdLApQRXoBc1dtLEpWvsceg%2BdrBOb%2Fs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ea90c191ff65232dd3c48 [32m200[0m 117.868 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:05.493Z"}
  console.log
    CSRF token generation: {
      sessionID: '8feb32c2aa3a313fa0cb02301cc80927',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U4xlXLUS-hbnVfOdVQlCZQGOaxH9uUqvL578

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8feb32c2aa3a313fa0cb02301cc80927

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PYA82glev2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.589 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:05.605Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.337 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ea90d191ff65232dd3c6f {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:05.847Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea90d191ff65232dd3c6f {
      sessionID: '8feb32c2aa3a313fa0cb02301cc80927',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8feb32c2aa3a313fa0cb02301cc80927.rFfgGoWjBOt5FgPp3D%2BaQeYMQp0E%2F%2BNIaLmQ%2BudUvvU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ea90d191ff65232dd3c6f [33m400[0m 56.536 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:06.753Z"}
  console.log
    CSRF token generation: {
      sessionID: '7f29373c9951fd687f75c3c89f65806e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E51wVj5E-yxqrncueVc47IB_Jf93Rkxss94A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7f29373c9951fd687f75c3c89f65806e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dr00Bpu66M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.570 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:06.839Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.242 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ea90e191ff65232dd3c99 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:07.110Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea90e191ff65232dd3c99 {
      sessionID: '7f29373c9951fd687f75c3c89f65806e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7f29373c9951fd687f75c3c89f65806e.jlZX5oJvk98Caww71UI8BHoFmBAaCSQUdcp85%2BbZNQQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ea90e191ff65232dd3c99 [33m400[0m 59.444 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:08.030Z"}
  console.log
    CSRF token generation: {
      sessionID: '559628c6dcf31f71ba9042d2dff5547e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AUQQYwZP-0e-42mqhFQbCppYmzYw3WDV4HS4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 559628c6dcf31f71ba9042d2dff5547e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jC4twNp8Am...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.070 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:08.120Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.723 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:08.437Z"}
  console.log
    CSRF token generation: {
      sessionID: '2add032a9b047d699850f20f846d522f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HLZ8cdrh-ZstyReBJ2e3FurTbDkQtGprHV0w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2add032a9b047d699850f20f846d522f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pvZ4-Fm8Gy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.288 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:08.446Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.710 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ea910191ff65232dd3cca {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:08.614Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea910191ff65232dd3cca {
      sessionID: '2add032a9b047d699850f20f846d522f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2add032a9b047d699850f20f846d522f.G86ymTJyBq9S2TEPkK8t6odz1xGcFgw1e8QxBIXJRNY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ea910191ff65232dd3cca [33m403[0m 56.974 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:09.569Z"}
  console.log
    CSRF token generation: {
      sessionID: '0645b41e16838fdd844c252463a65bd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rHDHz1UR-od3r_AKfSzgov2Thmcyo-uW4qgw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0645b41e16838fdd844c252463a65bd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5_AkmO1mX7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.817 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:09.666Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.722 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ea911191ff65232dd3cfc {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:09.905Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea911191ff65232dd3cfc {
      sessionID: '0645b41e16838fdd844c252463a65bd6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0645b41e16838fdd844c252463a65bd6.FQyPjHj10apErNA0aF8X0fzkU%2Fdik8rizq9zotlc%2BGE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ea911191ff65232dd3cfc [33m404[0m 110.444 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:10.863Z"}
  console.log
    CSRF token generation: {
      sessionID: '3f6ca5d8d0e97abb37f8f8b1f60f9993',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w9VLc0mN-6u5bJMda1lWb3MV__R7x4qqnBzA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3f6ca5d8d0e97abb37f8f8b1f60f9993

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U4T_ElFCbh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.081 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:10.950Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.557 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ea913191ff65232dd3d27/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:11.182Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea913191ff65232dd3d27/reset-password {
      sessionID: '3f6ca5d8d0e97abb37f8f8b1f60f9993',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3f6ca5d8d0e97abb37f8f8b1f60f9993.Z4ciqeEqLwyjBaZSnSsxkf4bov0VNYAYRyCUfADZHIg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ea913191ff65232dd3d27/reset-password [32m200[0m 170.436 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:11.355Z"}
  console.log
    CSRF token generation: {
      sessionID: '26ce9ffb370e9ed61b62b4c3efdd13e1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VpkwIRoE-u4PxNJWpeTfN0DUxBvp0_1wZocw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26ce9ffb370e9ed61b62b4c3efdd13e1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K20uyQ5ptC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.567 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:11.361Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.003 ms - 644[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:11.506Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b3ea8d7872ca92040d0b3eecec63d33',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KviCjWU0-W-2gUOe7Y3hufVSidTkDaNAyWlQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0b3ea8d7872ca92040d0b3eecec63d33

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Aua170aeO2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.057 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:11.516Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 115.670 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:12.508Z"}
  console.log
    CSRF token generation: {
      sessionID: '58394d2079c8bb43d0c378a8ff1b85ba',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eO5S8QZJ-7fz4VvN8jK-hMipsgjnObbLd_cE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 58394d2079c8bb43d0c378a8ff1b85ba

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6Y8Ll85VDf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:12.600Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.321 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ea914191ff65232dd3d59/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:12.863Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea914191ff65232dd3d59/reset-password {
      sessionID: '58394d2079c8bb43d0c378a8ff1b85ba',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A58394d2079c8bb43d0c378a8ff1b85ba.ADHXdTUCroOXLZOnQgY%2Bhidef3Ql159LkG%2FCSFef%2FZE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ea914191ff65232dd3d59/reset-password [32m200[0m 173.164 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:13.930Z"}
  console.log
    CSRF token generation: {
      sessionID: '02b80353e9e29f8f83bbf2a1367bcbaf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MxvEgv1U-t24iU8BVeNVY7MI2fmjEAwf-tUw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 02b80353e9e29f8f83bbf2a1367bcbaf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Jr4s54O-wR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.827 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:14.020Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.597 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ea916191ff65232dd3d87/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:14.253Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea916191ff65232dd3d87/reset-password {
      sessionID: '02b80353e9e29f8f83bbf2a1367bcbaf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A02b80353e9e29f8f83bbf2a1367bcbaf.DlOnpngOoQPeI3com8QEzYrUZ35b%2B4hrzxrVrf8Sf0E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ea916191ff65232dd3d87/reset-password [33m400[0m 56.824 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:15.166Z"}
  console.log
    CSRF token generation: {
      sessionID: '714d165a211f740b5dd71c032edb97fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: psXncUau-pxkGfXPgkdP8U8LzleqXDsxGZpo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 714d165a211f740b5dd71c032edb97fd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KRIXBueQpX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.287 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:15.257Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.582 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:15.596Z"}
  console.log
    CSRF token generation: {
      sessionID: 'efea5c69b1a1e1d7b6e8d06a2b9fe646',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7SZuehj6-k29nOg1jhO3MFuGXcb-xkymKUYA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: efea5c69b1a1e1d7b6e8d06a2b9fe646

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3tetzfeThe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.554 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:15.603Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.741 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/685ea917191ff65232dd3db1/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:15.747Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ea917191ff65232dd3db1/reset-password {
      sessionID: 'efea5c69b1a1e1d7b6e8d06a2b9fe646',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aefea5c69b1a1e1d7b6e8d06a2b9fe646.T5k%2FFjZ68hSH47ZYGk8lEf%2FMxG9ObdVyyg0P37yeOAA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ea917191ff65232dd3db1/reset-password [33m403[0m 58.713 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:16.664Z"}
  console.log
    CSRF token generation: {
      sessionID: '58f946041ca65e7c727ab40317e3f2bd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: M36fv4jC-036JTBe5hGCFJ22IxqPbBkpi15A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 58f946041ca65e7c727ab40317e3f2bd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pwyaSDKWYT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.167 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:16.751Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.980 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:16.910Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 28.604 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:17.782Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ba23c18f43de8ef8b4dec288d51ef96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Nm1ev4Fb-6j-zUV15cvvb7_XQihmuqr1yod4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ba23c18f43de8ef8b4dec288d51ef96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WX1vXbQPfA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.367 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:17.872Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.080 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:18.021Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 1.128 ms - 47[0m
PASS tests/integration/administrator.test.js (45.438 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1958 ms)
      ✓ should filter by active status (1291 ms)
      ✓ should support pagination (2148 ms)
      ✓ should require admin authentication (1091 ms)
      ✓ should require administrator permissions (1351 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1261 ms)
      ✓ should return 404 for non-existent administrator (1165 ms)
      ✓ should handle invalid ObjectId (1144 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1435 ms)
      ✓ should validate required fields (1143 ms)
      ✓ should validate email format (1141 ms)
      ✓ should validate password strength (1148 ms)
      ✓ should prevent duplicate emails (1173 ms)
      ✓ should require administrators.create permission (1429 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1266 ms)
      ✓ should update email (1319 ms)
      ✓ should update password (1487 ms)
      ✓ should deactivate administrator (1319 ms)
      ✓ should not allow updating adminId (1294 ms)
      ✓ should validate email uniqueness on update (1282 ms)
      ✓ should prevent self-deactivation (1241 ms)
      ✓ should require administrators.update permission (1470 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1311 ms)
      ✓ should prevent self-deletion (1258 ms)
      ✓ should prevent deleting last administrator with all permissions (1279 ms)
      ✓ should require administrators.delete permission (1534 ms)
      ✓ should handle non-existent administrator (1298 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1639 ms)
      ✓ should clear login attempts on password reset (1421 ms)
      ✓ should validate password strength (1240 ms)
      ✓ should require administrators.update permission (1498 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (1120 ms)
      ✓ should require authentication (1086 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:19.716Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.563Z"}
  console.log
    CSRF token generation: {
      sessionID: '19184bc6b0ac9ad3c0d5669957cc0605',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pee7e8U2-oMYSg4hUE-b2v6s0by-Crmhe0yU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 19184bc6b0ac9ad3c0d5669957cc0605

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gm8Gl3K-Ky...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.984 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.575Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 6.487 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.585Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.259 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.597Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.092 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.601Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.389 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.606Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.743 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.611Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.639 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.621Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.812 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.626Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.577 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.633Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.451 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.638Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.900 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.644Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.780 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.647Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.619 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.653Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.294 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.662Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.953 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.667Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.553 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.670Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.276 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.674Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.180 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:20.677Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.146 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:21.614Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a39297d6f29613773aa55ab56838940',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S5YkBpqD-lBzyeknTiKarR7gEaKmsjJ7iwF8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a39297d6f29613773aa55ab56838940

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yi7y-KOmBn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.319 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:21.628Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.106 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:21.742Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 114.191 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:21.859Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 114.103 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:21.975Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.227 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:22.090Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 107.005 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:23.017Z"}
  console.log
    CSRF token generation: {
      sessionID: '495bbc1791e681527f57a5eaf741d50b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: z42bzVKa-3D3RdnYY5QjuKRALAxSExYdxBXM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 495bbc1791e681527f57a5eaf741d50b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0tOqLVhIAq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.828 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:23.026Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.418 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:23.840Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a813b30966b4bcb00e6a5468898b902d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KUjiyo3N-dau20Qh329vNEcKBVA8Djvg9fHY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a813b30966b4bcb00e6a5468898b902d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WzLk8aGn4Y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.467 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:23.849Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.750 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:24.676Z"}
  console.log
    CSRF token generation: {
      sessionID: '351da468180de4a6dff72d92e9a0cca8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: f7tDghHH-EI5KHPpW2SOyAti3JVIVDjF1p7Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 351da468180de4a6dff72d92e9a0cca8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ilYhb4k6az...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.339 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:24.683Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.638 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:24.687Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.274 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:24.690Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.309 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:24.693Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.066 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:25.510Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c93c7bf051a804f4fe02cc96882e2282',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 82opfeto-E0dfQZGXjUGcq-M8dLHog6ZWzV4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c93c7bf051a804f4fe02cc96882e2282

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AwzEYDVBul...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.443 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:25.642Z"}
[0mPOST /api/v1/customers/register [33m400[0m 1.548 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:26.472Z"}
  console.log
    CSRF token generation: {
      sessionID: '168198dc092ac79ce4b37f871dd0d639',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PEnOQEGI-ERP2__uG3TS0SdIYxe7ZGjcwTHw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 168198dc092ac79ce4b37f871dd0d639

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: b79IJkXOk7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.428 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:26.614Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-ac874391-1498-4b85-9ca6-49225b35434d

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 160.787 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:27.594Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b4967fb535f576205451805259f4a6ad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: e62vwdqe-oanWxChfeILTeLP6tE0LmiQk2yc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b4967fb535f576205451805259f4a6ad

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ca8de0YdTH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.526 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:27.685Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:27.830Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:27.831Z","userId":"685ea923e23b26580e64a185","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.626 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:27.834Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'b4967fb535f576205451805259f4a6ad',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab4967fb535f576205451805259f4a6ad.lGAGXpGdKsH65JMIFlGTTkrj5W2wlER1HzCPiS3ssa0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 59.839 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:28.715Z"}
  console.log
    CSRF token generation: {
      sessionID: '93e9fe0e9ccc85f1ad9d8edf03d46c93',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7Zf7Te3U-vYE8X-ndkA_hiG7az8tLRl8pHyU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 93e9fe0e9ccc85f1ad9d8edf03d46c93

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: khMWrm0KBU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.539 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:28.804Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:28.945Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:28.945Z","userId":"685ea924e23b26580e64a1ad","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.493 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:28.947Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '93e9fe0e9ccc85f1ad9d8edf03d46c93',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A93e9fe0e9ccc85f1ad9d8edf03d46c93.so%2FWE9RINxtWvYD65jHnItuGMGHPc35O9MCk4K5jyHc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ea925e23b26580e64a1b7","targetType":"administrator","timestamp":"2025-06-27T14:22:29.140Z","userId":"685ea924e23b26580e64a1ad","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 193.363 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:29.977Z"}
  console.log
    CSRF token generation: {
      sessionID: '5cd62a0dd96ec51b33eaf21785fae82a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C33WqKzc-aXeCaENwbc_SwxAk-jOQacr1PYY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5cd62a0dd96ec51b33eaf21785fae82a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: E8bMadKceS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.528 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:30.068Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:30.208Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:30.208Z","userId":"685ea926e23b26580e64a1d9","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.118 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:30.211Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '5cd62a0dd96ec51b33eaf21785fae82a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5cd62a0dd96ec51b33eaf21785fae82a.j2R2W%2B5xtZgJphzQ%2FGSNq7pY7JnrNEBvmtbhWwxYfHY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 56.222 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:31.094Z"}
  console.log
    CSRF token generation: {
      sessionID: '0604b5d70f60e8c5f117d031bc6b27c8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ak9sWNpm-dHjTPlgQVN8QUhFTyl_4MzYrRbw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0604b5d70f60e8c5f117d031bc6b27c8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KVgfM_-jGh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.149 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:31.178Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:31.318Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:31.318Z","userId":"685ea927e23b26580e64a201","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.707 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:31.321Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '0604b5d70f60e8c5f117d031bc6b27c8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0604b5d70f60e8c5f117d031bc6b27c8.lw0QJBVwO%2FmOf4PJRC3wFhxLxC0Ykw%2Bpw7s%2FWDlDdC0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMCEWIUB065FB2B"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ea927e23b26580e64a20a","targetType":"operator","timestamp":"2025-06-27T14:22:31.481Z","userId":"685ea927e23b26580e64a201","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 160.386 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:32.305Z"}
  console.log
    CSRF token generation: {
      sessionID: '031879f2f77df7a3a89379f5a2edcf44',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gOaYIkWJ-hHLSmV6C07fu_zkfV3yBz17M8-Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 031879f2f77df7a3a89379f5a2edcf44

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sRegRfkBXy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.222 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:32.399Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 58.744 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:32.488Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.795 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:33.309Z"}
  console.log
    CSRF token generation: {
      sessionID: '373efb4188713407b42959d0d9dc8914',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fOmfGnNR-PW4Q3i3j2YN33ctcVf54RWdNbGc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 373efb4188713407b42959d0d9dc8914

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fLrtuTxzpT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.327 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:33.407Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.205 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:33.496Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 107.827 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:34.429Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ebd02cc48b8593ec399f00fd95a5952',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Q6CVmjyQ-ubE61U6iBPToKH9VZarA_nmuXAQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6ebd02cc48b8593ec399f00fd95a5952

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: s8RMDaJvqL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.824 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:34.516Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:34.656Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 139.916 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:35.481Z"}
  console.log
    CSRF token generation: {
      sessionID: '6b0706753d47aa0e4b2b3f26b2c939e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rzupKpH5-vq_KmRR_3n-fQr_1yoV9zpBlQdc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6b0706753d47aa0e4b2b3f26b2c939e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: n505XuPNA8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.886 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:35.491Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.338 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:36.314Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ffcbeb06c4293503a1e807c58404075',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ffc94pnv-c0jJIPddRhqb7wMqm2KZJ54soYo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ffcbeb06c4293503a1e807c58404075

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: v6G47L0WzY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.509 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:36.325Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.792 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:37.143Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a54359b2c01683d51b52750ffcefe372',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qPMj4kCy-UzWyKsT0HPAZ2k1dqWTnN8w2Zjk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a54359b2c01683d51b52750ffcefe372

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6L2pfH0xAW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.076 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:37.152Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 124.397 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:38.098Z"}
  console.log
    CSRF token generation: {
      sessionID: '7d038134da26d46c08592234e9602c1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wpTEbKSm-1YMyTH5aEGgdf5Kg-Lf8rbBC_i4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7d038134da26d46c08592234e9602c1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zc914wmD4F...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.411 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:38.107Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 107.669 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (20.044 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1477 ms)
      ✓ should accept strong passwords during affiliate registration (1406 ms)
      ✓ should reject passwords containing username (824 ms)
      ✓ should reject passwords containing email (835 ms)
      ✓ should reject passwords with sequential characters (833 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (957 ms)
      ✓ should accept strong passwords for customer registration (1128 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1121 ms)
      ✓ should accept strong passwords for administrator creation (1259 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1117 ms)
      ✓ should accept strong passwords for operator creation (1212 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1005 ms)
      ✓ should accept strong passwords during password reset (1120 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1050 ms)
      ✓ should handle case-insensitive username/email validation during registration (831 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (828 ms)
      ✓ should accept passwords with mixed character distribution (955 ms)
      ✓ should handle Unicode characters in passwords appropriately (935 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:39.749Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:40.557Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6dc0170948bdff5ce336e447396c80f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PMczBGED-k8iMxZVifWcxcYK8yUH7MWsVMfk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a6dc0170948bdff5ce336e447396c80f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7fzoeV8gYk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.694 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:40.660Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:40.824Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:40.824Z","userId":"685ea9309f2707938b523dec","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.497 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:40.827Z"}
  console.log
    CSRF token generation: {
      sessionID: '97b56fcdb41bd3b78f33866e513f9575',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZsgNay86-V8SZ3rcSn1k1aHR6IEjl3FhMS6Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 97b56fcdb41bd3b78f33866e513f9575

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h9fRhjBFaF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.222 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:40.918Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:41.060Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:41.060Z","userId":"685ea9309f2707938b523dff","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.857 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:41.064Z"}
  console.log
    CSRF token generation: {
      sessionID: '60acc28875868afc2038c90964885ae9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZqAAdX3D-Hnc4ej2YovAmCdB0dhJMUAn_IcY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 60acc28875868afc2038c90964885ae9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: M7aXK_YjBB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.391 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:41.201Z"}
[0mGET /api/v1/operators [32m200[0m 159.696 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.285Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ba0f51fd7a935790de38429c99516692',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L4XNDlB8-VQhgfeulsPX-5pmSm2XXGulrMmM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ba0f51fd7a935790de38429c99516692

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jp_pwq4xEb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.055 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.376Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:42.511Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:42.512Z","userId":"685ea9329f2707938b523e38","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 135.609 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.514Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a66cbcad00b6279746c7c983f6a8d9c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aYaMv0as-MceDd7zZbaeMyy-ihTepNbbiCl8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a66cbcad00b6279746c7c983f6a8d9c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IAxCSUuDmB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.137 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.598Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:42.739Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:42.739Z","userId":"685ea9329f2707938b523e3e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.873 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.742Z"}
  console.log
    CSRF token generation: {
      sessionID: '10598b51ee854c90d82b2e3cf038af17',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QKnc9okZ-ulVxtkKFWCD8FXTfB77AFdxN40Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 10598b51ee854c90d82b2e3cf038af17

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pW4QwRRRHV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.958 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:42.839Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 137.074 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:43.787Z"}
  console.log
    CSRF token generation: {
      sessionID: '26c3302c963a4dc20f8d5e9086da4575',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3YbZCh5a-gez87jUYkU7n2ZzHcRdrcUOVTHg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26c3302c963a4dc20f8d5e9086da4575

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tCC19jjhaU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.518 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:43.881Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:44.019Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:44.019Z","userId":"685ea9339f2707938b523e6a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.375 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:44.022Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec1a1af9584adda0e387aab5bde5a850',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Xe0AFpzd-NeSk-hefe0nHJGTc6NvQAwOMaJI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec1a1af9584adda0e387aab5bde5a850

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yNG4gctHwm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.500 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:44.114Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:44.259Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:44.259Z","userId":"685ea9349f2707938b523e70","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.951 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:44.262Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2156ebb2ce036bc5041ff0089886447',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ayv03f2y-R5aPnjk4MPVqy0SbdVbAUBmkjBA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2156ebb2ce036bc5041ff0089886447

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xTvXMnStAd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.361 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:44.356Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 109.320 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:45.271Z"}
  console.log
    CSRF token generation: {
      sessionID: '2bd1219fa0e644e0b910b3d882b5c927',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VZhExmrl-gTxTX725uNxe3p6xXDvoNRSgnNA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2bd1219fa0e644e0b910b3d882b5c927

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VMPw9qzGO-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.064 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:45.369Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:45.508Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:45.509Z","userId":"685ea9359f2707938b523e9b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.779 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:45.511Z"}
  console.log
    CSRF token generation: {
      sessionID: '5983f848897647976ce5523a319a9d64',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uggLddhf-FAeXlewSSmfkYRnZO29aFIi2fqE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5983f848897647976ce5523a319a9d64

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: exLYyZeG8d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.334 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:45.603Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:45.751Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:45.751Z","userId":"685ea9359f2707938b523ea1","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.268 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:45.754Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e46ebd4d123221afc0a879a67172d7f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mHnNWLvZ-_KzbAUewGJwjgTcSrnntXl84A8w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e46ebd4d123221afc0a879a67172d7f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9uMthPvzFu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.747 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:46.638Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 137.083 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:47.588Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe6a974880f8296de85a2b3823c2a9d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Z1Fqy3Dm-W2D02ZSfEm6tcQEjUYz1Km2UskE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe6a974880f8296de85a2b3823c2a9d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nqu5wLEUyY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.816 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:47.680Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:47.817Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:47.818Z","userId":"685ea9379f2707938b523eea","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.082 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:47.820Z"}
  console.log
    CSRF token generation: {
      sessionID: '327047ad6c4de6ccc0a6a5731046c037',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eK4yheNa-xZMk16RUULZM86zlDJ2BOIMH5EQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 327047ad6c4de6ccc0a6a5731046c037

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mo_WDJ1UGE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.611 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:47.911Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:48.047Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:48.048Z","userId":"685ea9379f2707938b523ef0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 137.311 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:48.051Z"}
  console.log
    CSRF token generation: {
      sessionID: '71f93b0e498cb28747498a7c5710fc52',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6B14o0ix-jSbROajz1p10BpOoc4nyAqcxKVg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 71f93b0e498cb28747498a7c5710fc52

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9l8wR0ZDMP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.813 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:48.059Z"}
[0mGET /api/v1/operators [33m401[0m 0.912 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:48.866Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ac5d5fafeccaf2d7a401463288bf0b46',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VN7drCGC-b9nF5WM0kJF7s3l-WFV6pFiklQ0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ac5d5fafeccaf2d7a401463288bf0b46

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HaHxbPKzRj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.772 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:48.962Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:49.105Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:49.105Z","userId":"685ea9389f2707938b523f15","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.403 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:49.107Z"}
  console.log
    CSRF token generation: {
      sessionID: '6bbb9b2ec0f833ca2f0a50d389a6bfa8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BHTzRu4E--f3BhJtn9Ao3TefTxKQGKrTvnG0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6bbb9b2ec0f833ca2f0a50d389a6bfa8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZZb96jGT_N...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.898 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:49.200Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:49.344Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:49.344Z","userId":"685ea9399f2707938b523f1b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.883 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:49.347Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5e44e31106be7b6321230e87e14a0f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QcJvya5r-iYG6izWCrHH01cxq_STYhFFqCrk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5e44e31106be7b6321230e87e14a0f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9sG_jKXssM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.440 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:49.447Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:49.586Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:49.586Z","userId":"685ea9399f2707938b523f21","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.280 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:49.588Z"}
[0mGET /api/v1/operators [33m403[0m 54.438 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:50.473Z"}
  console.log
    CSRF token generation: {
      sessionID: '9b4e2b2f261bcec86ab0482d47da1dd8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FIKkAX0D-6oZrq2iRIlm-XGVD2J3v1Ds2Ak8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9b4e2b2f261bcec86ab0482d47da1dd8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wzLN0YeKdu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.750 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:50.561Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:50.704Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:50.705Z","userId":"685ea93a9f2707938b523f48","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.882 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:50.707Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e472bff1d3b70b80925a237182428e90',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UJEcVhLu-HzY2x28BGonHXIX3fjzjFX6b4RI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e472bff1d3b70b80925a237182428e90

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4vZUWv3RPI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.390 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:50.796Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:50.934Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:50.935Z","userId":"685ea93a9f2707938b523f4e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.224 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:50.937Z"}
  console.log
    CSRF token generation: {
      sessionID: '2531a434a2ef6ead0b8284b223111994',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5AtJTDQR-TVpZwZdKVUoYq0Dq0GNMwlb1Oak

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2531a434a2ef6ead0b8284b223111994

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: y4xSRmakmk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.317 ms - 67[0m
[34mdebug[39m: GET /api/v1/administrators/operators/685ea93a9f2707938b523f54 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:51.027Z"}
[0mGET /api/v1/administrators/operators/685ea93a9f2707938b523f54 [32m200[0m 108.795 ms - 761[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:51.948Z"}
  console.log
    CSRF token generation: {
      sessionID: '9e288c79f5774d5690623b55fa427138',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rq9lmjzV-_a7APfwcriDxiBaEylqiBUMN1a0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9e288c79f5774d5690623b55fa427138

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bpfoJL_GWj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.699 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:52.044Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:52.186Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:52.186Z","userId":"685ea93c9f2707938b523f79","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.351 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:52.189Z"}
  console.log
    CSRF token generation: {
      sessionID: 'da4f2be2f143756e5433631c7edff154',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FZiRs3TP-zFtm4Iw18iBq4K_3Rgy0qrsl_mM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: da4f2be2f143756e5433631c7edff154

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xJCJAjS6xW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.259 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:52.323Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:52.489Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:52.490Z","userId":"685ea93c9f2707938b523f7f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 166.576 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:52.493Z"}
  console.log
    CSRF token generation: {
      sessionID: '83fd0bdf600687646a0b2575bd1a9997',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2ZPwIDET-ZHpcfTZZtCemczbIbliE-A9YQL8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 83fd0bdf600687646a0b2575bd1a9997

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eSkjds_3Go...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.049 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ea93c9f2707938b523f7f {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:52.507Z"}
[0mGET /api/v1/operators/685ea93c9f2707938b523f7f [32m200[0m 81.827 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.390Z"}
  console.log
    CSRF token generation: {
      sessionID: '4cac5b5975c6ce2d5b5cbea6e97cc347',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HdmJ4UnA-pTwGbA8paMiPiGk7j8uFvQGG0LE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4cac5b5975c6ce2d5b5cbea6e97cc347

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9uXlmVLk1A...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.543 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.476Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:53.616Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:53.617Z","userId":"685ea93d9f2707938b523fa7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.191 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.619Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d95829fbd4e3461b26311c85b937b7d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ir5XGPDT-B5fuQIMWaf3BfXfs-mb4fGaOahA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d95829fbd4e3461b26311c85b937b7d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5_sf5DU9DW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.251 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.707Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:53.849Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:53.849Z","userId":"685ea93d9f2707938b523fad","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.753 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.852Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fce79022d2cd16ff043f7f676640c9ba',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s0zK4T0b-kLtUOpHbagDE9MyDZNZDuayIsS4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fce79022d2cd16ff043f7f676640c9ba

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2SfLrzDL2d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.661 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ea93d9f2707938b523fb3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:53.943Z"}
[0mGET /api/v1/operators/685ea93d9f2707938b523fb3 [33m403[0m 54.399 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:54.811Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ab0ac81d49f109fed088efb4c33c8fa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KZlpyBf1-6ge5XBHFksR3iU15X9s03VYqwpw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ab0ac81d49f109fed088efb4c33c8fa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YtSJ1qgBrm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.475 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:54.937Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:55.085Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:55.085Z","userId":"685ea93e9f2707938b523fd6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.922 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:55.088Z"}
  console.log
    CSRF token generation: {
      sessionID: '751a032d374ae2fa6990e8f3f3b3abfa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lJS4Ry1t-tZfC8o2kScy6dvAM1kKXw4EXfuk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 751a032d374ae2fa6990e8f3f3b3abfa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tcwo0d6hZr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.180 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:55.178Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:55.319Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:55.320Z","userId":"685ea93f9f2707938b523fdc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.747 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:55.322Z"}
  console.log
    CSRF token generation: {
      sessionID: '3a487ad95c842992628b3366805ea957',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hJDSHi9m-X7_M63D4LrHT27-O_3nMmrq_LI8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3a487ad95c842992628b3366805ea957

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L2zENDkDSh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.106 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ea93f9f2707938b523fe2 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:55.329Z"}
[0mGET /api/v1/operators/685ea93f9f2707938b523fe2 [33m404[0m 106.057 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.249Z"}
  console.log
    CSRF token generation: {
      sessionID: '28393f570fd660f0107ea3fac918d416',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: A2nhsZTJ-ChMi--LwtLTPhKuhy1ZVV-olMQI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 28393f570fd660f0107ea3fac918d416

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aeeGKFshdW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.896 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.354Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:56.491Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:56.492Z","userId":"685ea9409f2707938b524006","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 137.452 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.499Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ddef79207499b9b8515ee371698cd964',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7ofgPEUr-M1g91Hb6skdKd-SbCQB6a12jXEo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ddef79207499b9b8515ee371698cd964

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SIrLjnlZ3t...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.815 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.587Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:56.726Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:56.726Z","userId":"685ea9409f2707938b52400c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.132 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.729Z"}
  console.log
    CSRF token generation: {
      sessionID: '0d6b4bab1cbe95eb956a7ae827bf6657',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LDuBmb9f-5sNdxnBeZ0oWWaDBiBDv0Cca86c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0d6b4bab1cbe95eb956a7ae827bf6657

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3PomujNNIp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.996 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.738Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'ddef79207499b9b8515ee371698cd964',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Addef79207499b9b8515ee371698cd964.VvXRXGiiLrR5t7NUzmGve1PlPpUaD%2Fox1Q%2FCPQZQhvI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMCEWJDX15DBDD2"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ea9409f2707938b524015","targetType":"operator","timestamp":"2025-06-27T14:22:56.901Z","userId":"685ea9409f2707938b524006","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 163.776 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:56.904Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:57.048Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMCEWJDX15DBDD2","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:57.049Z","userId":"685ea9409f2707938b524015","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.366 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:57.883Z"}
  console.log
    CSRF token generation: {
      sessionID: '9578e8e2f50acff1c274c97d461eb3e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: u58ql5rd-41SEUMArzxzYQsj7SOGwJ0sog1s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9578e8e2f50acff1c274c97d461eb3e9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L3OgqG6Aib...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.400 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:57.974Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:58.119Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:58.120Z","userId":"685ea9419f2707938b52403a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.618 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:58.122Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c85d26895eb770fb8d9c80cc9dba3568',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qE0ehMvy-A_R8lpt8sNNqu9fu5YAxF_1_IPU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c85d26895eb770fb8d9c80cc9dba3568

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: I6t37j0fCu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.279 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:58.210Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:58.351Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:58.352Z","userId":"685ea9429f2707938b524040","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.111 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:58.354Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cf2a433fbeffc213059cb570d08667eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AJV4B4PW-xACOtKmO9JLpknKNBLiq-4aES5o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cf2a433fbeffc213059cb570d08667eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wNGXttktRy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.007 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:58.361Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'c85d26895eb770fb8d9c80cc9dba3568',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac85d26895eb770fb8d9c80cc9dba3568.Y4zgw%2B%2FNr8iTo7sqRhJaQS08FJ9RIygd6cOZt9S27zw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 55.910 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.233Z"}
  console.log
    CSRF token generation: {
      sessionID: '24c2df821e1149b7042c65faa6712f3f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IQEqz1Nc-SSfZ9qpnAMti-yQ9UDQE3LaNB38

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 24c2df821e1149b7042c65faa6712f3f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6EZK2VNFq0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.533 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.348Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:59.513Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:22:59.513Z","userId":"685ea9439f2707938b524067","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.667 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.517Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f758d710a1f110187b5986dc6bd5e856',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BfIEUUSe-V9A8eDYN3iQ4dqnVc179n0j7XK4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f758d710a1f110187b5986dc6bd5e856

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ITuK7LWaBj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.383 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.621Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:22:59.761Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:22:59.762Z","userId":"685ea9439f2707938b52406d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.279 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.765Z"}
  console.log
    CSRF token generation: {
      sessionID: '26e4503598540788eb18ed8136029b97',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2It1TMAH-oLQ-Y4AvLt4jLRaETQxVeC-CqCs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26e4503598540788eb18ed8136029b97

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qiujvlJ0kg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.831 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:22:59.773Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'f758d710a1f110187b5986dc6bd5e856',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af758d710a1f110187b5986dc6bd5e856.nL4a%2BZtqztxyRL%2FjAlY5jQbZ%2BLO2JeHxye%2FhjKLRZoY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 55.749 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:00.632Z"}
  console.log
    CSRF token generation: {
      sessionID: '4706e3f103013c5a149876b206d8bfa2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jEAY0r85-MVNMl0rNGJjdY7yGHOTByqc9KS0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4706e3f103013c5a149876b206d8bfa2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2seJ2fTosM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.499 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:00.739Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:00.881Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:00.882Z","userId":"685ea9449f2707938b524094","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.122 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:00.885Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cc4b38016cc61e428feae691bf0638ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TD1ao5DD-_RhbRy8qDHVWQHGJOiW_BEL1wwA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cc4b38016cc61e428feae691bf0638ef

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lgWqr-LRop...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.784 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:00.995Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:01.143Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:01.143Z","userId":"685ea9449f2707938b52409a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.198 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:01.146Z"}
  console.log
    CSRF token generation: {
      sessionID: '8324227285da2d4504dc04b53ae85d9b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BUHfSL9L-SPcH6KhB_bNDY2T6uuO-mUvp26U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8324227285da2d4504dc04b53ae85d9b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BmILBVzjYA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.038 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:01.153Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'cc4b38016cc61e428feae691bf0638ef',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acc4b38016cc61e428feae691bf0638ef.k0cr5bB21PgZspvYMFEuYvt8ZufQ6EOCJ9s17TswdZQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 55.551 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.024Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cac2ec2c388a49557112823da8828b20',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6m3a37zh-IGVVcBFFSiAONptHsH8BMgI0M6Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cac2ec2c388a49557112823da8828b20

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: x4KpbOK09I...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.379 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.110Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:02.252Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:02.252Z","userId":"685ea9469f2707938b5240c1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.375 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.255Z"}
  console.log
    CSRF token generation: {
      sessionID: '12a010c011f34b03481c6e5da1ae5a08',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h8tGRT2q-JBa2kBaR8bMLWTUTysn03txle0s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 12a010c011f34b03481c6e5da1ae5a08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: phPFswk0OH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.805 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.343Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:02.515Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:02.515Z","userId":"685ea9469f2707938b5240c7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 172.445 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.518Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b9279e45f3b460b2f27665e2138ce44c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PDnqGKpK-YNp71Rzg2d3mZsgpxdn7mC3MBPU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b9279e45f3b460b2f27665e2138ce44c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Tk0-epyQC6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.016 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:02.526Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '12a010c011f34b03481c6e5da1ae5a08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A12a010c011f34b03481c6e5da1ae5a08.PmyukFviUhDSbgGq1RiwyCBz0StNTdqBrhOCF%2BVLx8Q',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m409[0m 82.200 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:03.413Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b629c7c6eb1fe6f120f2fac5d515ab8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ji1XYwje-s-K34emxwGmE7Zj5_-NN4fMLYOs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b629c7c6eb1fe6f120f2fac5d515ab8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pEAw579IA9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.250 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:03.526Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:03.664Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:03.665Z","userId":"685ea9479f2707938b5240ef","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.682 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:03.667Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e9d9a3ccb7594f501d8f81059378bb4a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: btUhHlAm-k5O7e255ByJnvwhqseI6RCoPZnI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e9d9a3ccb7594f501d8f81059378bb4a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: F0iRhvjwpK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.923 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:03.762Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:03.908Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:03.909Z","userId":"685ea9479f2707938b5240f5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.683 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:03.912Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e2127751885db2c7dbc6ea09cd01a2c8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LJJUH5JQ-mGPHz7Spjh8_f7aAlC1qcXngqzA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e2127751885db2c7dbc6ea09cd01a2c8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vEjvBwgDb3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.671 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:04.010Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:04.150Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:04.150Z","userId":"685ea9479f2707938b5240fb","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.583 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:04.153Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '8b629c7c6eb1fe6f120f2fac5d515ab8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8b629c7c6eb1fe6f120f2fac5d515ab8.BOc0JibfcH%2BcMoAQrUjSfoUGy3kyFFUBGHzFMLbfZi8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m403[0m 56.282 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.018Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ba02730c7092a109cde26e613b6edd3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B7b8iPdA-K9WX-9brQStwVNZxTzBjKMmFTFo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6ba02730c7092a109cde26e613b6edd3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: McvEfGAbew...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.089 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.106Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:05.250Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:05.250Z","userId":"685ea9499f2707938b524122","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.688 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.252Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c9cfb4afa3efefe66074311df2f59fed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N19S45hV-ualJbf43DkMX3qgQSb7YEOF15-g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c9cfb4afa3efefe66074311df2f59fed

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0lfp595CTx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.340Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:05.512Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:05.512Z","userId":"685ea9499f2707938b524128","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 172.813 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.515Z"}
  console.log
    CSRF token generation: {
      sessionID: '1831bbaa431f439eedf5802c95ba753f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PTQJ2fLV-h8aIcBAvoviFNlLd-aMyeI7L3ww

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1831bbaa431f439eedf5802c95ba753f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: iB8yTi62Cy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.956 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9499f2707938b52412e {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:05.604Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9499f2707938b52412e {
      sessionID: 'c9cfb4afa3efefe66074311df2f59fed',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac9cfb4afa3efefe66074311df2f59fed.RSBbyc9C%2BzuUsnvMndRNGvkDS6%2FjZJ%2BHA9Dd4%2FxFqVE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ea9499f2707938b52412e","targetId":"685ea9499f2707938b52412e","targetType":"operator","timestamp":"2025-06-27T14:23:05.743Z","userId":"685ea9499f2707938b524122","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ea9499f2707938b52412e [32m200[0m 140.361 ms - 442[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:06.561Z"}
  console.log
    CSRF token generation: {
      sessionID: '0da0220598c26edb07cb9f6d7f78b201',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: H9wKGXnw-k2E6exlGJCX3Fp6D9kUKhqQ5t0g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0da0220598c26edb07cb9f6d7f78b201

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IddQ0Di04a...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.111 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:06.651Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:06.810Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:06.810Z","userId":"685ea94a9f2707938b524154","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 158.577 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:06.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '821c69dd62951873525c3b7821acf3f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kHOXrk9K-08LXklvtLGkaghstVFnB_dZdtRQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 821c69dd62951873525c3b7821acf3f9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5JTtcrhrNC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.622 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:06.904Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:07.051Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:07.051Z","userId":"685ea94a9f2707938b52415a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.955 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:07.054Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b46273b62083491ac17b992eefd5a5d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8K9FTCbr-l3n1xHquwXk9POi9UJtShAMjlGY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b46273b62083491ac17b992eefd5a5d4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sPNnOaRKUU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.444 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea94b9f2707938b524160 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:07.148Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea94b9f2707938b524160 {
      sessionID: '821c69dd62951873525c3b7821acf3f9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A821c69dd62951873525c3b7821acf3f9.AZ5PUigaCViCGiKvMmdy6LX%2BbjRjkNJYRC5dXUif4ag',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ea94b9f2707938b524160","targetId":"685ea94b9f2707938b524160","targetType":"operator","timestamp":"2025-06-27T14:23:07.400Z","userId":"685ea94a9f2707938b524154","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ea94b9f2707938b524160 [32m200[0m 252.886 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:07.403Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:07.542Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:07.542Z","userId":"685ea94b9f2707938b524160","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.559 ms - 606[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.333Z"}
  console.log
    CSRF token generation: {
      sessionID: '190f5b2ca35be6befa2035f95276b1b5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ks9IdJTD-zyEEt4P-53B0CmDOvI-e6KVkU30

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 190f5b2ca35be6befa2035f95276b1b5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kOKgF1NZZ9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.572 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.427Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:08.570Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:08.571Z","userId":"685ea94c9f2707938b52418c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.932 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.574Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ba88741254c0749c944b4b1c0f99b477',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Sq4NRL4F-QH8uBzzwa4RYH3NUaQ1J7AThSaU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ba88741254c0749c944b4b1c0f99b477

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qxQXv2nXFG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.437 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.666Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:08.804Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:08.805Z","userId":"685ea94c9f2707938b524192","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.915 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.807Z"}
  console.log
    CSRF token generation: {
      sessionID: '8972ba60edf9648b0eb2cdd5c611e7a6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9X0mkk9l-JoCC_MkOZq7rQaDKdLEyu5e7D10

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8972ba60edf9648b0eb2cdd5c611e7a6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rur5qLr8KI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.872 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea94c9f2707938b524198 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:08.901Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea94c9f2707938b524198 {
      sessionID: 'ba88741254c0749c944b4b1c0f99b477',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aba88741254c0749c944b4b1c0f99b477.dWF1aGHoXjqGGbCr8p5OQjzgasrrD0fIh%2FKI8%2BzvQ1w',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ea94c9f2707938b524198","targetId":"685ea94c9f2707938b524198","targetType":"operator","timestamp":"2025-06-27T14:23:09.042Z","userId":"685ea94c9f2707938b52418c","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ea94c9f2707938b524198 [32m200[0m 142.199 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:09.045Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T14:23:09.074Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.990 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:09.887Z"}
  console.log
    CSRF token generation: {
      sessionID: '7c8224269cad4f1d0838c7fa49b347a6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: j9aJwZ5r-BCxr-1J3MtxdIu-r8lFogUVGEAI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7c8224269cad4f1d0838c7fa49b347a6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UBOXZeHXLI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:09.974Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:10.117Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:10.117Z","userId":"685ea94d9f2707938b5241bf","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.165 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:10.120Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aebdfea40b73adff61d36df6873d5dd5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: z98Bkfe7-TaCcFmWMb3ZA0nnURBf61RPsVJM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aebdfea40b73adff61d36df6873d5dd5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J9P9QoRcD5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.462 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:10.211Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:10.350Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:10.350Z","userId":"685ea94e9f2707938b5241c5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.388 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:10.353Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a19f8c2d7d7d2e13f4f34b471984388',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3mEawBaO-JoZSM1_4gvJTwkq7-KU6GsDzRc4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a19f8c2d7d7d2e13f4f34b471984388

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tXnhDTkARM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.140 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:10.438Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:10.590Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:10.591Z","userId":"685ea94e9f2707938b5241cb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.740 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea94e9f2707938b5241cb {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:10.593Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea94e9f2707938b5241cb {
      sessionID: '7c8224269cad4f1d0838c7fa49b347a6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7c8224269cad4f1d0838c7fa49b347a6.qW9ZRlCI3waW24K4kLL4i2zdBEjcDvC9pu%2BPoCavgAM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea94e9f2707938b5241cb [32m200[0m 160.368 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:11.567Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e47bb554d9b78a2b5e97ae3bd0713e5c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i1Vd4Zjj-cgw8B2-FjNItfcTLmiZjJy2zFfk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e47bb554d9b78a2b5e97ae3bd0713e5c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 98PVJbR_UA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.514 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:11.653Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:11.809Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:11.809Z","userId":"685ea94f9f2707938b5241f4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.004 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:11.812Z"}
  console.log
    CSRF token generation: {
      sessionID: '8cdc942a2f8ba112ed5d3125e406e707',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N0gWoYLa-viYrfpXPFLKtMdu3NXPJZfpQOSA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8cdc942a2f8ba112ed5d3125e406e707

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TMzBhrp8ob...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.129 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:11.908Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:12.046Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:12.046Z","userId":"685ea94f9f2707938b5241fa","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.386 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:12.049Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f02291dde47836463c9d7b711bedcd62',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XQHtcgGz-SGIpXIA1yz_FgpVkjVQOm15vnNU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f02291dde47836463c9d7b711bedcd62

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rBiKLjMgCk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.905 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:12.140Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:12.285Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:12.286Z","userId":"685ea9509f2707938b524200","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.842 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9509f2707938b524200 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:12.288Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9509f2707938b524200 {
      sessionID: 'e47bb554d9b78a2b5e97ae3bd0713e5c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae47bb554d9b78a2b5e97ae3bd0713e5c.0v3%2BCC6p5i%2BNvOfKlXBfFhpZSlkOHE5t0s6NOvcL0BE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9509f2707938b524200 [32m200[0m 114.028 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.232Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef4e4c6efddb53558d5a7ce807c035fb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xRzpxin4-SN1Nxd5jq_ZRrzArnms_IKaPypg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef4e4c6efddb53558d5a7ce807c035fb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gWYZ-AG20n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.510 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.323Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:13.461Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:13.461Z","userId":"685ea9519f2707938b524229","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 137.798 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.463Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b8834977e4087e0f7cd1ec5365f133e7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YUkgf8Lv-ab4K2eSLoTryMOOvmRu8amI0YLQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b8834977e4087e0f7cd1ec5365f133e7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J8pE26Sv-g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.167 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.552Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:13.695Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:13.695Z","userId":"685ea9519f2707938b52422f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.074 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.698Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ff0d105e6c0e71d5d9cf64c495a8c870',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: imaBRnfn--bug3-NSQRKejH0G9h5_8xmDQJI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ff0d105e6c0e71d5d9cf64c495a8c870

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pOlPQfjKLw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.142 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9519f2707938b524235 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:13.787Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9519f2707938b524235 {
      sessionID: 'b8834977e4087e0f7cd1ec5365f133e7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab8834977e4087e0f7cd1ec5365f133e7.a2Ccu%2FCqEKPh6IjhB3mUgn2nMW6H0V0bZBUV0%2BB2t3U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ea9519f2707938b524235","targetId":"685ea9519f2707938b524235","targetType":"operator","timestamp":"2025-06-27T14:23:13.924Z","userId":"685ea9519f2707938b524229","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ea9519f2707938b524235 [32m200[0m 136.784 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:14.730Z"}
  console.log
    CSRF token generation: {
      sessionID: '200582a9b224f51f6836cf0c21ac0432',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oUx8vbXv-UfZiegxDnsuP01p4MEfHkBUrrWs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 200582a9b224f51f6836cf0c21ac0432

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gwAlcrsfYy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.501 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:14.836Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:14.971Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:14.971Z","userId":"685ea9529f2707938b52425b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 135.875 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:14.974Z"}
  console.log
    CSRF token generation: {
      sessionID: '8754c8d836954cb426b70a59b8bb4578',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vEQjKidq--v_pYctBt2b1lCqrCqEAvnFGx4Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8754c8d836954cb426b70a59b8bb4578

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: m-Q4OGFZ4G...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.079 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:15.064Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:15.238Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:15.239Z","userId":"685ea9529f2707938b524261","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 174.779 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:15.242Z"}
  console.log
    CSRF token generation: {
      sessionID: '84de14412dee1cfb9909737a159b2336',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sj0RIMlJ-lysgZHDrV1t3vXFYzgQvNxl6tiI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 84de14412dee1cfb9909737a159b2336

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: piyXBi-mfI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.712 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9539f2707938b524267 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:15.333Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9539f2707938b524267 {
      sessionID: '8754c8d836954cb426b70a59b8bb4578',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8754c8d836954cb426b70a59b8bb4578.zLansTVlMXU%2FzMJdh%2FEfm8u6UFA%2FK3UwETaQfvQ27C0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9539f2707938b524267 [33m409[0m 136.993 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.270Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6dcf947254264b8416dc575aed003c6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ktyx8WkA-sSeTRf929uON44GuFkCE79xjRiw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6dcf947254264b8416dc575aed003c6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _hMRpyoL3x...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.536 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.365Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:16.517Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:16.517Z","userId":"685ea9549f2707938b52428d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.539 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.520Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd57caf8dee27068cc53c48dd5d6f7b5f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HsNRFbG7-4mhEFEGdv-xdcLu5ZkcAYJLy6fg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d57caf8dee27068cc53c48dd5d6f7b5f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bKCFM_M74v...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.791 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.642Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:16.780Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:16.781Z","userId":"685ea9549f2707938b524293","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.288 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.783Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cc2185f1c99e186737b028452a6f051',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1uaUhhHv-nYjdag-nPBCdOLbXJnz72CNLeUk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9cc2185f1c99e186737b028452a6f051

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6KvymDOGAd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.718 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ea9549f2707938b524299 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:16.884Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9549f2707938b524299 {
      sessionID: 'd57caf8dee27068cc53c48dd5d6f7b5f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad57caf8dee27068cc53c48dd5d6f7b5f.YjU64uRx3%2F%2B%2BMXFe1sHyMnH0SyTadaNsozqBestfphM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"7","12":"0","13":"7","14":"9","15":"3","16":"8","17":"b","18":"5","19":"2","2":"5","20":"4","21":"2","22":"8","23":"d","3":"e","4":"a","5":"9","6":"5","7":"4","8":"9","9":"f","timestamp":"2025-06-27T14:23:17.040Z"}
[0mDELETE /api/v1/operators/685ea9549f2707938b524299 [32m200[0m 156.446 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:17.864Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2af2eaa9e3ff1eaa4516a1806c3e818',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9RMGO0j7-ofEuXffE_5dKraL-bbDbHwl1AfA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b2af2eaa9e3ff1eaa4516a1806c3e818

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GDCoV4Cue-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.776 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:17.984Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:18.123Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:18.124Z","userId":"685ea9559f2707938b5242c0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.679 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:18.126Z"}
  console.log
    CSRF token generation: {
      sessionID: '5479c709244bc5bc3b97d781acc13c3e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PxUxbkhY-0CseahmdNH3C9U-TXnxQnkbMV50

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5479c709244bc5bc3b97d781acc13c3e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: epfQUpaqy1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.927 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:18.215Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:18.356Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:18.356Z","userId":"685ea9569f2707938b5242c6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.461 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:18.358Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e46f40d7be221c6205f0f858aa986b82',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rvmkB0Iu-f9F_ecRxeIXFDDsR0Hr83K7dvrs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e46f40d7be221c6205f0f858aa986b82

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1ZBoYk14AU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.074 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ea9569f2707938b5242cc {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:18.478Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9569f2707938b5242cc {
      sessionID: '5479c709244bc5bc3b97d781acc13c3e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5479c709244bc5bc3b97d781acc13c3e.%2BGwFNusvPItHstivbEF%2BXnRcst7tXykiCS9CqqgTTAM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ea9569f2707938b5242cc [33m400[0m 110.886 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:19.396Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6a70f70c4c0bca5755d3fb4c93f85f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NPGtbISJ-fpgpRbtI4MJGm2Odye_LWAVhz4M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6a70f70c4c0bca5755d3fb4c93f85f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: F5cM37lWLU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.399 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:19.486Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:19.628Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:19.629Z","userId":"685ea9579f2707938b5242f2","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.944 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:19.631Z"}
  console.log
    CSRF token generation: {
      sessionID: '13b92ea60b705b3c8abfffe9a7d38dfb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: c8FavtdR-XtaDiDz7l1qWSTfPiupJaUt2k8M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 13b92ea60b705b3c8abfffe9a7d38dfb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Q4EoyWTScV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.627 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:19.725Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:19.864Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:19.864Z","userId":"685ea9579f2707938b5242f8","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.941 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:19.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '16bc09a5ab27dbe655c47be826fb69a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: R0SMNEUR-WUkcuQhe2LO13Lr21hp2OtNv86M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 16bc09a5ab27dbe655c47be826fb69a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KFqRsXyUdR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.450 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:20.052Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:20.187Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:20.187Z","userId":"685ea9589f2707938b524300","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 135.067 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/685ea9579f2707938b5242fe {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:20.190Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9579f2707938b5242fe {
      sessionID: 'b6a70f70c4c0bca5755d3fb4c93f85f8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab6a70f70c4c0bca5755d3fb4c93f85f8.yWXDQ%2B82Cf8l%2FAaaBrr0bwR%2BI7MFdoqfeg72%2BpR97Uo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ea9579f2707938b5242fe [33m403[0m 54.601 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.047Z"}
  console.log
    CSRF token generation: {
      sessionID: '03afbfee784c5a84fcf65f8c2b1bd396',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xzQ0gUiv-slqr5TJHznL2DYwPtpPHQDPaG3U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 03afbfee784c5a84fcf65f8c2b1bd396

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KjOZkSHNhZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.241 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.133Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:21.271Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:21.272Z","userId":"685ea9599f2707938b524327","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.608 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.274Z"}
  console.log
    CSRF token generation: {
      sessionID: '479ab5696f16bc6e37c5e9794ea3da3e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: swU0qe4z-lgw8pCKHJo7FyX-kj2xIGiY0DHY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 479ab5696f16bc6e37c5e9794ea3da3e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PjO2khrbqw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.117 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.385Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:21.534Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:21.535Z","userId":"685ea9599f2707938b52432d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.951 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.537Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd055fb768fd861c2be547f9293573e68',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P0VVBuuF-mQOkGriMr36mslOac-8nfZNpW6w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d055fb768fd861c2be547f9293573e68

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rg9iTPGBzN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.575 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ea9599f2707938b524335 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:21.622Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9599f2707938b524335 {
      sessionID: '479ab5696f16bc6e37c5e9794ea3da3e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A479ab5696f16bc6e37c5e9794ea3da3e.4Sb74YYRgxDKFOut%2BkEBtOZPOWz9HxgNT3pQlC2X4lk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ea9599f2707938b524335 [33m404[0m 80.135 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:22.502Z"}
  console.log
    CSRF token generation: {
      sessionID: '42c22b684a6a4468463df911f2615473',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MeP2Z1VL-ERPxPt3nMomQQLupfM1YKwPIRwE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 42c22b684a6a4468463df911f2615473

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9dTUK3kG1q...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.354 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:22.595Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:22.740Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:22.741Z","userId":"685ea95a9f2707938b524358","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.620 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:22.745Z"}
  console.log
    CSRF token generation: {
      sessionID: '1c0d1598026a6b573f0ad954afbb5405',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: USjt49ag-Arjf8Nd-O8IFyiyzlPtEyYRRYaQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1c0d1598026a6b573f0ad954afbb5405

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WMAONebJMv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.092 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:22.832Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:22.974Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:22.974Z","userId":"685ea95a9f2707938b52435e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.467 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:22.977Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b66bff794f511515036e48769c1b9a9d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qpbjrtPJ-DWgOZLzxQEWARhAErXiHY9q1Hr8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b66bff794f511515036e48769c1b9a9d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: i8tVuhpI8N...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.421 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ea95a9f2707938b524364/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:23.072Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea95a9f2707938b524364/reset-pin {
      sessionID: '1c0d1598026a6b573f0ad954afbb5405',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1c0d1598026a6b573f0ad954afbb5405.Xfn3udC6Y2QxrtH9pqviGUyRR%2FoPEmNZy092iBUQY4g',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"7","12":"0","13":"7","14":"9","15":"3","16":"8","17":"b","18":"5","19":"2","2":"5","20":"4","21":"3","22":"5","23":"8","3":"e","4":"a","5":"9","6":"5","7":"a","8":"9","9":"f","timestamp":"2025-06-27T14:23:23.240Z"}
[0mPOST /api/v1/operators/685ea95a9f2707938b524364/reset-pin [32m200[0m 167.845 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:23.247Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:23.391Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-27T14:23:23.391Z","userId":"685ea95a9f2707938b524364","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.528 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.194Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c6ec603e9be4fd60f62256cba0cfdcb7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eyEbllet-5_06HxjG9pYPxdNkf-NmX-1ZTzs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c6ec603e9be4fd60f62256cba0cfdcb7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gaKNqyz34L...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.866 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.282Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:24.431Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:24.432Z","userId":"685ea95c9f2707938b52438d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.335 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.434Z"}
  console.log
    CSRF token generation: {
      sessionID: '7835b2a34afd0b274aa399da877f37dc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2ARjeX5l-Xtyj9UUXZ3J9TOOiXNVSI_3BgEM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7835b2a34afd0b274aa399da877f37dc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jnaYhod0da...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.324 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.523Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:24.660Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:24.660Z","userId":"685ea95c9f2707938b524393","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 137.446 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.663Z"}
  console.log
    CSRF token generation: {
      sessionID: '5bcc9991e466d2669e2515fc1e4424e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hDG1kcs1-saZOdoDqYzKL56u2BpLCDkdvIKI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5bcc9991e466d2669e2515fc1e4424e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hN-niq3v8_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.308 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ea95c9f2707938b524399/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:24.786Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea95c9f2707938b524399/reset-pin {
      sessionID: '7835b2a34afd0b274aa399da877f37dc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7835b2a34afd0b274aa399da877f37dc.RC2yqi6%2F81i2O0O7PKGm%2BamyxPCwYsKHVDfXUyIm3Mo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"7","12":"0","13":"7","14":"9","15":"3","16":"8","17":"b","18":"5","19":"2","2":"5","20":"4","21":"3","22":"8","23":"d","3":"e","4":"a","5":"9","6":"5","7":"c","8":"9","9":"f","timestamp":"2025-06-27T14:23:24.952Z"}
[0mPOST /api/v1/operators/685ea95c9f2707938b524399/reset-pin [32m200[0m 166.211 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:25.789Z"}
  console.log
    CSRF token generation: {
      sessionID: '14e16990e9f1c01ef7a252d362d5cdea',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IMScZsie-vp_C3PdRdQzL6MbfO1SaeZYTib8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 14e16990e9f1c01ef7a252d362d5cdea

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7-efhyXrV5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.005 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:25.885Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:26.025Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:26.025Z","userId":"685ea95d9f2707938b5243c0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.168 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:26.028Z"}
  console.log
    CSRF token generation: {
      sessionID: '0c35996734304e1f191c58c6431d1ac2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cwGmx5NR-CZ-d2rxhJh6kG6jTFmiSimd06Y4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0c35996734304e1f191c58c6431d1ac2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4LeSRrZ2KV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.342 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:26.116Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:26.262Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:26.262Z","userId":"685ea95e9f2707938b5243c6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.376 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:26.267Z"}
  console.log
    CSRF token generation: {
      sessionID: '03109991eb219bc70b46749713ece669',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lQMDdNme-g62-bjCdsDqofH_PckdjSQpbmK8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 03109991eb219bc70b46749713ece669

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ma3qFe7k1F...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.669 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:26.516Z"}
[0mGET /api/v1/operators/available [32m200[0m 84.159 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:27.429Z"}
  console.log
    CSRF token generation: {
      sessionID: '510e924bc2f5400a08e26fc4d040493d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Jy9oChmf-3yX2iWyfcC493gfie6IRpPsbxBs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 510e924bc2f5400a08e26fc4d040493d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Oq92ZUvHCR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.594 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:27.522Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:27.669Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:27.669Z","userId":"685ea95f9f2707938b5243f6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.442 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:27.672Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad18130850e1e0386e7696b32146250e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UoSm1c7P-HGciIwjr3gb_jK9jiMlqg6n_lpA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad18130850e1e0386e7696b32146250e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QyqxIZE3sG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.527 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:27.761Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:27.900Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:27.901Z","userId":"685ea95f9f2707938b5243fc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.227 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:27.903Z"}
  console.log
    CSRF token generation: {
      sessionID: '44cd582c75cb0d1bb8fa718db26fd377',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CsjC3iA6-tnnQdvlkDZRIAh-J2p_9a3AvmvE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 44cd582c75cb0d1bb8fa718db26fd377

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3mYZbIuU_A...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.157 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:28.165Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 80.411 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.071Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dae081eefd590e1d6f9c906f33883899',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XWFP36iR-A3Adx47DazZRs9fO7SftG8tcePg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dae081eefd590e1d6f9c906f33883899

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: o6HHzEI5FF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.559 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.164Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:29.323Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:29.324Z","userId":"685ea9619f2707938b52442c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.971 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.327Z"}
  console.log
    CSRF token generation: {
      sessionID: '497e661de61d0190cb13cf250f2ebed8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 79nCAd5W-DbUQgwuTxZACS8st-Xw72RqJVaI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 497e661de61d0190cb13cf250f2ebed8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: q6AAR7rOO9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.933 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.417Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:29.559Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:29.560Z","userId":"685ea9619f2707938b524432","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.996 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.565Z"}
  console.log
    CSRF token generation: {
      sessionID: '79c55a4ed90a891ff688e0d901f089af',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oFePD5GP-wyX9y4n9UvzZnXEVC1kYmMoSbNY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 79c55a4ed90a891ff688e0d901f089af

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dAYia7iTRV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.947 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:29.824Z"}
[0mGET /api/v1/operators/available [32m200[0m 79.931 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:30.721Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dda51c3a69f51e72f8bd450353a82e8c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rOlEwZ5U-QK7r156WyoKV6AuWJx5qxT1RTCY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dda51c3a69f51e72f8bd450353a82e8c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HQ2akZ6X0m...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.985 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:30.825Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:30.981Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:30.981Z","userId":"685ea9629f2707938b524462","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.290 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:30.984Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b9e7a2cd60ffbac979f17a7848bf361f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bgHlGZf4-fxJ8FVT1E1g8rZU9ORIm3P8AKZo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b9e7a2cd60ffbac979f17a7848bf361f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vCPqV1vU3I...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.289 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:31.076Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:31.220Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:31.221Z","userId":"685ea9629f2707938b524468","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.009 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:31.238Z"}
  console.log
    CSRF token generation: {
      sessionID: '1b52191bff7295f446bf1ed6d4c74fb1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XkU4tqUP-MwcVImrka6k0dkzYBH7x6cLDf5I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1b52191bff7295f446bf1ed6d4c74fb1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HbUpaiKnDw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.326 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:31.510Z"}
[0mGET /api/v1/operators/available [33m401[0m 1.157 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.322Z"}
  console.log
    CSRF token generation: {
      sessionID: '29f1b2146a80de0f06baae47075c74ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BJpObTIN-j7pJVnHpRwfBZi0fRtOS9VJCQZA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 29f1b2146a80de0f06baae47075c74ab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: R-1TuTxyaY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.044 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.411Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:32.546Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:32.546Z","userId":"685ea9649f2707938b524495","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 135.555 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.549Z"}
  console.log
    CSRF token generation: {
      sessionID: '521afb97e77b13e6f85f52271bfd55b5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 77zJphYr-PzXL7az_KgGo8TT6g9tSym1JRJU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 521afb97e77b13e6f85f52271bfd55b5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Jik1I52wNI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.653 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.648Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:32.785Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:32.785Z","userId":"685ea9649f2707938b52449b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 136.767 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.788Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e50e9937355f3faa83e29cba937225e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LLvrGkGR-gs4pesxFxzUht6gSKveCwPoTDPA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0e50e9937355f3faa83e29cba937225e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1wsfFguthv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.653 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9649f2707938b5244a1/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:32.871Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9649f2707938b5244a1/stats {
      sessionID: '521afb97e77b13e6f85f52271bfd55b5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A521afb97e77b13e6f85f52271bfd55b5.zCYWKZr%2FnNCGxTsKUe1qzc2bcY%2Fd6lO1CFegtMza%2BjY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9649f2707938b5244a1/stats [32m200[0m 113.650 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:33.788Z"}
  console.log
    CSRF token generation: {
      sessionID: '33f30bb89d82043603a1254e519e18a6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ewiJ07ow-aD746WYx-BQX_6hm_dvyQ9IxxNY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 33f30bb89d82043603a1254e519e18a6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RswL7xYjts...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.188 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:33.877Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:34.022Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:34.023Z","userId":"685ea9659f2707938b5244c6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.577 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:34.026Z"}
  console.log
    CSRF token generation: {
      sessionID: '69b1983f4f961fb98907905c87814eef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9UhUAqTv-coy7vSmcaZ8jtRLFdoacTdsYPeA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 69b1983f4f961fb98907905c87814eef

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rVe0XX5p19...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.142 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:34.113Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:34.253Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:34.253Z","userId":"685ea9669f2707938b5244cc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.909 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:34.256Z"}
  console.log
    CSRF token generation: {
      sessionID: '933b5534af00e08188fe3d8d30e3539f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GXqpQEOJ-StKFO431EpQG5ycGtllaIHome68

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 933b5534af00e08188fe3d8d30e3539f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vhNzW8itJv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.286 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9669f2707938b5244d2/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:34.344Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9669f2707938b5244d2/stats {
      sessionID: '69b1983f4f961fb98907905c87814eef',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A69b1983f4f961fb98907905c87814eef.glLKCbT5rK6CZCReZU5UN8kVBHO5oH0RneWD9lMnMW0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9669f2707938b5244d2/stats [32m200[0m 113.292 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.281Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b775b9336f83c7edc387045af065fc24',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PRSDmQ0R-NrFEzBhgq3a1OTyOCpf-Y-BhCOc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b775b9336f83c7edc387045af065fc24

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LIA3TXxgJr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.406 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.394Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:35.542Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:35.542Z","userId":"685ea9679f2707938b5244f7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.097 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.546Z"}
  console.log
    CSRF token generation: {
      sessionID: '3da5991789ef9429f8a2b754684df10b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Wt37kXty-2MNlmXU_wLfWKHRPlaZEJj5lfw8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3da5991789ef9429f8a2b754684df10b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RjjQOSM92U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.292 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.634Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:35.772Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:35.773Z","userId":"685ea9679f2707938b5244fd","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.123 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.776Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fdb7a07bb29c9252f1c29a45112497f0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OUJ1gNr5-5H1qnRDS91xSePtIp8sf6oCYJ1Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fdb7a07bb29c9252f1c29a45112497f0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LmTLCugnFP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.670 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9679f2707938b524503/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:35.865Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9679f2707938b524503/stats {
      sessionID: '3da5991789ef9429f8a2b754684df10b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3da5991789ef9429f8a2b754684df10b.yRy538SWX9KwqnYNaabv5uJl8xcgTw7OLsm72Ys5hus',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9679f2707938b524503/stats [32m200[0m 113.832 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:36.808Z"}
  console.log
    CSRF token generation: {
      sessionID: '4e619808e2a9fb8daaf44caf7b70c3c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Tq9LhAFV-1KtmrIDP3ySgiR2E8g8tbn-VOXs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4e619808e2a9fb8daaf44caf7b70c3c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pyrhyJv8D3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.357 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:36.898Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:37.038Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:23:37.038Z","userId":"685ea9689f2707938b524528","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.258 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:37.041Z"}
  console.log
    CSRF token generation: {
      sessionID: '90c416b41dbdfbf2c6ec2660530deaec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 88NfB4IX-mPL-ZX5dO2TbjPKXtYFsm-tMYY4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 90c416b41dbdfbf2c6ec2660530deaec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8RAtagMnkU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.396 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:37.135Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:23:37.279Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:23:37.280Z","userId":"685ea9699f2707938b52452e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.840 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:37.293Z"}
  console.log
    CSRF token generation: {
      sessionID: '590bc41a821fb156e5c7053e7f48a029',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uUDp1sfJ-TqhKmT5rZ-9XtETRY0cFEpyomqQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 590bc41a821fb156e5c7053e7f48a029

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WckKsmKtyr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.468 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ea9699f2707938b524534/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:37.386Z"}
  console.log
    CSRF check for: /api/v1/operators/685ea9699f2707938b524534/stats {
      sessionID: '90c416b41dbdfbf2c6ec2660530deaec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A90c416b41dbdfbf2c6ec2660530deaec.PE9wDWREw59PKBn1b8%2F1pv7KihNYUJOwRvejSBSKgfo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ea9699f2707938b524534/stats [33m400[0m 56.029 ms - 62[0m
PASS tests/integration/operator.test.js (59.257 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2118 ms)
      ✓ should filter by active status (1502 ms)
      ✓ should filter by on-shift status (1486 ms)
      ✓ should support pagination (2316 ms)
      ✓ should require authentication (1277 ms)
      ✓ should require operator management permissions (1582 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1496 ms)
      ✓ should allow operators to view their own profile (1445 ms)
      ✓ should prevent operators from viewing other operators (1421 ms)
      ✓ should return 404 for non-existent operator (1430 ms)
    POST /api/v1/operators
      ✓ should create new operator (1642 ms)
      ✓ should validate required fields (1348 ms)
      ✓ should validate email format (1400 ms)
      ✓ should validate shift time format (1388 ms)
      ✓ should prevent duplicate emails (1393 ms)
      ✓ should require operators.manage permission (1605 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1538 ms)
      ✓ should update password (1776 ms)
      ✓ should deactivate operator (1551 ms)
      ✓ should allow operators to update their own profile (limited fields) (1680 ms)
      ✓ should prevent operators from changing their own work station (1668 ms)
      ✓ should not allow updating operatorId (1499 ms)
      ✓ should validate email uniqueness on update (1540 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1594 ms)
      ✓ should prevent deleting operator with active orders (1532 ms)
      ✓ should require operators.manage permission (1647 ms)
      ✓ should handle non-existent operator (1457 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1691 ms)
      ✓ should clear login attempts on PIN reset (1596 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1637 ms)
      ✓ should respect limit parameter (1637 ms)
      ✓ should only include active operators (1653 ms)
      ✓ should require authentication (1602 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1469 ms)
      ✓ should update quality score (1490 ms)
      ✓ should update both stats in one call (1528 ms)
      ✓ should validate processingTime is positive (1445 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:39.241Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:40.268Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7BoUjTbs-zTj_1llrhY-Lvz4yr7lhL6_A-_Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.141 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:41.292Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aQRSO3xt-Zo0Jy6ZJcTveY4NgRDEaF91_QJY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.040 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:41.333Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 31.968 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:42.251Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7mRB61km-5HyPrC7mASMNrKdJK0ZQyktjHjw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.057 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:42.291Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 33.238 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:43.190Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pcEGOj6h-X9OxO5Yb989vlIoXxfz0ULDrTOI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.914 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:43.198Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 36.061 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:44.084Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1d5hngJq-d6T3IBoIcGo6c3Mb0MscZ7g-vxk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.762 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:44.125Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:44.126Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:44.128Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 30.955 ms - 58[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 33.779 ms - 209[0m
[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 31.882 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:45.035Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: u5XnWOZd-F1Mzptqkw0upw6Nyi5FA-MLsuu4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.902 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:45.046Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-98198243-e99e-4576-a35d-319173ee9228","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:45.253Z","userId":"685ea971d10b0bc4ccf9b273","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 207.507 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:46.144Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: A0oJai4q-H-YVWoO9DrAR8BLloMSZf2zIc24

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.659 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:46.162Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.493 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:47.045Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 589eTUWW-A1bcZsfzBLI1B12p2LSdIM623aw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.834 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:47.055Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-4e454c5e-9bf6-45e2-afb2-6714a784e81b","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:47.258Z","userId":"685ea973d10b0bc4ccf9b2be","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 203.066 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:47.262Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 81.817 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:48.211Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2PtTtiOS-6SucBNkdoB_UM1E_EcY5UMOqvo8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.866 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:48.251Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 54.615 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:49.178Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WLVH72KG-N2ryTNZigBmSTkqdffybBkUXZu0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.463 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:49.185Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-2f83f09d-cc06-4aab-9a68-569265744986","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:49.412Z","userId":"685ea975d10b0bc4ccf9b30e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 227.298 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:49.416Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-0d649bf0-01f0-4225-84fa-1634065f1ac0","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:49.635Z","userId":"685ea975d10b0bc4ccf9b316","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 219.016 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:49.638Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-35a31042-af96-4c97-a87b-86c724fe5143","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:49.892Z","userId":"685ea975d10b0bc4ccf9b31f","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 254.277 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:50.780Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cYIuA2sm-OIjegwcF6U_cFa-KhVnFduUAwbI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.197 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:50.821Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-af110fda-e06c-43b4-b655-b4ea05f4717d","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-27T14:23:51.043Z","userId":"685ea976d10b0bc4ccf9b34b","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 222.743 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:51.932Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sqAoXyef-tmDqZgWduLxK8bW7mtW6l6CPOfI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.204 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:51.940Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 106.906 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:52.891Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EjmtFhqe-i1j727fKuQgkTiaSzTF7gilfXWU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.200 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:52.930Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ba827ecd09759a302471df672d95907.VYe3CTamrm26kU935ymZuPgHgsF2bOqbEtZlPljiC4M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:23:53.021Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-27T14:23:53.021Z","userId":"685ea978d10b0bc4ccf9b396","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 91.056 ms - 560[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:53.873Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3RBrIncE--X4eJL7O99Zk1ODP5AXneKzsoQc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.930 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:53.941Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ba827ecd09759a302471df672d95907.VYe3CTamrm26kU935ymZuPgHgsF2bOqbEtZlPljiC4M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T14:23:54.058Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 117.356 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:54.918Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5u2UMsgp-g1vT7hTmRisL7BmUgTVsCcFuUW4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.141 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:54.926Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ba827ecd09759a302471df672d95907.VYe3CTamrm26kU935ymZuPgHgsF2bOqbEtZlPljiC4M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 53.907 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:55.841Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rI0HK1wn-FYgLR-fa5cxZzd-BFsRDtSxajy0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.169 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:55.880Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ba827ecd09759a302471df672d95907.VYe3CTamrm26kU935ymZuPgHgsF2bOqbEtZlPljiC4M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T14:23:55.962Z","userId":"685ea97bd10b0bc4ccf9b40a","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 82.629 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:56.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KlcLMgK9-77psMQpdm-758w35RGZvtKK_jYU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.356 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:56.827Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-9371ae31-f0eb-4098-86b3-3886754ad338","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T14:23:57.025Z","userId":"685ea97cd10b0bc4ccf9b433","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 197.729 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:57.885Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ufXZYAsV-ZGb0-_lskJ10YN1EclLnBxBH_7Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.765 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:57.894Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.750 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:58.745Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1X3Ro0bT-TYpoNhN8-wY87GpEMF7YMTZ53ig

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.914 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:58.754Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.851 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:59.627Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: juKFBcIL-hJonk3vYOr5gxhuFIbxeFyZHtXM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.586 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:23:59.636Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.958 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:00.488Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9ROwckwK-SmllMGmcXKFNb9wmE0qdd1Zvu3I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.618 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:01.433Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lnbWN2BY-SP4WPZHtb_bs3fIyaaTZQDuoVU8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.314 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:02.384Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dZ3TYWuy-6dDPLadVDq6ANGGtSibrwhNquUU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.323 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:02.458Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 32.880 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:03.370Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ba827ecd09759a302471df672d95907',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: R8c80Qeg-OEAc_th_lJk62LuXCqKmQ-AObY0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ba827ecd09759a302471df672d95907

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: syI6Ff__cm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.215 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:03.443Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 32.252 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (25.994 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1628 ms)
      ✓ should poll for OAuth session results with complete data structure (963 ms)
      ✓ should poll for OAuth login session results (939 ms)
      ✓ should return pending status for non-existent session (893 ms)
      ✓ should handle session polling race conditions (949 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1110 ms)
      ✓ should reject registration with malicious social data (898 ms)
      ✓ should prevent duplicate social account registration (1164 ms)
      ✓ should prevent duplicate email registration (963 ms)
      ✓ should generate unique usernames for social registrations (1608 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1151 ms)
      ✓ should reject customer registration with invalid affiliate ID (955 ms)
    Social Login
      ✓ should login existing affiliate with social account (986 ms)
      ✓ should login existing customer with social account (1044 ms)
      ✓ should return error for non-existent social account (923 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (969 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (1074 ms)
      ✓ should handle expired JWT tokens gracefully (855 ms)
      ✓ should handle invalid JWT tokens (886 ms)
      ✓ should validate required fields (859 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (943 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (952 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (989 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (1003 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:05.247Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:05.554Z"}
  console.log
    CSRF token generation: {
      sessionID: '95603a8bd2ea1548cba165e060f31aa3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vZwwDdvI-lO_wJRQTtDfyperBSH4oQYzQgss

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 95603a8bd2ea1548cba165e060f31aa3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k3xBWEEoHA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.296 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:06.295Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:06.441Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.046 ms - 544[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:06.885Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:07.273Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f69bde084b200948f53c221a7a43cb98',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Wfg6CtCY-_HHtRzjpaanMW2GXltkjXsazOoI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f69bde084b200948f53c221a7a43cb98

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fjn1lQ5ajq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:07.494Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T14:24:07.581Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 87.629 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:08.307Z"}
  console.log
    CSRF token generation: {
      sessionID: '6e01260ac783907e3171794cbddf9bc2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yjl35MSE-wmbvv2mmEYQCbQJS8S443T6dU2I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6e01260ac783907e3171794cbddf9bc2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Eh3VzIkU3D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.510 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:08.447Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-27T14:24:08.474Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 27.631 ms - 58[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:08.500Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:09.223Z"}
  console.log
    CSRF token generation: {
      sessionID: '26946885edbbb3ef392397ce2a43417e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AZ6SMSjd-BgKIPOjQfDWc57eYNfRg1lDdBr0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26946885edbbb3ef392397ce2a43417e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zyDe2CIqpV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.124 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:09.493Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.591 ms - 659[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:10.084Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:10.370Z"}
  console.log
    CSRF token generation: {
      sessionID: '284eea721dde4daf5840f85eb593611b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kRaZEVCw-KNLgfKsvcN5lDjh28b1Qkg6mhjw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 284eea721dde4daf5840f85eb593611b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CLCHDOl7yy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.059 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:10.618Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 138.758 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:11.480Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e8658243dc012a46130b4164d8b0c7df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oIG7PoB0-QlCtRW3cZ4ppNgidbQb5YCD0zrI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e8658243dc012a46130b4164d8b0c7df

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QqF5xW-fPR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.548 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:11.728Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:11.746Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 132.685 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:12.587Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f31aa38b6072f87bcf1cdcfcbc7538c0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tb6q6YGL-ZqvvhXAuN_NnnxU9qAnmB046qwM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f31aa38b6072f87bcf1cdcfcbc7538c0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FeYUJJM6Pt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.998 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:12.837Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 136.000 ms - 659[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:13.488Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:13.701Z"}
  console.log
    CSRF token generation: {
      sessionID: '99eafa8135f35dcf8ee1bb5f8123377f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: otB0Txzz-LOxYdxmhCr8mj5M2CFK5iBIfU2E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 99eafa8135f35dcf8ee1bb5f8123377f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kcDcl8GyUa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.482 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:13.839Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 27.676 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:14.585Z"}
  console.log
    CSRF token generation: {
      sessionID: '761f80205d6428117bb5724824fad37a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6TuSauya-VtqqV4mFo8OCpK1reYLALUQb2Tc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 761f80205d6428117bb5724824fad37a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zvSKpdpaeT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.387 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:14.807Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:14.946Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 139.215 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:14.949Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.375 ms - 129[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T14:24:15.079Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:15.704Z"}
  console.log
    CSRF token generation: {
      sessionID: '9169ec2996f8abbe3215c3b5d54e6cfc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ihb5dMMe-6ACSs3RlfGka9dArL77EKlXZUN4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9169ec2996f8abbe3215c3b5d54e6cfc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oby0l62Wz7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.412 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:15.847Z"}
[0mGET /api/v1/auth/verify [33m401[0m 2.464 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:16.579Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a31d872887167f852c383e779ad5bc6c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YcV5cT6f-WP8cTlqXuRm4XNzhA7GrLmHjpvc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a31d872887167f852c383e779ad5bc6c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZIm5qZT9e5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.293 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:16.716Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.173 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:17.432Z"}
  console.log
    CSRF token generation: {
      sessionID: '50cf294eb4ab461b038e89a5d8cfe109',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yy37v4j4-bxQRFRdru-dfSl1DtATk_uqIXH0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50cf294eb4ab461b038e89a5d8cfe109

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U48mI7AWV-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.149 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:17.651Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:17.796Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.264 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:17.799Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 121.492 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:18.648Z"}
  console.log
    CSRF token generation: {
      sessionID: '7048919d1c5c75261481659478fc4b17',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5J1onBPd-N4mFXWp6fzbFxxw8oAZqW9VjfQ8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7048919d1c5c75261481659478fc4b17

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MEaiabMH7R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.463 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:18.796Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.340 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:19.512Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e5ca618570c30830e29dfc0523909864',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QjNdmRNs-FVG6JN-UtZGU-XyLeANcb6UT5NI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e5ca618570c30830e29dfc0523909864

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Tv28iMdhMh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.141 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:19.765Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.102 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:20.520Z"}
  console.log
    CSRF token generation: {
      sessionID: '8375eea94f1bfff7b06064b6cee09751',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5lnGq71I-w-QHb8F6UfnXPSXsUoYl1IHd0q8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8375eea94f1bfff7b06064b6cee09751

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wyXAkX4tbO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.248 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:20.740Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:20.879Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 139.551 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:20.882Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '8375eea94f1bfff7b06064b6cee09751',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8375eea94f1bfff7b06064b6cee09751.p8M1dqFP%2BMTpvvV%2BySC%2F32CN%2F80JvuWs8oQ4VzLoBG0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 89.364 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:20.974Z"}
[0mGET /api/v1/auth/verify [33m401[0m 27.870 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:21.004Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.093 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:21.777Z"}
  console.log
    CSRF token generation: {
      sessionID: '166624ba0d79a7f9997ca15e6882883a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L8OMyA2O-HLA-HEqvJ_DMom-7TW67K0fWkFA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 166624ba0d79a7f9997ca15e6882883a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hvZDbiVtup...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.115 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.013Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:22.161Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.649 ms - 544[0m
  console.log
    Got refresh token: cfd54978fb994f75dd9c3493a45a8ff8dfd012a541b4a133d512219dba2b52c77285ff339fd482ce

      at Object.log (tests/integration/auth.test.js:805:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:819:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.175Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.177Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.179Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.180Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:22.182Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.695 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 31.208 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 30.057 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.740 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 119.551 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NWVhOTk1NmUzNzUwNzM3NWNkYmIzZCIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MTAzNDI2MiwiZXhwIjoxNzUxMDM3ODYyLCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.7cGn8vaMSAEHacaQvSsu7UsViwX4cKqbxB_wXOORCUs',
          refreshToken: '614ae8ab986311246cd2a1d43ac5ea59a8f801a75c1e20cb630b2633494efabce84325572b8b695f'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:821:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:23.030Z"}
  console.log
    CSRF token generation: {
      sessionID: '476ab7e1625b65beb3b94ee0e4dfb112',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FdxeO4g0-U8q3V8QASV9FcEkbgb-I7TMMsq4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 476ab7e1625b65beb3b94ee0e4dfb112

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6JprgjraXl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.325 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:23.254Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:23.401Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.308 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.505Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:24.651Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.527 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.654Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.178 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.685Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.389 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.714Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '476ab7e1625b65beb3b94ee0e4dfb112',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A476ab7e1625b65beb3b94ee0e4dfb112.MW9C%2FTMfI1cne0pdVNmywI2ZT5MByefdCiQkBKA3GlQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 93.935 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.810Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.386 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.842Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.949 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.873Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '476ab7e1625b65beb3b94ee0e4dfb112',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A476ab7e1625b65beb3b94ee0e4dfb112.MW9C%2FTMfI1cne0pdVNmywI2ZT5MByefdCiQkBKA3GlQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 92.733 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:24.968Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.569 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:25.720Z"}
  console.log
    CSRF token generation: {
      sessionID: '2dcaf484efec4733c01fb3d643a7dd6c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 62VPkreT-rk7r6L0I0MExgDwdJDlBns4KCD8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2dcaf484efec4733c01fb3d643a7dd6c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hkC844rSNh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.241 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:25.947Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:26.093Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T14:24:26.093Z","userId":"685ea9996e37507375cdbba5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.644 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:26.816Z"}
  console.log
    CSRF token generation: {
      sessionID: '406b64e7c610a91c09354303d2f016ff',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Cn9bx9fQ-eYEzC3myIqt28gBW49kJgYNUP8k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 406b64e7c610a91c09354303d2f016ff

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7J11OdUEdt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.574 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:27.034Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T14:24:27.146Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 112.521 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:27.866Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea0782d3c84c2404248839a7a3bf9830',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ohI92Twc-qrQJHdKushGd3UnFvWFxvhqF4ao

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea0782d3c84c2404248839a7a3bf9830

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zf-v1yzd1E...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.706 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:28.090Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T14:24:28.119Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.669 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:28.849Z"}
  console.log
    CSRF token generation: {
      sessionID: '2696aace060aa17246ba3003917a94e6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: taiVXtGv-1nBFVrlqX477_6moUm1h7NPws2s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2696aace060aa17246ba3003917a94e6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Myj3khinmb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.247 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:29.157Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T14:24:29.297Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T14:24:29.298Z","userId":"685ea99d6e37507375cdbc17","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.133 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:30.048Z"}
  console.log
    CSRF token generation: {
      sessionID: '9285b0f6fef90ccb362b60f39012af09',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6Eag21lr-xO5mXY9Mt1_hv2YhWfLg73H_62Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9285b0f6fef90ccb362b60f39012af09

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RKz7wNa1ht...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.476 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:30.375Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T14:24:30.482Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 108.085 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:31.212Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9ff057cbf22c7d2cfbcca3dda8fdb51',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VuUMoPCb-WuenvDmuePzx19ZEtVp63MXWn70

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9ff057cbf22c7d2cfbcca3dda8fdb51

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TpLNFTyhsm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.647 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:31.518Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T14:24:31.547Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.635 ms - 82[0m
PASS tests/integration/auth.test.js (27.772 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1749 ms)
      ✓ should fail with invalid credentials (1034 ms)
      ✓ should fail with non-existent username (916 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1146 ms)
      ✓ should login customer using emailOrUsername field with email (1110 ms)
      ✓ should login customer using emailOrUsername field with username (1107 ms)
      ✓ should prioritize emailOrUsername over username field (1113 ms)
      ✓ should return error with invalid emailOrUsername (883 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1119 ms)
      ✓ should fail with invalid token (874 ms)
      ✓ should fail with missing token (853 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1217 ms)
      ✓ should fail with invalid refresh token (864 ms)
      ✓ should fail with expired refresh token (1006 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1253 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1255 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2691 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1096 ms)
      ✓ should fail with invalid administrator credentials (1050 ms)
      ✓ should fail when administrator is inactive (982 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1199 ms)
      ✓ should fail with invalid operator credentials (1165 ms)
      ✓ should fail when operator is inactive (1057 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:33.368Z"}
(node:1623646) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:33.678Z"}
  console.log
    CSRF token generation: {
      sessionID: '19ab9df8a05d6da6dc339035edae56e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FfLK2Wdw-R70vNkccPvj2kMp7GrGDGdE-YVw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 19ab9df8a05d6da6dc339035edae56e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wckc1Hci91...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.929 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:34.488Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '19ab9df8a05d6da6dc339035edae56e4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A19ab9df8a05d6da6dc339035edae56e4.1HhSuKmDvy4BdQQ09wxI8MZBM5p7P4IbdrVGLAuiDx0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 239.747 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:35.612Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bd742eecf5da8fb1b672a3b81c40e04b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: x0ahoPP8-6qVJpJGyystOookk7SBo2NOiRqs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bd742eecf5da8fb1b672a3b81c40e04b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -v-LwslZ9u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.121 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:35.929Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'bd742eecf5da8fb1b672a3b81c40e04b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abd742eecf5da8fb1b672a3b81c40e04b.A1AX9mQie6xGPwqW6Z9Br2tDfubyZR928cDPLqVEZHg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 229.306 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:36.928Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e0535dace6a5770f98dbc0b4785cce5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nqzL5lSK-ajHIHxOy4NZmVPYMBBTtISS0Yz4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5e0535dace6a5770f98dbc0b4785cce5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nZPrPK5vhp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.063 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:37.189Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '5e0535dace6a5770f98dbc0b4785cce5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5e0535dace6a5770f98dbc0b4785cce5.DeXZ%2Fx6e0tN6Qhv7CerpMPJGU3AjDO5Och9OI7TKJt8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:130:15)

[0mPOST /api/v1/orders [33m400[0m 58.342 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:38.007Z"}
  console.log
    CSRF token generation: {
      sessionID: '825a62ad024ae05af6f7bb8fee57a893',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PrzJXmfr-q--vvLLP3CZCy59592z6nPaROoQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 825a62ad024ae05af6f7bb8fee57a893

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kS0p4I6Bm7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.400 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:38.266Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '825a62ad024ae05af6f7bb8fee57a893',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A825a62ad024ae05af6f7bb8fee57a893.81eu9478uYx9Lx84VxJoNlpGScSr6lsEj9O3ILIvA7I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:159:15)

[0mPOST /api/v1/orders [33m400[0m 114.826 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:39.129Z"}
  console.log
    CSRF token generation: {
      sessionID: '6d1ea4a8d059c51740ace4f2469dbfdd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gmHxin3T-Q4J1tDjLw-F3C-RybwfsV0FV5mI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6d1ea4a8d059c51740ace4f2469dbfdd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SsywSp8GNP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.364 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:39.417Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '6d1ea4a8d059c51740ace4f2469dbfdd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6d1ea4a8d059c51740ace4f2469dbfdd.q3%2B1Y%2FaIGl51iENUeJQmAtOCazqe1WI9YiltfYKMRpQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [33m403[0m 115.777 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:40.286Z"}
  console.log
    CSRF token generation: {
      sessionID: '06740e944a144606069e4b90e3797c92',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s3JJoObh-d01k9UitxKFyXO4oHK6GSqv0nA4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 06740e944a144606069e4b90e3797c92

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qlIQ4t-HMl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.068 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:40.537Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '06740e944a144606069e4b90e3797c92',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A06740e944a144606069e4b90e3797c92.EUgNm1WHLadpDQZnfip7JxXewgHOvJfVG1gMZ7LDarI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:105:15)

[0mPOST /api/v1/orders [33m400[0m 32.326 ms - 444[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:41.317Z"}
  console.log
    CSRF token generation: {
      sessionID: '7761909f96e04037e12e70de4a77e5a3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GViCIFLf-k46T5eYENxnx3mJIeKNdCSLcm68

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7761909f96e04037e12e70de4a77e5a3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xiaAvCeei3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.636 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:41.639Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 111.776 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:42.538Z"}
  console.log
    CSRF token generation: {
      sessionID: '74fecefeb86fff76b2b350b6588da00c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9h7ne5Es-LMm6IHsS88sHYlNrS9r8oVB5TNI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 74fecefeb86fff76b2b350b6588da00c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ViGLKduGzV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.908 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:42.825Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 110.684 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:43.683Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d9165745515a7e72a42b8a8accc0371',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gcaRc9ZT-NhIimaZmgE1zkRO3rqqxKd428OU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d9165745515a7e72a42b8a8accc0371

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BOcziMK9yw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.353 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:43.976Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 55.650 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:44.789Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f69f44ad904bed8619f646403624b45b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9NAI5jn2-oz02jK6xFxBxNls2BxKpaL5Uib4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f69f44ad904bed8619f646403624b45b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B6qZGzVNw_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.946 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:45.098Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 61.272 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:45.930Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb38909ce3a0debc046bd109d5213184',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zOjWq13H-rQUE0NsyP_xkPqOEd93puHZZz6Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb38909ce3a0debc046bd109d5213184

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: N5jWUL4fwS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.013 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:46.224Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'eb38909ce3a0debc046bd109d5213184',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aeb38909ce3a0debc046bd109d5213184.cdZmdDf4oAXjCSmZEavu%2FbYoazhVryQo5VcOx6v%2Fbmg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 147.910 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:47.170Z"}
  console.log
    CSRF token generation: {
      sessionID: '9ddc0eff5cedc6905b09ccd1cbaf9a9e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6hXcVlyW-QtkAlBHfK-lTMMNtBessNdHJBT8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9ddc0eff5cedc6905b09ccd1cbaf9a9e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wBCIpSithN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.848 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:47.498Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '9ddc0eff5cedc6905b09ccd1cbaf9a9e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9ddc0eff5cedc6905b09ccd1cbaf9a9e.i22ZgDzrTaZ2%2BAdnSSDpXq1QXhTzvJ0isG9x2%2F8Cha0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 145.181 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:48.426Z"}
  console.log
    CSRF token generation: {
      sessionID: '87271705ff7dbc1af8c32f526c015ce4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g1Fcm2jf-lB_hXwMvmxIG8cN8_z6XPQbbbmU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87271705ff7dbc1af8c32f526c015ce4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h1Z_712U5B...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.008 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:48.764Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '87271705ff7dbc1af8c32f526c015ce4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A87271705ff7dbc1af8c32f526c015ce4.tpqp2d5Ke6trGUiZKfAx%2BhWYsDjdXtwCIxw%2F833C0qs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 58.113 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:49.581Z"}
  console.log
    CSRF token generation: {
      sessionID: '88949220763e25d83eb22f06909558e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PBUkZuFC-QhedGQZwryZNQ7MMqkAfod6PmyY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 88949220763e25d83eb22f06909558e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Bq0RO_NJL0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.511 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:49.867Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '88949220763e25d83eb22f06909558e8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A88949220763e25d83eb22f06909558e8.Y1LH%2FHhg%2FRKGUYoxYJPSCy4BQ9uMDrnToKtTbG2ZpO0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 57.752 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:50.681Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b318aa459ffd4f8f3a18d31fc998f2a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0ZrUEKcp-nVoMMUlgzHJRdJ9j5459tymX9aM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b318aa459ffd4f8f3a18d31fc998f2a4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NT7z7deW8e...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.217 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:50.994Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'b318aa459ffd4f8f3a18d31fc998f2a4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab318aa459ffd4f8f3a18d31fc998f2a4.nZTRNv1ooiLWWLxI0v%2F63GeZZ58RaFID1ZEc0x3he94',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 56.823 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:51.811Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd0bd8e043f3a0041fbbf70d6de515004',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kHrppJjy-DqsUg7MRF_-mAulXSGTqCqxSspE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d0bd8e043f3a0041fbbf70d6de515004

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _b_lfL6uVn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.609 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:52.113Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'd0bd8e043f3a0041fbbf70d6de515004',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad0bd8e043f3a0041fbbf70d6de515004.CBkZn4pWqq2Q9lurCLEDM59I9vb3QbF8nG6BanC5Zl8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 144.847 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:53.037Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a3b2579b0b4c6c4d311793e69fcc1b54',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2VESI03G-Yya9OgRYTrjuYe9WG4GGb0tdeJM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a3b2579b0b4c6c4d311793e69fcc1b54

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ny-lrETy5L...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.470 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:53.322Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'a3b2579b0b4c6c4d311793e69fcc1b54',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa3b2579b0b4c6c4d311793e69fcc1b54.nDlKpGeaN6Px%2Bh%2BXfTofw39GZPDxsErtU%2Bcyo%2FCcejg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 144.822 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:54.219Z"}
  console.log
    CSRF token generation: {
      sessionID: '61680229d8fe16765472cb3d0fb82f15',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uwxXt8mQ-1nWC06iCik3L_ObjjpSs78YSMMg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 61680229d8fe16765472cb3d0fb82f15

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xQvKko8NnW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.353 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:54.538Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '61680229d8fe16765472cb3d0fb82f15',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A61680229d8fe16765472cb3d0fb82f15.cT93Iq8IIyqHWwMH74YITKiTmwyZcDu9TQP%2BcMSweQ8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 58.574 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:55.398Z"}
  console.log
    CSRF token generation: {
      sessionID: '68eb056a85309656133769be8ead547b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Mk8ZCNHb-f7EfYZICX-3innBUPrhgHQHwfw0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 68eb056a85309656133769be8ead547b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0jRhVQmc8t...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.521 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:55.728Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '68eb056a85309656133769be8ead547b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A68eb056a85309656133769be8ead547b.VXNKcQmyQfG%2F62PaNnkNtxE%2F4Kc0gsIGXtX8jtNJoQU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 111.096 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:56.628Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dce129edf4970225b626dac07be15f41',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: glba1Rc9-9HPd6d6EEt7cc4rJCfAOqpuGMrs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dce129edf4970225b626dac07be15f41

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZTCVH25hv_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.457 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:56.923Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'dce129edf4970225b626dac07be15f41',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adce129edf4970225b626dac07be15f41.9fXkWD3m5F9fJomc2uIH9F4E%2BaBxiokCkyWzejEdyXM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 125.430 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:57.859Z"}
  console.log
    CSRF token generation: {
      sessionID: '816f83f4d527ff8a6cce0deaf813e1ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cnoQDtDG-7-Q18t8qjYW2ZrWfb9wpMANQpK4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 816f83f4d527ff8a6cce0deaf813e1ec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U0MUMS5tAN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.989 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:58.244Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '816f83f4d527ff8a6cce0deaf813e1ec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A816f83f4d527ff8a6cce0deaf813e1ec.aU4OLOLe2bTn3%2BdfFo9L1ARt2vlic2aaOeZxIVgjCiY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 118.099 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:59.117Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ecac59e34e3ab930421716fd5e5fe4b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ezn0Glsb-paZVeBtT044Q4leLQlmg7JTspkM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ecac59e34e3ab930421716fd5e5fe4b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WPBo8lMJeJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.433 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:24:59.427Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '4ecac59e34e3ab930421716fd5e5fe4b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4ecac59e34e3ab930421716fd5e5fe4b.vjqrq3cVQrL6pPeTzZWHcfH6COOIF%2BG37hnOHGoYo48',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 152.022 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:00.360Z"}
  console.log
    CSRF token generation: {
      sessionID: '48123279a5097165ae198c5aa2e8f89f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ok3uZL6N-sG8OoG8FKiZehZRRQIVYcRPFWHc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 48123279a5097165ae198c5aa2e8f89f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nbodH6TFxE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.069 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:00.679Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 87.862 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:01.531Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c9b333e2a33181f92fd883c607a560b5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JX7Shxha-QQJItLIqgMyYiyhemRYl-D8t9AA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c9b333e2a33181f92fd883c607a560b5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J4dpocXqHw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.239 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:01.852Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 87.320 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:02.707Z"}
  console.log
    CSRF token generation: {
      sessionID: '95d403d9239b14d72ef3dc2af2d9198d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TAHC5bUa-kCQffi5kLB5cE-OpKHB2B1ErhLw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 95d403d9239b14d72ef3dc2af2d9198d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HUCnbcpKTz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.685 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:03.007Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 96.798 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:03.887Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5bd454d4b80fc728b2af97a0e462ecd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Bm4yVBAR-Fg-tbjiDhcmEdDA_svNxoN64dtM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5bd454d4b80fc728b2af97a0e462ecd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pR8hn7LpqZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.777 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:04.198Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 28.420 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:04.982Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b7cc87f318f735955a66eb723f7b66d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OBisOHtE-3b4wrwkPngSEljo7B3zcVPA0zrA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b7cc87f318f735955a66eb723f7b66d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _32KC_TvJ7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.818 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:05.274Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'b7cc87f318f735955a66eb723f7b66d6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab7cc87f318f735955a66eb723f7b66d6.NL%2FMKnq%2BNTlkNXYXm%2BN1HPea6WwG4HDka20GgDW0NWU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 92.662 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:06.146Z"}
  console.log
    CSRF token generation: {
      sessionID: '438ea2acf1dc964409c30440fd2afa5a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7hLQ9Wd7-WZ9ZzqlC251IXGRIPVF0HPsLebQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 438ea2acf1dc964409c30440fd2afa5a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EWUbpcLdBc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.122 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:06.435Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '438ea2acf1dc964409c30440fd2afa5a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A438ea2acf1dc964409c30440fd2afa5a.NVhn6k7DH8%2BeHB6T2rKUQo76eyNX7GEwtyZJPtecVKM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 87.868 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:07.281Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ccab6d64263c9de8ce020b92b3251a8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2fDLr5eY-ZSbDi1xEXEmzTJTF6PIMek_vwag

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ccab6d64263c9de8ce020b92b3251a8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2qM744pJDV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.904 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:07.631Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '8ccab6d64263c9de8ce020b92b3251a8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ccab6d64263c9de8ce020b92b3251a8.52l7pUsBHOCsGuOUm99OrUeu6ShdQRSbJyB4t1vs%2BXo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 57.870 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:08.445Z"}
  console.log
    CSRF token generation: {
      sessionID: '84efde8c06a4353ec2d0ec84a720a834',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ptFePLFr-FWrKMXF38OoSi897GfyTLye-FEY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 84efde8c06a4353ec2d0ec84a720a834

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2B6nHofNNe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.350 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:08.766Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '84efde8c06a4353ec2d0ec84a720a834',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A84efde8c06a4353ec2d0ec84a720a834.lNL%2FX%2BVoufjCesJUIE3xHVO3mSEVuOSz8blAatMwVow',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 89.239 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:09.615Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a490539a4e1f735c2efa2012da628a32',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7CvLs4mk-rMAwZvd6CCuv8uNre5xA8uSFc5E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a490539a4e1f735c2efa2012da628a32

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Z2Uukg7k-6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.057 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:09.943Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 139.061 ms - 552[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:10.845Z"}
  console.log
    CSRF token generation: {
      sessionID: '2be3beaf52abac04887708bb2853bd09',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XkHdIEJw-j2-q_-sezjfwhQgdLLFw4WWSGB0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2be3beaf52abac04887708bb2853bd09

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tljvvDhQI2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.224 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:11.175Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 111.089 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:12.038Z"}
  console.log
    CSRF token generation: {
      sessionID: '50e8e4dcc5b351b01d5598f9cab2c886',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DC8wDjuO-dfv7kdVsfjclhK4H1G5oo3AeffE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50e8e4dcc5b351b01d5598f9cab2c886

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EtVJPCJcf5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.887 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:12.367Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 111.236 ms - 945[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:13.242Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a65366b5167085bf7d918e275beb645b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TTJho7sq-p35vgEzHC69KU6rDbZdchp9nfmI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a65366b5167085bf7d918e275beb645b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gS5TS4pzc2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.690 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:13.566Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 56.186 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:14.364Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b72d5e67385615b3966e9942d3e1e38c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 09FoUZga-m3DDviT6U3ZIZjg5Gyohce199sc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b72d5e67385615b3966e9942d3e1e38c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _quJ066apn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.999 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:15.027Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'b72d5e67385615b3966e9942d3e1e38c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab72d5e67385615b3966e9942d3e1e38c.1yG8qIzE2PbCwFnQ6uqkZ%2BAYfSX1QOD00aHMGpTO%2Bt0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 238.595 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:16.131Z"}
  console.log
    CSRF token generation: {
      sessionID: '2fbc7c8f2a9f5a55be11edff7fc28e2c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OqKod6Ji-RQvh8xi_MGm7A0nfpkyK9RnbH_A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2fbc7c8f2a9f5a55be11edff7fc28e2c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pjtTbflgcE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.090 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:16.880Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '2fbc7c8f2a9f5a55be11edff7fc28e2c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2fbc7c8f2a9f5a55be11edff7fc28e2c.C7cNtZDcfxWHcRAGDPHUmCux%2F93cRDSkSSyz2iXLZuM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 230.446 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1139:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:18.059Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e9a8852678f8229e7353b1d26f8cb84d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BfMc9RX2-TF89ixQA96q5C-_v5sIUuV8feM0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e9a8852678f8229e7353b1d26f8cb84d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YNmcedOvao...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.662 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:18.800Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e9a8852678f8229e7353b1d26f8cb84d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae9a8852678f8229e7353b1d26f8cb84d.QDHPuw02CkCa4GnWeWh8c78odo2hAc1EuRBCtMuxUaI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-0',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-0

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test0 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 230.489 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:19.120Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e9a8852678f8229e7353b1d26f8cb84d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae9a8852678f8229e7353b1d26f8cb84d.QDHPuw02CkCa4GnWeWh8c78odo2hAc1EuRBCtMuxUaI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-1',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-1

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test1 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 232.461 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:19.437Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e9a8852678f8229e7353b1d26f8cb84d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae9a8852678f8229e7353b1d26f8cb84d.QDHPuw02CkCa4GnWeWh8c78odo2hAc1EuRBCtMuxUaI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-2',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-2

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test2 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 232.052 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:20.647Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a95b4dc21e66150a811e115b6a638a5c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WK3L6WrX-l--AQmGsU0hnbpq3i1Z42e76cQA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a95b4dc21e66150a811e115b6a638a5c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Q24gt6xXZ-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.739 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T14:25:21.364Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'a95b4dc21e66150a811e115b6a638a5c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa95b4dc21e66150a811e115b6a638a5c.iXQY%2F%2FNzM2tEmwAjbhBaCU7ismHpuzBW9GboJIhJrB0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 238.591 ms - 104[0m
PASS tests/integration/order.test.js (50.244 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1952 ms)
      ✓ should create order as affiliate for their customer (1317 ms)
      ✓ should fail with invalid customer ID (1078 ms)
      ✓ should fail with invalid affiliate ID (1121 ms)
      ✓ should fail when customer tries to create order for another customer (1157 ms)
      ✓ should validate required fields (1031 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1222 ms)
      ✓ should return order details for affiliate (1144 ms)
      ✓ should fail for unauthorized customer (1106 ms)
      ✓ should return 404 for non-existent order (1140 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1241 ms)
      ✓ should update weight when processing (1256 ms)
      ✓ should prevent invalid status transitions (1155 ms)
      ✓ should fail for unauthorized affiliate (1100 ms)
      ✓ should fail for customers (1130 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1225 ms)
      ✓ should cancel order as affiliate (1181 ms)
      ✓ should prevent cancelling non-cancellable orders (1178 ms)
      ✓ should fail for unauthorized user (1228 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1233 ms)
      ✓ should handle partial bulk update failures (1257 ms)
      ✓ should cancel multiple orders in bulk (1244 ms)
    Order export functionality
      ✓ should export orders as CSV (1170 ms)
      ✓ should export orders as JSON (1176 ms)
      ✓ should export orders as Excel (1180 ms)
      ✓ should respect export permissions (1094 ms)
    Payment status updates
      ✓ should update payment status (1164 ms)
      ✓ should handle payment failure (1135 ms)
      ✓ should prevent payment status update on non-complete orders (1164 ms)
      ✓ should record refund (1170 ms)
    Order filtering and search
      ✓ should search orders by customer name (1229 ms)
      ✓ should filter orders by multiple criteria (1194 ms)
      ✓ should filter by pickup time slots (1204 ms)
      ✓ should provide aggregated statistics with filters (1122 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1766 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1928 ms)
      ✓ should calculate commission for multiple orders (2588 ms)
      ✓ should handle high delivery fee scenarios (1967 ms)

-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                                                          
-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   84.88 |    72.41 |   89.66 |   84.79 |                                                                                                                                                                                                                                                                                                                                                                                                            
 config                      |   96.68 |    87.17 |     100 |   96.53 |                                                                                                                                                                                                                                                                                                                                                                                                            
  csrf-config.js             |    86.2 |    72.72 |     100 |    86.2 | 240-264,274-275,290,305-306                                                                                                                                                                                                                                                                                                                                                                                
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                                                             
  paygistix.config.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  storeIPs.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 controllers                 |   84.54 |    72.34 |   92.82 |    84.5 |                                                                                                                                                                                                                                                                                                                                                                                                            
  administratorController.js |   85.34 |    70.83 |   84.21 |   85.71 | 190-208,225,314,387,435-436,453,463,488,568-569,656-674,708,768-769,852,910-911,971-972,1194-1203,1233-1234,1365-1366,1629-1633,1680,1690,1692,1734,1745-1746,1777-1778,1818-1819,1828-1829,1915-1977,2002,2040,2045,2209,2262,2277-2278,2401-2402                                                                                                                                                         
  affiliateController.js     |   86.51 |    79.01 |   96.96 |   86.24 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-563,578,667,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                                                                
  authController.js          |   66.78 |    53.86 |   85.71 |   66.78 | 130-131,143,176-181,185,215-216,234-235,279-288,340-341,355-436,451-452,460-461,490-491,541-542,589-590,640-641,656,668-673,702-710,718-719,734,752-763,779,782,804-805,830,871,895,905,915-916,959-974,1087,1092-1137,1165,1207-1248,1394,1461,1472,1535-1536,1551,1661-1662,1677,1730-1731,1743-1787,1808-1871,1876-1922,1950,1986-2024,2036,2072,2086-2087,2100,2113,2170,2219-2220,2234-2273,2287-2326 
  customerController.js      |   91.52 |    83.64 |     100 |    91.3 | 135,214-215,234,247,270-286,296-297,316,329,341,343,345,379-380                                                                                                                                                                                                                                                                                                                                            
  operatorController.js      |   98.31 |    86.28 |     100 |   98.57 | 560,632,695-696,860                                                                                                                                                                                                                                                                                                                                                                                        
  orderController.js         |   79.88 |    68.64 |   88.46 |   79.71 | 52-89,145-146,228-229,240-293,381-382,401,469-470,488,538-539,555,564,574,585,627-632,643-644,659,669,682,695-700,723-724,863-870,897,909,926,968-969,989-991,996,1008-1009,1076-1077,1103-1104,1166-1167                                                                                                                                                                                                  
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                                                        
  quickbooksController.js    |   94.73 |    81.81 |     100 |   94.35 | 269-270,332,408-409,438-439                                                                                                                                                                                                                                                                                                                                                                                
  w9ControllerDocuSign.js    |   93.96 |    84.78 |     100 |   93.96 | 207,222,280,285-286,334-336,421-422,475,676                                                                                                                                                                                                                                                                                                                                                                
 middleware                  |   88.07 |    83.91 |   94.73 |    87.5 |                                                                                                                                                                                                                                                                                                                                                                                                            
  auth.js                    |    72.3 |    74.57 |   66.66 |    72.3 | 67-93,121,134,157-159,200-210                                                                                                                                                                                                                                                                                                                                                                              
  errorHandler.js            |    72.3 |    63.26 |     100 |    72.3 | 10,81-96,102-103                                                                                                                                                                                                                                                                                                                                                                                           
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                                                            
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 models                      |   90.18 |    79.25 |   92.66 |   90.65 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Administrator.js           |   80.76 |    61.11 |   82.35 |   82.19 | 137-159,169-174                                                                                                                                                                                                                                                                                                                                                                                            
  Affiliate.js               |   86.04 |    79.54 |   84.61 |   86.04 | 89,213,217,232,237-244                                                                                                                                                                                                                                                                                                                                                                                     
  CallbackPool.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                                                    
  DocuSignToken.js           |   86.36 |    81.81 |     100 |   86.36 | 101,126-127                                                                                                                                                                                                                                                                                                                                                                                                
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Order.js                   |      70 |    71.11 |     100 |   71.11 | 113,139-140,158-174                                                                                                                                                                                                                                                                                                                                                                                        
  Payment.js                 |   88.09 |    55.55 |   88.88 |   88.09 | 237-245                                                                                                                                                                                                                                                                                                                                                                                                    
  PaymentExport.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  PaymentMethod.js           |   81.81 |    60.86 |   85.71 |   81.53 | 215-236,241-252                                                                                                                                                                                                                                                                                                                                                                                            
  PaymentToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                                                         
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 routes                      |   90.94 |    77.39 |    73.8 |   90.92 |                                                                                                                                                                                                                                                                                                                                                                                                            
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  authRoutes.js              |   96.87 |    83.33 |     100 |   96.87 | 65                                                                                                                                                                                                                                                                                                                                                                                                         
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                                                         
  customerRoutes.js          |   95.83 |    83.33 |     100 |   95.83 | 42                                                                                                                                                                                                                                                                                                                                                                                                         
  generalPaymentCallback.js  |   93.02 |    95.83 |     100 |   93.02 | 45-46,82-83,303-304                                                                                                                                                                                                                                                                                                                                                                                        
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  paymentCallbackRoute.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  paymentRoutes.js           |   46.15 |       50 |       0 |   46.15 | 23-46                                                                                                                                                                                                                                                                                                                                                                                                      
  quickbooksRoutes.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                                                          
  socialAuthRoutes.js        |   56.25 |    17.64 |   14.28 |   56.25 | 50-57,79-86,150-163,176-177,187-196,219-228                                                                                                                                                                                                                                                                                                                                                                
  systemConfigRoutes.js      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  w9Routes.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 services                    |   84.82 |    68.18 |    92.1 |   85.13 |                                                                                                                                                                                                                                                                                                                                                                                                            
  callbackPoolManager.js     |   94.44 |    61.11 |     100 |   94.44 | 13-17                                                                                                                                                                                                                                                                                                                                                                                                      
  docusignService.js         |   81.76 |    69.56 |      85 |   82.14 | 67-75,172,231-244,265,276-280,360,453-454,509-510,527-531,572-573,595-596,625-626                                                                                                                                                                                                                                                                                                                          
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 utils                       |   70.68 |    57.26 |   78.16 |   69.57 |                                                                                                                                                                                                                                                                                                                                                                                                            
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 101                                                                                                                                                                                                                                                                                                                                                                                                        
  emailService.js            |    38.6 |    18.93 |   32.14 |    38.6 | 29-48,127,157-158,353,361-501,509-636,644-746,755-862,889,904-905,1122-1123,1131-1268,1276-1428,1436-1542,1550-1569,1581-1691,1699-1718,1730-1841,1849-1957,1965-2078,2088,2099-2107,2115-2123,2131-2190,2195-2232,2237-2272                                                                                                                                                                               
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  fieldFilter.js             |   85.71 |    72.41 |     100 |   87.71 | 140,201-206                                                                                                                                                                                                                                                                                                                                                                                                
  helpers.js                 |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                                                      
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                                                        
  validators.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for branches (80%) not met: 72.41%
Test Suites: 2 skipped, 81 passed, 81 of 83 total
Tests:       31 skipped, 1890 passed, 1921 total
Snapshots:   0 total
Time:        535.845 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
