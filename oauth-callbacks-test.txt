
> wavemax-affiliate-program@1.0.0 test
> jest --runInBand --forceExit tests/unit/oauthCallbacks.test.js

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:41:15)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'null',
      query: { state: 'customer_12345' },
      headers: {},
      state: 'customer_12345',
      stateStartsWithCustomer: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: {
      state: 'customer_12345',
      isCustomerRequest: true,
      willDelegate: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    [OAuth] Delegating to handleCustomerSocialCallback

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:986:15)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'null',
      query: { state: 'oauth_session_123' },
      headers: {},
      state: 'oauth_session_123',
      stateStartsWithCustomer: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: {
      state: 'oauth_session_123',
      isCustomerRequest: false,
      willDelegate: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_session_123',
      sessionId: 'oauth_session_123',
      allParams: { state: 'oauth_session_123' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'exists',
      query: { state: 'oauth_session_456' },
      headers: {},
      state: 'oauth_session_456',
      stateStartsWithCustomer: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: {
      state: 'oauth_session_456',
      isCustomerRequest: false,
      willDelegate: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_session_456',
      sessionId: 'oauth_session_456',
      allParams: { state: 'oauth_session_456' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

  console.log
    OAuth Callback Debug: {
      popup: undefined,
      state: 'oauth_session_456',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1041:13)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'exists',
      query: { state: null },
      headers: {},
      state: null,
      stateStartsWithCustomer: null
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: { state: null, isCustomerRequest: null, willDelegate: null }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: { state: null, sessionId: null, allParams: { state: null } }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

  console.log
    OAuth Callback Debug: {
      popup: undefined,
      state: null,
      referer: undefined,
      isPopup: undefined,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1041:13)

  console.log
    [handleCustomerSocialCallback] Called with: {
      user: 'exists',
      userType: 'existing-customer',
      query: { state: 'customer_oauth_789' },
      url: undefined,
      originalUrl: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1595:11)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_789',
      sessionId: 'oauth_789',
      allParams: { state: 'customer_oauth_789' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1629:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_789',
      referer: undefined,
      isPopup: true,
      userIsNew: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1748:13)

  console.log
    [handleCustomerSocialCallback] Checking for existing affiliate: {
      isExistingAffiliate: undefined,
      userObject: { email: 'affiliate@example.com', provider: 'google' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1878:13)

  console.log
    [handleCustomerSocialCallback] Called with: {
      user: 'exists',
      userType: 'existing-customer',
      query: { state: 'customer_oauth_999' },
      url: undefined,
      originalUrl: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1595:11)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_999',
      sessionId: 'oauth_999',
      allParams: { state: 'customer_oauth_999' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1629:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_999',
      referer: undefined,
      isPopup: true,
      userIsNew: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1748:13)

  console.log
    [handleCustomerSocialCallback] Checking for existing affiliate: {
      isExistingAffiliate: undefined,
      userObject: { email: 'customer@example.com', provider: 'facebook' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1878:13)

  console.log
    [handleCustomerSocialCallback] Called with: {
      user: 'exists',
      userType: 'existing-customer',
      query: { state: 'customer_popup=true' },
      url: undefined,
      originalUrl: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1595:11)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_popup=true',
      sessionId: null,
      allParams: { state: 'customer_popup=true' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1629:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_popup=true',
      referer: undefined,
      isPopup: undefined,
      userIsNew: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1748:13)

  console.log
    [handleCustomerSocialCallback] Checking for existing affiliate: {
      isExistingAffiliate: undefined,
      userObject: {
        email: 'newcustomer@example.com',
        provider: 'google',
        firstName: 'New',
        lastName: 'Customer'
      }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1878:13)

  console.log
    [handleCustomerSocialCallback] Called with: {
      user: 'null',
      userType: 'existing-customer',
      query: { state: 'customer_error' },
      url: undefined,
      originalUrl: undefined
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1595:11)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_error',
      sessionId: null,
      allParams: { state: 'customer_error' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1629:13)

  console.log
    [handleCustomerSocialCallback] User is null, handling error case

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1636:15)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'null',
      query: { state: 'oauth_session_12345' },
      headers: {},
      state: 'oauth_session_12345',
      stateStartsWithCustomer: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: {
      state: 'oauth_session_12345',
      isCustomerRequest: false,
      willDelegate: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_session_12345',
      sessionId: 'oauth_session_12345',
      allParams: { state: 'oauth_session_12345' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'null',
      query: { state: 'popup=true' },
      headers: {},
      state: 'popup=true',
      stateStartsWithCustomer: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: { state: 'popup=true', isCustomerRequest: false, willDelegate: false }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'popup=true',
      sessionId: null,
      allParams: { state: 'popup=true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

  console.log
    [OAuth] handleSocialCallback called with: {
      user: 'null',
      query: {},
      headers: { referer: 'https://accounts.google.com/oauth/authorize' },
      state: undefined,
      stateStartsWithCustomer: undefined
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:965:11)

  console.log
    [OAuth] Customer request check: {
      state: undefined,
      isCustomerRequest: undefined,
      willDelegate: undefined
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:978:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:996:13)

FAIL tests/unit/oauthCallbacks.test.js
  OAuth Callback Functions
    handleSocialCallback
      ✓ should handle customer OAuth request by delegating to customer handler (290 ms)
      ✓ should handle popup request with no user (auth failed) (112 ms)
      ✓ should handle existing user login with popup (114 ms)
      ✕ should handle new user registration flow (113 ms)
      ✕ should handle OAuth callback errors (105 ms)
    handleCustomerSocialCallback
      ✕ should handle affiliate conflict when social account is already an affiliate (111 ms)
      ✕ should handle existing customer login (108 ms)
      ✕ should handle new customer registration (108 ms)
      ✓ should handle errors during customer OAuth callback (108 ms)
    OAuth State Parameter Handling
      ✓ should correctly parse sessionId from state parameter (107 ms)
      ✕ should handle state parameter without oauth_ prefix (110 ms)
      ✓ should detect popup from referer headers (109 ms)

  ● OAuth Callback Functions › handleSocialCallback › should handle new user registration flow

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /^social_/, {"user": {"_id": "user123", "email": "new@example.com", "firstName": "New", "isNewUser": true, "lastName": "User", "provider": "google"}}

    Number of calls: 0

      155 |       await authController.handleSocialCallback(mockReq, mockRes);
      156 |       
    > 157 |       expect(OAuthSession.createSession).toHaveBeenCalledWith(
          |                                          ^
      158 |         expect.stringMatching(/^social_/),
      159 |         { user: mockUser }
      160 |       );

      at Object.toHaveBeenCalledWith (tests/unit/oauthCallbacks.test.js:157:42)

  ● OAuth Callback Functions › handleSocialCallback › should handle OAuth callback errors

    Query error

      172 |       Object.defineProperty(mockReq, 'query', {
      173 |         get() {
    > 174 |           throw new Error('Query error');
          |                 ^
      175 |         }
      176 |       });
      177 |       

      at Object.get [as query] (tests/unit/oauthCallbacks.test.js:174:17)
      at Object.query [as handleSocialCallback] (server/controllers/authController.js:967:16)
      at Object.handleSocialCallback (tests/unit/oauthCallbacks.test.js:178:28)

  ● OAuth Callback Functions › handleCustomerSocialCallback › should handle affiliate conflict when social account is already an affiliate

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"$or": [{"email": "affiliate@example.com"}, {"socialAccounts.google.email": "affiliate@example.com"}]}

    Number of calls: 0

      213 |       await authController.handleCustomerSocialCallback(mockReq, mockRes);
      214 |       
    > 215 |       expect(Affiliate.findOne).toHaveBeenCalledWith({
          |                                 ^
      216 |         $or: [
      217 |           { email: 'affiliate@example.com' },
      218 |           { 'socialAccounts.google.email': 'affiliate@example.com' }

      at Object.toHaveBeenCalledWith (tests/unit/oauthCallbacks.test.js:215:33)

  ● OAuth Callback Functions › handleCustomerSocialCallback › should handle existing customer login

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"$or": [{"email": "customer@example.com"}, {"socialAccounts.facebook.email": "customer@example.com"}]}

    Number of calls: 0

      259 |       await authController.handleCustomerSocialCallback(mockReq, mockRes);
      260 |       
    > 261 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      262 |         $or: [
      263 |           { email: 'customer@example.com' },
      264 |           { 'socialAccounts.facebook.email': 'customer@example.com' }

      at Object.toHaveBeenCalledWith (tests/unit/oauthCallbacks.test.js:261:32)

  ● OAuth Callback Functions › handleCustomerSocialCallback › should handle new customer registration

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /^customer_social_/, ObjectContaining {"user": {"email": "newcustomer@example.com", "firstName": "New", "lastName": "Customer", "provider": "google"}}

    Number of calls: 0

      299 |       await authController.handleCustomerSocialCallback(mockReq, mockRes);
      300 |       
    > 301 |       expect(OAuthSession.createSession).toHaveBeenCalledWith(
          |                                          ^
      302 |         expect.stringMatching(/^customer_social_/),
      303 |         expect.objectContaining({
      304 |           user: mockReq.user

      at Object.toHaveBeenCalledWith (tests/unit/oauthCallbacks.test.js:301:42)

  ● OAuth Callback Functions › OAuth State Parameter Handling › should handle state parameter without oauth_ prefix

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "/oauth-success.html"
    Received: "/affiliate-register-embed.html?error=social_auth_failed"

    Number of calls: 1

      346 |       // Should redirect without trying to store in database
      347 |       expect(OAuthSession.createSession).not.toHaveBeenCalled();
    > 348 |       expect(mockRes.redirect).toHaveBeenCalledWith(
          |                                ^
      349 |         expect.stringContaining('/oauth-success.html')
      350 |       );
      351 |     });

      at Object.toHaveBeenCalledWith (tests/unit/oauthCallbacks.test.js:348:32)

Test Suites: 1 failed, 1 total
Tests:       6 failed, 6 passed, 12 total
Snapshots:   0 total
Time:        3.297 s
Ran all test suites matching /tests\/unit\/oauthCallbacks.test.js/i.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
