
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (78 ms)
    ✓ should be a winston logger instance (17 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (55 ms)
    ✓ should verify password correctly (198 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (1 ms)
    isConfigured
      ✓ should return true when properly configured
      ✓ should return false when not configured (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params (1 ms)
    ✓ should enforce minimum values
    ✓ should enforce maximum limit (1 ms)
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers (1 ms)
    ✓ should preserve other query parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (2 ms)
      ✓ should log email operations (1 ms)
      ✓ should handle email errors (1 ms)
    Email Templates
      ✓ should process email templates
      ✓ should handle missing template variables (1 ms)
    Email Validation
      ✓ should validate email addresses
    Email Queue
      ✓ should queue emails for sending

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (21 ms)
      ✓ should export vendors as CSV (5 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (4 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (4 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (4 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields (1 ms)
    ✓ should configure Facebook strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope (1 ms)
    ✓ should configure LinkedIn strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/orderModelSimple.test.js
  Order Model - Line Coverage
    SystemConfig Error Handling (Line 113)
      ✓ should use default base rate when SystemConfig.getValue throws error (196 ms)
    Scheduled Status Timestamp (Lines 139-140)
      ✕ should set scheduledAt when saving with scheduled status (201 ms)
    Order Processing Status (Lines 158-174)
      ✕ should handle orderProcessingStatus changes (227 ms)
      ✕ should handle completed status without processingStarted (224 ms)

  ● Order Model - Line Coverage › Scheduled Status Timestamp (Lines 139-140) › should set scheduledAt when saving with scheduled status

    ValidationError: Order validation failed: status: `scheduled` is not a valid enum value for path `status`.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle orderProcessingStatus changes

    expect(received).toBeDefined()

    Received: undefined

      91 |       order.orderProcessingStatus = 'washing';
      92 |       await order.save();
    > 93 |       expect(order.processingStarted).toBeDefined();
         |                                       ^
      94 |       const washingStartTime = order.processingStarted;
      95 |       
      96 |       // Test drying status (should not overwrite processingStarted)

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:93:39)

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle completed status without processingStarted

    expect(received).toBeDefined()

    Received: undefined

      136 |       await order.save();
      137 |       
    > 138 |       expect(order.processingCompleted).toBeDefined();
          |                                         ^
      139 |       expect(order.processingTimeMinutes).toBeUndefined(); // No start time to calculate from
      140 |     });
      141 |   });

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:138:41)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (15 ms)
    GET /api/orders/export
      ✓ should export orders (4 ms)
    GET /api/orders/search
      ✓ should search orders (3 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (15 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (3 ms)
    GET /api/orders/:orderId
      ✓ should get order details (4 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (4 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (5 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (6 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:05.349Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:05.498Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T15:02:05.528Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:05.676Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:05.791Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:06.417Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:02:06.534Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (148 ms)
      ✓ should update existing token if one exists (180 ms)
      ✓ should calculate expiration time correctly (115 ms)
    getCurrentToken
      ✓ should return the most recent token (143 ms)
      ✓ should return null if no tokens exist (109 ms)
    clearTokens
      ✓ should remove all tokens (232 ms)
    token expiration
      ✓ should identify expired tokens (140 ms)
      ✓ should handle tokens without refresh token (117 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (247 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (19 ms)
    ✓ GET /api/orders/export - should export orders (13 ms)
    ✓ GET /api/orders/search - should search orders (4 ms)
    ✓ GET /api/orders/statistics - should get statistics (4 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (4 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (3 ms)
    ✓ GET /api/orders/:orderId - should get order details (4 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (3 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (3 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (3 ms)
    ✓ Error handling - should return 404 for unknown routes (6 ms)
    ✓ Error handling - should handle controller errors (7 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (8 ms)
      ✓ should reject invalid credentials (3 ms)
    POST /api/auth/register
      ✓ should register new user (16 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (3 ms)
      ✓ should reject logout without token (3 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (3 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (3 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (3 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (3 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (3 ms)
      ✓ should reject without token (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (16 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values
      ✓ should parse string amounts (1 ms)
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts
      ✓ should round to 2 decimal places
    formatDate
      ✓ should format date with short format by default (4 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format
      ✓ should handle string dates (1 ms)
      ✓ should handle null and undefined dates
      ✓ should handle invalid dates
      ✓ should handle different format cases
    generateRandomString
      ✕ should generate a string of default length 10
      ✕ should generate strings of specified length
      ✕ should generate different strings on each call
      ✕ should only use alphanumeric characters
    sanitizeForCSV
      ✕ should return empty string for null and undefined
      ✕ should convert non-string values to strings
      ✕ should leave simple strings unchanged (1 ms)
      ✕ should escape double quotes by doubling them
      ✕ should wrap strings containing commas in quotes
      ✕ should wrap strings containing newlines in quotes
      ✕ should handle complex strings with multiple special characters
    calculatePercentage
      ✕ should calculate percentage correctly
      ✕ should handle zero total
      ✕ should handle null or undefined total (1 ms)
      ✕ should respect decimal places parameter
      ✕ should round correctly (1 ms)
      ✕ should handle edge cases
      ✕ should handle negative values (1 ms)

  ● Helpers Utility Functions › generateRandomString › should generate a string of default length 10

    TypeError: generateRandomString is not a function

      89 |   describe('generateRandomString', () => {
      90 |     it('should generate a string of default length 10', () => {
    > 91 |       const result = generateRandomString();
         |                      ^
      92 |       expect(result).toHaveLength(10);
      93 |       expect(result).toMatch(/^[A-Za-z0-9]+$/);
      94 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:91:22)

  ● Helpers Utility Functions › generateRandomString › should generate strings of specified length

    TypeError: generateRandomString is not a function

       95 |
       96 |     it('should generate strings of specified length', () => {
    >  97 |       expect(generateRandomString(5)).toHaveLength(5);
          |              ^
       98 |       expect(generateRandomString(20)).toHaveLength(20);
       99 |       expect(generateRandomString(0)).toHaveLength(0);
      100 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:97:14)

  ● Helpers Utility Functions › generateRandomString › should generate different strings on each call

    TypeError: generateRandomString is not a function

      103 |       const results = new Set();
      104 |       for (let i = 0; i < 10; i++) {
    > 105 |         results.add(generateRandomString());
          |                     ^
      106 |       }
      107 |       expect(results.size).toBeGreaterThan(5); // Very unlikely to get duplicates
      108 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:105:21)

  ● Helpers Utility Functions › generateRandomString › should only use alphanumeric characters

    TypeError: generateRandomString is not a function

      109 |
      110 |     it('should only use alphanumeric characters', () => {
    > 111 |       const result = generateRandomString(100);
          |                      ^
      112 |       expect(result).toMatch(/^[A-Za-z0-9]*$/);
      113 |     });
      114 |   });

      at Object.generateRandomString (tests/unit/helpers.test.js:111:22)

  ● Helpers Utility Functions › sanitizeForCSV › should return empty string for null and undefined

    TypeError: sanitizeForCSV is not a function

      116 |   describe('sanitizeForCSV', () => {
      117 |     it('should return empty string for null and undefined', () => {
    > 118 |       expect(sanitizeForCSV(null)).toBe('');
          |              ^
      119 |       expect(sanitizeForCSV(undefined)).toBe('');
      120 |     });
      121 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:118:14)

  ● Helpers Utility Functions › sanitizeForCSV › should convert non-string values to strings

    TypeError: sanitizeForCSV is not a function

      121 |
      122 |     it('should convert non-string values to strings', () => {
    > 123 |       expect(sanitizeForCSV(123)).toBe('123');
          |              ^
      124 |       expect(sanitizeForCSV(true)).toBe('true');
      125 |       expect(sanitizeForCSV(false)).toBe('false');
      126 |     });

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:123:14)

  ● Helpers Utility Functions › sanitizeForCSV › should leave simple strings unchanged

    TypeError: sanitizeForCSV is not a function

      127 |
      128 |     it('should leave simple strings unchanged', () => {
    > 129 |       expect(sanitizeForCSV('hello')).toBe('hello');
          |              ^
      130 |       expect(sanitizeForCSV('test123')).toBe('test123');
      131 |     });
      132 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:129:14)

  ● Helpers Utility Functions › sanitizeForCSV › should escape double quotes by doubling them

    TypeError: sanitizeForCSV is not a function

      132 |
      133 |     it('should escape double quotes by doubling them', () => {
    > 134 |       expect(sanitizeForCSV('She said "hello"')).toBe('"She said ""hello"""');
          |              ^
      135 |       expect(sanitizeForCSV('""')).toBe('""""""');
      136 |     });
      137 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:134:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing commas in quotes

    TypeError: sanitizeForCSV is not a function

      137 |
      138 |     it('should wrap strings containing commas in quotes', () => {
    > 139 |       expect(sanitizeForCSV('hello, world')).toBe('"hello, world"');
          |              ^
      140 |       expect(sanitizeForCSV('a,b,c')).toBe('"a,b,c"');
      141 |     });
      142 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:139:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing newlines in quotes

    TypeError: sanitizeForCSV is not a function

      142 |
      143 |     it('should wrap strings containing newlines in quotes', () => {
    > 144 |       expect(sanitizeForCSV('hello\nworld')).toBe('"hello\nworld"');
          |              ^
      145 |       expect(sanitizeForCSV('line1\nline2\nline3')).toBe('"line1\nline2\nline3"');
      146 |     });
      147 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:144:14)

  ● Helpers Utility Functions › sanitizeForCSV › should handle complex strings with multiple special characters

    TypeError: sanitizeForCSV is not a function

      147 |
      148 |     it('should handle complex strings with multiple special characters', () => {
    > 149 |       expect(sanitizeForCSV('John "JD" Doe, CEO\nAcme Corp')).toBe('"John ""JD"" Doe, CEO\nAcme Corp"');
          |              ^
      150 |     });
      151 |   });
      152 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:149:14)

  ● Helpers Utility Functions › calculatePercentage › should calculate percentage correctly

    TypeError: calculatePercentage is not a function

      153 |   describe('calculatePercentage', () => {
      154 |     it('should calculate percentage correctly', () => {
    > 155 |       expect(calculatePercentage(50, 100)).toBe(50);
          |              ^
      156 |       expect(calculatePercentage(25, 100)).toBe(25);
      157 |       expect(calculatePercentage(75, 150)).toBe(50);
      158 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:155:14)

  ● Helpers Utility Functions › calculatePercentage › should handle zero total

    TypeError: calculatePercentage is not a function

      159 |
      160 |     it('should handle zero total', () => {
    > 161 |       expect(calculatePercentage(10, 0)).toBe(0);
          |              ^
      162 |       expect(calculatePercentage(0, 0)).toBe(0);
      163 |     });
      164 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:161:14)

  ● Helpers Utility Functions › calculatePercentage › should handle null or undefined total

    TypeError: calculatePercentage is not a function

      164 |
      165 |     it('should handle null or undefined total', () => {
    > 166 |       expect(calculatePercentage(10, null)).toBe(0);
          |              ^
      167 |       expect(calculatePercentage(10, undefined)).toBe(0);
      168 |     });
      169 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:166:14)

  ● Helpers Utility Functions › calculatePercentage › should respect decimal places parameter

    TypeError: calculatePercentage is not a function

      169 |
      170 |     it('should respect decimal places parameter', () => {
    > 171 |       expect(calculatePercentage(1, 3, 0)).toBe(33);
          |              ^
      172 |       expect(calculatePercentage(1, 3, 1)).toBe(33.3);
      173 |       expect(calculatePercentage(1, 3, 2)).toBe(33.33);
      174 |       expect(calculatePercentage(1, 3, 3)).toBe(33.333);

      at Object.calculatePercentage (tests/unit/helpers.test.js:171:14)

  ● Helpers Utility Functions › calculatePercentage › should round correctly

    TypeError: calculatePercentage is not a function

      176 |
      177 |     it('should round correctly', () => {
    > 178 |       expect(calculatePercentage(2, 3, 2)).toBe(66.67);
          |              ^
      179 |       expect(calculatePercentage(1, 6, 2)).toBe(16.67);
      180 |     });
      181 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:178:14)

  ● Helpers Utility Functions › calculatePercentage › should handle edge cases

    TypeError: calculatePercentage is not a function

      181 |
      182 |     it('should handle edge cases', () => {
    > 183 |       expect(calculatePercentage(0, 100)).toBe(0);
          |              ^
      184 |       expect(calculatePercentage(100, 100)).toBe(100);
      185 |       expect(calculatePercentage(200, 100)).toBe(200);
      186 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:183:14)

  ● Helpers Utility Functions › calculatePercentage › should handle negative values

    TypeError: calculatePercentage is not a function

      187 |
      188 |     it('should handle negative values', () => {
    > 189 |       expect(calculatePercentage(-50, 100)).toBe(-50);
          |              ^
      190 |       expect(calculatePercentage(50, -100)).toBe(-50);
      191 |     });
      192 |   });

      at Object.calculatePercentage (tests/unit/helpers.test.js:189:14)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together (1 ms)
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs (1 ms)
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data (1 ms)
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (5 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (5 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (3 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (3 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (2 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (3 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (4 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle JSON parsing errors (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (479 ms)
      ✓ should authenticate valid x-auth-token header (218 ms)
      ✓ should reject request with no token (204 ms)
      ✓ should reject request with invalid token (205 ms)
      ✓ should reject request with expired token (227 ms)
      ✓ should handle malformed Authorization header (213 ms)
      ✓ should reject blacklisted token (208 ms)
    authorize
      ✓ should authorize user with correct role (217 ms)
      ✓ should authorize user with one of multiple roles (206 ms)
      ✓ should reject user with incorrect role (210 ms)
      ✓ should reject user with no role (207 ms)
      ✓ should reject when user is not set (207 ms)
    authLimiter
      ✓ should be a function (206 ms)
      ✓ should have rate limit configuration (205 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly (1 ms)
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully (1 ms)
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/orderModel.test.js
  Order Model - Additional Coverage
    Pre-save Hook Coverage
      SystemConfig Error Handling
        ✓ should use default base rate when SystemConfig.getValue throws error (320 ms)
      Status Timestamp Updates
        ✓ should set scheduledAt timestamp when status changes to scheduled (198 ms)
        ✓ should not overwrite existing processingStartedAt timestamp (201 ms)
      Order Processing Status Timestamps
        ✕ should set processingStarted when orderProcessingStatus changes to washing (195 ms)
        ✕ should set processingStarted when orderProcessingStatus changes to drying (199 ms)
        ✕ should set processingStarted when orderProcessingStatus changes to folding (195 ms)
        ✕ should not overwrite existing processingStarted timestamp (199 ms)
        ✕ should set processingCompleted and calculate processing time when status changes to completed (201 ms)
        ✕ should handle completion without processingStarted timestamp (196 ms)
      Edge Cases
        ✕ should handle multiple status changes in single save (203 ms)
        ✕ should calculate processing time correctly for long durations (201 ms)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should set processingStarted when orderProcessingStatus changes to washing

    expect(received).toBeDefined()

    Received: undefined

      105 |         await order.save();
      106 |
    > 107 |         expect(order.processingStarted).toBeDefined();
          |                                         ^
      108 |         expect(order.processingStarted).toBeInstanceOf(Date);
      109 |       });
      110 |

      at Object.toBeDefined (tests/unit/orderModel.test.js:107:41)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should set processingStarted when orderProcessingStatus changes to drying

    expect(received).toBeDefined()

    Received: undefined

      126 |         await order.save();
      127 |
    > 128 |         expect(order.processingStarted).toBeDefined();
          |                                         ^
      129 |         expect(order.processingStarted).toBeInstanceOf(Date);
      130 |       });
      131 |

      at Object.toBeDefined (tests/unit/orderModel.test.js:128:41)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should set processingStarted when orderProcessingStatus changes to folding

    expect(received).toBeDefined()

    Received: undefined

      147 |         await order.save();
      148 |
    > 149 |         expect(order.processingStarted).toBeDefined();
          |                                         ^
      150 |         expect(order.processingStarted).toBeInstanceOf(Date);
      151 |       });
      152 |

      at Object.toBeDefined (tests/unit/orderModel.test.js:149:41)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should not overwrite existing processingStarted timestamp

    TypeError: Cannot read properties of undefined (reading 'getTime')

      172 |
      173 |         // processingStarted should remain unchanged
    > 174 |         expect(order.processingStarted.getTime()).toBe(existingTimestamp.getTime());
          |                                        ^
      175 |       });
      176 |
      177 |       it('should set processingCompleted and calculate processing time when status changes to completed', async () => {

      at Object.getTime (tests/unit/orderModel.test.js:174:40)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should set processingCompleted and calculate processing time when status changes to completed

    expect(received).toBeDefined()

    Received: undefined

      199 |         await order.save();
      200 |
    > 201 |         expect(order.processingCompleted).toBeDefined();
          |                                           ^
      202 |         expect(order.processingTimeMinutes).toBe(45);
      203 |         
      204 |         Date.now.mockRestore();

      at Object.toBeDefined (tests/unit/orderModel.test.js:201:43)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Order Processing Status Timestamps › should handle completion without processingStarted timestamp

    expect(received).toBeDefined()

    Received: undefined

      223 |         await order.save();
      224 |
    > 225 |         expect(order.processingCompleted).toBeDefined();
          |                                           ^
      226 |         expect(order.processingTimeMinutes).toBeUndefined();
      227 |       });
      228 |     });

      at Object.toBeDefined (tests/unit/orderModel.test.js:225:43)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Edge Cases › should handle multiple status changes in single save

    expect(received).toBeDefined()

    Received: undefined

      249 |
      250 |         expect(order.processingStartedAt).toBeDefined();
    > 251 |         expect(order.processingStarted).toBeDefined();
          |                                         ^
      252 |       });
      253 |
      254 |       it('should calculate processing time correctly for long durations', async () => {

      at Object.toBeDefined (tests/unit/orderModel.test.js:251:41)

  ● Order Model - Additional Coverage › Pre-save Hook Coverage › Edge Cases › should calculate processing time correctly for long durations

    expect(received).toBe(expected) // Object.is equality

    Expected: 180
    Received: undefined

      275 |         await order.save();
      276 |
    > 277 |         expect(order.processingTimeMinutes).toBe(180); // 3 hours = 180 minutes
          |                                             ^
      278 |         
      279 |         Date.now.mockRestore();
      280 |       });

      at Object.toBe (tests/unit/orderModel.test.js:277:45)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing (1 ms)
      ✓ should not warn when all required variables are present (2 ms)
    getEnvironment
      ✓ should return configured environment (1 ms)
      ✓ should default to production if not configured
    getMerchantId
      ✓ should return merchant ID when configured (1 ms)
      ✓ should throw error when not configured (11 ms)
    getFormId
      ✓ should return form ID when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormActionUrl
      ✓ should return configured form action URL (1 ms)
      ✓ should return default URL when not configured
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured
    isConfigured
      ✓ should return true when all required config is present (1 ms)
      ✓ should return false and log error when config is incomplete (1 ms)
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing (1 ms)
      ✓ should set testModeEnabled to false when not configured (1 ms)
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL (1 ms)
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly (1 ms)
      ✓ should generate correct CSS classes for highlighted customer
      ✓ should generate correct HTML content for highlighted customer (1 ms)
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter (1 ms)
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list (1 ms)
      ✓ should process customer list without filtering (1 ms)
      ✓ should filter customer list by customer ID (7 ms)
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (7 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (8 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (3 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (3 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (5 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (6 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (5 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (3 ms)
      ✓ should handle POST callback routes (3 ms)
      ✓ should handle multiple callback paths (6 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (2 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle empty request bodies (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (24 ms)
      ✓ should allow access in test environment (4 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (3 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (3 ms)
    Route Handlers
      ✓ should serve index.html at root path (3 ms)
      ✓ should serve critical-files page (4 ms)
      ✓ should serve test-templates page (3 ms)
      ✓ should serve action-plan page (4 ms)
      ✓ should return 404 for non-existent pages (3 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (4 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (3 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (3 ms)
      ✓ should return valid HTML for 404 page (3 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (10 ms)
      ✓ should handle URL-encoded keys (5 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (3 ms)
      ✓ should handle specific route handlers (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (10 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context
      ✓ should hide error details in production (1 ms)
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message (1 ms)
      ✓ should handle errors with code property (1 ms)
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code (1 ms)
      ✓ should have stack trace
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (5 ms)
      ✓ should handle undefined error
      ✓ should handle non-error objects
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderWithSystemConfig.test.js (9.66 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (801 ms)
      ✓ should use default rate when SystemConfig is not available (911 ms)
      ✓ should calculate estimated total using SystemConfig rate (639 ms)
      ✓ should calculate actual total using SystemConfig rate (628 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (627 ms)
      ✓ should calculate commission for zero delivery fee (643 ms)
      ✓ should handle commission calculation for large orders (630 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (667 ms)
      ✓ should update calculations when base rate changes (795 ms)
      ✓ should validate minimum and maximum base rates (870 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1183 ms)
      ✓ should match revenue calculator with different parameters (714 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.full.test.js
  Payment Routes - Full Coverage
    Dynamic Route Loading
      ✓ should load dynamic callback routes when not in test environment (25 ms)
      ✓ should handle GET requests on dynamic callback routes (35 ms)
      ✓ should handle POST requests on dynamic callback routes (33 ms)
      ✓ should handle errors when loading config file (22 ms)
      ✓ should handle invalid JSON in config file (30 ms)
      ✓ should skip dynamic route loading in test environment (23 ms)
    Static Routes
      ✓ should handle GET /config (32 ms)
      ✓ should handle POST /log-submission (27 ms)
      ✓ should handle POST /create-token (41 ms)
      ✓ should handle GET /check-status/:token (30 ms)
      ✓ should handle POST /cancel-token/:token (35 ms)
      ✓ should handle POST /update-status/:token (29 ms)
      ✓ should handle GET /pool-stats (32 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (133 ms)
      ✓ should use default values for blacklistedAt and reason (139 ms)
      ✓ should require all mandatory fields (80 ms)
      ✓ should enforce unique token constraint (243 ms)
      ✓ should validate userType enum (78 ms)
      ✓ should accept all valid userTypes (206 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (111 ms)
        ✓ should use default reason when not provided (119 ms)
        ✓ should return null when token already blacklisted (269 ms)
        ✓ should handle custom reasons (112 ms)
        ✓ should propagate non-duplicate errors (77 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (137 ms)
        ✓ should return false for non-blacklisted token (105 ms)
        ✓ should handle empty token (104 ms)
        ✓ should handle null token (103 ms)
      cleanupExpired
        ✓ should delete expired tokens (229 ms)
        ✓ should return 0 when no expired tokens (190 ms)
        ✓ should handle empty collection (108 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (3 ms)
      ✓ should reject invalid email addresses
    isValidPhone
      ✓ should validate correct US phone numbers
      ✓ should reject invalid phone numbers (1 ms)
    isValidUsername
      ✓ should validate correct usernames
      ✓ should reject invalid usernames (1 ms)
    isValidZipCode
      ✓ should validate correct US zip codes
      ✓ should reject invalid zip codes
    isValidTimeFormat
      ✓ should validate correct time formats (1 ms)
      ✓ should reject invalid time formats (1 ms)
    isValidName
      ✓ should validate correct names
      ✓ should reject invalid names
    mongooseValidators
      ✓ should provide email validator (1 ms)
      ✓ should provide phone validator
      ✓ should provide username validator
      ✓ should provide zipCode validator
      ✓ should provide timeFormat validator
      ✓ should provide name validator (1 ms)
    expressValidators
      ✓ should provide email validator function (4 ms)
      ✓ should provide phone validator function (1 ms)
      ✓ should provide username validator function
      ✓ should provide zipCode validator function
      ✓ should provide timeFormat validator function (1 ms)
      ✓ should provide name validator function
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails
      validatePhone
        ✓ should return validation result for phones (1 ms)
      validateUsername
        ✓ should return validation result for usernames
      validateZipCode
        ✓ should return validation result for zip codes (1 ms)
      validateTimeFormat
        ✓ should return validation result for time formats
      validateName
        ✓ should return validation result for names

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (12 ms)
      ✓ should throw error when encryption key is missing (2 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (2 ms)
      ✓ should throw error with tampered data
      ✓ should throw error with wrong encryption key
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (60 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (170 ms)
      ✓ should return false for invalid salt format (55 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (7 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (7 ms)
      ✓ should handle unicode and special characters (1 ms)
      ✓ should produce different IVs for same input (1 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1401 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/models.test.js (6.996 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (483 ms)
      ✓ should require required fields (318 ms)
      ✓ should enforce unique constraints (620 ms)
      ✓ should handle payment information correctly (364 ms)
    Customer Model
      ✓ should create a valid customer (352 ms)
    Order Model
      ✓ should create a valid order (388 ms)
      ✓ should calculate estimated total correctly (378 ms)
      ✓ should calculate actual total and commission when weight is set (382 ms)
      ✓ should update timestamps for status changes (475 ms)
    Transaction Model
      ✓ should create a valid transaction (353 ms)
      ✓ should validate transaction type (316 ms)
      ✓ should validate transaction status (330 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (350 ms)
      ✓ should validate user type (318 ms)
      ✓ should check if token is expired (384 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (18 ms)
      ✓ should handle errors when fetching public configs (13 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (3 ms)
      ✓ should return 404 for non-existent public config (3 ms)
      ✓ should handle errors when fetching specific config (4 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (2 ms)
      ✓ should filter configurations by category (1 ms)
      ✓ should handle errors when fetching all configs (2 ms)
      ✓ should require authentication (2 ms)
      ✓ should require administrator role (93 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (8 ms)
      ✓ should require system_config permission (77 ms)
      ✓ should handle validation errors (4 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (3 ms)
      ✓ should handle errors during initialization (2 ms)
      ✓ should require authentication and admin role (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (143 ms)
      ✓ should generate ADM002 when ADM001 exists (229 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (288 ms)
      ✓ should handle non-sequential admin IDs correctly (270 ms)
      ✓ should handle double-digit admin IDs (219 ms)
      ✓ should handle triple-digit admin IDs (250 ms)
      ✓ should handle large admin ID numbers (223 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (104 ms)
      ✓ should handle numbers above 999 without padding issues (119 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (109 ms)
      ✓ should handle edge cases in admin ID parsing (111 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (287 ms)
      ✓ should work correctly with different creation dates (292 ms)
      ✓ should work correctly with different permissions (277 ms)
    Performance and reliability
      ✓ should handle database query efficiently (216 ms)
      ✓ should handle concurrent admin creation scenario (254 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (2 ms)
      ✓ should have valid endpoint patterns (6 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (6 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF (1 ms)
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests (1 ms)
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints (1 ms)
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation (1 ms)
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (1 ms)
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates (1 ms)
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2 (1 ms)
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase (1 ms)
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes (1 ms)
        ✓ should match nested parameterized routes
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths (1 ms)
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints (1 ms)
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/orderControllerAdditional.test.js
  Order Controller - Additional Coverage
    checkActiveOrders (lines 52-89)
      ✓ should check active orders for authenticated customer (54 ms)
      ✓ should return no active orders when none exist (57 ms)
      ✓ should handle missing customer ID (62 ms)
      ✓ should handle database errors (54 ms)
    Error handling in various methods
      ✕ should handle error in createOrder when email service fails (lines 145-146) (53 ms)
    exportOrders edge cases (lines 240-293)
      ✕ should handle CSV export with special characters (56 ms)
      ✕ should handle JSON export (72 ms)
      ✕ should handle export errors (69 ms)
    updateOrderStatus edge cases
      ✕ should handle invalid status transitions (lines 381-382) (52 ms)
    cancelOrder method (lines 469-470, 488)
      ✓ should handle order not found (52 ms)
      ✕ should handle cancellation of already cancelled order (53 ms)
    updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585)
      ✕ should handle missing payment data (54 ms)
      ✕ should handle refund without completed payment (53 ms)
      ✕ should handle refund amount greater than order total (52 ms)
    bulkUpdateOrderStatus edge cases (lines 627-632, 643-644)
      ✕ should handle empty order IDs array (61 ms)
      ✕ should handle some orders not found (53 ms)

  ● Order Controller - Additional Coverage › Error handling in various methods › should handle error in createOrder when email service fails (lines 145-146)

    TypeError: Cannot read properties of undefined (reading 'mockRejectedValue')

      152 |       
      153 |       // Mock email service to throw error
    > 154 |       emailService.sendOrderConfirmationEmail.mockRejectedValue(new Error('Email failed'));
          |                                               ^
      155 |       emailService.sendNewOrderNotificationToAffiliate.mockRejectedValue(new Error('Email failed'));
      156 |
      157 |       const consoleSpy = jest.spyOn(console, 'error').mockImplementation();

      at Object.mockRejectedValue (tests/unit/orderControllerAdditional.test.js:154:47)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle CSV export with special characters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Content-Type", "text/csv"

    Number of calls: 0

      193 |       await orderController.exportOrders(req, res);
      194 |
    > 195 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Type', 'text/csv');
          |                             ^
      196 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Disposition', 'attachment; filename=orders_export.csv');
      197 |       
      198 |       const csvContent = res.end.mock.calls[0][0];

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:195:29)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle JSON export

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "count": 1,
    -   "orders": Array [
    -     Object {
    -       "customerId": "CUST123",
    -       "orderId": "ORD001",
    -     },
    -   ],
    -   "success": true,
    +   "message": "Insufficient permissions for this export",
    +   "success": false,
      },

    Number of calls: 1

      218 |       await orderController.exportOrders(req, res);
      219 |
    > 220 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      221 |         success: true,
      222 |         count: 1,
      223 |         orders: [{ orderId: 'ORD001', customerId: 'CUST123' }]

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:220:24)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle export errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error exporting orders:", Any<Error>

    Number of calls: 0

      238 |       await orderController.exportOrders(req, res);
      239 |
    > 240 |       expect(consoleSpy).toHaveBeenCalledWith('Error exporting orders:', expect.any(Error));
          |                          ^
      241 |       expect(res.status).toHaveBeenCalledWith(500);
      242 |       
      243 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:240:26)

  ● Order Controller - Additional Coverage › updateOrderStatus edge cases › should handle invalid status transitions (lines 381-382)

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      264 |       await orderController.updateOrderStatus(req, res);
      265 |
    > 266 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      267 |       expect(res.status).toHaveBeenCalledWith(500);
      268 |       
      269 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalled (tests/unit/orderControllerAdditional.test.js:266:26)

  ● Order Controller - Additional Coverage › cancelOrder method (lines 469-470, 488) › should handle cancellation of already cancelled order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Order is already cancelled",
    +   "message": "Orders in cancelled status cannot be cancelled. Only pending orders can be cancelled.",
        "success": false,
      },

    Number of calls: 1

      304 |
      305 |       expect(res.status).toHaveBeenCalledWith(400);
    > 306 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      307 |         success: false,
      308 |         message: 'Order is already cancelled'
      309 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:306:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle missing payment data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 404

    Number of calls: 1

      319 |       await orderController.updatePaymentStatus(req, res);
      320 |
    > 321 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      322 |       expect(res.json).toHaveBeenCalledWith({
      323 |         success: false,
      324 |         message: 'Payment status is required'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:321:26)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund without completed payment

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Can only refund completed payments",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      346 |
      347 |       expect(res.status).toHaveBeenCalledWith(400);
    > 348 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      349 |         success: false,
      350 |         message: 'Can only refund completed payments'
      351 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:348:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund amount greater than order total

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Refund amount cannot exceed order total",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      372 |
      373 |       expect(res.status).toHaveBeenCalledWith(400);
    > 374 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      375 |         success: false,
      376 |         message: 'Refund amount cannot exceed order total'
      377 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:374:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle empty order IDs array

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "No orders specified",
    +   "message": "Order IDs must be provided as an array",
        "success": false,
      },

    Number of calls: 1

      390 |
      391 |       expect(res.status).toHaveBeenCalledWith(400);
    > 392 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      393 |         success: false,
      394 |         message: 'No orders specified'
      395 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:392:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle some orders not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Orders updated",
    -   "notFoundCount": 1,
    -   "results": Any<Array>,
    -   "success": true,
    -   "updatedCount": 2,
    +   "message": "Unauthorized",
    +   "success": false,
      },

    Number of calls: 1

      413 |       await orderController.bulkUpdateOrderStatus(req, res);
      414 |
    > 415 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      416 |         success: true,
      417 |         message: 'Orders updated',
      418 |         updatedCount: 2,

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:415:24)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/fieldFilter.test.js (5.472 s)
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully (1 ms)
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects (1 ms)
      ✓ should handle empty array
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types (1 ms)
    fieldDefinitions
      ✓ should have definitions for all data types
      ✓ should have different field sets for different roles (2 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role (1 ms)
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (12 ms)
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions (1 ms)
    responseFilter middleware
      ✓ should create filtered json method
      ✓ should filter response data when _filterType is provided (1 ms)
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated (1 ms)
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (6 ms)
      ✓ should handle empty store IP (1 ms)
      ✓ should load additional IPs from environment (1 ms)
      ✓ should trim whitespace from IPs (1 ms)
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment (1 ms)
      ✓ should handle empty IP ranges
    Session renewal configuration
      ✓ should use default session renewal settings
      ✓ should load custom session renewal settings from environment
      ✓ should handle invalid numeric values (10 ms)
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs (2 ms)
      ✓ should return false for non-whitelisted IPs (1 ms)
      ✓ should check IP ranges (1 ms)
      ✓ should return false for IPs outside ranges (1 ms)
    isInRange function
      ✓ should correctly check IPs in /24 subnet (1 ms)
      ✓ should correctly check IPs in /16 subnet (1 ms)
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host) (1 ms)
      ✓ should correctly check IPs in /0 subnet (all IPs) (1 ms)
      ✓ should handle invalid CIDR notation
      ✓ should handle invalid mask bits
      ✓ should handle invalid IP addresses (1 ms)
      ✓ should handle IP parts out of range (1 ms)
      ✓ should handle edge cases with console error (1 ms)
      ✓ should correctly handle boundary cases (1 ms)
      ✓ should handle various subnet sizes correctly (1 ms)
    Configuration export structure
      ✓ should export all required properties and functions (1 ms)
      ✓ should have correct session renewal properties (1 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (2 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully (1 ms)
      ✓ should return null when no callbacks available
    releaseCallback
      ✓ should release callback successfully (1 ms)
      ✓ should handle null callback gracefully
    getPoolStatus
      ✓ should return pool status with all handler details (2 ms)
      ✓ should handle empty pool
    startCleanupJob
      ✓ should start cleanup interval (3 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers (1 ms)
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email
        ✓ should reject sequential characters
        ✓ should reject repeated characters
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks
    customPasswordValidator
      ✓ should work as express-validator custom validator (16 ms)
      ✓ should include validation errors in thrown message (1 ms)
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (56 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (1 ms)
      ✓ should score length appropriately
      ✓ should score character variety
      ✓ should penalize common patterns (1 ms)
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPool.test.js (6.272 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (145 ms)
      ✓ should have default values (148 ms)
      ✓ should have unique constraint on callbackPath (142 ms)
      ✓ should create document with defaults (168 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (238 ms)
        ✓ should increment usage count on each lock (278 ms)
        ✓ should update lastUsedAt timestamp (206 ms)
      release()
        ✓ should release locked callback (267 ms)
        ✓ should handle releasing already unlocked callback (196 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (209 ms)
        ✓ should use least recently used callback (236 ms)
        ✓ should acquire expired locked callback (246 ms)
        ✓ should return null when no callbacks available (230 ms)
        ✓ should increment usage count atomically (202 ms)
      releaseCallback()
        ✓ should release callback by payment token (196 ms)
        ✓ should return null if no callback found with token (159 ms)
        ✓ should only release callback locked by specific token (216 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (258 ms)
        ✓ should not release recently locked callbacks (240 ms)
        ✓ should handle custom timeout values (239 ms)
        ✓ should return 0 when no expired locks (248 ms)
        ✓ should handle empty collection (232 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (173 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (780 ms)
      ✓ should handle invalid ObjectId gracefully (171 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively (1 ms)
      ✓ should sanitize objects recursively
      ✓ should handle null values
      ✓ should handle undefined values
      ✓ should handle numbers
      ✓ should handle booleans
      ✓ should handle deeply nested objects (1 ms)
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters (1 ms)
      ✓ should sanitize URL parameters (1 ms)
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (2 ms)
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should validate complex email formats (1 ms)
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters (1 ms)
      ✓ should remove spaces
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths (1 ms)
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths (1 ms)
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts (1 ms)
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain (1 ms)
      ✓ should handle complex nested structures

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (185 ms)
      ✓ should handle email sending failures gracefully (120 ms)
      ✓ should return error for invalid customer (54 ms)
      ✓ should return error for invalid affiliate (61 ms)
      ✓ should enforce authorization (55 ms)
    getOrderDetails
      ✓ should return order details for authorized user (52 ms)
      ✓ should return 404 for non-existent order (52 ms)
      ✓ should enforce authorization for customers (53 ms)
    updateOrderStatus
      ✓ should successfully update order status (57 ms)
      ✓ should update actual weight when processing (51 ms)
      ✓ should validate status transitions (59 ms)
      ✓ should send commission email when complete (61 ms)
    cancelOrder
      ✓ should successfully cancel an order (65 ms)
      ✓ should prevent cancelling non-cancellable orders (57 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (1 ms)
      ✓ should have unique event names
    logAuditEvent
      ✓ should log basic audit event (1 ms)
      ✓ should add request context when provided
      ✓ should handle customer context (1 ms)
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events
      ✓ should handle missing user context (1 ms)
      ✓ should handle connection.remoteAddress fallback
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses (1 ms)
      ✓ should include request context in logs
    logLoginAttempt
      ✓ should log successful login (1 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason (1 ms)
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions (1 ms)
    logPaymentActivity
      ✓ should log payment info access
      ✓ should log payment info update (1 ms)
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminScript.test.js (16.763 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (838 ms)
      ✓ should contain required functionality markers (384 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (615 ms)
      ✓ should calculate next admin ID correctly (1465 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (846 ms)
      ✓ should accept strong passwords for admins (753 ms)
    Permission System Validation
      ✓ should validate all permission types (948 ms)
      ✓ should handle partial permission sets (1236 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (1053 ms)
      ✓ should prevent duplicate emails (800 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (790 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (722 ms)
      ✓ should normalize email addresses (475 ms)
      ✓ should validate email format (746 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (732 ms)
      ✓ should work with password hashing middleware (963 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (675 ms)
      ✓ should handle invalid input gracefully (624 ms)
    Security Considerations
      ✓ should not log or expose passwords (680 ms)
      ✓ should generate secure random passwords when needed (906 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/oAuthSession.test.js (6.842 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (237 ms)
      ✓ should require sessionId field (216 ms)
      ✓ should require result field (209 ms)
      ✓ should automatically set createdAt (250 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (244 ms)
      ✓ should enforce unique sessionId (290 ms)
      ✓ should allow complex result objects (284 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (281 ms)
        ✓ should throw error for duplicate session IDs (293 ms)
        ✓ should handle database errors (210 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (320 ms)
        ✓ should return null for non-existent session (237 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (298 ms)
        ✓ should return null when consuming non-existent session (235 ms)
        ✓ should handle race conditions safely (291 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (448 ms)
        ✓ should return zero deletions when no expired sessions exist (289 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (271 ms)
      ✓ should respect custom expiresAt when provided (239 ms)
    Data Integrity
      ✓ should preserve all data types in result field (266 ms)
      ✓ should handle empty and minimal result objects (362 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (199 ms)
      ✓ should handle very large result objects (306 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (62 ms)
      ✓ should require customerId (58 ms)
      ✓ should require paygistixId (55 ms)
      ✓ should validate type enum (58 ms)
      ✓ should reject invalid type (58 ms)
      ✓ should default type to card (54 ms)
    Card Validation
      ✓ should require card details when type is card (65 ms)
      ✓ should validate card last4 length (53 ms)
      ✓ should validate card brand enum (57 ms)
      ✓ should reject invalid card brand (53 ms)
      ✓ should validate expiry month range (56 ms)
      ✓ should validate expiry year is not in the past (54 ms)
      ✓ should require card fingerprint (53 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (52 ms)
      ✓ should require bank account details when type is bank_account (52 ms)
      ✓ should validate bank account last4 length (52 ms)
      ✓ should validate account type enum (53 ms)
      ✓ should reject invalid account type (52 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (54 ms)
      ✓ should require wallet type when type is wallet (57 ms)
      ✓ should validate wallet type enum (55 ms)
    Default Values
      ✓ should default isDefault to false (58 ms)
      ✓ should default isActive to true (54 ms)
      ✓ should default isVerified to false (53 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (53 ms)
        ✓ should format bank account display name (53 ms)
        ✓ should format wallet display name (56 ms)
        ✓ should handle google_pay formatting (53 ms)
        ✓ should return default for unknown type (52 ms)
      isExpired
        ✓ should return false for non-card types (54 ms)
        ✓ should return false for future expiry (64 ms)
        ✓ should return true for past year (53 ms)
        ✓ should return true for current year past month (53 ms)
        ✓ should return false for current year future month (54 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (54 ms)
        ✓ should not allow use of inactive payment method (53 ms)
        ✓ should not allow use of expired card (52 ms)
        ✓ should not allow use of unverified bank account (53 ms)
        ✓ should allow use of verified bank account (52 ms)
      markAsUsed()
        ✓ should update lastUsedAt (52 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (53 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (54 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (53 ms)
        ✓ should return null if no duplicate found (52 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (53 ms)
    Metadata Field
      ✓ should store metadata as Map (54 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (54 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (56 ms)
      ✓ should require orderId (57 ms)
      ✓ should require customerId (63 ms)
      ✓ should require paymentMethodId (55 ms)
      ✓ should require paygistixId (57 ms)
      ✓ should require amount (59 ms)
      ✓ should validate amount is non-negative (57 ms)
      ✓ should default currency to USD (56 ms)
      ✓ should validate currency enum (53 ms)
      ✓ should reject invalid currency (53 ms)
      ✓ should validate status enum (56 ms)
      ✓ should reject invalid status (52 ms)
      ✓ should default status to pending (54 ms)
    Default Values
      ✓ should default capturedAmount to 0 (52 ms)
      ✓ should default refundedAmount to 0 (51 ms)
      ✓ should default hasDispute to false (53 ms)
      ✓ should have empty refunds array (52 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (53 ms)
      ✓ should handle zero amounts (51 ms)
      ✓ should handle full refund (51 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (56 ms)
        ✓ should allow refund when status is partially_refunded (63 ms)
        ✓ should not allow refund when status is pending (60 ms)
        ✓ should not allow refund when fully refunded (58 ms)
        ✓ should validate refund amount (54 ms)
        ✓ should handle null amount parameter (53 ms)
      canCapture()
        ✓ should allow capture when status is authorized (53 ms)
        ✓ should not allow capture when status is captured (51 ms)
        ✓ should not allow capture when status is pending (51 ms)
      addRefund()
        ✓ should add refund to refunds array (54 ms)
        ✓ should update refundedAmount (53 ms)
        ✓ should update lastRefundAt (53 ms)
        ✓ should set status to partially_refunded for partial refund (52 ms)
        ✓ should set status to refunded for full refund (53 ms)
        ✓ should handle multiple refunds (83 ms)
        ✓ should handle refund that exceeds captured amount (52 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (53 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (53 ms)
        ✓ should accept custom limit (53 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (52 ms)
    Middleware
      ✓ should have pre-save middleware defined (52 ms)
    Refund Schema
      ✓ should validate refund subdocument (56 ms)
      ✓ should require refundId in refund (53 ms)
      ✓ should require amount in refund (53 ms)
      ✓ should validate refund amount is non-negative (55 ms)
      ✓ should set default createdAt for refund (53 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (54 ms)
      ✓ should allow dispute fields when hasDispute is true (53 ms)
      ✓ should validate dispute amount is non-negative (54 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (53 ms)
      ✓ should store response as mixed type (52 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (11 ms)
      ✓ should return 404 when Google OAuth is not configured (5 ms)
      ✓ should handle Google OAuth callback (3 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (3 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (3 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (3 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (3 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (11 ms)
      ✓ should validate required fields for social registration (4 ms)
      ✓ should validate service radius range (3 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (3 ms)
      ✓ should validate provider for account linking (3 ms)
      ✓ should require social token for account linking (3 ms)
    Social Login Callback Route
      ✓ should handle social login callback (4 ms)
      ✓ should validate social login data (5 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (4 ms)
      ✓ should handle customer Google OAuth callback redirect (4 ms)
      ✓ should handle customer Facebook callback (4 ms)
      ✓ should handle customer LinkedIn callback (3 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (4 ms)
      ✓ should validate service frequency (3 ms)
    Error Handling
      ✓ should handle errors gracefully (18 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (62 ms)
      ✓ should return error when Paygistix is not configured (64 ms)
      ✓ should handle errors gracefully (60 ms)
    logSubmission
      ✓ should log payment submission successfully (59 ms)
      ✓ should handle logging errors (51 ms)
    createPaymentToken
      ✓ should create payment token successfully (56 ms)
      ✓ should handle no available callbacks (54 ms)
      ✓ should handle token creation errors (52 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (52 ms)
      ✓ should handle token not found (52 ms)
      ✓ should handle database errors (63 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (52 ms)
      ✓ should not cancel non-pending tokens (51 ms)
      ✓ should handle token not found (52 ms)
    updatePaymentStatus
      ✓ should update payment status to success (52 ms)
      ✓ should update payment status to failed (51 ms)
    handleFormCallback
      ✓ should process callback successfully (52 ms)
      ✓ should handle no pending payment for callback (51 ms)
      ✓ should handle callback processing errors (52 ms)
    processCallbackResult
      ✓ should process successful payment from query params (52 ms)
      ✓ should process failed payment (51 ms)
      ✓ should handle body parameters (51 ms)
      ✓ should redirect with all parameters (52 ms)
    getPoolStats
      ✓ should return pool statistics (51 ms)
      ✓ should handle stats retrieval errors (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (9 ms)
        ✓ should handle success status as well as approved (3 ms)
        ✓ should update existing payment if found (3 ms)
        ✓ should handle customer not found gracefully (3 ms)
        ✓ should handle email send failure gracefully (3 ms)
        ✓ should not update customer if already active (3 ms)
      Failed payment
        ✓ should handle declined payment (3 ms)
        ✓ should handle failed status (12 ms)
        ✓ should increment payment attempts on failure (3 ms)
        ✓ should use default error message when none provided (3 ms)
      Error handling
        ✓ should handle order not found (3 ms)
        ✓ should handle unknown payment status (3 ms)
        ✓ should handle database errors gracefully (3 ms)
        ✓ should handle payment save error (2 ms)
      Edge cases
        ✓ should handle missing amount parameter (2 ms)
        ✓ should handle malformed maskedCard (3 ms)
        ✓ should log callback parameters (3 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (9 ms)
      ✓ should handle POST callback errors (3 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-28T13:03:43.741Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.089Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:03:44.090Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-28T14:03:44.090Z","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.125Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.125Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.238Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.360Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:44.362Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:03:44.443Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:03:44.502Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:03:44.749Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:45.138Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-28T13:03:45.220Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:45.306Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:45.388Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-28T13:03:45.642Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-28T13:03:45.722Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:45.881Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-28T13:03:45.961Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (94 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (98 ms)
      ✓ should delete verifier after retrieval (100 ms)
      ✓ should clean up old PKCE files (85 ms)
    Authorization URL
      ✓ should generate correct authorization URL (93 ms)
      ✓ should use provided state if given (84 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (150 ms)
      ✓ should throw error if PKCE verifier not found (121 ms)
      ✓ should handle token exchange errors (84 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (202 ms)
      ✓ should throw error if no refresh token available (104 ms)
    Access Token Management
      ✓ should return valid access token if not expired (171 ms)
      ✓ should refresh token if expired (113 ms)
      ✓ should throw error if no valid token and no refresh token (105 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (80 ms)
      ✓ should handle envelope creation errors (81 ms)
      ✓ should return mock envelope in test mode (88 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (81 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (95 ms)
      ✓ should reject invalid webhook signature (78 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (79 ms)
      ✓ should handle declined envelope (79 ms)
    Envelope Status
      ✓ should get envelope status (80 ms)
    Document Download
      ✓ should download completed W9 document (80 ms)
    Envelope Voiding
      ✓ should void an envelope (94 ms)

(node:1998906) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (9 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully (1 ms)
    exportPaymentSummary
      ✓ should export payment summary as JSON (2 ms)
      ✓ should export payment summary as CSV (1 ms)
      ✓ should return 400 when dates are missing (1 ms)
      ✓ should return 404 when no payable commissions found
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (2 ms)
      ✓ should return 400 when required parameters are missing
      ✓ should return 404 when affiliate not found (8 ms)
      ✓ should return 400 when affiliate has no verified W-9 (1 ms)
    getExportHistory
      ✓ should get export history
      ✓ should filter by type

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

