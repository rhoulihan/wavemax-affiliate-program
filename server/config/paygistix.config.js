const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

/**
 * Paygistix Hosted Form Configuration
 * This configuration uses the paygistix-forms.json file for all settings
 * No environment variables needed - single source of truth
 */
class PaygistixConfig {
  constructor() {
    this.loadConfiguration();
  }

  /**
   * Load configuration from JSON file
   */
  loadConfiguration() {
    try {
      const configPath = path.join(__dirname, 'paygistix-forms.json');
      if (fs.existsSync(configPath)) {
        this.config = require(configPath);
        logger.info('Paygistix configuration loaded from paygistix-forms.json');
      } else {
        logger.error('Paygistix configuration file not found: paygistix-forms.json');
        this.config = null;
      }
    } catch (error) {
      logger.error('Failed to load Paygistix configuration:', error);
      this.config = null;
    }
  }

  /**
   * Get environment (always production for now)
   * @returns {string}
   */
  getEnvironment() {
    return 'production';
  }

  /**
   * Get merchant ID
   * @returns {string}
   * @throws {Error} If merchant ID is not configured
   */
  getMerchantId() {
    if (!this.config || !this.config.merchantId) {
      // Default to the known merchant ID if not in config
      return 'wmaxaustWEB';
    }
    return this.config.merchantId;
  }

  /**
   * Get form ID
   * @returns {string}
   * @throws {Error} If form ID is not configured
   */
  getFormId() {
    if (!this.config || !this.config.form || !this.config.form.formId) {
      throw new Error('Form ID is required but not configured in paygistix-forms.json');
    }
    return this.config.form.formId;
  }

  /**
   * Get form hash
   * @returns {string}
   * @throws {Error} If form hash is not configured
   */
  getFormHash() {
    if (!this.config || !this.config.form || !this.config.form.formHash) {
      throw new Error('Form hash is required but not configured in paygistix-forms.json');
    }
    return this.config.form.formHash;
  }

  /**
   * Get form action URL
   * @returns {string}
   */
  getFormActionUrl() {
    if (this.config && this.config.formActionUrl) {
      return this.config.formActionUrl;
    }
    return 'https://safepay.paymentlogistics.net/transaction.asp';
  }

  /**
   * Get return URL for payment callbacks
   * @returns {string}
   */
  getReturnUrl() {
    // This is dynamically generated by the callback pool manager
    return 'https://wavemax.promo/payment-callback-handler.html';
  }

  /**
   * Check if configuration is complete
   * @returns {boolean}
   */
  isConfigured() {
    try {
      // Try to get all required values - will throw if any are missing
      this.getMerchantId();
      this.getFormId();
      this.getFormHash();
      return true;
    } catch (error) {
      logger.error('Paygistix configuration incomplete:', error.message);
      return false;
    }
  }

  /**
   * Get public configuration object for client
   * Note: For hosted form approach, the hash must be included in the HTML form
   * @returns {Object}
   * @throws {Error} If required configuration is missing
   */
  getClientConfig() {
    try {
      return {
        merchantId: this.getMerchantId(),
        formId: this.getFormId(),
        formActionUrl: this.getFormActionUrl(),
        returnUrl: this.getReturnUrl(),
        environment: this.getEnvironment(),
        formHash: this.getFormHash(), // Required for hosted form submission
        testModeEnabled: process.env.ENABLE_TEST_PAYMENT_FORM === 'true' // Add test mode flag
      };
    } catch (error) {
      logger.error('Failed to get client config:', error.message);
      throw error;
    }
  }

  /**
   * Get full configuration including sensitive data (for server use only)
   * @returns {Object}
   * @throws {Error} If required configuration is missing
   */
  getFullConfig() {
    try {
      return {
        ...this.getClientConfig(),
        formHash: this.getFormHash()
      };
    } catch (error) {
      logger.error('Failed to get full config:', error.message);
      throw error;
    }
  }
}

module.exports = new PaygistixConfig();