
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (73 ms)
    ✓ should be a winston logger instance (19 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (53 ms)
    ✓ should verify password correctly (155 ms)
    ✓ should encrypt and decrypt data correctly (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured (1 ms)
      ✓ should return false when not configured

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit
    ✓ should handle non-numeric values (1 ms)
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers (1 ms)
    ✓ should preserve other query parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly
    ✓ should configure Facebook strategy with profile fields
    ✓ should configure Facebook strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter (1 ms)
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly (1 ms)
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly
      ✓ should handle both login and customer parameters together (9 ms)
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets (1 ms)
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions (1 ms)
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly (1 ms)
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data (1 ms)
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array (1 ms)
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats (1 ms)
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (496 ms)
      ✓ should authenticate valid x-auth-token header (221 ms)
      ✓ should reject request with no token (212 ms)
      ✓ should reject request with invalid token (208 ms)
      ✓ should reject request with expired token (211 ms)
      ✓ should handle malformed Authorization header (210 ms)
      ✓ should reject blacklisted token (215 ms)
    authorize
      ✓ should authorize user with correct role (211 ms)
      ✓ should authorize user with one of multiple roles (213 ms)
      ✓ should reject user with incorrect role (210 ms)
      ✓ should reject user with no role (209 ms)
      ✓ should reject when user is not set (206 ms)
    authLimiter
      ✓ should be a function (208 ms)
      ✓ should have rate limit configuration (204 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly (1 ms)
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter (1 ms)
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer (1 ms)
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers (1 ms)
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list (1 ms)
      ✓ should process customer list without filtering
      ✓ should filter customer list by customer ID (1 ms)
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format (1 ms)
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (11 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message (1 ms)
      ✓ should handle errors with code property
      ✓ should log all console error sections (2 ms)
    AppError
      ✓ should create custom error with status code
      ✓ should have stack trace
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (2 ms)
      ✓ should handle undefined error
      ✓ should handle non-error objects
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (24 ms)
      ✓ should allow access in test environment (6 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (4 ms)
      ✓ should deny access in production with invalid key (4 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (4 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (12 ms)
      ✓ should allow access with normal referer (4 ms)
    Route Handlers
      ✓ should serve index.html at root path (7 ms)
      ✓ should serve critical-files page (5 ms)
      ✓ should serve test-templates page (4 ms)
      ✓ should serve action-plan page (4 ms)
      ✓ should return 404 for non-existent pages (4 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (4 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (3 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (4 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (3 ms)
      ✓ should apply X-Frame-Options even with valid access (4 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (3 ms)
      ✓ should return valid HTML for 404 page (4 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (4 ms)
      ✓ should handle URL-encoded keys (4 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (4 ms)
      ✓ should handle specific route handlers (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/orderWithSystemConfig.test.js (9.62 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (843 ms)
      ✓ should use default rate when SystemConfig is not available (943 ms)
      ✓ should calculate estimated total using SystemConfig rate (644 ms)
      ✓ should calculate actual total using SystemConfig rate (640 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (646 ms)
      ✓ should calculate commission for zero delivery fee (635 ms)
      ✓ should handle commission calculation for large orders (644 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (660 ms)
      ✓ should update calculations when base rate changes (787 ms)
      ✓ should validate minimum and maximum base rates (879 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1163 ms)
      ✓ should match revenue calculator with different parameters (636 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (277 ms)
      ✓ should use default values for blacklistedAt and reason (114 ms)
      ✓ should require all mandatory fields (81 ms)
      ✓ should enforce unique token constraint (263 ms)
      ✓ should validate userType enum (80 ms)
      ✓ should accept all valid userTypes (211 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (118 ms)
        ✓ should use default reason when not provided (114 ms)
        ✓ should return null when token already blacklisted (246 ms)
        ✓ should handle custom reasons (113 ms)
        ✓ should propagate non-duplicate errors (80 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (143 ms)
        ✓ should return false for non-blacklisted token (107 ms)
        ✓ should handle empty token (106 ms)
        ✓ should handle null token (106 ms)
      cleanupExpired
        ✓ should delete expired tokens (239 ms)
        ✓ should return 0 when no expired tokens (201 ms)
        ✓ should handle empty collection (105 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (291 ms)
      ✓ should generate ADM002 when ADM001 exists (239 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (292 ms)
      ✓ should handle non-sequential admin IDs correctly (276 ms)
      ✓ should handle double-digit admin IDs (233 ms)
      ✓ should handle triple-digit admin IDs (223 ms)
      ✓ should handle large admin ID numbers (223 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (103 ms)
      ✓ should handle numbers above 999 without padding issues (104 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (105 ms)
      ✓ should handle edge cases in admin ID parsing (104 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (279 ms)
      ✓ should work correctly with different creation dates (292 ms)
      ✓ should work correctly with different permissions (285 ms)
    Performance and reliability
      ✓ should handle database query efficiently (218 ms)
      ✓ should handle concurrent admin creation scenario (392 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (11 ms)
      ✓ should throw error when encryption key is missing (1 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (3 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (22 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (51 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (171 ms)
      ✓ should return false for invalid salt format (53 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (12 ms)
      ✓ should handle unicode and special characters (1 ms)
      ✓ should produce different IVs for same input (2 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1271 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/models.test.js (6.83 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (750 ms)
      ✓ should require required fields (318 ms)
      ✓ should enforce unique constraints (624 ms)
      ✓ should handle payment information correctly (350 ms)
    Customer Model
      ✓ should create a valid customer (350 ms)
    Order Model
      ✓ should create a valid order (380 ms)
      ✓ should calculate estimated total correctly (382 ms)
      ✓ should calculate actual total and commission when weight is set (377 ms)
      ✓ should update timestamps for status changes (469 ms)
    Transaction Model
      ✓ should create a valid transaction (355 ms)
      ✓ should validate transaction type (314 ms)
      ✓ should validate transaction status (315 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (349 ms)
      ✓ should validate user type (317 ms)
      ✓ should check if token is expired (380 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (5 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (1 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests (1 ms)
        ✓ should consider CSRF for POST requests
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests (1 ms)
        ✓ should consider CSRF for PATCH requests
      Public endpoints
        ✓ should not enforce CSRF for public endpoints (1 ms)
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration (1 ms)
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation (1 ms)
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (1 ms)
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes (1 ms)
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2 (1 ms)
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes (1 ms)
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE (1 ms)
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering (1 ms)
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array
      ✓ should handle non-array inputs (1 ms)
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view (1 ms)
      ✓ should include appropriate fields for each role
    getFilteredData
      ✓ should filter data based on admin role (1 ms)
      ✓ should filter data based on public role
      ✓ should handle self context for customers
      ✓ should handle arrays of data
      ✓ should return data as-is for unknown data types (1 ms)
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method (1 ms)
      ✓ should filter response data when _filterType is provided (1 ms)
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated (1 ms)
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully
      ✓ should throw error when no callbacks available (12 ms)
    releaseCallback
      ✓ should release callback successfully (1 ms)
      ✓ should handle null callback gracefully
    getPoolStatus
      ✓ should return pool status with all handler details (1 ms)
      ✓ should handle empty pool (1 ms)
    startCleanupJob
      ✓ should start cleanup interval (2 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (7 ms)
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running (1 ms)
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (1 ms)
      ✓ should sanitize arrays recursively
      ✓ should sanitize objects recursively (1 ms)
      ✓ should handle null values
      ✓ should handle undefined values
      ✓ should handle numbers
      ✓ should handle booleans
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects (1 ms)
      ✓ should not modify prototype properties
    sanitizeRequest
      ✓ should sanitize request body (1 ms)
      ✓ should sanitize query parameters
      ✓ should sanitize URL parameters (1 ms)
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (1 ms)
    sanitizeEmail
      ✓ should sanitize and validate email
      ✓ should remove HTML from email (1 ms)
      ✓ should return empty string for invalid email
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should validate complex email formats (1 ms)
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters
      ✓ should handle international format (1 ms)
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens (1 ms)
      ✓ should remove special characters
      ✓ should remove spaces (1 ms)
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string (10 ms)
      ✓ should handle MongoDB ObjectId format (1 ms)
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths (1 ms)
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain
      ✓ should handle complex nested structures (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers (1 ms)
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email (1 ms)
        ✓ should reject sequential characters
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password (1 ms)
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks (1 ms)
    customPasswordValidator
      ✓ should work as express-validator custom validator (15 ms)
      ✓ should include validation errors in thrown message (1 ms)
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success (1 ms)
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (55 ms)
      ✓ should handle null/undefined history (1 ms)
    getPasswordStrength
      ✓ should return higher scores for stronger passwords
      ✓ should score length appropriately (1 ms)
      ✓ should score character variety
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords (9 ms)
      ✓ should contain domain-specific passwords (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2,
      serviceNotes: 'Handle with care',
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon',
      specialDeliveryInstructions: 'Leave at door'
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:114:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      153 |     } catch (emailError) {
    > 154 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      155 |       // Continue with the response even if emails fail
      156 |     }
      157 |

      at Object.error [as createOrder] (server/controllers/orderController.js:154:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:117:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:86:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:99:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (359 ms)
      ✓ should handle email sending failures gracefully (122 ms)
      ✓ should return error for invalid customer (54 ms)
      ✓ should return error for invalid affiliate (55 ms)
      ✓ should enforce authorization (54 ms)
    getOrderDetails
      ✓ should return order details for authorized user (51 ms)
      ✓ should return 404 for non-existent order (51 ms)
      ✓ should enforce authorization for customers (51 ms)
    updateOrderStatus
      ✓ should successfully update order status (52 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (51 ms)
      ✓ should send commission email when complete (52 ms)
    cancelOrder
      ✓ should successfully cancel an order (53 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:93:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching administrators:', error);
         |             ^
      73 |     res.status(500).json({
      74 |       success: false,
      75 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:72:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:96:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (54 ms)
      ✓ should handle errors (75 ms)
    createAdministrator
      ✓ should create administrator (53 ms)
      ✓ should handle validation errors (56 ms)
    updateAdministrator
      ✓ should update administrator (53 ms)
      ✓ should prevent self-deactivation (52 ms)
    deleteAdministrator
      ✓ should delete administrator (53 ms)
      ✓ should prevent self-deletion (53 ms)
    resetAdministratorPassword
      ✓ should reset password (54 ms)
    Operator Management
      ✓ createOperator should create new operator (52 ms)
      ✓ getOperators should return operators list (55 ms)
      ✓ updateOperator should update operator details (51 ms)
      ✓ deactivateOperator should deactivate operator (55 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (55 ms)
      ✓ getOrderAnalytics should return order analytics (53 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (52 ms)
      ✓ updateSystemConfig should update configuration (53 ms)
    getPermissions
      ✓ should return available permissions (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (1 ms)
      ✓ should have unique event names
    logAuditEvent
      ✓ should log basic audit event
      ✓ should add request context when provided
      ✓ should handle customer context
      ✓ should use error level for critical events
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses
      ✓ should include request context in logs
    logLoginAttempt
      ✓ should log successful login
      ✓ should log failed login with reason
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access (1 ms)
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level
      ✓ should include request context (1 ms)
      ✓ should merge all details (8 ms)
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:117:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      608 |     });
      609 |   } catch (error) {
    > 610 |     console.error('Delete customer data error:', error);
          |             ^
      611 |     res.status(500).json({
      612 |       success: false,
      613 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:610:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (9 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer (1 ms)
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (11 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/createAdminScript.test.js (9.831 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (528 ms)
      ✓ should contain required functionality markers (349 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (587 ms)
      ✓ should calculate next admin ID correctly (632 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (381 ms)
      ✓ should accept strong passwords for admins (709 ms)
    Permission System Validation
      ✓ should validate all permission types (437 ms)
      ✓ should handle partial permission sets (446 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (532 ms)
      ✓ should prevent duplicate emails (532 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (482 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (429 ms)
      ✓ should normalize email addresses (448 ms)
      ✓ should validate email format (355 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (473 ms)
      ✓ should work with password hashing middleware (447 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (351 ms)
      ✓ should handle invalid input gracefully (358 ms)
    Security Considerations
      ✓ should not log or expose passwords (348 ms)
      ✓ should generate secure random passwords when needed (369 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/oAuthSession.test.js (6.713 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (392 ms)
      ✓ should require sessionId field (202 ms)
      ✓ should require result field (224 ms)
      ✓ should automatically set createdAt (237 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (238 ms)
      ✓ should enforce unique sessionId (274 ms)
      ✓ should allow complex result objects (249 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (299 ms)
        ✓ should throw error for duplicate session IDs (267 ms)
        ✓ should handle database errors (207 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (266 ms)
        ✓ should return null for non-existent session (236 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (293 ms)
        ✓ should return null when consuming non-existent session (229 ms)
        ✓ should handle race conditions safely (293 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (461 ms)
        ✓ should return zero deletions when no expired sessions exist (286 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (228 ms)
      ✓ should respect custom expiresAt when provided (235 ms)
    Data Integrity
      ✓ should preserve all data types in result field (238 ms)
      ✓ should handle empty and minimal result objects (368 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (213 ms)
      ✓ should handle very large result objects (306 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (12 ms)
      ✓ should return 404 when Google OAuth is not configured (4 ms)
      ✓ should handle Google OAuth callback (3 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (2 ms)
      ✓ should return 404 when Facebook OAuth is not configured (1 ms)
      ✓ should handle Facebook OAuth callback (2 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (2 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (9 ms)
      ✓ should validate required fields for social registration (16 ms)
      ✓ should validate service radius range (3 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (3 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (3 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (3 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (3 ms)
      ✓ should handle customer Facebook callback (2 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (2 ms)
      ✓ should validate service frequency (2 ms)
    Error Handling
      ✓ should handle errors gracefully (15 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/administrator.test.js (7.812 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (312 ms)
      ✓ should require all mandatory fields (94 ms)
      ✓ should enforce email format validation (78 ms)
      ✓ should enforce unique email constraint (488 ms)
      ✓ should enforce unique adminId constraint (502 ms)
      ✓ should validate permission enum values (78 ms)
      ✓ should accept valid permissions (163 ms)
      ✓ should trim whitespace from string fields (163 ms)
      ✓ should convert email to lowercase (162 ms)
      ✓ should not allow role to be changed after creation (226 ms)
    Password Handling
      ✓ should hash password on save (193 ms)
      ✓ should verify correct password (250 ms)
      ✓ should reject incorrect password (240 ms)
      ✓ should not expose password in JSON output (161 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (229 ms)
      ✓ should lock account after 5 failed attempts (225 ms)
      ✓ should reset login attempts on successful login (231 ms)
      ✓ should reset attempts if lock has expired (228 ms)
      ✓ should correctly identify locked accounts (201 ms)
    Password Reset
      ✓ should generate password reset token (167 ms)
      ✓ should set password reset expiry to 30 minutes (172 ms)
    Permissions
      ✓ should check single permission correctly (167 ms)
      ✓ should check multiple permissions with AND operation (176 ms)
      ✓ should check multiple permissions with OR operation (168 ms)
      ✓ should set default permissions if none provided (167 ms)
    Static Methods
      ✓ should find active administrators (459 ms)
      ✓ should find administrator by email with password (228 ms)
      ✓ should handle case-insensitive email search (202 ms)
      ✓ should return null for non-existent email (107 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (163 ms)
      ✓ should update updatedAt on modification (291 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (254 ms)
      ✓ should not override provided admin ID (164 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (1 ms)
        ✓ should accept passwords with 8 or more characters (1 ms)
      Character Type Requirements
        ✓ should require at least one uppercase letter
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character (1 ms)
        ✓ should accept passwords with all required character types
      Common Password Detection
        ✓ should reject common passwords (1 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers
        ✓ should reject passwords with sequential letters (1 ms)
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history (1 ms)
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores
      ✓ should return correct strength labels (1 ms)
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history
      ✓ should handle empty history (4 ms)
    customPasswordValidator
      ✓ should return custom validator function
      ✓ should validate passwords correctly in express-validator context (1 ms)
      ✓ should throw for invalid passwords in express-validator context (12 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator (1 ms)
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request
      ✓ should include strength assessment in response for invalid passwords (1 ms)
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully
      ✓ should handle very long passwords (1 ms)
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (55 ms)
      ✓ should return error when Paygistix is not configured (53 ms)
      ✓ should handle errors gracefully (53 ms)
    logSubmission
      ✓ should log payment submission successfully (59 ms)
      ✓ should handle logging errors (58 ms)
    createPaymentToken
      ✓ should create payment token successfully (62 ms)
      ✓ should handle no available callbacks (53 ms)
      ✓ should handle token creation errors (54 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (53 ms)
      ✓ should handle token not found (54 ms)
      ✓ should handle database errors (54 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (55 ms)
      ✓ should not cancel non-pending tokens (54 ms)
      ✓ should handle token not found (54 ms)
    updatePaymentStatus
      ✓ should update payment status to success (56 ms)
      ✓ should update payment status to failed (54 ms)
    handleFormCallback
      ✓ should process callback successfully (54 ms)
      ✓ should handle no pending payment for callback (54 ms)
      ✓ should handle callback processing errors (53 ms)
    processCallbackResult
      ✓ should process successful payment from query params (54 ms)
      ✓ should process failed payment (53 ms)
      ✓ should handle body parameters (54 ms)
      ✓ should redirect with all parameters (57 ms)
    getPoolStats
      ✓ should return pool statistics (54 ms)
      ✓ should handle stats retrieval errors (55 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:543:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:543:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:543:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:728:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:363:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      749 |     });
      750 |   } catch (error) {
    > 751 |     console.error('Token verification error:', error);
          |             ^
      752 |     res.status(500).json({
      753 |       success: false,
      754 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:751:13)
      at Object.verifyToken (tests/unit/authController.test.js:363:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (2 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password (1 ms)
    customerLogin
      ✓ should successfully login a customer with valid credentials (16 ms)
      ✓ should return 401 for non-existent customer
      ✓ should login customer using emailOrUsername field (2 ms)
      ✓ should prioritize emailOrUsername over username field (2 ms)
      ✓ should return error when neither username nor emailOrUsername provided
    verifyToken
      ✓ should verify a valid JWT token
      ✓ should handle missing user data (60 ms)
      ✓ should return customer user data (1 ms)
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator
    operatorLogin
      ✓ should successfully login operator with PIN (1 ms)
      ✓ should increment login attempts on failure
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate (1 ms)
      ✓ should handle non-existent email gracefully
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy (1 ms)
      ✓ should reject when user has lower role in hierarchy
      ✓ should handle array of required roles (1 ms)
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources (1 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present
      ✓ should accept when user has access to all required roles (1 ms)
      ✓ should reject when user lacks access to any required role
      ✓ should accept admin for any combination of roles
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource (1 ms)
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource (1 ms)
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID (1 ms)
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (1 ms)
      ✓ should handle array of required permissions
      ✓ should reject when administrator lacks any required permission (1 ms)
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found
      ✓ should reject when operator is not active (1 ms)
      ✓ should reject when operator is not on shift
      ✓ should accept active operator on shift (1 ms)
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions (1 ms)
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields (1 ms)
      ✓ should handle non-object data gracefully (4 ms)
      ✓ should handle empty allowed fields (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (5 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials (1 ms)
      ✓ should configure LinkedIn strategy when credentials are present (1 ms)
    Google OAuth Strategy
      ✓ should handle database errors (1 ms)
      Customer Context
        ✓ should handle existing customer with Google account (2 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (3 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (7 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (1 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (2 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/systemConfig.test.js (13.295 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (272 ms)
      ✓ should require mandatory fields (83 ms)
      ✓ should enforce unique key constraint (285 ms)
      ✓ should validate category enum (79 ms)
      ✓ should validate dataType enum (79 ms)
      ✓ should accept all valid categories (387 ms)
      ✓ should accept all valid data types (237 ms)
      ✓ should trim string fields (113 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (79 ms)
        ✓ should enforce minimum value validation (80 ms)
        ✓ should enforce maximum value validation (80 ms)
        ✓ should accept valid number within range (116 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (81 ms)
        ✓ should accept boolean values (114 ms)
      String validation
        ✓ should reject non-string values for string dataType (80 ms)
        ✓ should enforce regex validation (80 ms)
        ✓ should accept valid string matching regex (117 ms)
      Array validation
        ✓ should reject non-array values for array dataType (80 ms)
        ✓ should accept array values (115 ms)
      Object validation
        ✓ should reject non-object values for object dataType (80 ms)
        ✓ should reject arrays for object dataType (79 ms)
        ✓ should accept object values (115 ms)
      Allowed values validation
        ✓ should enforce allowed values (80 ms)
        ✓ should accept allowed values (112 ms)
    Static Methods
      getValue
        ✓ should return config value (146 ms)
        ✓ should return defaultValue when value is undefined (145 ms)
        ✓ should return provided default when config not found (110 ms)
        ✓ should return null when config not found and no default provided (107 ms)
      setValue
        ✓ should update config value (179 ms)
        ✓ should throw error for non-existent config (106 ms)
        ✓ should throw error for non-editable config (141 ms)
        ✓ should update updatedBy when provided (179 ms)
        ✓ should validate new value according to dataType (141 ms)
      getByCategory
        ✓ should return all configs for a category (307 ms)
        ✓ should return only public configs when specified (146 ms)
        ✓ should return empty array for non-existent category (140 ms)
        ✓ should sort by key (179 ms)
      getPublicConfigs
        ✓ should return only public configs (156 ms)
        ✓ should sort by category then key (142 ms)
      initializeDefaults
        ✓ should create default configurations (505 ms)
        ✓ should not overwrite existing configurations (468 ms)
        ✓ should add missing configurations (471 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (112 ms)
      ✓ should update updatedAt on modification (245 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (112 ms)
      ✓ should use defaultValue when value is undefined (113 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (111 ms)
      ✓ should handle empty validation object (112 ms)
      ✓ should skip validation when value is not modified (140 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:850:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:915:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:850:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:850:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:915:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:05:25.107Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      961 |             await OAuthSession.createSession(sessionId, message);
      962 |           } catch (dbError) {
    > 963 |             console.error('Error storing OAuth session:', dbError);
          |                     ^
      964 |           }
      965 |         }
      966 |         

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:963:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:850:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:915:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1641:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1703:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-15T23:05:25.645Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-15T23:05:26.260Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-15T23:05:26.648Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:05:27.112Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-15T23:05:27.112Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:05:27.424Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-15T23:05:27.578Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1611:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1611:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1611:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1611:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1611:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1592:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1613 |     
      1614 |   } catch (error) {
    > 1615 |     console.error('OAuth session polling error:', error);
           |             ^
      1616 |     res.status(500).json({
      1617 |       success: false,
      1618 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1615:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.541 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (423 ms)
      ✓ should handle customer context from state parameter (164 ms)
      ✓ should handle missing user data gracefully (157 ms)
      ✓ should handle OAuth session creation errors (176 ms)
      ✓ should extract profile data correctly for different providers (156 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (157 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (204 ms)
      ✓ should sanitize social data and reject if fields become empty (155 ms)
      ✓ should check for existing email and username (153 ms)
      ✓ should check for existing social account (152 ms)
      ✓ should generate unique username from social data (156 ms)
      ✓ should handle JWT verification errors (155 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (231 ms)
      ✓ should validate affiliate existence (155 ms)
      ✓ should sanitize customer social data (155 ms)
    socialLogin
      ✓ should login existing affiliate with social account (155 ms)
      ✓ should return error for non-existent social account (156 ms)
      ✓ should login existing customer with social account (154 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (154 ms)
      ✓ should prevent linking already existing social account (156 ms)
      ✓ should handle user not found error (161 ms)
    pollOAuthSession
      ✓ should return complete session data when available (153 ms)
      ✓ should return social-auth-login session data (154 ms)
      ✓ should return social-auth-error session data (155 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (155 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (154 ms)
      ✓ should return pending status when session not ready (155 ms)
      ✓ should handle database errors gracefully (157 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (155 ms)
      ✓ should handle database connection errors (153 ms)
      ✓ should handle missing required fields in social data (155 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operator.test.js (11.305 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (323 ms)
      ✓ should require all mandatory fields (85 ms)
      ✓ should enforce email format validation (92 ms)
      ✓ should enforce unique email constraint (638 ms)
      ✓ should enforce unique username constraint (647 ms)
      ✓ should validate username format (80 ms)
      ✓ should validate shift time format (81 ms)
      ✓ should accept valid shift times (168 ms)
      ✓ should enforce quality score range (80 ms)
      ✓ should trim whitespace from string fields (165 ms)
      ✓ should convert email and username to lowercase (172 ms)
      ✓ should not allow role to be changed after creation (232 ms)
    Password Handling
      ✓ should hash password on save (189 ms)
      ✓ should verify correct password (244 ms)
      ✓ should reject incorrect password (244 ms)
      ✓ should not expose password in JSON output (167 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (224 ms)
      ✓ should lock account after 5 failed attempts (476 ms)
      ✓ should lock for 30 minutes (453 ms)
      ✓ should reset login attempts on successful login (284 ms)
      ✓ should reset attempts if lock has expired (271 ms)
      ✓ should correctly identify locked accounts (164 ms)
    Password Reset
      ✓ should generate password reset token (83 ms)
      ✓ should set password reset expiry to 30 minutes (80 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (80 ms)
        ✓ should correctly identify operator on shift during normal hours (80 ms)
        ✓ should correctly identify operator off shift (80 ms)
        ✓ should handle overnight shifts correctly (79 ms)
    Processing Statistics
      ✓ should update processing stats correctly (227 ms)
      ✓ should handle first order processing (194 ms)
      ✓ should update quality score with passing result (223 ms)
      ✓ should update quality score with failing result (224 ms)
    Static Methods
      findActive
        ✓ should find only active operators (294 ms)
      findOnShift
        ✓ should find only operators on shift (330 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (191 ms)
        ✓ should handle case-insensitive email search (190 ms)
        ✓ should return null for non-existent email (106 ms)
      findAvailableOperators
        ✓ should find operators with low order count (267 ms)
        ✓ should sort by current order count (269 ms)
        ✓ should respect limit parameter (1047 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (166 ms)
      ✓ should update updatedAt on modification (307 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (256 ms)
      ✓ should not override provided operator ID (171 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:53:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching administrators:', error);
         |             ^
      73 |     res.status(500).json({
      74 |       success: false,
      75 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:72:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2176:70)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:925:9)

      2182 |     });
      2183 |   } catch (error) {
    > 2184 |     console.error('Error updating operator profile:', error);
           |             ^
      2185 |     res.status(500).json({
      2186 |       success: false,
      2187 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2184:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:925:9)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (1 ms)
        ✓ should filter administrators by search query (1 ms)
        ✓ should handle database errors (47 ms)
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId
      createAdministrator
        ✓ should create new administrator with valid data (2 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error (1 ms)
      updateAdministrator
        ✓ should update administrator successfully
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (1 ms)
        ✓ should prevent self-deletion (11 ms)
        ✓ should prevent deletion of last administrator (1 ms)
      resetAdministratorPassword
        ✓ should reset administrator password
        ✓ should handle email sending failure (1 ms)
      getPermissions
        ✓ should return all available permissions
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format (1 ms)
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields (2 ms)
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (26 ms)
      ✓ should handle database errors (7 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (10 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (2 ms)
      ✓ should handle password change
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (2 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
    Error handling
      ✓ should handle database connection errors (1 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getDashboard
      ✓ should return operator dashboard data (1 ms)
    getOrderQueue
      ✓ should return available orders for operator workstation
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed (1 ms)
      ✓ should fail if order not found
      ✓ should handle database error during claim (1 ms)
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found (1 ms)
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation
      ✓ should set processingCompleted when status is ready (1 ms)
      ✓ should handle database error (1 ms)
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check
    getMyOrders
      ✓ should return orders assigned to operator (1 ms)
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found
      ✓ should end shift successfully (1 ms)
      ✓ should handle database error
    getPerformanceStats
      ✓ should return operator performance statistics
    getCustomerDetails
      ✓ should return customer details for an order (1 ms)
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getDashboard when operator not found
      ✓ should handle database error in getDashboard (1 ms)
      ✓ should handle error in getOrderQueue
      ✓ should handle different filters in getOrderQueue (1 ms)
      ✓ should handle operator at max capacity in claimOrder
      ✓ should handle quality check failure in performQualityCheck (1 ms)
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus (1 ms)
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails
      ✓ should handle filters in getMyOrders (1 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:45.318Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:45.659Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b03e2632543e9a6444c7e15266175d7f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HWWU3u7i-IuRVSJDXIdtFVuOmhRF2yZcSL2E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b03e2632543e9a6444c7e15266175d7f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pzIPLVw1dj...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 14.779 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:46.353Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:46.676Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:46.677Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:46.768Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-0234dee1-59e1-4240-87dd-cdf8d8c71a02",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 166.558 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:46.999Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:47.002Z"}
[0mGET /api/v1/payments/config [32m200[0m 3.621 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:47.689Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dad4dd0213effd6747aa5b77340e8b0a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XNVeUJIa-kNZRSAgj5_ss4WL58CPoI4NmCJ8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: dad4dd0213effd6747aa5b77340e8b0a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 0eNC-Fjz8z...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.839 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:47.830Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.138Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.138Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.219Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-72243192-31d1-4797-8004-6fefdc8efb48",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 138.921 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.419Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: 'dad4dd0213effd6747aa5b77340e8b0a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adad4dd0213effd6747aa5b77340e8b0a.JybIDbWIYBD5VRN1sY%2BC8CtWG5a8fKl7FSwbK6aIXHQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[32minfo[39m: Acquired callback handler for payment token mby9xkeg-u1ate53: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"https://wavemax.promo/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.455Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:48.490Z","token":"mby9xkeg-u1ate53"}
[0mPOST /api/v1/payments/create-token [32m200[0m 71.759 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.132Z"}
  console.log
    CSRF token generation: {
      sessionID: '410a4d99f57448a317ba5d0e395a8883',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 7hoI0kcD-DzwPxsxvWuG3bgr7rMSXCztkOuA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 410a4d99f57448a317ba5d0e395a8883

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: a9c8PEh4MH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.141 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.274Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.574Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.574Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.686Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-c30e23c0-fbf9-41fd-a46b-ed6bf41e6dfc",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 138.637 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.885Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: '410a4d99f57448a317ba5d0e395a8883',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A410a4d99f57448a317ba5d0e395a8883.vmKZ8v4ZyGz7WwbBD1ScJOjHMhc4eLKt8KFmDAXdse4',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[32minfo[39m: Acquired callback handler for payment token mby9xlj5-zr7olxk: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"https://wavemax.promo/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.919Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.951Z","token":"mby9xlj5-zr7olxk"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.308 ms - 300[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mby9xlj5-zr7olxk {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:49.955Z"}
[0mGET /api/v1/payments/check-status/mby9xlj5-zr7olxk [32m200[0m 29.549 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:50.626Z"}
  console.log
    CSRF token generation: {
      sessionID: '13eafb6aeb5f6d9321aef63b6acc0a07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: bpQNmozY-pEbxhK0WRgqGKVe6AJKIAnG2ROI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 13eafb6aeb5f6d9321aef63b6acc0a07

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: utdU2ZxeU6...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 15.274 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:50.774Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.077Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.077Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.178Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-889e9406-c65c-4f14-b189-c90b9e8b076a",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 150.966 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.391Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: '13eafb6aeb5f6d9321aef63b6acc0a07',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A13eafb6aeb5f6d9321aef63b6acc0a07.GtRWO48kKQ0F%2FigkA%2FPJVZq%2Fb0R1HEPtrTbDaR5ZTpc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[32minfo[39m: Acquired callback handler for payment token mby9xmoy-frx4cn3: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"https://wavemax.promo/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.425Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.454Z","token":"mby9xmoy-frx4cn3"}
[0mPOST /api/v1/payments/create-token [32m200[0m 63.912 ms - 300[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mby9xmoy-frx4cn3 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.457Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mby9xmoy-frx4cn3 {
      sessionID: '13eafb6aeb5f6d9321aef63b6acc0a07',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A13eafb6aeb5f6d9321aef63b6acc0a07.GtRWO48kKQ0F%2FigkA%2FPJVZq%2Fb0R1HEPtrTbDaR5ZTpc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[32minfo[39m: Released callback handler for payment token mby9xmoy-frx4cn3: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.545Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:51.545Z","token":"mby9xmoy-frx4cn3"}
[0mPOST /api/v1/payments/cancel-token/mby9xmoy-frx4cn3 [32m200[0m 88.276 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.182Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe1f8c6d80e41e874c06839344bc60e1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: X2Vqn9LR-IUOh03XtVcKYsjKZs9onne6w2t0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fe1f8c6d80e41e874c06839344bc60e1

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: GcrlAwTpfZ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.737 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.322Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.621Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.622Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.703Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-c83b4867-7e35-4b54-ad75-45d6f880de6a",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 155.485 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/callback/handler-1?token=test-token&status=success {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.920Z"}
[32minfo[39m: Form-specific payment callback received: {"body":{},"callbackPath":"/api/v1/payments/callback/handler-1","method":"GET","query":{"status":"success","token":"test-token"},"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.922Z"}
[31merror[39m: No pending payment found for callback path: {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:52.949Z"}
[0mGET /api/v1/payments/callback/handler-1?token=test-token&status=success [36m302[0m 29.075 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:53.593Z"}
  console.log
    CSRF token generation: {
      sessionID: '494344863add4c7beb46a1f2f8cf5818',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 3gw3uzQN-FmVHuPpipVtE74kSwwu1TK8jDKI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 494344863add4c7beb46a1f2f8cf5818

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: B50QPZWkZt...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.786 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:53.737Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:54.045Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:54.045Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:54.129Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-97d17d82-187a-445f-a827-734f83ecce85",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 137.387 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:54.325Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 30.727 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:54.988Z"}
PASS tests/integration/payment.test.js (10.784 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2043 ms)
    Payment Token Tests
      ✓ should create payment token (1443 ms)
      ✓ should check payment status (1494 ms)
      ✓ should cancel payment token (1555 ms)
    Payment Callback Tests
      ✓ should handle form callback (1410 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1397 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:55.796Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:56.737Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:05:56.916Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 180.029 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:57.771Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:05:57.921Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.433 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d72ef8d8-2836-496a-9460-8441a34af987/customers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:57.933Z"}
[0mGET /api/v1/affiliates/AFF-d72ef8d8-2836-496a-9460-8441a34af987/customers [32m200[0m 112.378 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:58.830Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:05:58.969Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 139.592 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-b6139d20-19ca-44a7-bfee-8f83b25339e8/customers?customerId=CUST-31be9cdf-0af3-4265-80f2-a6aa611f3aa9 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:59.088Z"}
[0mGET /api/v1/affiliates/AFF-b6139d20-19ca-44a7-bfee-8f83b25339e8/customers?customerId=CUST-31be9cdf-0af3-4265-80f2-a6aa611f3aa9 [32m200[0m 107.083 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:05:59.996Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:00.144Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.886 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-2b491477-77a6-4e6a-8a59-b90da78e4f59/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:00.149Z"}
[0mGET /api/v1/affiliates/AFF-2b491477-77a6-4e6a-8a59-b90da78e4f59/customers?customerId=NONEXISTENT123 [32m200[0m 106.434 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:01.061Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:01.202Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 140.460 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-386b9e0f-5273-4130-a274-52f27bb83108/customers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:01.205Z"}
[0mGET /api/v1/affiliates/AFF-386b9e0f-5273-4130-a274-52f27bb83108/customers [33m401[0m 1.071 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:01.994Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:02.137Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.624 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:02.140Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:02.285Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.641 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d384e143-ba7e-480f-9e84-c98f4801e014/customers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:02.295Z"}
[0mGET /api/v1/affiliates/AFF-d384e143-ba7e-480f-9e84-c98f4801e014/customers [32m200[0m 108.734 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d384e143-ba7e-480f-9e84-c98f4801e014/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:02.407Z"}
[0mGET /api/v1/affiliates/AFF-d384e143-ba7e-480f-9e84-c98f4801e014/dashboard [32m200[0m 133.623 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:03.368Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:03.512Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.396 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:04.297Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:04.491Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 194.361 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-4f863d96-85fe-4096-bd5c-2084bb1800b3 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:04.494Z"}
[0mGET /api/v1/affiliates/AFF-4f863d96-85fe-4096-bd5c-2084bb1800b3 [32m200[0m 53.844 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:05.329Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:05.476Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.616 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-22362cd9-3f02-41ae-961a-8b0f2f73e3ab/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:05.480Z"}
[0mGET /api/v1/affiliates/AFF-22362cd9-3f02-41ae-961a-8b0f2f73e3ab/dashboard [32m200[0m 140.977 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:06.409Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:06.562Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 153.849 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5f28c32d-8d69-4857-b102-dbbe5ff5b7e5/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:06.566Z"}
[0mGET /api/v1/affiliates/AFF-5f28c32d-8d69-4857-b102-dbbe5ff5b7e5/customers?customerId=INVALID_ID [32m200[0m 106.469 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:07.472Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:07.617Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.534 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:07.620Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 27.853 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:08.447Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:08.584Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 138.211 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c2c569fe-88b8-4b36-8a7a-9538d2e42ac5/customers {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:08.587Z"}
[0mGET /api/v1/affiliates/AFF-c2c569fe-88b8-4b36-8a7a-9538d2e42ac5/customers [32m200[0m 107.711 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (14.213 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (1472 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1065 ms)
      ✓ should filter customers by customerId when provided (1158 ms)
      ✓ should return empty array when filtering by non-existent customerId (1057 ms)
      ✓ should require authentication to access customer list (951 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1331 ms)
      ✓ should handle URL parameters correctly throughout the flow (970 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1032 ms)
      ✓ should load dashboard statistics correctly (1075 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1050 ms)
      ✓ should handle invalid affiliate ID (980 ms)
      ✓ should handle database connection issues gracefully (1049 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/integration/adminCreation.test.js (5.007 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (354 ms)
      ✓ should create admin with next sequential ID when admins exist (339 ms)
      ✓ should handle admin creation with all permissions (197 ms)
      ✓ should handle admin creation with partial permissions (208 ms)
    Admin Model Validation
      ✓ should require email field (103 ms)
      ✓ should save admins with different adminIds successfully (279 ms)
      ✓ should save admins with different emails successfully (291 ms)
    Password Handling
      ✓ should hash password before saving (188 ms)
      ✓ should validate password with verifyPassword method (299 ms)
    Admin Query Operations
      ✓ should find admin by adminId (489 ms)
      ✓ should find admin by email (356 ms)
      ✓ should find active admins only (322 ms)
      ✓ should find admins with specific permissions (336 ms)
      ✓ should get last admin for ID generation (346 ms)
    Email Integration
      ✓ should call email service after admin creation (222 ms)
      ✓ should handle email service failures gracefully (214 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:15.222Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:15.531Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ee86404427120c281447cf1f074694e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XWX66mj4-1V7iYp3N7zBQAnIMpFj9ZhtAmIs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ee86404427120c281447cf1f074694e9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MYzKRlNQSr...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.678 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:15.758Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 450.028 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:16.894Z"}
  console.log
    CSRF token generation: {
      sessionID: '55bea75d91fed6ac72064e620f4ca6b4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: TUZd7XrO-H8w6Hiva4k_kliwNDoCKIbXxXoY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 55bea75d91fed6ac72064e620f4ca6b4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: tPE7-mgCWr...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.913 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-0862f970-3ebb-43b1-a4fb-5eb82b17ef51 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:16.938Z"}
[0mGET /api/v1/affiliates/AFF-0862f970-3ebb-43b1-a4fb-5eb82b17ef51 [32m200[0m 56.431 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:17.618Z"}
  console.log
    CSRF token generation: {
      sessionID: '027c96d94fd7c6d8e1b1ba32884d6462',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XH4DYfYU-XKt9siLp5BKxcK9J3GYSgmhq6Q0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 027c96d94fd7c6d8e1b1ba32884d6462

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Wpq3gA0VRH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.976 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-6815d581-8a1a-4cef-927d-ecc8763efd93 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:17.658Z"}
[0mPUT /api/v1/affiliates/AFF-6815d581-8a1a-4cef-927d-ecc8763efd93 [32m200[0m 86.065 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:18.402Z"}
  console.log
    CSRF token generation: {
      sessionID: '069f49c0c57bd140d82cfeb7234c6783',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 90PjLoNt-M2hJdTEFTUhHuRxY61FUVco-S24

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 069f49c0c57bd140d82cfeb7234c6783

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: NoAKRuneU-...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.952 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:18.527Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:06:18.670Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.457 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:19.290Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b0bdde91ef7722ff85e3927d4500e106',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: c0aRy4Ke-cJ8f6syLNI5ifEQMHNWT07jSwZA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b0bdde91ef7722ff85e3927d4500e106

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: m5-nFH05gz...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.719 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-0864074c-2a90-42e2-82ed-c816ceb32290/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:19.368Z"}
[0mGET /api/v1/affiliates/AFF-0864074c-2a90-42e2-82ed-c816ceb32290/customers?page=1&limit=10 [32m200[0m 119.289 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:20.124Z"}
  console.log
    CSRF token generation: {
      sessionID: '29a2806c0bf2d3fab622a8c8df5d63a8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xonuTOKf-qDuHec2QvOoJZV4iHQ_VHuDlu4o

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 29a2806c0bf2d3fab622a8c8df5d63a8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: otXUmgSJuK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.424 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-636d57f8-0d2a-44b5-917c-57df4212214b/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:20.246Z"}
[0mGET /api/v1/affiliates/AFF-636d57f8-0d2a-44b5-917c-57df4212214b/orders?page=1&limit=10 [32m200[0m 109.307 ms - 712[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:20.987Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1b6437628b91ef8c85a93ea063b715b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 8mCgDGnx-2wpzegnn-fmAstzMcGCL6Z_uF98

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d1b6437628b91ef8c85a93ea063b715b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: r6SUY2pFBP...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.080 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-35094a87-f61e-4278-bfbd-79314b2bcd96/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:21.060Z"}
[0mGET /api/v1/affiliates/AFF-35094a87-f61e-4278-bfbd-79314b2bcd96/transactions?page=1&limit=10 [32m200[0m 107.368 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:21.791Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3132a200229b9d8672bc536d4c766e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: tA52PxDd-v4d_X6n_2o1ULYnUTy0jFLQJ-rE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d3132a200229b9d8672bc536d4c766e9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: NMyRm4Eor4...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.157 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-aaa023c2-bbab-4203-93d7-bdbe4ecafafb/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:21.921Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-aaa023c2-bbab-4203-93d7-bdbe4ecafafb/delete-all-data {
      sessionID: 'd3132a200229b9d8672bc536d4c766e9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad3132a200229b9d8672bc536d4c766e9.vys%2Fl%2B9HFBmRQ2ta1awQZe0zu7hQ0bP6b91k1EyiZ1o',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/affiliates/AFF-aaa023c2-bbab-4203-93d7-bdbe4ecafafb/delete-all-data [32m200[0m 197.360 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:22.821Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b51838be29b8fc6723ca8ebb21e06d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lxqhANnz-UpoA43AGmFDmYG59p0MoZ4zLI2Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0b51838be29b8fc6723ca8ebb21e06d1

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MVuYw2-ZCq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.164 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-db2a86e0-ee1a-47fe-81ae-f40c4add9b5e/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:22.862Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-db2a86e0-ee1a-47fe-81ae-f40c4add9b5e/delete-all-data {
      sessionID: '0b51838be29b8fc6723ca8ebb21e06d1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0b51838be29b8fc6723ca8ebb21e06d1.GR5gTwkgr3f%2Fhxbsfc8AljS13eErVnmnmJ2YCE%2FoenY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/affiliates/AFF-db2a86e0-ee1a-47fe-81ae-f40c4add9b5e/delete-all-data [33m403[0m 30.659 ms - 59[0m
PASS tests/integration/affiliate.test.js (9.11 s)
  Affiliate API
    ✓ should register a new affiliate (1375 ms)
    ✓ should get affiliate profile (724 ms)
    ✓ should update affiliate profile (784 ms)
    ✓ should login affiliate (888 ms)
    ✓ should get affiliate's customers list (833 ms)
    ✓ should get affiliate's orders (864 ms)
    ✓ should get affiliate's earnings/transactions (804 ms)
    ✓ Delete all affiliate data (development only) (1030 ms)
    ✓ Reject delete in production environment (706 ms)
    ○ skipped should update payment information
    ○ skipped should handle commission-related endpoints

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:24.293Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:25.553Z"}
[0mGET /api/v1/system/config/public [32m200[0m 30.732 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:26.693Z"}
[0mGET /api/v1/system/config/public [32m200[0m 29.016 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:27.762Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 28.437 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:28.792Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 28.080 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:29.859Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 28.181 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:30.918Z"}
[0mGET /api/v1/system/config [32m200[0m 61.341 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:31.989Z"}
[0mGET /api/v1/system/config [33m401[0m 1.365 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:33.025Z"}
[0mGET /api/v1/system/config [33m403[0m 28.748 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:34.064Z"}
  console.log
    CSRF token generation: {
      sessionID: '9d673ef528e620e3b87b874172dfee6a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: WhtwjfGQ-IYmAMdmcEvWNM_0HiHWLujxAmYk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9d673ef528e620e3b87b874172dfee6a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ALjUVelF9f...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.441 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:34.185Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '9d673ef528e620e3b87b874172dfee6a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9d673ef528e620e3b87b874172dfee6a.JEZF1%2B%2B9l2hJfEfD8iJz8Y1VxnAbcZTM6Odf3ylQLt4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 121.700 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:35.410Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a42a131c1cdb571a4158e9324d154d39',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jK2ptH4K-_9FyteII6pAaX5O41isVAoGEaJw

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a42a131c1cdb571a4158e9324d154d39

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: B2x_6RhYN-...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.532 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:35.532Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'a42a131c1cdb571a4158e9324d154d39',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa42a131c1cdb571a4158e9324d154d39.c%2B%2BEnwh5nUHHnTHjhhLqoXMS07P9hZap6QfkkeOzd9g',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 92.261 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:36.629Z"}
  console.log
    CSRF token generation: {
      sessionID: '57ad8b9e86214ac9b1c7614d9b0fd561',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xnR2bmDY-Sd2h0D8aeoMP01fKAJAXhDqtw40

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 57ad8b9e86214ac9b1c7614d9b0fd561

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Nzwcleomyb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.653 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:36.749Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '57ad8b9e86214ac9b1c7614d9b0fd561',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A57ad8b9e86214ac9b1c7614d9b0fd561.bFqivPayNm44lRQE5Gob8z9C%2BAZesv7HVCspN%2F20wc4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 85.046 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:37.847Z"}
  console.log
    CSRF token generation: {
      sessionID: '25b6ae0d3940fc2140df5f7610ab8926',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 6MqfzfcM-PocRgIKqZFd-H-VZtYGpvV9n1Zc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 25b6ae0d3940fc2140df5f7610ab8926

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: mk25dGLfTG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.009 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:37.993Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: '25b6ae0d3940fc2140df5f7610ab8926',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A25b6ae0d3940fc2140df5f7610ab8926.zedrf2NLPijzN%2FnVfUy8DK5m21L9%2FHtPthdr9D232%2BM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 85.866 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:39.111Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec269585d73a7ffe7b9b02080ec20725',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: YQ8rNdnN-wtNfrndmrR9kweQ52RAt1lAbxdY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ec269585d73a7ffe7b9b02080ec20725

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Y9p831Uxer...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.495 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:39.307Z"}
  console.log
    CSRF token generation: {
      sessionID: '74249e7388905460503f307477316f10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9Tl6N1w5-t_FCwllS1Nhf74P6DmdBRUBQkbE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 74249e7388905460503f307477316f10

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: A3Jz1na6SG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.242 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:39.319Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '74249e7388905460503f307477316f10',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A74249e7388905460503f307477316f10.%2FAFovHKbMR3hKDMqKlwt1nOrsyvuXkPuyJVlr1YZ1bE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 56.343 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:40.407Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dfa23073fb162c013b464e9ead06abaa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: QNH0t5LD-UcomQu59DffczmKLwaWOQLDkDNI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: dfa23073fb162c013b464e9ead06abaa

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: fkTx_JirEK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.978 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:40.446Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'dfa23073fb162c013b464e9ead06abaa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adfa23073fb162c013b464e9ead06abaa.etow8PAD3x84ro5ITMfYqQ6qgqkpg07vKDh0zY5M9JA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 335.195 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:41.809Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e1ff7f4a7429a743d87c7ef116347065',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: TSFLzvop-dRuF-wpfbsS3W2oEWnMJ1EiP8uM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e1ff7f4a7429a743d87c7ef116347065

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1EhHcuFI_7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.781 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:41.876Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'e1ff7f4a7429a743d87c7ef116347065',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae1ff7f4a7429a743d87c7ef116347065.P9U92VlBnDsphjwzPuws4leLJZW7QcZlXHbGd5qms3c',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 330.757 ms - 48[0m
PASS tests/integration/systemConfig.test.js (20.725 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1192 ms)
        ✓ should not return private configurations (1083 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1043 ms)
        ✓ should return 404 for non-existent config (1032 ms)
        ✓ should return 404 for private config accessed via public endpoint (1099 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1057 ms)
        ✓ should return 401 without authentication (1037 ms)
        ✓ should return 403 for non-admin users (1027 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1349 ms)
        ✓ should validate value based on data type (1225 ms)
        ✓ should validate value against min/max constraints (1213 ms)
        ✓ should not allow updating non-editable configs (1274 ms)
        ✓ should require system_config permission (1292 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1398 ms)
        ✓ should not overwrite existing configurations (1578 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1258 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:45.306Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:45.838Z"}
  console.log
    CSRF token generation: {
      sessionID: '2ed2c30e99040e355556d6722936a2f0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: io08taqr-g8GrY3bvdLZucluXYIfVdiMmkRI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 2ed2c30e99040e355556d6722936a2f0

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: T-5bdYKqaS...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.797 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:45.850Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.473 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:46.844Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c8a45626df4c67e7390814e06e9b446',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MChrsUwq-PSmEKAbRmioJjNk3iaadZ_4GC5w

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8c8a45626df4c67e7390814e06e9b446

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: WfFnLXVMy3...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.397 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:47.489Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a70a8f743de4684ae0ebb1792272a7e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: bOzGaaz5--VrtvE6sJl8Txbd3JMy4ouKfens

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a70a8f743de4684ae0ebb1792272a7e8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ZfB2LxtOAc...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.656 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:48.142Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f81183d1f6efcdf7eac2cd22a4688cd4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Ns67rNlc-PWMlV8Ng1jCPYk1xyRTt980IDt8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f81183d1f6efcdf7eac2cd22a4688cd4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ZZWvre8--K...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.920 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:48.155Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.629 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:48.808Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ac508cdf31d0f2eeb844658db7243441',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: f2wHLKgo-3HxLs-lsdXEtej84_c3oMstiXLo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ac508cdf31d0f2eeb844658db7243441

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: QeH7LWMpQa...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.799 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:48.818Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-2adae223-3c28-4d8c-a9bc-2d615d369083","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:06:49.025Z","userId":"684f5208079d98a2b716b43e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 208.334 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:49.711Z"}
  console.log
    CSRF token generation: {
      sessionID: '693578d7ca36e22159b81122261a5c7f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Awh22xIu-ul7CIsbfe8lkRdMZF2yJYXfC1gk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 693578d7ca36e22159b81122261a5c7f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: K2JRlDMYIj...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.671 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:49.721Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.882 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:50.371Z"}
  console.log
    CSRF token generation: {
      sessionID: '5d0ba2745a372acb881c3a62ff3bf39a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: uh41hprL-d_48uv8hHM_V7Y9zFIz9jhPKEVA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5d0ba2745a372acb881c3a62ff3bf39a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: EXcBfxae0a...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.191 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:50.379Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.120 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:51.023Z"}
  console.log
    CSRF token generation: {
      sessionID: '197f7b3ebc8afce88c43502122393795',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: h37QTKW7-Y2_V9g4-8yaYV6Stk3jq0RWa5nc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 197f7b3ebc8afce88c43502122393795

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: NaycjhxuNG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.674 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:51.119Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.679 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:51.770Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c7fe619407f26a25df02d1ccddbda995',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xPytyyBh-35ooT-ct_2UGZ_-PUsSDZ-FcSLg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c7fe619407f26a25df02d1ccddbda995

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cJMaj1l_Ds...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.831 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:51.779Z"}
  console.log
    CSRF token generation: {
      sessionID: '98bbf0bc8dcb1620ea515b276cf58c1c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2o8YtRTg-ritABq5Tv98Iv_7NUsdNwRXyim8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 98bbf0bc8dcb1620ea515b276cf58c1c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: HrFsFo4d6Q...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.553 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:51.878Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '98bbf0bc8dcb1620ea515b276cf58c1c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A98bbf0bc8dcb1620ea515b276cf58c1c.%2FC28MCajxWLAXnWjdalGjUhp0W2ktiQeM3K9RceiqcE',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-15T23:06:51.967Z","userId":"684f520b079d98a2b716b4a9","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 89.557 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:52.647Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b1a7548cd4652f79046ebb40d41c080e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 0RML4Rbf-LopiyfuILxdy-QST669t14dvf0Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b1a7548cd4652f79046ebb40d41c080e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 9UH-3HfVxC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.834 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:52.657Z"}
  console.log
    CSRF token generation: {
      sessionID: '1752a642283378bebd55b9da12c18a07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: SAp9RR82-6wgw9rkRqft4xpoeL2TgHm909tE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 1752a642283378bebd55b9da12c18a07

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: szs7klAC-z...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.336 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:52.811Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '1752a642283378bebd55b9da12c18a07',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1752a642283378bebd55b9da12c18a07.oSX1eeeVkYSApcFOqVEH%2Ftnh9UAqN3FY9zVcQN9FhZU',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 30.456 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:53.489Z"}
  console.log
    CSRF token generation: {
      sessionID: 'de4865849b779a42b12379f6ca6c023d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AHvkGNDK-KEd9eYde0z6z0nkvsslxrk2GdNI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: de4865849b779a42b12379f6ca6c023d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: R-OzAJSI85...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.676 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:53.497Z"}
  console.log
    CSRF token generation: {
      sessionID: '090e54bf49692115c769b64de20de911',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: G29tfF8Z-8mP1XuTJ-B6ISuoWHhyE4AU6Xto

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 090e54bf49692115c769b64de20de911

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cCCA7oGSlo...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.609 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:53.584Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '090e54bf49692115c769b64de20de911',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A090e54bf49692115c769b64de20de911.aqze68S3c%2BCM5yz7VzZzuIAXWKR2GIafVvnSzqBmVCg',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:06:53.675Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-ca549608-8d70-40f8-93d4-5324c7b860a8","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-15T23:06:53.676Z","userId":"684f520d079d98a2b716b4e6","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 91.704 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:54.355Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cdb5921940815eeb1f9d41cc0c7e21e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: aaZSzHXN-6n7rVAnykBKxsEkX-i-xixLP5NI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: cdb5921940815eeb1f9d41cc0c7e21e4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pE8addq6np...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.421 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:54.371Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df7e00804a5bdddbd8bce8a6939da585',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: rgsw2MT3-CeMYE3JynD7yg5bw4iA-N2VNUJg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: df7e00804a5bdddbd8bce8a6939da585

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: yQLef8UVNE...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.026 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:54.483Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'df7e00804a5bdddbd8bce8a6939da585',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adf7e00804a5bdddbd8bce8a6939da585.hJbvaMitNvEWH%2Foo1X28EP0bVyE63EAFZZmmJUlMx84',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:06:54.608Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-0f4cc2bd-7ab0-4b7d-a06f-8cf2263a19dc","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-15T23:06:54.608Z","userId":"684f520e079d98a2b716b506","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 125.265 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:55.290Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4e7e8e81e31bb35a9669f3943b32c0c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: mFSHcTzo-RmxCrcbi4wIxLu1N1UAOADFAU8Y

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c4e7e8e81e31bb35a9669f3943b32c0c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hMp3GsCYMa...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.782 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:55.300Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.479 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:55.953Z"}
  console.log
    CSRF token generation: {
      sessionID: '21e329637c3f0295ed33106a958825d8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: S4yGwzS0-rtAkJDkvZMEFMmwkikPWl1gCrRU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 21e329637c3f0295ed33106a958825d8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kLBMQ0Fz2N...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.471 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:55.962Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.416 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:56.621Z"}
  console.log
    CSRF token generation: {
      sessionID: '57c1f0e49becc4be3f0526979b290d2d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HqOHEtgw-tuSeaJjaWgSaWiLjzb_4rbo5yj8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 57c1f0e49becc4be3f0526979b290d2d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: UPxnLVD6nd...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.870 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:56.632Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.478 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:57.305Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c7162ea70def09a5a12e95b2f837e57a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: edDc35DC-Pzqek3m_cgWZK5uKTopvkwP-kKU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c7162ea70def09a5a12e95b2f837e57a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: QM-XodpqKP...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.327 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:57.313Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1345 |     
      1346 |   } catch (error) {
    > 1347 |     console.error('Social registration error:', error);
           |             ^
      1348 |     res.status(500).json({
      1349 |       success: false,
      1350 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1347:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 83.783 ms - 49[0m
PASS tests/integration/socialAuth.test.js (13.533 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (1226 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (646 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (651 ms)
      ✓ should return 404 for unconfigured OAuth providers (667 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (903 ms)
      ✓ should reject social registration with invalid social token (660 ms)
      ✓ should reject social registration with missing required fields (652 ms)
      ✓ should prevent duplicate social registrations (747 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (877 ms)
      ✓ should reject linking if social account already exists (841 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (866 ms)
      ✓ should update social account tokens on login (935 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (663 ms)
      ✓ should handle expired social tokens (663 ms)
      ✓ should sanitize social profile data (687 ms)
      ✓ should handle database errors during social registration (733 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:58.701Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:59.039Z"}
  console.log
    CSRF token generation: {
      sessionID: '40ac24a973d7bb710d5030f4c65b6a25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: oaiLDGF1-rbKl13WDUdeyiv0nFzyHMAj6cn4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 40ac24a973d7bb710d5030f4c65b6a25

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: LpRUTSa1m7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.619 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:06:59.765Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:117:13)

  console.log
    Customer saved successfully with ID: CUST-3d7ac638-db17-4c27-8388-851d362c940c

      at log (server/controllers/customerController.js:119:13)

[0mPOST /api/v1/customers/register [32m201[0m 191.098 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:00.710Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd28f4358a761e8f0bb7eeaa47910c307',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ijasv862-CzpDGVnLkuSEuls2NNDzCw9iTSg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d28f4358a761e8f0bb7eeaa47910c307

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1kqHUIdVfr...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.672 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:00.973Z"}
[0mPOST /api/v1/customers/register [33m400[0m 29.350 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:01.634Z"}
  console.log
    CSRF token generation: {
      sessionID: '800a2c9f5a928c8d41754724130e6392',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 65g4EVtC-09ACYo3rvRCV7rXXThrfKNWOSZI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 800a2c9f5a928c8d41754724130e6392

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cvYjU8Ms6Z...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.396 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:01.901Z"}
[0mPOST /api/v1/customers/register [33m400[0m 54.145 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:02.579Z"}
  console.log
    CSRF token generation: {
      sessionID: '0d185b11d901b2a4f8608ce872c56a1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: H60Cljcn-SrKD_yDEvYRoRMw-h7PIJSJVOPQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0d185b11d901b2a4f8608ce872c56a1a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: GwR1yaecMi...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.768 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:02.830Z"}
[0mPOST /api/v1/customers/register [33m400[0m 55.377 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:03.509Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b1e8af570e202c4ff514484fc446b6e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 3A7tPXhm-zV5WRhG2b0V7AkJzoLMuB6YZGxA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4b1e8af570e202c4ff514484fc446b6e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 3D_I1Ff4_p...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.402 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:03.772Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 82.797 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:04.498Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cc990eb802cfd5dfeb3029f7133103c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: IjPHUEso-EiJ6oFx1Kx6YUBTYg3x1cZddMvY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9cc990eb802cfd5dfeb3029f7133103c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ZTB3W9BUXM...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.169 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:04.756Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 81.187 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:05.457Z"}
  console.log
    CSRF token generation: {
      sessionID: '51afae7baa23d5a24357b5b57679c4f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: KI029UO4-Rcog3w3dmORlAICqz1weH6jXx78

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 51afae7baa23d5a24357b5b57679c4f4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: w5l57RtvJ4...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.953 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:05.713Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 54.608 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:06.388Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c8c604ea11cf8943883b92caa3b1095a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2tmK0vQW-zAVyWKt2XDRIa62d7DusLXBoseg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c8c604ea11cf8943883b92caa3b1095a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: QjdI2a7kWm...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.182 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:06.653Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 54.499 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:07.341Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef0418db201e940ab037093408a2b4db',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: o954YJHj-IIbcx1Zz0CJISEuPbGNIcGwDLdQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ef0418db201e940ab037093408a2b4db

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: qL8AHEH7nc...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.483 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:07.597Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 84.972 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:08.336Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b79ba47ae4416ccd9f2a7352b738cce1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Lr76p3P0-QUi2F5POOEZ0DtO3br1wSNHMZDU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b79ba47ae4416ccd9f2a7352b738cce1

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hR6KdJN-ut...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.929 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:08.590Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 80.894 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:09.325Z"}
  console.log
    CSRF token generation: {
      sessionID: '3c4baf34e4ef330702a1c26b5f48a0ad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xCJksk3n-xqa0mCnZQ5MXPgGQQXkBL19nSfI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3c4baf34e4ef330702a1c26b5f48a0ad

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: U1wSxHOCW-...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.587 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:09.621Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 113.198 ms - 609[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:10.395Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e204ec2c8b213e0b7e381211e77b374a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ArpZkRc0-NtW2vgzlUsI_Bu3PxT-Q4Bvh2Bo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e204ec2c8b213e0b7e381211e77b374a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: laObRYuixY...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.980 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:10.694Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 109.100 ms - 369[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:11.431Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd2d3bbef8cf1fb65fd44c50f03eb6595',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: FBsTXDNJ-wasGNs7PQXgaW4VTzw-fruxZCCs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d2d3bbef8cf1fb65fd44c50f03eb6595

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XSUl6RbCaT...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.329 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:11.705Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'd2d3bbef8cf1fb65fd44c50f03eb6595',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad2d3bbef8cf1fb65fd44c50f03eb6595.AOXXYYmrCL68becXMNUQIVqgJsiyMSApWiebMaqNC0I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 191.211 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:11.899Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 142.723 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:12.671Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f2b7cb4c94b75a6540d53c8b27b65e3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9zVn6aLK-tR9yrEHUcu0kps7YEZSYuLiAaCY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8f2b7cb4c94b75a6540d53c8b27b65e3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kJv-debyF5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.225 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:12.922Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '8f2b7cb4c94b75a6540d53c8b27b65e3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8f2b7cb4c94b75a6540d53c8b27b65e3.cjr3s1yAFs84kLJOmNouLq9Tv9QT5zA%2B8Doa5rmYhOE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 108.945 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:13.651Z"}
  console.log
    CSRF token generation: {
      sessionID: '8430714b57c09b193bfdf64e3b09ae3c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VU3h63a8-3YYqwUTrGH-LjHeF1gMRYujLmd8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8430714b57c09b193bfdf64e3b09ae3c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: rjqcybnOTy...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.614 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:13.902Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '8430714b57c09b193bfdf64e3b09ae3c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8430714b57c09b193bfdf64e3b09ae3c.6bZ2uxt2BKPai82pgH1WIdjAfmWZs7vx2hKFe%2FzKBbU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 108.610 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:14.640Z"}
  console.log
    CSRF token generation: {
      sessionID: '89129d1f20d4372376aec4a70d085c6b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lTCE8kZV-2XaK1xFOSGgZnAc-BMxYrj2XlTQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 89129d1f20d4372376aec4a70d085c6b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 8bgYArJKmA...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.489 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:14.932Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 137.436 ms - 954[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:15.694Z"}
  console.log
    CSRF token generation: {
      sessionID: '5d6e27c26f349fda7b8804d35e2ef8d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: raiSBVBk-CWe5qVfvKnMnJXoyM0OJ93b3sjI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5d6e27c26f349fda7b8804d35e2ef8d9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 82EUCMeMf0...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.080 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:15.980Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 135.338 ms - 954[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:16.748Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ca5b063af7be1e9fa40fca29f07e9d13',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: oSivvJzh-7nLyUs-ftNYNuU76HhOvli2SQjM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ca5b063af7be1e9fa40fca29f07e9d13

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: eYuKp_65Ec...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.715 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:17.048Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 132.132 ms - 954[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:17.808Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cc5f649107847de42824cddbfeb3fab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kUXzu4lj-YSaK9SE9R401jlD-DZc4yxrurn4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9cc5f649107847de42824cddbfeb3fab

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: F1WKum__RN...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.191 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:18.186Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '9cc5f649107847de42824cddbfeb3fab',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9cc5f649107847de42824cddbfeb3fab.Shk%2FigDH8qjchqaUfLHv%2B5PoeTnZVaq06pOiHAi%2FUWY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 116.336 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:18.974Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b233e3bd0e8de1bf17a281ddaf880318',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: wVUGBbqC-9XSGMaOYZybv3iUvmVXaGMAAQYk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b233e3bd0e8de1bf17a281ddaf880318

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: r0zFKXzkcY...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.205 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:19.231Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'b233e3bd0e8de1bf17a281ddaf880318',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab233e3bd0e8de1bf17a281ddaf880318.p%2FHZWZFZ7ROqgZ%2BXyMsUtFbGo13NkjxN8OhjmzkqUlo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.158 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:19.879Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6cffe01e832ff0c277531dba6d34fd3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: cKCkDxEG-0CL8rblIIsn8R-ccE5vXG6Xvn_Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a6cffe01e832ff0c277531dba6d34fd3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: s8yPKxeWkg...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.142 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:20.225Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'a6cffe01e832ff0c277531dba6d34fd3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa6cffe01e832ff0c277531dba6d34fd3.TTmSul%2B%2FfkLXMiskiAlXzFf5yXkbNsnfVr35U5nwZwI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.587 ms - 63[0m
PASS tests/integration/customer.test.js (22.832 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1684 ms)
      ✓ should fail with invalid affiliate ID (924 ms)
      ✓ should fail with duplicate email (945 ms)
      ✓ should fail with duplicate username (930 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (988 ms)
      ✓ should return customer profile for affiliate (959 ms)
      ✓ should fail for unauthorized customer (930 ms)
      ✓ should return limited data without authentication (954 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (995 ms)
      ✓ should not update protected fields (987 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1071 ms)
      ✓ should filter orders by status (1035 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1240 ms)
      ✓ should fail with incorrect current password (979 ms)
      ✓ should fail with weak new password (985 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1058 ms)
      ✓ should return monthly statistics (1054 ms)
      ✓ should allow affiliate to view customer dashboard (1060 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1165 ms)
      ✓ should reject deletion in production environment (907 ms)
      ✓ should reject unauthorized deletion (1048 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:21.642Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:22.467Z"}
  console.log
    CSRF token generation: {
      sessionID: '8220d961cc9aec42646fc163e4536711',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: nBlV8XFZ-IsENxRf0jC8Omlk4aRlgCnBWnb8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8220d961cc9aec42646fc163e4536711

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 36mfZmwLmv...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.906 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:22.566Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.891 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:22.860Z"}
[0mGET /api/v1/administrators [32m200[0m 109.384 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:23.755Z"}
  console.log
    CSRF token generation: {
      sessionID: '1be5712b90a5e9a687b83616d560ad25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: PSjCRBCY-Tt-dJlUCHdPhy4hBmUnDlxghnVA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 1be5712b90a5e9a687b83616d560ad25

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XQcLHLSo4y...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.606 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:23.851Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.786 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:24.098Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 108.236 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:24.932Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e4e6b4e9a211d96d3d59d2b50a5e61ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: YJ7tpZgh-Aw1OIxhK2iWxrOHbL3jReZcWx9o

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e4e6b4e9a211d96d3d59d2b50a5e61ab

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: YKFC-A6ANm...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.996 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:25.022Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.701 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:26.410Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 122.068 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:28.697Z"}
  console.log
    CSRF token generation: {
      sessionID: '2ef1a1e693b37ce5a4719d4491bf2bd1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: bbDyJSmB-PolmseRVk3VdKjZvqEop8UZQG_Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 2ef1a1e693b37ce5a4719d4491bf2bd1

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: d8XrGF-AwG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.116 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:28.796Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 400.032 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:29.199Z"}
[0mGET /api/v1/administrators [33m401[0m 1.260 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:31.392Z"}
  console.log
    CSRF token generation: {
      sessionID: '0a873e69c0083f6eff17fbdd4f551abb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: EhDV8Jvo-nVW-PzccSeOY-7Va-keW8pkcjRI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0a873e69c0083f6eff17fbdd4f551abb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: G1Dzez4F1g...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.439 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:31.517Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 397.925 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:32.037Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 195.222 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:32.235Z"}
[0mGET /api/v1/administrators [33m403[0m 28.005 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:34.966Z"}
  console.log
    CSRF token generation: {
      sessionID: '8e9180fad3b6335af9835e39be88adf5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9iOHlB81-dJoeQhIvt_6QPkfb-62mKCF_V4E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8e9180fad3b6335af9835e39be88adf5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: xHRLK52U15...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.009 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:35.053Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.858 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/684f52378bd5fb5e14530908 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:35.278Z"}
[0mGET /api/v1/administrators/684f52378bd5fb5e14530908 [32m200[0m 95.523 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:36.857Z"}
  console.log
    CSRF token generation: {
      sessionID: '9765976bf6786047fa6472eef740480f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 3pCPJICc-Owl7l4rLKjj-p6ZG3VI90NcMXs8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9765976bf6786047fa6472eef740480f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: jVsCbXiNLs...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.445 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:36.961Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.200 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/684f52398bd5fb5e1453092f {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:37.102Z"}
[0mGET /api/v1/administrators/684f52398bd5fb5e1453092f [33m404[0m 324.684 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:39.907Z"}
  console.log
    CSRF token generation: {
      sessionID: '22e8d8438e3fc6e54946f1e16b13963d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: k3KZXZBs-hF_1l8IfPWEqok7VbhQ47AvvTvk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 22e8d8438e3fc6e54946f1e16b13963d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: x3brse-iXB...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.701 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:40.001Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 383.793 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:40.387Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 307.778 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:42.666Z"}
  console.log
    CSRF token generation: {
      sessionID: '0baae177fad9a5629974eb687a8bb1b9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kITnOWTg-DLpXzEV9UuO5C8FUrPoOkSemXtc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0baae177fad9a5629974eb687a8bb1b9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: jH5c3_M8Cj...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.237 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:42.776Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.054 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:42.927Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '0baae177fad9a5629974eb687a8bb1b9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0baae177fad9a5629974eb687a8bb1b9.znSablFX8oQAKlZRi4WXJLr5Vc%2F1aPpY%2BSCfp9halNk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [32m201[0m 463.534 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:43.394Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.248 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:45.748Z"}
  console.log
    CSRF token generation: {
      sessionID: '0077fc413a4a7d3a3d3a1048082cda26',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 1n4A7pdC-NddEA3U1IJkva0rEASECMUj6198

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0077fc413a4a7d3a3d3a1048082cda26

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ms5JiSime-...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.192 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:45.840Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 654.113 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:46.497Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '0077fc413a4a7d3a3d3a1048082cda26',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0077fc413a4a7d3a3d3a1048082cda26.VEGCTPNWFdpNWeHFQcJ3mNi%2BInrS2bTseYwrlQWLKVA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m400[0m 68.019 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:48.533Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a2e9d2bcd0611650e4f6281bab0049aa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: UXIfPgBy-85TEKM4T9FHCx3joYkUtQM9mOls

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a2e9d2bcd0611650e4f6281bab0049aa

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: gaH3tOKv_X...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.861 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:48.625Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 381.472 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:49.009Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'a2e9d2bcd0611650e4f6281bab0049aa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa2e9d2bcd0611650e4f6281bab0049aa.%2BO7Emh8h%2FNzHHW3wa4qpZ9YTHKP%2BMs17fcK9dcOh9Ps',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m400[0m 64.763 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:51.052Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ac7aed4802b5e76862ae35150e724ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gsvK28PS-NMuq2pQL0vGaWikrShDZ8iZCZuo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4ac7aed4802b5e76862ae35150e724ec

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: sq9CrivgLl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.567 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:51.154Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.170 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:51.314Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '4ac7aed4802b5e76862ae35150e724ec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4ac7aed4802b5e76862ae35150e724ec.kXSQ71rcDXpN0pW82OvB1XyBYKYl%2BtrL%2Bf9V8mkzzUk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m400[0m 65.282 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:53.848Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd978925b43e2697d10f0821648e602e5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: u3kEzHYo-5D43LY_9P-iEbpttUN8qyzlnbSM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d978925b43e2697d10f0821648e602e5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: BFgT30GZdq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 9.614 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:53.944Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 402.142 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:54.349Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'd978925b43e2697d10f0821648e602e5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad978925b43e2697d10f0821648e602e5.8%2FEou1a5ZctDQzOyI29TJ9PVTHYGc7hZ%2Bs4l5sLuvQ8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m409[0m 94.719 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:56.639Z"}
  console.log
    CSRF token generation: {
      sessionID: '9bde8039627de250853c4852c46e898c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lULMyo6O-ozM6edraxRF7e9szYmPaz4zIwQ8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9bde8039627de250853c4852c46e898c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ayadYZTRqT...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.500 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:56.727Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 387.573 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:57.205Z"}
  console.log
    CSRF token generation: {
      sessionID: '802ad1ed4e7405382009a6b4d38aafee',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 4dUAjpRO-pBjRrwNPlBP0tB4oyYYr_ezcUi8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 802ad1ed4e7405382009a6b4d38aafee

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: TSJGmL_Lc8...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 9.343 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:57.217Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 387.282 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:57.607Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '802ad1ed4e7405382009a6b4d38aafee',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A802ad1ed4e7405382009a6b4d38aafee.6Icwtn9dmD4ZHZ6jYNPJ%2BBmkzI8DLIyGqJUx1EzJuUc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m403[0m 307.311 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:07:59.906Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e5af21490cbb485dd1fb64b41148553',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Tau9cqI1-RSf1XVK_RMs9THWsBJ9k5oMhU_M

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3e5af21490cbb485dd1fb64b41148553

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hwBTJUBcAS...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.709 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:00.000Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.294 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f52508bd5fb5e14530a60 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:00.237Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52508bd5fb5e14530a60 {
      sessionID: '3e5af21490cbb485dd1fb64b41148553',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3e5af21490cbb485dd1fb64b41148553.TOLR7ztEZ%2BNZ0vgPjrlLSMhNM7mdd%2BoIVIVIHH1kzlE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f52508bd5fb5e14530a60 [32m200[0m 584.652 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:03.047Z"}
  console.log
    CSRF token generation: {
      sessionID: '3503e16d50ff719afe9039e3703f8c0c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: FL34FGXu-0blC_TSUUoq1jJ9Jhcu0azOndd0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3503e16d50ff719afe9039e3703f8c0c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kGvq7YE1ta...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.208 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:03.136Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 162.218 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f52538bd5fb5e14530a87 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:03.391Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52538bd5fb5e14530a87 {
      sessionID: '3503e16d50ff719afe9039e3703f8c0c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3503e16d50ff719afe9039e3703f8c0c.0tU9312REFhl61%2BsnR2LKlXlwZC4EUlrSu9S8qTFmr4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f52538bd5fb5e14530a87 [32m200[0m 372.340 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:06.245Z"}
  console.log
    CSRF token generation: {
      sessionID: '9b2bdb06f778149ed11fe1822829abbc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: g7N3VJN3-Nn9v6nKADZ3eGq46UW6jCALMJGA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9b2bdb06f778149ed11fe1822829abbc

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 85XKREZa1C...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.345 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:06.343Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 401.033 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f52568bd5fb5e14530aaf {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:06.831Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52568bd5fb5e14530aaf {
      sessionID: '9b2bdb06f778149ed11fe1822829abbc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9b2bdb06f778149ed11fe1822829abbc.xQWCb9VT9n%2Fqnk3gGSJ8bMrCp47D7HgEbDE6Oswp2mQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f52568bd5fb5e14530aaf [32m200[0m 466.504 ms - 316[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:07.300Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 407.244 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:09.916Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4814f2632e1952dfd2a41d7dfc1373d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: NMTjCQaa-tZ7Pg7mqgMzOz6z13IciRvSSnn8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c4814f2632e1952dfd2a41d7dfc1373d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: FDGKirvpu9...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.335 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:10.017Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.300 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f525a8bd5fb5e14530ae0 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:10.270Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f525a8bd5fb5e14530ae0 {
      sessionID: 'c4814f2632e1952dfd2a41d7dfc1373d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac4814f2632e1952dfd2a41d7dfc1373d.K1eTna%2B9mx0t3qQ5D6DoW0bFrWS1E%2FrYlQsi9sLJOQc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f525a8bd5fb5e14530ae0 [32m200[0m 93.259 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:10.366Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 278.570 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:12.359Z"}
  console.log
    CSRF token generation: {
      sessionID: '1c5e6a28aab4b0a2984f93900a67980d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: SDs6R3kZ-TKTonByFzy0EeX3xJ6kEJKJOoZY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 1c5e6a28aab4b0a2984f93900a67980d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: spIVPEnY60...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:12.451Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 392.983 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f525c8bd5fb5e14530b08 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:12.928Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f525c8bd5fb5e14530b08 {
      sessionID: '1c5e6a28aab4b0a2984f93900a67980d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1c5e6a28aab4b0a2984f93900a67980d.EeAsZjFtDtkE1kdOCou0y5DYA%2FcAxX1x49atX7ESitw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f525c8bd5fb5e14530b08 [32m200[0m 88.059 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:14.985Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fd5a8fe7691237a5c4168ffa49ba4169',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jKTpGLeV-o3UaZ8vUxuYSBZEmiYQvnkh8q0k

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fd5a8fe7691237a5c4168ffa49ba4169

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: WIN1OlxsHK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.357 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:15.077Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 399.020 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f525f8bd5fb5e14530b2f {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:15.563Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f525f8bd5fb5e14530b2f {
      sessionID: 'fd5a8fe7691237a5c4168ffa49ba4169',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afd5a8fe7691237a5c4168ffa49ba4169.xYLKKLogEA9vD%2Fz5wPNs3X%2FpdZw29kIF2pH3Zp1lPMM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f525f8bd5fb5e14530b2f [33m409[0m 95.843 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:17.169Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aff5ffcf848db1ac0c94de12068d2ca3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: z94ZRXj4-NR52dJyQD3ck91d4i95upFgSSVE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: aff5ffcf848db1ac0c94de12068d2ca3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: UHtEJkELSa...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.316 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:17.260Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.531 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f52618bd5fb5e14530b50 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:17.762Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52618bd5fb5e14530b50 {
      sessionID: 'aff5ffcf848db1ac0c94de12068d2ca3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaff5ffcf848db1ac0c94de12068d2ca3.6mBm0Kkaji8QJuj245T4BWWKGAI3wk4CObU3%2F10fk3g',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f52618bd5fb5e14530b50 [33m400[0m 56.161 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:19.793Z"}
  console.log
    CSRF token generation: {
      sessionID: 'da7fed0b6c97bc20afee3045d444eeb9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MMqqdKGY-6idr8f3YHXC9gauXIklHk4z8cvc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: da7fed0b6c97bc20afee3045d444eeb9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XyDCZV1yyz...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.400 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:19.892Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 393.983 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:20.461Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce2d7d99a66fe6b68df15834991c3caa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: dkdN4Pbe-DJ80MK1tP0ngmCXYpZUIxcv3Xk0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ce2d7d99a66fe6b68df15834991c3caa

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 6_IylEztxb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.632 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:20.469Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 428.034 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/684f52648bd5fb5e14530b7c {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:20.900Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52648bd5fb5e14530b7c {
      sessionID: 'ce2d7d99a66fe6b68df15834991c3caa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ace2d7d99a66fe6b68df15834991c3caa.Agu7Jqa8IxXzEC7a5cqrhlcmEDvN0UgLbOWZzy0aPIo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/administrators/684f52648bd5fb5e14530b7c [33m403[0m 61.195 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:23.254Z"}
  console.log
    CSRF token generation: {
      sessionID: '95999846d53f91859596b5d08914c7a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: iOh0Pfv1-ShZIKPK2WKWqrCDDd4jWgfB-fOQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 95999846d53f91859596b5d08914c7a5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 9GykfXlT1S...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 14.795 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:23.361Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 413.751 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684f52678bd5fb5e14530ba8 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:23.869Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52678bd5fb5e14530ba8 {
      sessionID: '95999846d53f91859596b5d08914c7a5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A95999846d53f91859596b5d08914c7a5.mAiprPHBxA8IgvNP8lIOCPiOWKlqJf93fpy4YSiYrKs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/administrators/684f52678bd5fb5e14530ba8 [32m200[0m 119.992 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:26.006Z"}
  console.log
    CSRF token generation: {
      sessionID: '76c8c6bfbf276fd14bb91357f085d0e6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: npVDEhwn-woskj91CBJXTLlmcAgQev1J0e60

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 76c8c6bfbf276fd14bb91357f085d0e6

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: AqZ9R_vsDG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.712 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:26.097Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 395.819 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684f526a8bd5fb5e14530bcb {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:26.577Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f526a8bd5fb5e14530bcb {
      sessionID: '76c8c6bfbf276fd14bb91357f085d0e6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A76c8c6bfbf276fd14bb91357f085d0e6.c7IHxWqxPiN32FEhu3%2FQ8Hpm2GqpHeUDM4wYu8qSuCA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/administrators/684f526a8bd5fb5e14530bcb [33m400[0m 60.211 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:29.560Z"}
  console.log
    CSRF token generation: {
      sessionID: '1840f5e5477d5483b7d3bea751d0f05a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kaumX8Y6-wZu8664MLhsSN3HNq9PM2jzPosc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 1840f5e5477d5483b7d3bea751d0f05a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 4s7Opreubl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.063 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:29.649Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 158.545 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684f526d8bd5fb5e14530bf1 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:29.943Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f526d8bd5fb5e14530bf1 {
      sessionID: '1840f5e5477d5483b7d3bea751d0f05a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1840f5e5477d5483b7d3bea751d0f05a.yNuWaeQzIz3oNfpCCoGwwPHu6znIHL9qMUp5fANDzJQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/administrators/684f526d8bd5fb5e14530bf1 [33m400[0m 61.351 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:32.951Z"}
  console.log
    CSRF token generation: {
      sessionID: '71740380872b2c53c080ede4f42f26f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: d60hhHIX-35xTNYCQQrreQD7Hy57HpNmO3oo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 71740380872b2c53c080ede4f42f26f9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Cla9jxwRjx...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.384 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:33.050Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.028 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:33.381Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ded81bf6f50c1e1eb3d065e7b8352df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: a5JxKpRW-4cJQL1NuJ0w3nvS2_Xvuoj4aYCw

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6ded81bf6f50c1e1eb3d065e7b8352df

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 7_4aq7hnD2...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.564 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:33.395Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 393.839 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/684f52718bd5fb5e14530c1e {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:33.793Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52718bd5fb5e14530c1e {
      sessionID: '6ded81bf6f50c1e1eb3d065e7b8352df',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6ded81bf6f50c1e1eb3d065e7b8352df.H%2B7hp34jYkCk%2FIvDIlIJ87z3xEkB4g%2BPjASo0%2FKSjao',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/administrators/684f52718bd5fb5e14530c1e [33m403[0m 298.790 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:36.276Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c15294553dc1c15ba496acf0b1265382',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: uqiRyrPw-hHhtTkwS_Kaz7gClGAZ5Gcw5D3c

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c15294553dc1c15ba496acf0b1265382

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: KfLlsV5X5i...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.628 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:36.390Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 384.361 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684f52748bd5fb5e14530c4c {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:36.860Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52748bd5fb5e14530c4c {
      sessionID: 'c15294553dc1c15ba496acf0b1265382',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac15294553dc1c15ba496acf0b1265382.q9LF%2FTwRLTszX1yI8ggVvKestw97B%2FeyfcP%2Fsk0CpKA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/administrators/684f52748bd5fb5e14530c4c [33m404[0m 361.679 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:39.676Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd6d5301c1a361fe020ab771d00d9a30e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: YE4cZQ1k-fVrsP03XLhEnBcmb_ThOD7vGoIU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d6d5301c1a361fe020ab771d00d9a30e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: aHviqzof5g...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.302 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:39.788Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.214 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/684f52778bd5fb5e14530c73/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:40.050Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f52778bd5fb5e14530c73/reset-password {
      sessionID: 'd6d5301c1a361fe020ab771d00d9a30e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad6d5301c1a361fe020ab771d00d9a30e.aXdzvC5V4Iy75yc2nSqkydDO%2FJZp5YENTeFKAO7yrLc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators/684f52778bd5fb5e14530c73/reset-password [32m200[0m 446.354 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:40.500Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.348 ms - 644[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:40.648Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 150.398 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:42.310Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a2b41f35307a9d870a8668c8186c4e4d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gpOsHW42-WO0xqrpWYuYN740_JNSNqmCbVq0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a2b41f35307a9d870a8668c8186c4e4d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: -QOzHOJ2vF...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.946 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:42.408Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.298 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/684f527a8bd5fb5e14530ca5/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:42.935Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f527a8bd5fb5e14530ca5/reset-password {
      sessionID: 'a2b41f35307a9d870a8668c8186c4e4d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa2b41f35307a9d870a8668c8186c4e4d.9yBIEDaU5TS76GmrPTtkJ26YMkm225%2BUWLpD1wJzVaA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators/684f527a8bd5fb5e14530ca5/reset-password [32m200[0m 197.104 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:45.404Z"}
  console.log
    CSRF token generation: {
      sessionID: '92b8c1b56b876ab5fae0d2aee8be5633',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 0Md7lotd--MaqC8v6cuH87wrfNQNaF6kqcp4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 92b8c1b56b876ab5fae0d2aee8be5633

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 0Z0AnBlpMT...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.600 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:45.500Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.671 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/684f527d8bd5fb5e14530cd2/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:45.741Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f527d8bd5fb5e14530cd2/reset-password {
      sessionID: '92b8c1b56b876ab5fae0d2aee8be5633',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A92b8c1b56b876ab5fae0d2aee8be5633.GIRlj0ZwIEzSW1TAkC1x%2B38tolBL0oF%2F30tMUTErHW0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators/684f527d8bd5fb5e14530cd2/reset-password [33m400[0m 59.032 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:46.799Z"}
  console.log
    CSRF token generation: {
      sessionID: '9ef473f44b849e698f61eddc593b3884',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Ve87Ggzj-GrBfKm5pqLOjXGLU10_vFjc_Lm0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9ef473f44b849e698f61eddc593b3884

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cRj75BgmEN...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.805 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:46.887Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.631 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:47.198Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce81bf803821d4e5ab92dc3a9647184e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AX5lMIHT-ORsly8MZCsjYvmaHfZCDMgKf1BM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ce81bf803821d4e5ab92dc3a9647184e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: suq-A9BLa-...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.906 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:47.207Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 418.473 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/684f527f8bd5fb5e14530cf8/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:47.628Z"}
  console.log
    CSRF check for: /api/v1/administrators/684f527f8bd5fb5e14530cf8/reset-password {
      sessionID: 'ce81bf803821d4e5ab92dc3a9647184e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ace81bf803821d4e5ab92dc3a9647184e.%2B22SGlZ6GgphEXOEI%2F0LImvGE5m7dq1Jbp88P7PTSP0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators/684f527f8bd5fb5e14530cf8/reset-password [33m403[0m 317.022 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:49.674Z"}
  console.log
    CSRF token generation: {
      sessionID: '07265d361d23657ddbb6a41d62d9f9a7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gXfONrZ4-pUxyGs6dZRbRmEcc0kjf0WcsKdY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 07265d361d23657ddbb6a41d62d9f9a7

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: PUqIvS8XfK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.220 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:49.769Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.254 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:49.915Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 283.790 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:52.851Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fc7d6c6bd3c41200e2fc16651923cac',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 5WQIOqzM-4AJNsu_T2JUEugJRmoVViKP2RR0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3fc7d6c6bd3c41200e2fc16651923cac

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: khmIBothc2...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.547 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:52.943Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 167.067 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:53.113Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 1.289 ms - 47[0m
PASS tests/integration/administrator.test.js (94.712 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1725 ms)
      ✓ should filter by active status (1179 ms)
      ✓ should support pagination (3535 ms)
      ✓ should require admin authentication (2682 ms)
      ✓ should require administrator permissions (3340 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (2131 ms)
      ✓ should return 404 for non-existent administrator (3276 ms)
      ✓ should handle invalid ObjectId (2749 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (2862 ms)
      ✓ should validate required fields (2542 ms)
      ✓ should validate email format (2989 ms)
      ✓ should validate password strength (2576 ms)
      ✓ should prevent duplicate emails (2781 ms)
      ✓ should require administrators.create permission (3266 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (3374 ms)
      ✓ should update email (2728 ms)
      ✓ should update password (3900 ms)
      ✓ should deactivate administrator (2689 ms)
      ✓ should not allow updating adminId (2608 ms)
      ✓ should validate email uniqueness on update (2194 ms)
      ✓ should prevent self-deactivation (2619 ms)
      ✓ should require administrators.update permission (3460 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (2750 ms)
      ✓ should prevent self-deletion (3092 ms)
      ✓ should prevent deleting last administrator with all permissions (3623 ms)
      ✓ should require administrators.delete permission (3333 ms)
      ✓ should handle non-existent administrator (3398 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (2386 ms)
      ✓ should clear login attempts on password reset (3348 ms)
      ✓ should validate password strength (1633 ms)
      ✓ should require administrators.update permission (2634 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (3174 ms)
      ✓ should require authentication (2710 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:56.679Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.668Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e0b2c83be4034afb22c22ef58a41245',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: dUnn4HcD-lNi6J5Mz0qLK_V48R2WcCFGV7RA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7e0b2c83be4034afb22c22ef58a41245

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ht_gn0GvR_...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.839 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.682Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 7.570 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.694Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.870 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.699Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.650 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.711Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.920 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.717Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.883 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.721Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.726 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.726Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.766 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.730Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.340 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.735Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.577 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.738Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.586 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.744Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.612 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.747Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.513 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.752Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.618 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.756Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.165 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.760Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.411 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.763Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.319 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.767Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.272 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:57.771Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.424 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:58.546Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bff4e9d860f6d6f33e7eb5018ebc76cd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Z2SvS1NK-Cwct5m_DQiDwfl4q77D3ypGUZow

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: bff4e9d860f6d6f33e7eb5018ebc76cd

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vdoonf9zFL...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.285 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:58.555Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 117.688 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:58.676Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 109.151 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:58.787Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 108.958 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:58.899Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 141.316 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:59.042Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 140.634 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:59.911Z"}
  console.log
    CSRF token generation: {
      sessionID: '487b78e29c1159afd5acc99c1add053c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gbPgvRiI-DiAfFDTsyjUZZ2QGpS5eWX8OtNs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 487b78e29c1159afd5acc99c1add053c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: W80FeE7fR2...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.915 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:08:59.919Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.625 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:00.647Z"}
  console.log
    CSRF token generation: {
      sessionID: '87323f9f1d84133da6f09cf03e0376ae',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gtL2KyfS-YKFPNEt0goFmYTXLqdjN7IQn-D4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 87323f9f1d84133da6f09cf03e0376ae

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: AeDw2ojeFH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 10.195 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:00.660Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.879 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:01.388Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a11d1401b7a6eaeecfd2ab9f107a0d94',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: yqbQQ30b-AxxKZn-9feLJmrcfGFxaQ0eV46c

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a11d1401b7a6eaeecfd2ab9f107a0d94

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: gJT3LShhwZ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.163 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:01.397Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.774 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:01.401Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.499 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:01.404Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.414 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:01.408Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.348 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:02.130Z"}
  console.log
    CSRF token generation: {
      sessionID: '443bb1d870cc63f0c4fc87d43a950885',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 1TRxO0pq-KOLZabtf4McU76dLB4LwSXcxtXc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 443bb1d870cc63f0c4fc87d43a950885

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: uBz2dkIjR5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.384 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:02.276Z"}
[0mPOST /api/v1/customers/register [33m400[0m 1.783 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:03.009Z"}
  console.log
    CSRF token generation: {
      sessionID: '13fbb3f6a0336340463e10047322b4b6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: mlqm8xAd--VCweHuMtcDZb69e28BmK-X-ccs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 13fbb3f6a0336340463e10047322b4b6

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: r2kTAh5_FU...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.529 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:03.156Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:117:13)

  console.log
    Customer saved successfully with ID: CUST-5e34bd68-3311-4378-812d-f06a9b4ec4a6

      at log (server/controllers/customerController.js:119:13)

[0mPOST /api/v1/customers/register [32m201[0m 164.233 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:04.046Z"}
  console.log
    CSRF token generation: {
      sessionID: '09ba1847878f59abb6ff40bb50d3612f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xid9mC6P-_hp5mImb-8NdMgi7anBOChp0aEE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 09ba1847878f59abb6ff40bb50d3612f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: jqLKFvTXUH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.419 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:04.141Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:04.284Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:04.284Z","userId":"684f52901f354cfed7f7ac59","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.762 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:04.287Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '09ba1847878f59abb6ff40bb50d3612f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A09ba1847878f59abb6ff40bb50d3612f.qvly8hA53YizJhjFGKlMsNnJUemOyCRs9Fd56jDKqH8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/administrators [33m400[0m 57.967 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:05.070Z"}
  console.log
    CSRF token generation: {
      sessionID: '747b94fa5711222f98d96350ea733c8c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 6WAybOPO-cr26l1XUZZM3XBRIa6SQCefHCZI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 747b94fa5711222f98d96350ea733c8c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: h5XHnoONX8...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.809 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:05.162Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:05.305Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:05.305Z","userId":"684f52911f354cfed7f7ac7d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.339 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:05.307Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '747b94fa5711222f98d96350ea733c8c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A747b94fa5711222f98d96350ea733c8c.IYaBUURPBvsETvGJUWI9e6EoJczoS8N2mM1TdkAZSXA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"684f52911f354cfed7f7ac87","targetType":"administrator","timestamp":"2025-06-15T23:09:05.504Z","userId":"684f52911f354cfed7f7ac7d","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 197.449 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:06.242Z"}
  console.log
    CSRF token generation: {
      sessionID: '2b194070f78e6a4ba596fa11f3face8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9e3okrZx-jKvqkDiQQgr6KAi2VGwfpV-89sY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 2b194070f78e6a4ba596fa11f3face8b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pZBEgOVU9h...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.113 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:06.350Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:06.510Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:06.510Z","userId":"684f52921f354cfed7f7aca5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.781 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:06.513Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '2b194070f78e6a4ba596fa11f3face8b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2b194070f78e6a4ba596fa11f3face8b.NxuBO2YdtiaUnliw6YKjNl1%2B5EdGbCBE7Ixm9ojUrMI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m400[0m 56.360 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:07.289Z"}
  console.log
    CSRF token generation: {
      sessionID: '0489ba5c589fb921f954ae55c415f379',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xHEFmSr0-4WuRzuGUagE7xeKOucPb9bRYGOo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0489ba5c589fb921f954ae55c415f379

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: p_rgN41Cny...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.803 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:07.380Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:07.522Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:07.523Z","userId":"684f52931f354cfed7f7acc9","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.378 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:07.526Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '0489ba5c589fb921f954ae55c415f379',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0489ba5c589fb921f954ae55c415f379.SkS7KDJet1klGKHatA3SoLIoy8T35%2BOWYJzOOmmLbhM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMBYA1U3DF04365"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"684f52931f354cfed7f7acd2","targetType":"operator","timestamp":"2025-06-15T23:09:07.693Z","userId":"684f52931f354cfed7f7acc9","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 167.733 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:08.431Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b2da6f7317f8b73b2229c75ed536756',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 6UJYFvMu-spIXAzpGoXQdenZrIDNK2ex0C9Y

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8b2da6f7317f8b73b2229c75ed536756

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: r-ZZWPFjga...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.769 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:08.536Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 59.706 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:08.625Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.704 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:09.360Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cee424e6a8469f03eaea757bac9c20f3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: vro67dRZ-WoyNsLzA3Mb1qIhtkyH1ri6cGlc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: cee424e6a8469f03eaea757bac9c20f3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pYDZ4OCmhU...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.292 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:09.452Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 57.841 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:09.541Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 112.110 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:10.385Z"}
  console.log
    CSRF token generation: {
      sessionID: 'de96e7b41b71226cf0bc40dbd7ddfa5a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: EIeMeaId-Uf5d2enc0i31B8JMun8-As_Y7mg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: de96e7b41b71226cf0bc40dbd7ddfa5a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: AjZ9RR10DJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.370 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:10.478Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:10.616Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 138.949 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:11.350Z"}
  console.log
    CSRF token generation: {
      sessionID: '811d0de4cb20fe2aaa2bd79cb5c9c909',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: SDSY1PZZ-TSZ3hgN8M62gr-t4MEzrOPzSz64

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 811d0de4cb20fe2aaa2bd79cb5c9c909

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ynNHd9c5qM...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.473 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:11.365Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.543 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:12.090Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c13f7ce1abd6123529f86e94d3a8c575',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: moLBDzZe-V1XeEoo_mqIwgFNvsDRDlH0gSlI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c13f7ce1abd6123529f86e94d3a8c575

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cgxnpMcLay...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.991 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:12.098Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.938 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:12.821Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd8fc3bf292db4430545dcf084f2058cb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: sklCw0l1-cXQ77kqZ0VAtCh77Igz-my4fRXo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d8fc3bf292db4430545dcf084f2058cb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1P8ddhJomp...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.461 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:12.829Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 125.224 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:13.683Z"}
  console.log
    CSRF token generation: {
      sessionID: '32807232d931f7e8574028c6575d1604',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: xLHaQusl-GTAp5VkHHlVPlwMtvNvijiI6auE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 32807232d931f7e8574028c6575d1604

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 4svfv6iM16...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.124 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:13.693Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 116.154 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (18.618 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1388 ms)
      ✓ should accept strong passwords during affiliate registration (1366 ms)
      ✓ should reject passwords containing username (736 ms)
      ✓ should reject passwords containing email (740 ms)
      ✓ should reject passwords with sequential characters (743 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (877 ms)
      ✓ should accept strong passwords for customer registration (1039 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1023 ms)
      ✓ should accept strong passwords for administrator creation (1168 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1053 ms)
      ✓ should accept strong passwords for operator creation (1141 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (926 ms)
      ✓ should accept strong passwords during password reset (1027 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (962 ms)
      ✓ should handle case-insensitive username/email validation during registration (743 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (731 ms)
      ✓ should accept passwords with mixed character distribution (859 ms)
      ✓ should handle Unicode characters in passwords appropriately (868 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:15.313Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.250Z"}
  console.log
    CSRF token generation: {
      sessionID: '62e88555653000969186bb4cbc77d906',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: aeAS6mr2-JISMvdxyolSNZhxqpUxb1LG8sXk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 62e88555653000969186bb4cbc77d906

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: gxh3ctgOZT...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.397 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.361Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:16.511Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:16.511Z","userId":"684f529ca6a6ab116bee5ea5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.692 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.515Z"}
  console.log
    CSRF token generation: {
      sessionID: '84c5e328aabbdb21eaf8dc54d9ef7bc5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AXDvOyfy-il3Ww48Z0wyKgm-hjZjsWSrnRgk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 84c5e328aabbdb21eaf8dc54d9ef7bc5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: yRtbadcpHY...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.635 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.611Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:16.772Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:16.773Z","userId":"684f529ca6a6ab116bee5eb2","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 162.689 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.778Z"}
  console.log
    CSRF token generation: {
      sessionID: 'baab302c5e724161edece88b0b785198',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Nf90blW1-BRenaRvxq00lfuYFQzX-2KTFt5s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: baab302c5e724161edece88b0b785198

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: WX88M6qZ-Y...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 9.599 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:16.936Z"}
[0mGET /api/v1/operators [32m200[0m 176.548 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:18.146Z"}
  console.log
    CSRF token generation: {
      sessionID: '01aa112e9994d2a6703eca233bbf60e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Uj9AMrGS-5Ze0IlDaduAozWUqo724I2dskz4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 01aa112e9994d2a6703eca233bbf60e4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Vk06VlTRY5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.132 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:18.265Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:18.543Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:18.543Z","userId":"684f529ea6a6ab116bee5ede","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 278.677 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:18.546Z"}
  console.log
    CSRF token generation: {
      sessionID: '12b4aff720ad770cc542f55df68daf67',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: eyYjBDJi-HbtZkqAZtsB7QtWqpu4vXoDykxU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 12b4aff720ad770cc542f55df68daf67

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Q_OlXh4m8U...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.500 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:18.714Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:19.023Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:19.023Z","userId":"684f529ea6a6ab116bee5ee4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 309.927 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:19.031Z"}
  console.log
    CSRF token generation: {
      sessionID: '8bda0a71cbea6fbdd292cfbbcd7012f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: NbWOJxfM-aQ0ZCJDQcXB-lxDiV0mmiWkBB0A

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8bda0a71cbea6fbdd292cfbbcd7012f8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: bGKsQPyJFq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.163 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:19.193Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 360.836 ms - 528[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.144Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c867a82979657a779c6a5f0bc7635a06',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: fi4pw7hu-hV6RFTmclT9eRKP-3yNM_TiBcG4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c867a82979657a779c6a5f0bc7635a06

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: WXJfKfnmvv...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.499 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.239Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:21.383Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:21.383Z","userId":"684f52a1a6a6ab116bee5f0c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.153 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.386Z"}
  console.log
    CSRF token generation: {
      sessionID: '555758d36c261858f1dc854c99c575d3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Qrmsl7ou-JQg_11TAuFBDL4-XS-Yjmls6MM4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 555758d36c261858f1dc854c99c575d3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: U7IAvo5rpl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.505 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.475Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:21.628Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:21.628Z","userId":"684f52a1a6a6ab116bee5f12","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.374 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.631Z"}
  console.log
    CSRF token generation: {
      sessionID: '6dddce904dfe554673fcdcca2939f034',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: pBgmVh8g-La3CULDab6Ub058iDZpFCwSq09k

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6dddce904dfe554673fcdcca2939f034

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ii_2H5guPJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.164 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:21.720Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 115.230 ms - 528[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:22.670Z"}
  console.log
    CSRF token generation: {
      sessionID: '7df84b14babc97e9d5d41b64d1581db3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: B7rs033q-pnF8If_LaZtsjcfu7QAeco1fpCA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7df84b14babc97e9d5d41b64d1581db3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: T_QhdcBCr5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.660 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:22.772Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:22.932Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:22.933Z","userId":"684f52a2a6a6ab116bee5f39","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.903 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:22.936Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2bcbf64b98fd195394a29240aa4c9ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: O88L6IZ7-Bx7eOK-yN0jnBYw7XHlMy-2K2Ms

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b2bcbf64b98fd195394a29240aa4c9ef

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Rp8tYS1BP1...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.963 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:23.095Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:23.287Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:23.287Z","userId":"684f52a2a6a6ab116bee5f3f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 192.308 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:23.290Z"}
  console.log
    CSRF token generation: {
      sessionID: '4831d3060e0314561aa3192d8a3328e2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: PQZJYP4O-k07qSYa57kVHgGW5Tw7-2hn2K-8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4831d3060e0314561aa3192d8a3328e2

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: U5PsS1Qajk...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.472 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:24.285Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 135.528 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.147Z"}
  console.log
    CSRF token generation: {
      sessionID: '4359dc3e0a795580c6f3786c8381d184',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 5XahVh5x-ebNxYaU5Cgn71yDnF26VoGdHCFo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4359dc3e0a795580c6f3786c8381d184

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 2yaHb-xP8H...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.147 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.240Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:25.386Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:25.387Z","userId":"684f52a5a6a6ab116bee5f84","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.024 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.389Z"}
  console.log
    CSRF token generation: {
      sessionID: '789ec3ba996b0e30ecd4cec9c15d50ca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gytjCkd1-tY-xeonT-l6sB5QuDw93wWLeYDA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 789ec3ba996b0e30ecd4cec9c15d50ca

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: xYCYiOLdPX...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.984 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.482Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:25.622Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:25.622Z","userId":"684f52a5a6a6ab116bee5f8a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.619 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.625Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4645e4edf5ffcbe88d1dff92e121ced',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: CY6D4gMf-eZEhgbWiY-ygAylb9ve0l8uuJSE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c4645e4edf5ffcbe88d1dff92e121ced

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: bZAXeNhSeJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.760 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:25.633Z"}
[0mGET /api/v1/operators [33m401[0m 0.940 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.344Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cbe3b7ff7149997288d415cf6fe918a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: eTGtNPyJ-9djOhxYUmUqfyThdZR16HgdlZhU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: cbe3b7ff7149997288d415cf6fe918a5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1hJZgBwCSu...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.302 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.443Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:26.582Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:26.582Z","userId":"684f52a6a6a6ab116bee5fab","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.547 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.584Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2f1fc25eaaada1cf5ae3b2d72f4103e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: mDeb4aqq-fpdsJsZKR7gs2n5VQuG8gWfrYz4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b2f1fc25eaaada1cf5ae3b2d72f4103e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kvkNugMnZO...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.111 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.684Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:26.866Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:26.866Z","userId":"684f52a6a6a6ab116bee5fb1","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 182.145 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.869Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc7482d94416b856b39771054732861d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: aKWNd6sl-qvPDqD0cd4iGJ-fBOKP1lOcSvrg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: dc7482d94416b856b39771054732861d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 4kHJDBVL-R...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.302 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:26.989Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:27.161Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:27.161Z","userId":"684f52a6a6a6ab116bee5fb7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 172.525 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:27.164Z"}
[0mGET /api/v1/operators [33m403[0m 54.187 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:27.923Z"}
  console.log
    CSRF token generation: {
      sessionID: '98379e1f53eb3a66e3e85f5f9e956326',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: KQVKU7zH-3S-Itac1to6-n7_kWq1maKojThk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 98379e1f53eb3a66e3e85f5f9e956326

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 6_VK8UhjcB...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.606 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:28.011Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:28.186Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:28.187Z","userId":"684f52a7a6a6ab116bee5fda","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.392 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:28.189Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb7401f561c4eb885e8a6e488b4424b9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: DlMWjPDC-Qf2bEmGAm4IG2rHP-ZxSJj0RK4A

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: bb7401f561c4eb885e8a6e488b4424b9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: yA61GFXwyI...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.358 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:28.312Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:28.452Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:28.453Z","userId":"684f52a8a6a6ab116bee5fe0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.196 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:28.456Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2254a3a686d69d66dc869bab00723df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: KXKixyp9-AiD5VxAdICl2IPwZqcy6kZNWZjk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f2254a3a686d69d66dc869bab00723df

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XOZ5wnnp76...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.292 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684f52a8a6a6ab116bee5fe6 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:28.548Z"}
[0mGET /api/v1/operators/684f52a8a6a6ab116bee5fe6 [32m200[0m 166.942 ms - 565[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.419Z"}
  console.log
    CSRF token generation: {
      sessionID: '4e134cd266c4ec016168c352db8c6c16',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: F8ecCB2E-xd81uWjqBgH7TpV59Qv0Ak7n77o

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4e134cd266c4ec016168c352db8c6c16

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: R1RmOSZBVv...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.680 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.510Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:29.648Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:29.648Z","userId":"684f52a9a6a6ab116bee6009","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.288 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.651Z"}
  console.log
    CSRF token generation: {
      sessionID: '84171ade4e182d903dfb6dda662fe5b7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VdJmoZzu-vTLp0XMWK6bLkHiROLAGjaJjzQ4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 84171ade4e182d903dfb6dda662fe5b7

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ODA6A5A_7R...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.447 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.768Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:29.908Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:29.909Z","userId":"684f52a9a6a6ab116bee600f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.337 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.911Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b8ed4905123d87bcb63c5fd6c6dbda24',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MCnBA9cJ-ikt_NtC5MVRH8SncfbqZILqVPgE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b8ed4905123d87bcb63c5fd6c6dbda24

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 4pgj0fVcGZ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.712 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684f52a9a6a6ab116bee600f {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:29.918Z"}
[0mGET /api/v1/operators/684f52a9a6a6ab116bee600f [32m200[0m 81.580 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:30.703Z"}
  console.log
    CSRF token generation: {
      sessionID: '34afde469fa6230da42b8e0480b03faf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: wsFQkBBX-zXaXuNpfB17QiWLAhJw2QwTe2IE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 34afde469fa6230da42b8e0480b03faf

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: YE-aS5lVgl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.068 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:30.794Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:30.934Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:30.934Z","userId":"684f52aaa6a6ab116bee6033","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.447 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:30.942Z"}
  console.log
    CSRF token generation: {
      sessionID: '5aaa6e7a4af4ef6be7b1744bc7233edb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: P0FoEXl2-MlSyJXKzGzkh3erKw7oFjp-lObc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5aaa6e7a4af4ef6be7b1744bc7233edb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: du5oxGrH5g...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.904 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:31.030Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:31.168Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:31.168Z","userId":"684f52aaa6a6ab116bee6039","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.106 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:31.171Z"}
  console.log
    CSRF token generation: {
      sessionID: '654ff4e06e03a238185e3d4f73ec49ee',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: vt95z9pC-nj0nfSfWA0RIi4_4gEqJQCDtgn0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 654ff4e06e03a238185e3d4f73ec49ee

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hIqndApPcB...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.470 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684f52aba6a6ab116bee603f {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:31.253Z"}
[0mGET /api/v1/operators/684f52aba6a6ab116bee603f [33m403[0m 54.788 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.011Z"}
  console.log
    CSRF token generation: {
      sessionID: '88057bacb3160b9ec939711eabc8a602',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MXgnF9x5-ob7oovs2RFQw8HgluUnr4ruZUdA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 88057bacb3160b9ec939711eabc8a602

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: B41_gtmoR5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.691 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.106Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:32.249Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:32.250Z","userId":"684f52aca6a6ab116bee605e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.297 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.254Z"}
  console.log
    CSRF token generation: {
      sessionID: '65abab5826076baa76eceda31af7d4b4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: gt95Lwek-gvtzBAPQi6LlN3w_FBN0hj1UUIY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 65abab5826076baa76eceda31af7d4b4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: TCkmW2dWRl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.711 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.355Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:32.500Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:32.501Z","userId":"684f52aca6a6ab116bee6064","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.645 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.503Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2f20ef5d665c973dbbfb45e94ed159b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: SprYOWVP-Aebj9J8txtU1gvhCyPOTqY6s8uY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f2f20ef5d665c973dbbfb45e94ed159b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: _P45p8YDDH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.518 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684f52aca6a6ab116bee606a {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:32.511Z"}
[0mGET /api/v1/operators/684f52aca6a6ab116bee606a [33m404[0m 106.583 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.323Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea60568a98fb3c404e4cb46c61958a10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: JnPAhxKh-IdE5ITnrhGbGw840qhKq6-PGYI4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ea60568a98fb3c404e4cb46c61958a10

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: F4pqcZBBQQ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.246 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.414Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:33.552Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:33.553Z","userId":"684f52ada6a6ab116bee608a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.600 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.556Z"}
  console.log
    CSRF token generation: {
      sessionID: '838be8e677db5ab99ba54d9d2f5f1473',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: llrmUxty-GOapPTmC8ciiMDqkOWVl7e77Bsc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 838be8e677db5ab99ba54d9d2f5f1473

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: _1cCRSXuOu...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.358 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.647Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:33.786Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:33.786Z","userId":"684f52ada6a6ab116bee6090","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.949 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.789Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e9ba975695967bfb35acc89467438d25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: iaAPews4-cvYdwMV86TKZKA-PBQmpxWf7pe0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e9ba975695967bfb35acc89467438d25

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: FMX7u_VI-m...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.039 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.797Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '838be8e677db5ab99ba54d9d2f5f1473',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A838be8e677db5ab99ba54d9d2f5f1473.bfXHlgha2%2Fk6%2FJjggKv1CO%2F6qXds4UdlcbTvrYzeFac',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMBYA2EDE9CD21C"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"684f52ada6a6ab116bee6099","targetType":"operator","timestamp":"2025-06-15T23:09:33.975Z","userId":"684f52ada6a6ab116bee608a","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 178.697 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:33.979Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:34.120Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMBYA2EDE9CD21C","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:34.120Z","userId":"684f52ada6a6ab116bee6099","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.499 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:34.820Z"}
  console.log
    CSRF token generation: {
      sessionID: '7c6f813fb7b01af15b6ffc821421dae5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: bx8JoU1b-UagrevPsiy9LmHbYLS_qUWESjaY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7c6f813fb7b01af15b6ffc821421dae5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: TZ_WohGpY4...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.532 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:34.910Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:35.077Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:35.077Z","userId":"684f52aea6a6ab116bee60ba","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 167.202 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:35.081Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd292ae8535dbe0f54ffbd0fb9396356',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: YaLQJBgX-ejT8EbXGJIb041m1_L5DtKfFmQw

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: cd292ae8535dbe0f54ffbd0fb9396356

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ysENJltHgE...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.080 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:35.176Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:35.319Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:35.319Z","userId":"684f52afa6a6ab116bee60c0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.725 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:35.322Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ded806051b045f5eb8dfb493296dcfd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: f0KomFdO-uUJdUK1B9kZXXdJVdQc3rtWpWHs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4ded806051b045f5eb8dfb493296dcfd

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kuWUizS6yM...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.598 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:35.330Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'cd292ae8535dbe0f54ffbd0fb9396356',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd292ae8535dbe0f54ffbd0fb9396356.36VOaCY64gceUA5%2Bh1M14QZsxMDMbM0o6c8Mq5re%2FSc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m400[0m 56.418 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.101Z"}
  console.log
    CSRF token generation: {
      sessionID: '50aa1e1bcfbab956af35a53f3bae8f17',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: CLO25hHl-P2cUEP6sKQIBgM3azXx2aQZdOnE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 50aa1e1bcfbab956af35a53f3bae8f17

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: C8f3kOdScV...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.633 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.193Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:36.334Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:36.335Z","userId":"684f52b0a6a6ab116bee60e3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.611 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.337Z"}
  console.log
    CSRF token generation: {
      sessionID: '37319da5d74bb2c647a14a57aceac78d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 5G1j57ul-ulY5nQkdk1WHZ54C4Q9K1hMZTGw

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 37319da5d74bb2c647a14a57aceac78d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: u5UH-f_HPg...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.104 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.433Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:36.570Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:36.571Z","userId":"684f52b0a6a6ab116bee60e9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 137.769 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.578Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce0e8b0c1374ed1c343f2da075e4f23d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: FSCCiJmE-7xUxy009nsjy0WFq_jKIF2K1w7Y

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ce0e8b0c1374ed1c343f2da075e4f23d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: bWkgSTvNJF...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.842 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:36.585Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '37319da5d74bb2c647a14a57aceac78d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A37319da5d74bb2c647a14a57aceac78d.oE7Ta%2By%2Fdi5VZRq6aMMkH034MrqAj0Kb3NbcupUGPUQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m400[0m 55.594 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.334Z"}
  console.log
    CSRF token generation: {
      sessionID: '27979102e67e6f26922d464e378fcb4f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 88ABs8bS-HGNfrE9fpI2HYsW1clARK50HumE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 27979102e67e6f26922d464e378fcb4f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ENDSj7aFo7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.944 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.422Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:37.565Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:37.565Z","userId":"684f52b1a6a6ab116bee610c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.472 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.568Z"}
  console.log
    CSRF token generation: {
      sessionID: '3dd130a0fffc0626025e9fe90ce42b72',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ig3lp3Rv-_UBZXOzgAquHep-WY7AS42vG08s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3dd130a0fffc0626025e9fe90ce42b72

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: goqfjW0t-G...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.304 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.655Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:37.818Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:37.818Z","userId":"684f52b1a6a6ab116bee6112","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 164.094 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.823Z"}
  console.log
    CSRF token generation: {
      sessionID: '783f7c57a9bd685518834ee986c0391f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 6Yh5qq7Q-a2OYRMT5VyTlAPnUS3oC9fiAb7g

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 783f7c57a9bd685518834ee986c0391f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ygi4Z-RE2l...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.619 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:37.836Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '3dd130a0fffc0626025e9fe90ce42b72',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3dd130a0fffc0626025e9fe90ce42b72.fwNicWzYqJEvccl1d23e2dler24SqA%2FduESZWp%2FBzCA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m400[0m 54.760 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:38.598Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f53f35ff3abf893ada3d6ebac46ccbb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: cnWAmGa1-VhEmShjyQRpM8vCiVe9NHqiXe3k

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 8f53f35ff3abf893ada3d6ebac46ccbb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 7mrCoe9LK5...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.936 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:38.718Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:38.858Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:38.859Z","userId":"684f52b2a6a6ab116bee6135","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.571 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:38.861Z"}
  console.log
    CSRF token generation: {
      sessionID: '4435290e4cb8542da06f77995bf8949b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: q7QWLesa-qZBTP-u627s_N6a9Kn6XYhZq-nQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4435290e4cb8542da06f77995bf8949b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 5aA53pitQ9...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.184 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:38.955Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:39.092Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:39.092Z","userId":"684f52b2a6a6ab116bee613b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 137.549 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:39.095Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fea806ee10c26275d9564518edee9048',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9nBUKaaT-KTtnzaI8TROSIj5z9_8JYLe_76Y

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fea806ee10c26275d9564518edee9048

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 4SdaCSwNHR...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.291 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:39.104Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '4435290e4cb8542da06f77995bf8949b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4435290e4cb8542da06f77995bf8949b.360YbMKlJv7zS0Wtz0WzWC5hf8Tn7cHyDudkGnv4Gj0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m409[0m 83.187 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:39.889Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fead8a06c315980752abd30925594fbb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: RUT8uU1a-6nCNLgJxUz0O75qBCa-m_UG6YTA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fead8a06c315980752abd30925594fbb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: lPzF0KvDe_...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.757 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:39.980Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:40.119Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:40.120Z","userId":"684f52b3a6a6ab116bee615f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.858 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:40.122Z"}
  console.log
    CSRF token generation: {
      sessionID: '5bef3184b66d664abf923a3455d5c92e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: UClOKgQn-jmfBjuKzok1JDLgk0kgtbIn2m6E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5bef3184b66d664abf923a3455d5c92e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: IuItw81JRx...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.294 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:40.218Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:40.358Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:40.358Z","userId":"684f52b4a6a6ab116bee6165","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.907 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:40.361Z"}
  console.log
    CSRF token generation: {
      sessionID: '5b02be044bea4b09626e18f6a11a1eb5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: e0YOQj3y-Weujdirk5uXnLcZnrVuCB1A0ZgE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5b02be044bea4b09626e18f6a11a1eb5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MleltsokBH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.761 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:40.453Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:40.594Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:40.595Z","userId":"684f52b4a6a6ab116bee616b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.974 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:40.597Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'fead8a06c315980752abd30925594fbb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afead8a06c315980752abd30925594fbb.cqn0PKAqbfU3ft95%2FxEc5arcBuBRh19oe8aAgCvZFPo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/operators [33m403[0m 55.791 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.354Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a4373cfdc8f497161b76d523f6268253',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: WZpA8EG5-baJqq6jkOPaVvoChZDkvBwBfLK4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a4373cfdc8f497161b76d523f6268253

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: U9B30fQ0eM...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.304 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.443Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:41.587Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:41.588Z","userId":"684f52b5a6a6ab116bee618e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.594 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.590Z"}
  console.log
    CSRF token generation: {
      sessionID: '01b2797699024b77c43cb4f021a1c59f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: sBYc4TdL-iO7eUYD98bUbX5fy1qID4dVmEGs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 01b2797699024b77c43cb4f021a1c59f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: se7hV-XdnO...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.922 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.682Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:41.818Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:41.818Z","userId":"684f52b5a6a6ab116bee6194","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 136.702 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.821Z"}
  console.log
    CSRF token generation: {
      sessionID: '801fca85a85eab316ed23775d30a55ed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: a1AAaMxt--XKxau1DoCdwaB7m_ocMeMFDHm0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 801fca85a85eab316ed23775d30a55ed

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: knW2edHLqG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.753 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52b5a6a6ab116bee619a {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:41.917Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52b5a6a6ab116bee619a {
      sessionID: '01b2797699024b77c43cb4f021a1c59f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A01b2797699024b77c43cb4f021a1c59f.NmrV5dBbcRYnaBpbPmwnjpckiofCG1ReEB3LU%2FfQdLI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684f52b5a6a6ab116bee619a","targetId":"684f52b5a6a6ab116bee619a","targetType":"operator","timestamp":"2025-06-15T23:09:42.059Z","userId":"684f52b5a6a6ab116bee618e","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684f52b5a6a6ab116bee619a [32m200[0m 142.327 ms - 442[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:42.770Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d9283cfa5e3d371405c662fe01b2727',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kcEtLBtc-0x5tUwMEcLz3qMSQQBIZBgj0mtk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4d9283cfa5e3d371405c662fe01b2727

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: JkLBA6ZQyK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.738 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:42.857Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:42.998Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:42.999Z","userId":"684f52b6a6a6ab116bee61bc","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.594 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:43.001Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af6d13eaab91bc74624ca886104e6049',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 1Qn70eFJ-fLDAKH2b-waXz4qNPxgYze0GaFE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: af6d13eaab91bc74624ca886104e6049

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XAZRLzPTvA...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.513 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:43.088Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:43.227Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:43.227Z","userId":"684f52b7a6a6ab116bee61c2","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.282 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:43.230Z"}
  console.log
    CSRF token generation: {
      sessionID: '70f974b4be612337f7f7d2f96b37fc00',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MMfeRfkh-yQy4uvWu6cigwoM84FY504tPm8Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 70f974b4be612337f7f7d2f96b37fc00

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: orp_grSwC1...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.318 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52b7a6a6ab116bee61c8 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:43.354Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52b7a6a6ab116bee61c8 {
      sessionID: 'af6d13eaab91bc74624ca886104e6049',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaf6d13eaab91bc74624ca886104e6049.WEjEAxc%2FSYvVd5rK3gA%2BbEJcGl90Cj0zoo%2Bj8J%2FzJts',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684f52b7a6a6ab116bee61c8","targetId":"684f52b7a6a6ab116bee61c8","targetType":"operator","timestamp":"2025-06-15T23:09:43.608Z","userId":"684f52b6a6a6ab116bee61bc","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684f52b7a6a6ab116bee61c8 [32m200[0m 254.911 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:43.612Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:43.757Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:43.757Z","userId":"684f52b7a6a6ab116bee61c8","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.698 ms - 606[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:44.451Z"}
  console.log
    CSRF token generation: {
      sessionID: '45d3abe5bce1a546de836326acc9532b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: JO5ryrVv-FzfKf73i-HhfnB17sTVgZCGwkTc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 45d3abe5bce1a546de836326acc9532b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Bea0yDmFw2...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:44.545Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:44.698Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:44.699Z","userId":"684f52b8a6a6ab116bee61f0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.308 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:44.701Z"}
  console.log
    CSRF token generation: {
      sessionID: '455e58b6f64a89e34ac7c57be58a7063',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Uzn0UXZh-BAV-tGDiMIyIlpO1S37d4KG-Qac

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 455e58b6f64a89e34ac7c57be58a7063

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: LTzuyUvNZR...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.493 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:44.791Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:44.933Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:44.934Z","userId":"684f52b8a6a6ab116bee61f6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.648 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:44.936Z"}
  console.log
    CSRF token generation: {
      sessionID: '68f0f4c7f2120f965d75874726698902',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kxPZV8w3-72R9eqiExn4qTFOkIAHY25AI75k

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 68f0f4c7f2120f965d75874726698902

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 7IsiY-Gt79...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.998 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52b8a6a6ab116bee61fc {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:45.024Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52b8a6a6ab116bee61fc {
      sessionID: '455e58b6f64a89e34ac7c57be58a7063',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A455e58b6f64a89e34ac7c57be58a7063.3LFX%2FQ7GN%2B5BbVM589tSQr7W2XNAmg6Ddd16kPxypr4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684f52b8a6a6ab116bee61fc","targetId":"684f52b8a6a6ab116bee61fc","targetType":"operator","timestamp":"2025-06-15T23:09:45.162Z","userId":"684f52b8a6a6ab116bee61f0","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684f52b8a6a6ab116bee61fc [32m200[0m 138.346 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:45.164Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-15T23:09:45.191Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 27.130 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:45.889Z"}
  console.log
    CSRF token generation: {
      sessionID: '9e354f22d42367ace2bdd31ecb1a48c2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Off5CRle-rDQEo_pswkE9Zu0TMl4hBwseiR8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9e354f22d42367ace2bdd31ecb1a48c2

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: SK7OdxWKOC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.952 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:45.982Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:46.121Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:46.122Z","userId":"684f52b9a6a6ab116bee621f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.439 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:46.125Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b080217b571043469707c314d74259fc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9U4t0sit-AsG4jfsd2V0OaLUzz2dAmuXzYqs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b080217b571043469707c314d74259fc

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XEyIZwjQR3...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.935 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:46.219Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:46.358Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:46.358Z","userId":"684f52baa6a6ab116bee6225","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.532 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:46.361Z"}
  console.log
    CSRF token generation: {
      sessionID: '33ef84ebf08dec722302f4171cb22af5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Bh3sf7Fa-7h0qrO3-N4VYuNslAOlX0d4VJYM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 33ef84ebf08dec722302f4171cb22af5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: NTspHslTgK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.334 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:46.449Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:46.588Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:46.589Z","userId":"684f52baa6a6ab116bee622b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.158 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52baa6a6ab116bee622b {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:46.591Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52baa6a6ab116bee622b {
      sessionID: '9e354f22d42367ace2bdd31ecb1a48c2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9e354f22d42367ace2bdd31ecb1a48c2.jN8Kk7wErb9wpV5Bpd2FtkOeloB7XU7HmAndcXQwXcs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52baa6a6ab116bee622b [32m200[0m 167.015 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:47.455Z"}
  console.log
    CSRF token generation: {
      sessionID: '3f76c0455070bd9668081dd47b0ce771',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lCHAIvbd-aUTq30r9t_wBjf7okNDtjzLG4xo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3f76c0455070bd9668081dd47b0ce771

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: onOjrAynEq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.070 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:47.544Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:47.695Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:47.695Z","userId":"684f52bba6a6ab116bee6250","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.815 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:47.698Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a098cbb7804d22ef72f98487a637c14',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AZajGVHl-4xSMSZ0m5SG7GmkrHhA0NLIsbt4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7a098cbb7804d22ef72f98487a637c14

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1bGS2hA-K4...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.268 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:47.786Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:47.925Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:47.925Z","userId":"684f52bba6a6ab116bee6256","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.438 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:47.927Z"}
  console.log
    CSRF token generation: {
      sessionID: '594102c9f8bb09d91346a0e969878b58',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: YnI9HdbI-_5tnL93O4AMTPF2aaIG84MjQuFI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 594102c9f8bb09d91346a0e969878b58

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ZLDItnjwkQ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.536 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:48.013Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:48.154Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:48.154Z","userId":"684f52bba6a6ab116bee625c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.618 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52bba6a6ab116bee625c {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:48.157Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52bba6a6ab116bee625c {
      sessionID: '3f76c0455070bd9668081dd47b0ce771',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3f76c0455070bd9668081dd47b0ce771.OXgvEo%2FxtDvS6FuCjdqIlL6YgU1Iz35B%2FzqYAUIqYio',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52bba6a6ab116bee625c [32m200[0m 111.918 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:48.966Z"}
  console.log
    CSRF token generation: {
      sessionID: '73aaaf254a6cc5d6606392cc27aaa8fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: P2VE6rQC-5bOFpf2CV2JpPLj2-rbdPyiPytE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 73aaaf254a6cc5d6606392cc27aaa8fd

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: T1o8fyJBAi...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.103 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:49.088Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:49.227Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:49.228Z","userId":"684f52bca6a6ab116bee6281","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.393 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:49.231Z"}
  console.log
    CSRF token generation: {
      sessionID: '3a3a579302bd99fa6b5228b6a7ba7e86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kghlSnld-Ke0bsn2wvgjgp3I18woATFMUShk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3a3a579302bd99fa6b5228b6a7ba7e86

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: h0p72O3Tbo...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.672 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:49.357Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:49.497Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:49.498Z","userId":"684f52bda6a6ab116bee6287","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.533 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:49.500Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e2edc48ccea9fc8bb4ffd012192d733',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: FzJDaEGT-uarr_vJSDxe7ccBBV58fcxVmAYk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e2edc48ccea9fc8bb4ffd012192d733

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Iy3V8KOPA_...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.184 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52bda6a6ab116bee628d {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:49.590Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52bda6a6ab116bee628d {
      sessionID: '3a3a579302bd99fa6b5228b6a7ba7e86',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3a3a579302bd99fa6b5228b6a7ba7e86.vXAVIVvfG0OfjrR8OXA1diL%2B7Rwp6tbTjOfVIcCo5h8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684f52bda6a6ab116bee628d","targetId":"684f52bda6a6ab116bee628d","targetType":"operator","timestamp":"2025-06-15T23:09:49.723Z","userId":"684f52bca6a6ab116bee6281","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684f52bda6a6ab116bee628d [32m200[0m 133.656 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:50.424Z"}
  console.log
    CSRF token generation: {
      sessionID: '3070d8d0d587b59d01f5717337864600',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: eLgi7mBg-_FGItINFzsvUkwUveHD1sVsuvBY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3070d8d0d587b59d01f5717337864600

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: _jYiG6VxuR...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.044 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:50.520Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:50.657Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:50.657Z","userId":"684f52bea6a6ab116bee62af","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.132 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:50.660Z"}
  console.log
    CSRF token generation: {
      sessionID: '7cb49710757f1e203ddfcbe43cb36aa8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2DGmSjZN-7ed5AsNxMScId9btGrnYp-hew1g

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7cb49710757f1e203ddfcbe43cb36aa8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: j8CC2xQHWb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.318 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:50.749Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:50.903Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:50.904Z","userId":"684f52bea6a6ab116bee62b5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.048 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:50.907Z"}
  console.log
    CSRF token generation: {
      sessionID: '7aab7256e84516bbddd409cab2762f8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: qjNpFSeH--9-RBwXfy6yYgokR659B_IhhyN4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7aab7256e84516bbddd409cab2762f8b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: SBeNCu2CDy...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.281 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52bea6a6ab116bee62bb {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:51.013Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52bea6a6ab116bee62bb {
      sessionID: '7cb49710757f1e203ddfcbe43cb36aa8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7cb49710757f1e203ddfcbe43cb36aa8.W3BdQxPlPWTmJ5E87TmhtYsDycx4wASaPXY0Uj6Crs4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52bea6a6ab116bee62bb [33m409[0m 134.486 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:51.842Z"}
  console.log
    CSRF token generation: {
      sessionID: '0a533aac5c7e88ab890fd5e91dabd4a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Z0jhalWz-3b-ylq5x1oTBBAQkBzY5Nq4lPvM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0a533aac5c7e88ab890fd5e91dabd4a5

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: DX5XO_X8iC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.289 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:51.934Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:52.078Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:52.078Z","userId":"684f52bfa6a6ab116bee62dd","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.633 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:52.080Z"}
  console.log
    CSRF token generation: {
      sessionID: '9ae774d18bf78892d6acaf97b461f3d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: zYc7q0nq--ycwX5tPjVghqmPhoJ05VNKwTLA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 9ae774d18bf78892d6acaf97b461f3d4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hPzsNVUVmq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.967 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:52.169Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:52.311Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:52.312Z","userId":"684f52c0a6a6ab116bee62e3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.163 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:52.318Z"}
  console.log
    CSRF token generation: {
      sessionID: '80f5e61ae2e7885efa83e47005459540',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: OApLgV2J-j3O60h6vu_B5V9E5Bq-cPpr39ik

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 80f5e61ae2e7885efa83e47005459540

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: VbhxSzwecJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.297 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684f52c0a6a6ab116bee62e9 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:52.407Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c0a6a6ab116bee62e9 {
      sessionID: '9ae774d18bf78892d6acaf97b461f3d4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9ae774d18bf78892d6acaf97b461f3d4.fZ7rjJlK6Gg9XBW0ctXKN%2Bj3Udsc88QC52z3SNhcBZY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"0":"6","1":"8","10":"a","11":"6","12":"a","13":"b","14":"1","15":"1","16":"6","17":"b","18":"e","19":"e","2":"4","20":"6","21":"2","22":"d","23":"d","3":"f","4":"5","5":"2","6":"b","7":"f","8":"a","9":"6","timestamp":"2025-06-15T23:09:52.546Z"}
[0mDELETE /api/v1/operators/684f52c0a6a6ab116bee62e9 [32m200[0m 139.043 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.269Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e51cdf1737aac9d97de96f060ec3351a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jF0ODvlR-zjSE7_Zb_b_u_cAFkBSrNhkX3bo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e51cdf1737aac9d97de96f060ec3351a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: SWHL0-0kBY...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.518 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.360Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:53.504Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:53.505Z","userId":"684f52c1a6a6ab116bee630c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.597 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.507Z"}
  console.log
    CSRF token generation: {
      sessionID: '91666a6fd094cdc0a4de612c42db4d03',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 58To50SG-peSjmpykOdlpYQpW5yL3QfQyKZo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 91666a6fd094cdc0a4de612c42db4d03

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: -2TLPl3GJg...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.064 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.599Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:53.737Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:53.737Z","userId":"684f52c1a6a6ab116bee6312","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.405 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.740Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd95015d2bd9fe6fcbc46365ba3e4dd91',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: mGZ1NlcB-I30SrkJJKlcshfomwYCVwPk_E54

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d95015d2bd9fe6fcbc46365ba3e4dd91

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: scJ2mjjZUa...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.425 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684f52c1a6a6ab116bee6318 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:53.869Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c1a6a6ab116bee6318 {
      sessionID: '91666a6fd094cdc0a4de612c42db4d03',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A91666a6fd094cdc0a4de612c42db4d03.%2BL8cXhhynyrNVpmn9KFjWSt0qJ4%2Bfgo9X43BfEzQXdA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/operators/684f52c1a6a6ab116bee6318 [33m400[0m 108.258 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:54.681Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ed3756912cc3ca4bfee322729379cb37',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Ef09oT8L-L-bQB6D2oWZgWV_0zcWDIQBdJrc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ed3756912cc3ca4bfee322729379cb37

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: YOkRu0fa1Y...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.146 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:54.771Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:54.906Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:54.907Z","userId":"684f52c2a6a6ab116bee633a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 136.013 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:54.910Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f705e50c0e778948d856836ff54759f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: RRdPrePN-73c8I7p2yVq2cDFtLFRlm3Zvw1E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f705e50c0e778948d856836ff54759f4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 9RRVc23oya...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.911 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:54.998Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:55.141Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:55.141Z","userId":"684f52c2a6a6ab116bee6340","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.519 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:55.144Z"}
  console.log
    CSRF token generation: {
      sessionID: '402ee7fed50b14f025e3486b002e49d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AXiWaZK3-yNU-zBZlluC4vkYVGn67wvg_PW8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 402ee7fed50b14f025e3486b002e49d6

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: eCgTdYff_N...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.725 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:55.320Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:55.456Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:55.457Z","userId":"684f52c3a6a6ab116bee6348","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 136.578 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/684f52c3a6a6ab116bee6346 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:55.459Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c3a6a6ab116bee6346 {
      sessionID: 'ed3756912cc3ca4bfee322729379cb37',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aed3756912cc3ca4bfee322729379cb37.naiT3V9wrO2VmwlDELRex7VOlHJzYj9nydT2kPHzAYM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/operators/684f52c3a6a6ab116bee6346 [33m403[0m 55.727 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.223Z"}
  console.log
    CSRF token generation: {
      sessionID: '054942db400cc34cf0ebba1293b23284',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jtuEsGwW-iAdFChsMEQRZXdMXqffvt7k1AcY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 054942db400cc34cf0ebba1293b23284

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cdZAQJcs8t...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.611 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.328Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:56.479Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:56.480Z","userId":"684f52c4a6a6ab116bee636b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.527 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.483Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aadf766072bdeefb959be09c899d5e29',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 0s4alS0O-PQHvvsuIXXYU1zS7aRocMWC6F8M

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: aadf766072bdeefb959be09c899d5e29

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MjzPmRAAtb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.123 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.572Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:56.710Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:56.711Z","userId":"684f52c4a6a6ab116bee6371","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.881 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.714Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aaf78755ecd631dc55225a01b66e0137',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 5Ud0JtzB-2cv9DIHVBxaSsOs8VrUo5D8Qozo

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: aaf78755ecd631dc55225a01b66e0137

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XWiNvMaGtz...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.512 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684f52c4a6a6ab116bee6379 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:56.812Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c4a6a6ab116bee6379 {
      sessionID: 'aadf766072bdeefb959be09c899d5e29',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaadf766072bdeefb959be09c899d5e29.zpbHQ74BdrDzxVKY%2BrbC%2Fk%2BBt0QbcbeloFIXNGYFCts',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mDELETE /api/v1/operators/684f52c4a6a6ab116bee6379 [33m404[0m 83.174 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:57.601Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be3d1c054f15d00e284701429c09ab6a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Dg23Hl0Z-j2RZEStsq8qq1Gf2797rJSxgXFg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: be3d1c054f15d00e284701429c09ab6a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Dd0qvClUbd...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.718 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:57.693Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:57.832Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:57.833Z","userId":"684f52c5a6a6ab116bee6398","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.595 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:57.835Z"}
  console.log
    CSRF token generation: {
      sessionID: '6d3ee9eda7a17cf5b68bc927570da6f3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: C13cwQOM-X_Qjo6eAlhG9I34CM_6rwvm1Yq0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6d3ee9eda7a17cf5b68bc927570da6f3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: sxj4W_4KNn...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.383 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:57.925Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:58.074Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:58.075Z","userId":"684f52c5a6a6ab116bee639e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.376 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:58.084Z"}
  console.log
    CSRF token generation: {
      sessionID: '6beb8094ea6e4baae328d6bb61bd0293',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VuFW0784-Kkzfuva-crWcsNaXxSpoRc6Su1A

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6beb8094ea6e4baae328d6bb61bd0293

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ch33UACU36...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.035 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/684f52c6a6a6ab116bee63a4/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:58.190Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c6a6a6ab116bee63a4/reset-pin {
      sessionID: '6d3ee9eda7a17cf5b68bc927570da6f3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6d3ee9eda7a17cf5b68bc927570da6f3.0QQhXQ4DXpAbJKz6mUYbkcKR7pByQgt2ZkIoeMwlQbM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"0":"6","1":"8","10":"a","11":"6","12":"a","13":"b","14":"1","15":"1","16":"6","17":"b","18":"e","19":"e","2":"4","20":"6","21":"3","22":"9","23":"8","3":"f","4":"5","5":"2","6":"c","7":"5","8":"a","9":"6","timestamp":"2025-06-15T23:09:58.354Z"}
[0mPOST /api/v1/operators/684f52c6a6a6ab116bee63a4/reset-pin [32m200[0m 164.101 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:58.357Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:58.494Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-15T23:09:58.495Z","userId":"684f52c6a6a6ab116bee63a4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 137.609 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.193Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd951cdb74a1a3f69076fc3df805718a9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: hRMBgDmI-gnERWf7NpUe6nR-ENIvhz0ZTvio

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d951cdb74a1a3f69076fc3df805718a9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 1Qouh5SlzV...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.253 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.281Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:59.455Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:09:59.456Z","userId":"684f52c7a6a6ab116bee63c9","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.757 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.460Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bfbc721a1c101ae3d5b19a5d0d9a8141',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HAS1YDLX-z-3PNTOHFjrGpcj2Vm_ifnRS2pk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: bfbc721a1c101ae3d5b19a5d0d9a8141

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: F6hM6fs7HC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.511 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.558Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:09:59.706Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:09:59.707Z","userId":"684f52c7a6a6ab116bee63cf","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.635 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.710Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f110b7767bed5929f0737279e7f5c197',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9D2FZBMx-0R-p41eKvdNestdNibcSXjOaYSM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f110b7767bed5929f0737279e7f5c197

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MnpojLja47...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.840 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/684f52c7a6a6ab116bee63d5/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:09:59.829Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52c7a6a6ab116bee63d5/reset-pin {
      sessionID: 'bfbc721a1c101ae3d5b19a5d0d9a8141',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abfbc721a1c101ae3d5b19a5d0d9a8141.25b%2FrO%2B4Pzjl14Z5%2BWzk3IICWVsv%2BgVNhsbBnPZV1bk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"0":"6","1":"8","10":"a","11":"6","12":"a","13":"b","14":"1","15":"1","16":"6","17":"b","18":"e","19":"e","2":"4","20":"6","21":"3","22":"c","23":"9","3":"f","4":"5","5":"2","6":"c","7":"7","8":"a","9":"6","timestamp":"2025-06-15T23:09:59.998Z"}
[0mPOST /api/v1/operators/684f52c7a6a6ab116bee63d5/reset-pin [32m200[0m 169.630 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:00.739Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f771c0ffd3a0b31bb05af6caa7a0ccca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: QHhnjTgI-zmohyK_0GN1Ju9Ptuhn0-PV5S5s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f771c0ffd3a0b31bb05af6caa7a0ccca

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: FtUMUpCOSC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.458 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:00.826Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:00.983Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:00.984Z","userId":"684f52c8a6a6ab116bee63f8","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 158.497 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:00.988Z"}
  console.log
    CSRF token generation: {
      sessionID: '99259a025623306f7d8a86ff3d8266d3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: mO6i8QjF-yfXrVfyKZuYNmxVbTo6sU1lBODA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 99259a025623306f7d8a86ff3d8266d3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 5wrkWOTtxl...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.273 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:01.080Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:01.221Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:01.221Z","userId":"684f52c8a6a6ab116bee63fe","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.197 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:01.225Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c6f8fe8401388ada9684e7ee55822796',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2rGFaLLA-hBEAVNwRw-fIKFhAB-juF6mI__s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c6f8fe8401388ada9684e7ee55822796

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: mLOosXk92E...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.266 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:01.500Z"}
[0mGET /api/v1/operators/available [32m200[0m 88.067 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:02.335Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5469b628ef8bf7256204d2a8066dc07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jme6HPfe-Wvp78WfRdcK77HNaZo6HH4bXBAc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d5469b628ef8bf7256204d2a8066dc07

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: --flYrefik...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.235 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:02.434Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:02.578Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:02.578Z","userId":"684f52caa6a6ab116bee642a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.298 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:02.581Z"}
  console.log
    CSRF token generation: {
      sessionID: '74cdc9a070098fd14ff3fb05f064032d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: paYOcahm-weTEPhhyZ2OdbxA6rWyaj1pPxLk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 74cdc9a070098fd14ff3fb05f064032d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: yJktjEKNVu...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.475 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:02.709Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:02.880Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:02.881Z","userId":"684f52caa6a6ab116bee6430","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 171.840 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:02.884Z"}
  console.log
    CSRF token generation: {
      sessionID: '478d28ef3bbbd41a256f0be0d6fa0b30',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: fDSS5wLq-a-2o-aDs4xcl_hsjTV0IU55iuhU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 478d28ef3bbbd41a256f0be0d6fa0b30

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: S4ciAJnqKt...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.617 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:03.162Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 81.925 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:03.959Z"}
  console.log
    CSRF token generation: {
      sessionID: '3cfdd3ce6b39b1f926f8561f11857d13',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: BbuXccmx-xwNYP3Kbi1yGvuyqLBGA9nKq8xA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3cfdd3ce6b39b1f926f8561f11857d13

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: _H4GO56Crm...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.619 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:04.053Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:04.200Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:04.200Z","userId":"684f52cba6a6ab116bee645c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.548 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:04.203Z"}
  console.log
    CSRF token generation: {
      sessionID: '67c1746d5482c387b677a5d4dc66b3c6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: PIpzaEcE-bkxBQ0rCs0ehYkIUHtq4k9Pprb0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 67c1746d5482c387b677a5d4dc66b3c6

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: InnmxNaqvc...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.262 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:04.301Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:04.446Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:04.446Z","userId":"684f52cca6a6ab116bee6462","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.497 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:04.449Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e5ea397ecd25c30691dec7492a331887',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: SLvJ0CF6-My4NQSfSSpUVcMvzJ0oAjmfTAvM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e5ea397ecd25c30691dec7492a331887

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: nNGakidrHj...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.458 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:04.716Z"}
[0mGET /api/v1/operators/available [32m200[0m 82.991 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:05.512Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cfceea1c9a311e4d991830b020dd1d18',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Mta3yMFA-wNE_z_eY4rnlN_9oZxgUcsEVeJc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: cfceea1c9a311e4d991830b020dd1d18

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: CpHN5Me8pz...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.110 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:05.617Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:05.764Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:05.764Z","userId":"684f52cda6a6ab116bee648e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.457 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:05.767Z"}
  console.log
    CSRF token generation: {
      sessionID: '18532aeac16e8b4de8bdae9976936e04',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MZYWHO1g-8dq-QR6MIVqbgMo9QVlLp2FEID8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 18532aeac16e8b4de8bdae9976936e04

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: IbK0a92VwJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.957 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:05.857Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:06.015Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:06.016Z","userId":"684f52cda6a6ab116bee6494","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 159.010 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:06.019Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b93c55b65ecc15a11ef29fff7267ccd8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: CGTvS6ZY-Cr4A6OMi8g64yTrPlRvEl1xKOb0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b93c55b65ecc15a11ef29fff7267ccd8

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 2HHYjM0QON...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.061 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:06.258Z"}
[0mGET /api/v1/operators/available [33m401[0m 1.184 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:06.967Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a204357685f5dc64ae791ad1f1d3d501',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: sI1lBNOg-JAWMnS7fnRZnXb2Ulfp06TAGRIk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a204357685f5dc64ae791ad1f1d3d501

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ftnJawSFp7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.395 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:07.066Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:07.241Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:07.241Z","userId":"684f52cea6a6ab116bee64bd","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.286 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:07.244Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef16e5099e26d3325936e1829e7f6848',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 4iGBlnXE-X-TL8Sdy7GzM6NeDGVLZVXZy5nM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ef16e5099e26d3325936e1829e7f6848

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: c08iWLfCOb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.938 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:07.331Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:07.477Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:07.478Z","userId":"684f52cfa6a6ab116bee64c3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.045 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:07.480Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ae5ed9991b7a194ff1996a248271d6ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: aTrlAvJJ-PT84j_4bz5q-aKp3OagzVW1FzbY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ae5ed9991b7a194ff1996a248271d6ab

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: YNTg_tdHkQ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.065 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52cfa6a6ab116bee64c9/stats {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:07.569Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52cfa6a6ab116bee64c9/stats {
      sessionID: 'ef16e5099e26d3325936e1829e7f6848',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aef16e5099e26d3325936e1829e7f6848.2udPlHx3aJOffK79lI6zr%2FdjLT2IuAHwB5otpEsSR5Y',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52cfa6a6ab116bee64c9/stats [32m200[0m 112.308 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.389Z"}
  console.log
    CSRF token generation: {
      sessionID: '458dbdd3746a2e348c94d2675b9d40bd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 7knPaK3f-2oPqOFPM4vdLf2182PYpjskc5f8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 458dbdd3746a2e348c94d2675b9d40bd

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: auQ2s_wHZJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.761 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.479Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:08.615Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:08.615Z","userId":"684f52d0a6a6ab116bee64ea","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 136.959 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.618Z"}
  console.log
    CSRF token generation: {
      sessionID: '56e3e17aa3bc1d39044e0b20f14ec04b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: GinURCHk-uf8NJ4F6ZfoamUHPIubUGpVNPPY

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 56e3e17aa3bc1d39044e0b20f14ec04b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: hi2GSJoFpG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.231 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.703Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:08.843Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:08.843Z","userId":"684f52d0a6a6ab116bee64f0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 140.298 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.846Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c31debb5fa76c6678b6a27ac21c101a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lgrRgTJy-VHaRnRIpmG4kcwTBFFg9G1ubI9Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c31debb5fa76c6678b6a27ac21c101a4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 0oJwwZBgwq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.799 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52d0a6a6ab116bee64f6/stats {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:08.945Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52d0a6a6ab116bee64f6/stats {
      sessionID: '56e3e17aa3bc1d39044e0b20f14ec04b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A56e3e17aa3bc1d39044e0b20f14ec04b.stoGceczjk4kGCnEKoqQhlj1USdnCq5TBFYaFNaB8ww',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52d0a6a6ab116bee64f6/stats [32m200[0m 114.203 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:09.767Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b29c8bec03576f057021538d4d5d176',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: KmDuogmj-GbcAzbBN3kumkJXcYbkzXBv0Iu4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0b29c8bec03576f057021538d4d5d176

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pLf_Vosti1...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.543 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:09.861Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:10.002Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:10.003Z","userId":"684f52d1a6a6ab116bee6517","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.244 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:10.005Z"}
  console.log
    CSRF token generation: {
      sessionID: '4903d949e57d5eae427b67c27db7c26a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: J5dwnGmN-KruoivlvnvpMabK48-57Rcz3K9c

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4903d949e57d5eae427b67c27db7c26a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 06riTxYuQp...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.969 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:10.097Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:10.240Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:10.241Z","userId":"684f52d2a6a6ab116bee651d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.469 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:10.243Z"}
  console.log
    CSRF token generation: {
      sessionID: '4a14b9d271bbd22313cbc12e5b5b4269',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: V1UiJBUB-a301AIUgaaAkh0M8bwf0Z5P1Mfc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4a14b9d271bbd22313cbc12e5b5b4269

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Xre09vsZGW...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.136 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52d2a6a6ab116bee6523/stats {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:10.334Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52d2a6a6ab116bee6523/stats {
      sessionID: '4903d949e57d5eae427b67c27db7c26a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4903d949e57d5eae427b67c27db7c26a.ZNb4qvPeYIhtUU02w82ezxhA%2Fg%2FvJ%2FapgywcEfxqAsQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52d2a6a6ab116bee6523/stats [32m200[0m 110.485 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.150Z"}
  console.log
    CSRF token generation: {
      sessionID: '28b8fb6c7da1efda95470877c878699e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VdJOUBS1-hPE2yo4nMdKQCu1BZGt6MFIDZB0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 28b8fb6c7da1efda95470877c878699e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: S_dU1PVI7Z...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.283 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.244Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:11.389Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:11.389Z","userId":"684f52d3a6a6ab116bee6544","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.480 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.392Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f776f65df660b4ca58939d2ed6ba0b97',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XQxCaFo8-yNBKyvoribe8YefHiPoDJAIfrk0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f776f65df660b4ca58939d2ed6ba0b97

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: M1Vki8Yc_b...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.832 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.485Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:11.623Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:11.623Z","userId":"684f52d3a6a6ab116bee654a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.513 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.626Z"}
  console.log
    CSRF token generation: {
      sessionID: '38f61e374a580222a2e6e739f0681a78',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: zWJ2eKaw-TPRV1cM7986U47zN7aiEo-DQlvQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 38f61e374a580222a2e6e739f0681a78

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: XF7uGO5fSw...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.442 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684f52d3a6a6ab116bee6550/stats {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:11.729Z"}
  console.log
    CSRF check for: /api/v1/operators/684f52d3a6a6ab116bee6550/stats {
      sessionID: 'f776f65df660b4ca58939d2ed6ba0b97',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af776f65df660b4ca58939d2ed6ba0b97.v8Vh%2BcLEjRfutQLnG4oNUTPZVXvkeTZv%2BBFgFv3FmbQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPATCH /api/v1/operators/684f52d3a6a6ab116bee6550/stats [33m400[0m 55.400 ms - 62[0m
PASS tests/integration/operator.test.js (57.992 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2373 ms)
      ✓ should filter by active status (3009 ms)
      ✓ should filter by on-shift status (1540 ms)
      ✓ should support pagination (2510 ms)
      ✓ should require authentication (1196 ms)
      ✓ should require operator management permissions (1580 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1498 ms)
      ✓ should allow operators to view their own profile (1284 ms)
      ✓ should prevent operators from viewing other operators (1310 ms)
      ✓ should return 404 for non-existent operator (1311 ms)
    POST /api/v1/operators
      ✓ should create new operator (1496 ms)
      ✓ should validate required fields (1282 ms)
      ✓ should validate email format (1233 ms)
      ✓ should validate shift time format (1260 ms)
      ✓ should prevent duplicate emails (1294 ms)
      ✓ should require operators.manage permission (1465 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1415 ms)
      ✓ should update password (1681 ms)
      ✓ should deactivate operator (1437 ms)
      ✓ should allow operators to update their own profile (limited fields) (1566 ms)
      ✓ should prevent operators from changing their own work station (1512 ms)
      ✓ should not allow updating operatorId (1457 ms)
      ✓ should validate email uniqueness on update (1418 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1428 ms)
      ✓ should prevent deleting operator with active orders (1410 ms)
      ✓ should require operators.manage permission (1541 ms)
      ✓ should handle non-existent operator (1378 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1592 ms)
      ✓ should clear login attempts on PIN reset (1538 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1602 ms)
      ✓ should respect limit parameter (1624 ms)
      ✓ should only include active operators (1551 ms)
      ✓ should require authentication (1458 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1420 ms)
      ✓ should update quality score (1375 ms)
      ✓ should update both stats in one call (1386 ms)
      ✓ should validate processingTime is positive (1339 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:13.350Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:14.277Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: EQDfmU2m-m1j_ivrjNOnTvpcknvMf93fGHXI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.012 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:15.162Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: LNkX5lSX-nwQqgPrCtrETbHyhEQsyEnRAQL0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.078 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:15.200Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1611:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 33.106 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:16.010Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VqqP6MsY-PSZuIdNthhx_vnkOaq1HVMbSRSQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.117 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:16.049Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1611:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 32.650 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:16.847Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: drprLmnd-wdyuCfviFaDvKeWm0w7uecPK24g

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.769 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:16.856Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1592:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 27.502 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:17.618Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: TN1hnICA--b3vuHHQMwHJfYQDmr0-7Vj-HqU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.827 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:17.655Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:17.656Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:17.658Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1611:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 32.245 ms - 58[0m
[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 36.322 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1592:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 35.513 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:18.473Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jXDBBJ0Q-DPYuvU2H98yxE78PZ7bu6Bzemn8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.005 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:18.483Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-3270650f-3c4e-49d5-b775-bb2fd43d9697","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:18.698Z","userId":"684f52da5a7100c8bf441f1a","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 218.306 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:19.483Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: tCf2pw7J-tT3P330xCsRfKNoJ44pc3tTPQ4E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.884 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:19.491Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.165 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:20.269Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ZiY6oGzl-Zy0HW8gLfHyEambK2IpKQczmNAs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.494 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:20.278Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-db5f9123-1246-46ff-af15-767d6ad36ad3","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:20.474Z","userId":"684f52dc5a7100c8bf441f5d","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 196.473 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:20.477Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 82.419 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:21.317Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Gxr9EbOr-2LAWA0KTCRcOsaKoKAMLh0txwwA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.889 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:21.359Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 55.772 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:22.193Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: nybYziez-wqmnjbFDg70wNsBo7eP73nATeyk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.820 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:22.202Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-bd0f4900-dd5b-424a-83b5-6b25d3bb69d5","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:22.397Z","userId":"684f52de5a7100c8bf441fa5","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 195.336 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:22.401Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-3ba6d046-9732-4bab-b640-e59b330e5768","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:22.623Z","userId":"684f52de5a7100c8bf441fad","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 222.259 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:22.626Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-4621a6e4-ce96-4272-b5ff-55d67ec963fe","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:22.874Z","userId":"684f52de5a7100c8bf441fb6","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 248.119 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:23.668Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: QGU29qFo-jql62YY9UmYDT3HRbwuI41dkU54

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.232 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:23.708Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-9d37795a-37d2-4c9d-bc9b-27545f51ab8f","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-15T23:10:23.926Z","userId":"684f52df5a7100c8bf441fde","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 218.028 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:24.744Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: q4Db367i-k_kOMCb9Efb-PHYd7NhnqnT3XSI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.139 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:24.753Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 106.647 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:25.602Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: MqV5IZjm-qsiK4GOtAtC4jgAYD5LRwsMNvXc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.709 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:25.650Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5e4aabdfe0ea43d17b1b864c53750ea9.2TIv8bjOPFncmWREVX452IvzUDaPXsE1nZ5YtTKdqso',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:10:25.744Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-15T23:10:25.745Z","userId":"684f52e15a7100c8bf442021","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 94.853 ms - 560[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:26.498Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VbHDotdj-i3O8LZodrVvDtceFoaYKPpmTEG8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.723 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:26.568Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5e4aabdfe0ea43d17b1b864c53750ea9.2TIv8bjOPFncmWREVX452IvzUDaPXsE1nZ5YtTKdqso',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-15T23:10:26.684Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 116.672 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:27.441Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2fRoueKW-cFdOfA4gLHOn7kfvGKpza7PjCXg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.071 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:27.449Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5e4aabdfe0ea43d17b1b864c53750ea9.2TIv8bjOPFncmWREVX452IvzUDaPXsE1nZ5YtTKdqso',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 53.891 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:28.265Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: VifXsVbz-h4Z8PUGxoX68DXBO5e-zbueLrdQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.715 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:28.315Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5e4aabdfe0ea43d17b1b864c53750ea9.2TIv8bjOPFncmWREVX452IvzUDaPXsE1nZ5YtTKdqso',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-15T23:10:28.398Z","userId":"684f52e45a7100c8bf442089","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 83.975 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:29.149Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: iuvdQh62-ENG6_oE9itX3nQRQ17PDK_I88k8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.325 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:29.158Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-e6823216-5094-41aa-9b95-bd531cdb6a58","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-15T23:10:29.359Z","userId":"684f52e55a7100c8bf4420ae","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 201.919 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:30.116Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XZGaFJRK-6B-_05nbhA8oOxy3pad5UqDztoM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.456 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:30.128Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.080 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:30.889Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9mpqEL1j-O_FeFsxohgclidqpn0iTcKLxYeU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.441 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:30.899Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.988 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:31.653Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: OxPW7alT-FAKWxfWbuzNEwTbSmu6QTEu5M9w

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:31.664Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.020 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:32.416Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ExGs6yRc-OFaXCu6F1Wcc66F9gQWWRX7Xhn0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.108 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:33.257Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: hcSHsJiz-CwKAs7aEa89J5tKUM4q6lwXahD4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.267 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:34.109Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HQ0ZCsst-Ah3eb8vE7M_jJ4opVq5pGJs1l4Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.439 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:34.189Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1611:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 31.989 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:35.000Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e4aabdfe0ea43d17b1b864c53750ea9',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Ut9P5ZLR-p1mniUEwKy-sK-IJJ7eTva9sIcw

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5e4aabdfe0ea43d17b1b864c53750ea9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: vAEOk-yIej...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.603 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:35.072Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1592:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1611:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 33.039 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (23.316 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1306 ms)
      ✓ should poll for OAuth session results with complete data structure (848 ms)
      ✓ should poll for OAuth login session results (836 ms)
      ✓ should return pending status for non-existent session (773 ms)
      ✓ should handle session polling race conditions (852 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1010 ms)
      ✓ should reject registration with malicious social data (786 ms)
      ✓ should prevent duplicate social account registration (1047 ms)
      ✓ should prevent duplicate email registration (876 ms)
      ✓ should generate unique usernames for social registrations (1473 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1075 ms)
      ✓ should reject customer registration with invalid affiliate ID (858 ms)
    Social Login
      ✓ should login existing affiliate with social account (895 ms)
      ✓ should login existing customer with social account (938 ms)
      ✓ should return error for non-existent social account (827 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (884 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (965 ms)
      ✓ should handle expired JWT tokens gracefully (772 ms)
      ✓ should handle invalid JWT tokens (766 ms)
      ✓ should validate required fields (761 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (843 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (851 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (889 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (913 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:36.789Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:37.103Z"}
  console.log
    CSRF token generation: {
      sessionID: '31e1fc964d7740257c62ffcf828a552c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jVPIa7WK-mCKo1TaGWno0FdOGKL3j7rCl-hg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 31e1fc964d7740257c62ffcf828a552c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: drmxuMmgSg...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.684 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:38.011Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:38.159Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.028 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:38.858Z"}
  console.log
    CSRF token generation: {
      sessionID: '0011ea9f973ffa3b979f860bd2940c1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XWbd9USD-6psHBvH615CSB9ZlVZwg3UmSio4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0011ea9f973ffa3b979f860bd2940c1a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 3-Uv4kRFOE...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.169 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:39.088Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-15T23:10:39.168Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 80.561 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:39.808Z"}
  console.log
    CSRF token generation: {
      sessionID: '4fa96ac3975cef04d67f22150890d68a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: nBf48CBE-raA12L7joSwVr2mAM3XMTPR251k

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 4fa96ac3975cef04d67f22150890d68a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ByBwCwg2lT...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 14.476 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:39.961Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-15T23:10:39.990Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 29.081 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:40.621Z"}
  console.log
    CSRF token generation: {
      sessionID: '78663ec742d2777148a8be392d12cfcb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jIOQosxa-ra7sbCVetQpY1EISy6Qnf8-Mo80

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 78663ec742d2777148a8be392d12cfcb

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Gz_230eklI...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.356 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:40.882Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.789 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:41.657Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ec719b778ebe0b53871da8f7476f058',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9S8htzpz-7udL2bny1FZqfe0gYjxvIG-xYgI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0ec719b778ebe0b53871da8f7476f058

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: u-pHW4ihz9...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.649 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:41.916Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.033 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:42.695Z"}
  console.log
    CSRF token generation: {
      sessionID: '949a9add79ad2bced640c4be4d28b2e2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HwCcmA1M-msyql7A5Ndc9Yb7xw7yWwDHubhM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 949a9add79ad2bced640c4be4d28b2e2

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: cCsW9-5oyH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.773 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:42.950Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.609 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:43.731Z"}
  console.log
    CSRF token generation: {
      sessionID: '97e1be9cb11f30e8508b2539971ff077',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 1eTvqUbC-dea9sI-6QJHr9sLVvem6_CA5C0A

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 97e1be9cb11f30e8508b2539971ff077

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kXWkke82yF...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.855 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:43.992Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:508:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:509:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:510:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:543:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 143.940 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:44.782Z"}
  console.log
    CSRF token generation: {
      sessionID: '770a42ef19c463346850fa80602da335',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2aZvpzYM-3g8M_IbltHf6PXk828lzRElLlqg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 770a42ef19c463346850fa80602da335

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 9r0u1zu4PG...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.788 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:44.924Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 27.784 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:45.633Z"}
  console.log
    CSRF token generation: {
      sessionID: '99a4b2769b89bcaab399dc794a398c77',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: oO42Ex3y-agdD3P0eJRl35Lrgnnr415-Em_4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 99a4b2769b89bcaab399dc794a398c77

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ygdxJDWDVt...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.161 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:45.861Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:46.021Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 160.098 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:46.023Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.058 ms - 129[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1078:35)","timestamp":"2025-06-15T23:10:46.688Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:46.690Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad091938ae86da54e1be19c61d8f9d6e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 0CaAiAk9-SqRD95k50wibddgywNnTedq4iSU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ad091938ae86da54e1be19c61d8f9d6e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: lVtevwWXUA...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.672 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:46.836Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.298 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:47.487Z"}
  console.log
    CSRF token generation: {
      sessionID: '6e5c1789b975ca3d38ab049c829d4697',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: l4ke2BVt-L9rGaprpfs-ZEpPzindDBZWll7U

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6e5c1789b975ca3d38ab049c829d4697

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 0RHPnAGysC...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.388 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:47.628Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.389 ms - 47[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1078:35)","timestamp":"2025-06-15T23:10:48.139Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:48.262Z"}
  console.log
    CSRF token generation: {
      sessionID: '5abb92e108f420be3272892ca4b3c405',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: UGdunbUu-AjgLI1srmxtxsX-DuCZp647lfkk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5abb92e108f420be3272892ca4b3c405

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: AIj8rU2Pcm...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.867 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:48.487Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:48.629Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.283 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:48.631Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 124.225 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:49.396Z"}
  console.log
    CSRF token generation: {
      sessionID: '1e8499a60f8a77b8682574ad125ae727',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9e8YwH4h-nwoFXbTmh-ZZS706poELoxhgCTI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 1e8499a60f8a77b8682574ad125ae727

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: j92syl_8jL...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.766 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:49.541Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.339 ms - 89[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1078:35)","timestamp":"2025-06-15T23:10:49.576Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:50.176Z"}
  console.log
    CSRF token generation: {
      sessionID: '61b08e9c5350c6f8f77f477134cf9451',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: L83ra2NE-3jbWw_kZS2b9xMUIiJ1qZKtADMA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 61b08e9c5350c6f8f77f477134cf9451

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: AThRk5fizR...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.714 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:50.471Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.777 ms - 62[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1078:35)","timestamp":"2025-06-15T23:10:51.079Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:51.161Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f95871d532b7350272aab423d6ac5711',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: yitlic83-BdAkcFdH6jbCsZqdz5RBpRvCOvU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f95871d532b7350272aab423d6ac5711

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: k6i7sbA7E7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.025 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:51.395Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:51.547Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 152.036 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:51.550Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'f95871d532b7350272aab423d6ac5711',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af95871d532b7350272aab423d6ac5711.CSE4ZY75grwqyFbY0eEQAxMuydEv4jTbsslk3LbTgXU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/auth/logout [32m200[0m 94.807 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:51.648Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.448 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:51.680Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.561 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.350Z"}
  console.log
    CSRF token generation: {
      sessionID: '0160da4ab3558cb6b531c722544bb096',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: dy53eFPO-kiB0_uMhuY6iy8ex63nZP2tHudE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0160da4ab3558cb6b531c722544bb096

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Lg9iq6JKA6...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.520 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.580Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1078:35)","timestamp":"2025-06-15T23:10:52.664Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:52.723Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.915 ms - 544[0m
  console.log
    Got refresh token: 8095c0f42a8149ea37c9226deddf86caf99a13203e2afba68e653d5b0590299a271b439a116bec9b

      at Object.log (tests/integration/auth.test.js:804:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:818:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.727Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.729Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.731Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.732Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:52.733Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.094 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.211 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.940 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.270 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 121.331 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NGY1MmZjMmE1N2EwNmQwZWRhNGY0MSIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MDAyOTA1MiwiZXhwIjoxNzUwMDMyNjUyLCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.ow1qnDQBouRd7iAvmFKl_OcV085dMQWvWPg7nbn7T2s',
          refreshToken: '59e3becbdb6893de529ed608f80f650e20b08fb5a8f5ab532976440203f8580a8aaebaf99a0854a0'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:820:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:53.497Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fa4f84120c1028e14698d8a783abf569',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: r0XiALnE-RIUULHlX118j28ELWaXxpsoSRmg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fa4f84120c1028e14698d8a783abf569

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: e6ci1qJ8CA...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.859 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:53.715Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:53.862Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.709 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:54.966Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:55.105Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 139.830 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.108Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.415 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.138Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.441 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.170Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'fa4f84120c1028e14698d8a783abf569',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afa4f84120c1028e14698d8a783abf569.wbQWOIlSBgOg1foGOvRzakP3c0pObijauAZz6JkCv%2Fc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.985 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.264Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.486 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.296Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.772 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.328Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'fa4f84120c1028e14698d8a783abf569',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afa4f84120c1028e14698d8a783abf569.wbQWOIlSBgOg1foGOvRzakP3c0pObijauAZz6JkCv%2Fc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/auth/logout [32m200[0m 92.070 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:55.422Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.478 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:56.093Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c753918f0063be62fa693c1f949867c7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: edTD5ONm-ScYcKYUNktnyRT00xvXyEum2k7g

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c753918f0063be62fa693c1f949867c7

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: loxZbQ70Mb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.850 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:56.319Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:56.460Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-15T23:10:56.461Z","userId":"684f53002a57a06d0eda4fa1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.926 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:57.105Z"}
  console.log
    CSRF token generation: {
      sessionID: '90812ee035a041f57e436a8d8109edab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 7RKzARRb-00DhxAJhu51kvnYnhnfuuehLm6Q

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 90812ee035a041f57e436a8d8109edab

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: sj5nJliu54...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.350 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:57.333Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-15T23:10:57.450Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 117.126 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:58.094Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e81bf5e317f77e0b29a3f09041d2005c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: CrY7wclU-2b66xno9VreDnQ7qYr_FQ69Uno0

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e81bf5e317f77e0b29a3f09041d2005c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: MYqBeDDO57...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.869 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:58.327Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-15T23:10:58.356Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.805 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:58.987Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c00446e12bf43920ea258eb99f494ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ek8CLEOg-86BXoAkGI-2W-CbtA8rhMSbnXYg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 2c00446e12bf43920ea258eb99f494ce

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: DtIlJD5wUr...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.281 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:10:59.294Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-15T23:10:59.439Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-15T23:10:59.439Z","userId":"684f53032a57a06d0eda5007","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.964 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:00.086Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fbae2236020019494453f01b0abe28ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: lFHk9fPc-F9bnHAmxgT9waNA7a6nfRe1OL8A

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: fbae2236020019494453f01b0abe28ce

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Y-8Oc6WgN3...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.631 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:00.404Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-15T23:11:00.518Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 113.642 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:01.152Z"}
  console.log
    CSRF token generation: {
      sessionID: '884a39d73f76e7f4b8a570ee65495f44',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: WbdlXwCd-NWWtjXIGDVt2eIPe8FsKqrowBLc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 884a39d73f76e7f4b8a570ee65495f44

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 7l35b1f8Vu...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.956 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:01.469Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-15T23:11:01.498Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 29.196 ms - 82[0m
PASS tests/integration/auth.test.js (26.11 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1785 ms)
      ✓ should fail with invalid credentials (950 ms)
      ✓ should fail with non-existent username (813 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1035 ms)
      ✓ should login customer using emailOrUsername field with email (1039 ms)
      ✓ should login customer using emailOrUsername field with username (1035 ms)
      ✓ should prioritize emailOrUsername over username field (1051 ms)
      ✓ should return error with invalid emailOrUsername (851 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1058 ms)
      ✓ should fail with invalid token (794 ms)
      ✓ should fail with missing token (775 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1135 ms)
      ✓ should fail with invalid refresh token (780 ms)
      ✓ should fail with expired refresh token (985 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1189 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1146 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2596 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1012 ms)
      ✓ should fail with invalid administrator credentials (988 ms)
      ✓ should fail when administrator is inactive (893 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1099 ms)
      ✓ should fail with invalid operator credentials (1066 ms)
      ✓ should fail when operator is inactive (998 ms)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-1

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-2

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-3

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-4

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-5

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-6

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-7

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-8

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-9

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

  console.log
    Registered payment callback route: /api/v1/payments/callback/handler-10

      at log (server/routes/paymentRoutes.js:40:13)
          at Array.forEach (<anonymous>)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:03.184Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:03.507Z"}
  console.log
    CSRF token generation: {
      sessionID: '82b50f673ca437001a45d210cde62328',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Y6MWsrwq-jVHdNirr8qdYMcHZYfgiRbwGNLU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 82b50f673ca437001a45d210cde62328

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: b53DDMsyOb...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 7.305 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:04.275Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '82b50f673ca437001a45d210cde62328',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A82b50f673ca437001a45d210cde62328.M3UUWmT%2FFd0iQxx7bCEjMgrwAxkzjeq5zi1QXqy3LT0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2,
      serviceNotes: 'Handle with care',
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon',
      specialDeliveryInstructions: 'Leave at door'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 205.904 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:05.195Z"}
  console.log
    CSRF token generation: {
      sessionID: 'faee6995f21bfab8b3ff251ca846ddba',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: snftxf7i-P-qJfoqGqSdn-tmgOKmcPSKfZ9M

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: faee6995f21bfab8b3ff251ca846ddba

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: oPPUKXsvRa...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.970 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:05.513Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'faee6995f21bfab8b3ff251ca846ddba',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afaee6995f21bfab8b3ff251ca846ddba.0c6PzecQrxREqU2hzOZh0MMDPcAFGcbSpElhOnAkH7Q',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1,
      deliveryDate: '2025-05-27',
      deliveryTime: 'evening'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 196.010 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:06.335Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b61fb759a463e0ccead3f36d65fd456f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: AaohqtDf-4gcePo7M5Ea9U9LLHwc2KPYEs3s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b61fb759a463e0ccead3f36d65fd456f

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: P3FOvF6K0B...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.253 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:06.592Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'b61fb759a463e0ccead3f36d65fd456f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab61fb759a463e0ccead3f36d65fd456f.yLbfLa%2Bf%2F10dvYoARxmv2p0BhQgCo6jhVbhz2jKX8Tk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:82:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:86:15)

[0mPOST /api/v1/orders [33m400[0m 58.587 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:07.280Z"}
  console.log
    CSRF token generation: {
      sessionID: '56f35c951a9455084c6743fb0d657133',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: jd5yhzMk-n_BzBEzWXry6S5cAET-EgeQwYEA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 56f35c951a9455084c6743fb0d657133

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pKcvkEZVSH...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.388 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:07.540Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '56f35c951a9455084c6743fb0d657133',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A56f35c951a9455084c6743fb0d657133.artlOa5meiViRUDmKhlc4N7TJdaDDRRv%2BlSUQ22s%2Fy0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:95:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:99:15)

[0mPOST /api/v1/orders [33m400[0m 84.843 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:08.255Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b63ffc8b86ff2ab97ef27ade2e507b0e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: nQxDx0rF-IIwj6j7uLre4Xu2kmTz0druZzbk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b63ffc8b86ff2ab97ef27ade2e507b0e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Mj_BQtd8TS...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.729 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:08.550Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'b63ffc8b86ff2ab97ef27ade2e507b0e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab63ffc8b86ff2ab97ef27ade2e507b0e.vYpk36h3u5n7077esFFYCuFolqLvY2BoC6HENdGCkKw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [33m403[0m 85.187 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:09.266Z"}
  console.log
    CSRF token generation: {
      sessionID: '16b6e9da8103f2adc52d9ba8a0b47ece',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: q6MhKhaY-ImTcl4uMubnuHAOhhq4apGPRxi4

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 16b6e9da8103f2adc52d9ba8a0b47ece

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: u7EczG0uiI...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.020 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:09.531Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '16b6e9da8103f2adc52d9ba8a0b47ece',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A16b6e9da8103f2adc52d9ba8a0b47ece.dGY1Z5nBpQ2oAuNODGFsRRdMTcjBmmHpS6wtbY0JZAU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Valid delivery date is required',
        path: 'deliveryDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid delivery time',
        path: 'deliveryTime',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:57:15)

[0mPOST /api/v1/orders [33m400[0m 30.204 ms - 628[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:10.206Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd8e534f2c8df3af67fae885b536271d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: tTogIJfV-XLjoLT86u9nDd2hHIxjOr47TVCQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: d8e534f2c8df3af67fae885b536271d9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 6PfjN9OpNB...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.143 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:10.507Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 110.978 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:11.245Z"}
  console.log
    CSRF token generation: {
      sessionID: '929f9750915c950580fb7e5af8aa034e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2t6C1lCe-GRBVu01IDxRjyoWGs4RyMrtWU4w

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 929f9750915c950580fb7e5af8aa034e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: VVjnL2DXFP...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.250 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:11.558Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 107.607 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:12.292Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a9708b9c0aba69d660b59d33edc17440',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 3LG8CsBc-HjIOnj8oarNAi1XuLZIDMsxEBp8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a9708b9c0aba69d660b59d33edc17440

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: pKiDIwcHrf...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.105 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:12.580Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 54.497 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:13.269Z"}
  console.log
    CSRF token generation: {
      sessionID: '07f184aa041ef38f8539d1966b4391ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: pBiqq5G4-5ym4R22htSUeHD-GDgDkH_8X4ls

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 07f184aa041ef38f8539d1966b4391ec

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Q-4R8NV4N_...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.890 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:13.605Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 54.251 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:14.291Z"}
  console.log
    CSRF token generation: {
      sessionID: '03cbe4ec30e79e164b1d9ecf738fa099',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9fFDNJKW-qwU0pY4YpBLC2DGt_OaxEFTeu3c

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 03cbe4ec30e79e164b1d9ecf738fa099

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: heyhHODcA7...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.462 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:14.582Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '03cbe4ec30e79e164b1d9ecf738fa099',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A03cbe4ec30e79e164b1d9ecf738fa099.DXw9DIuhnKB%2FYBhwuMoW89MeaaYUo7z4dl%2FfU2eI0n0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 141.411 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:15.374Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f9d49e58ccc90fe0a71e1d5bd820a385',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Cwwumwjs-VVwE-xu2gfGSH_TNYUi3hgmAxOQ

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f9d49e58ccc90fe0a71e1d5bd820a385

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: _Q6pUthC5g...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.830 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:15.684Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'f9d49e58ccc90fe0a71e1d5bd820a385',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af9d49e58ccc90fe0a71e1d5bd820a385.QRF15bp2yoT9bw4VXdM6szvFlu48tLAIGoHF1MHXkmo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 140.031 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:16.477Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d15e1e4c093988a6def2f02f859470e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Sms3uSK0-semRCU-yOJCZi_n4pvSSPwHFXrs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 2d15e1e4c093988a6def2f02f859470e

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: uoK1qrlmtv...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.550 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:16.804Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '2d15e1e4c093988a6def2f02f859470e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2d15e1e4c093988a6def2f02f859470e.S%2FyYwpQxfCS1uFpW18j5E2K7mh2dipLeJghCd%2FJ%2FpFw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 55.200 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:17.480Z"}
  console.log
    CSRF token generation: {
      sessionID: '989e938fe3283d53c2e04cd6fd775b95',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: WQze7EjE-xCQ-1pswrw2Dj430aqWSE2tNvDs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 989e938fe3283d53c2e04cd6fd775b95

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: Ajw-rDiLPd...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.388 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:17.766Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '989e938fe3283d53c2e04cd6fd775b95',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A989e938fe3283d53c2e04cd6fd775b95.A1lV3OQwuMJ7M1omLHfPnZXla2xgcOYY1G2BjukGGyM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 56.646 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:18.452Z"}
  console.log
    CSRF token generation: {
      sessionID: '380132a00862d585ac8fca4103f5ecb4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Brk0U25P-t1BUMUy6XRNBahli58k7CepgLE8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 380132a00862d585ac8fca4103f5ecb4

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: QkKKxdkWkK...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.725 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:18.733Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '380132a00862d585ac8fca4103f5ecb4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A380132a00862d585ac8fca4103f5ecb4.ZPohDHJXVdTq7Gpo3BkEyqBTDJ2o2BCnm4HRZmXmIrw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 55.281 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:19.426Z"}
  console.log
    CSRF token generation: {
      sessionID: '15ecd96109f0897bad2c7012e23f9abf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: oLyU34KT-VuLY0SAru2vmaWJc3VBsdXlAG_E

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 15ecd96109f0897bad2c7012e23f9abf

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: E0YZb6ysx9...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.258 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:19.712Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '15ecd96109f0897bad2c7012e23f9abf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A15ecd96109f0897bad2c7012e23f9abf.xldgJX6eqvvEdPRaogE5Z9HxMThj0EburJP9v%2BVk9qM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 140.567 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:20.514Z"}
  console.log
    CSRF token generation: {
      sessionID: '232b3e477c6cf7666987334e3ffc3ce7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: g1lBmdHW-ZJyacTJ6pA6o3w9FCDSKSHd8X2w

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 232b3e477c6cf7666987334e3ffc3ce7

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 5KbsES32F_...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.750 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:20.798Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '232b3e477c6cf7666987334e3ffc3ce7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A232b3e477c6cf7666987334e3ffc3ce7.8JpoCPG%2Biyb%2FvM7%2FsgaP1OX%2FzLIBA6EFIzaJasoTlYQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 139.078 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:21.577Z"}
  console.log
    CSRF token generation: {
      sessionID: '33539637e66e0ac911c2e947295e694d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 9uVBl6UL-V4qbBKt1ilay6XUtReVkkBl-QTk

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 33539637e66e0ac911c2e947295e694d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: xRjP4L1cCM...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.261 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:21.949Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '33539637e66e0ac911c2e947295e694d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A33539637e66e0ac911c2e947295e694d.kgaSbYKyetuihTNKMDQXN33OOkOoaa3YgWnQ8wddNFs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 56.061 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:22.650Z"}
  console.log
    CSRF token generation: {
      sessionID: '7181a58ae94d51d84c5117e907d450a0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: La3GkcCm-wBbxdXOKpIPXtUJgzE-3aw7bWJE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7181a58ae94d51d84c5117e907d450a0

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: eS2j4XDLhy...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.829 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:22.932Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '7181a58ae94d51d84c5117e907d450a0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7181a58ae94d51d84c5117e907d450a0.zropat5zkPpVy%2FbES011bJBrkXZphWqLKDNjPOuallQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 55.641 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:23.612Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a4c81dbd8e1bb627ec6763a53c490d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: OVHLCYkt-LNBtbFsYC-xj5Ef8uNPwbNAzwaU

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 6a4c81dbd8e1bb627ec6763a53c490d9

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ng6gZRyhTS...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.371 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:23.918Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '6a4c81dbd8e1bb627ec6763a53c490d9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6a4c81dbd8e1bb627ec6763a53c490d9.jO4Fj9XbfN3rFwZxlw6kqLu4CGriNcKLXNoEkOYagfc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 116.277 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:24.691Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b4d016c6c21264acff63d50d5f491986',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: v2MivoxV-CRfuOm4fTZ4tkGtew5daNw58jSs

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: b4d016c6c21264acff63d50d5f491986

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: DPIwZAXmfu...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.283 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:25.020Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'b4d016c6c21264acff63d50d5f491986',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab4d016c6c21264acff63d50d5f491986.3KlI%2B8KcUct7rG1OYTMY%2BLI%2B2h%2BRyYCl2r%2BPP5gEPm0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 113.977 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:25.757Z"}
  console.log
    CSRF token generation: {
      sessionID: '195f61ded2da8fa2bce52aa6f5ca193d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: nU3CKJlN-nbu4GzmcapDO2cAm5XFvWhLojSM

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 195f61ded2da8fa2bce52aa6f5ca193d

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: oChRc0EPWs...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.318 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:26.054Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '195f61ded2da8fa2bce52aa6f5ca193d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A195f61ded2da8fa2bce52aa6f5ca193d.Xrh8sEwEcGgiV8jiIyx68ITsn43OERQjVoAgVRBmzsE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 145.689 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:26.849Z"}
  console.log
    CSRF token generation: {
      sessionID: '86906bd6a4d76f55ec6a9b30c2c8c9d0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: XZ1aWkwy-ftUJBGJvUDvgtA-FbULqWk_tN5M

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 86906bd6a4d76f55ec6a9b30c2c8c9d0

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: sc44WAGU5U...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.361 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:27.148Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 85.702 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:27.863Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a1ef4e3ab973b145a03f2666ff181809',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: s2vjZGku-JJNsryp1SA3O6U2bynORwZidm6c

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a1ef4e3ab973b145a03f2666ff181809

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: FgBG_jkYqp...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 8.426 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:28.193Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 81.455 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:28.905Z"}
  console.log
    CSRF token generation: {
      sessionID: '5bf280dd3f491c49012d06956d811657',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: C1xAINkq-ei64HnZfLYmixppYfn9rDfk9fc8

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 5bf280dd3f491c49012d06956d811657

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 2m58aYrSHS...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.132 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:29.201Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 82.353 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:29.910Z"}
  console.log
    CSRF token generation: {
      sessionID: '55a3bc79d6c9a9300d37067a4058e697',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: PswZaaRq-9xkWJgAF0_9VQbApNUT2U8oI2gA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 55a3bc79d6c9a9300d37067a4058e697

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: dhCIX_vKJw...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.620 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:30.217Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 27.391 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:30.865Z"}
  console.log
    CSRF token generation: {
      sessionID: '7dde027b89e10246234278b66fca2f1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: kNuWsVkq-Aqi-DdR7duNmahDJ9GV6z0e6QIA

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 7dde027b89e10246234278b66fca2f1a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: 6sf2p72A4b...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.842 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:31.154Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '7dde027b89e10246234278b66fca2f1a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7dde027b89e10246234278b66fca2f1a.JG9T1My81zy7V7FXl92p0TT5UjrF2FifmmyAGrezFTw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 85.142 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:31.886Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ca281b5357f419c7cb9c3cbc7ef7d13a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: ob6jsNqL-NOOklDcLkL-r5bbT3d9BokK8Y8s

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: ca281b5357f419c7cb9c3cbc7ef7d13a

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: U6fhEQuVHX...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 4.543 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:32.164Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'ca281b5357f419c7cb9c3cbc7ef7d13a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aca281b5357f419c7cb9c3cbc7ef7d13a.GSb%2FHlL%2FFtC5GdmFv26soDcw1%2FEyPLhR%2FV940L6MYcY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 84.155 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:32.879Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f8e072e75870e5ac673ee9b463717cd1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: T2KsrCoP-BLjUGnBRs39cBHBKy-Mlnhd1Kac

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: f8e072e75870e5ac673ee9b463717cd1

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: ll59D-9uIW...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.509 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:33.203Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'f8e072e75870e5ac673ee9b463717cd1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af8e072e75870e5ac673ee9b463717cd1.zN7jjxCLLmrUSmeEXpOeHAzoA%2Bf6jpCOKwb9CXHDalE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 55.567 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:33.884Z"}
  console.log
    CSRF token generation: {
      sessionID: '0656c5d33c19a79d4655bee6c6b98ae3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: F4kdEDk5-2fzMwW92S1Js3S9qNWNk8TQUZ84

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0656c5d33c19a79d4655bee6c6b98ae3

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: gXewXvZGsq...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.001 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:34.210Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '0656c5d33c19a79d4655bee6c6b98ae3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0656c5d33c19a79d4655bee6c6b98ae3.%2FckFspDUzkHEvFSz%2BV%2BraEP91worohQwGRRXtwXv7x8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.298 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:34.921Z"}
  console.log
    CSRF token generation: {
      sessionID: '0976456477f851b6801394ae640e5318',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: eTUI2IwB-vG_bZOXlfrymvGIsMcnUpDmG-Os

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0976456477f851b6801394ae640e5318

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: kaDa1gYPpV...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.570 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:35.244Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 136.013 ms - 554[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:36.008Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e0cb9520958cc617b3b75727cac652ae',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 2RJRyZMQ-VXRlAPreVpM0J7IR_7R9zoc6Ccc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: e0cb9520958cc617b3b75727cac652ae

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: iENJq8cOjJ...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.131 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:36.329Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 109.369 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:37.063Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a96d73c9441b0c71bfc55f9726a42170',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: Ls0OBQD4-2-h4_uM8-V2yaeo2tZ-GwYRRFfc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: a96d73c9441b0c71bfc55f9726a42170

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: qbuE6LDZL4...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 6.178 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:37.387Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 108.117 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:38.121Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c325d5ebc529fe2a4e8c732f3a641020',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: HW2GyysC-wyq9BHwlxjmDbUiYagzGu4tSPFc

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: c325d5ebc529fe2a4e8c732f3a641020

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: S-MQyDXz6y...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.319 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:38.451Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 54.797 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:39.130Z"}
  console.log
    CSRF token generation: {
      sessionID: '13e51247edeca657573ba4c531cf127b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: adbiK5qq-uZL5DsrD2qiVVi1wkVrhdH-GwtE

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 13e51247edeca657573ba4c531cf127b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: e28RU63MjB...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.071 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:39.820Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '13e51247edeca657573ba4c531cf127b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A13e51247edeca657573ba4c531cf127b.%2BpGM2we4ltZFSYf6X1b9kx%2Fuzz%2F48SFcFH4l1FPWNd4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 198.392 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:40.741Z"}
  console.log
    CSRF token generation: {
      sessionID: '0cced6ba03eeffdd26d8673ad0a0feec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: 7t9muDFw-FyvYXaOSiSI3N-UDpB0h9FBz9nI

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 0cced6ba03eeffdd26d8673ad0a0feec

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: GP-QyFS_PD...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.639 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:41.465Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '0cced6ba03eeffdd26d8673ad0a0feec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0cced6ba03eeffdd26d8673ad0a0feec.DAEMf53vWQB3xp9tRHInKKNXNkf7YO6YoXVWHAyS1KQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3,
      deliveryDate: '2025-05-28',
      deliveryTime: 'evening'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 194.449 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1172:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:42.481Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fb7af43cb6448126f346541fe67549c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: vzxmeR3i-S2g9EAGq527vOv8LLmFb0rM_p4Y

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 3fb7af43cb6448126f346541fe67549c

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: b0rS1THJ0x...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.586 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:43.115Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3fb7af43cb6448126f346541fe67549c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3fb7af43cb6448126f346541fe67549c.zKPbJiF28mts41X80eQQvrRGb%2BT%2Bjb82L0tXO%2BiYFpg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 193.042 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:43.310Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3fb7af43cb6448126f346541fe67549c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3fb7af43cb6448126f346541fe67549c.zKPbJiF28mts41X80eQQvrRGb%2BT%2Bjb82L0tXO%2BiYFpg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 195.457 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:43.508Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3fb7af43cb6448126f346541fe67549c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3fb7af43cb6448126f346541fe67549c.zKPbJiF28mts41X80eQQvrRGb%2BT%2Bjb82L0tXO%2BiYFpg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 193.679 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:44.530Z"}
  console.log
    CSRF token generation: {
      sessionID: '779aa679f85e5d5e9ef39d2f2419502b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:288:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:305:13)

  console.log
    Token: oYgSqTar-i3O2FX3Nc7dfcer4DthnZh3Tglg

      at log (server/config/csrf-config.js:306:13)

  console.log
    Session ID: 779aa679f85e5d5e9ef39d2f2419502b

      at log (server/config/csrf-config.js:307:13)

  console.log
    CSRF Secret: I0SOUnI3Yy...

      at log (server/config/csrf-config.js:308:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:309:13)

[0mGET /api/csrf-token [32m200[0m 5.225 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-15T23:11:45.203Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '779aa679f85e5d5e9ef39d2f2419502b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A779aa679f85e5d5e9ef39d2f2419502b.ecwbeDImErSxROFrw2yLiY4X9qcmEvTXML%2F8SHu8hJE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:217:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1,
      deliveryDate: '2025-05-28',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 193.727 ms - 104[0m
PASS tests/integration/order.test.js (43.86 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1711 ms)
      ✓ should create order as affiliate for their customer (1140 ms)
      ✓ should fail with invalid customer ID (945 ms)
      ✓ should fail with invalid affiliate ID (975 ms)
      ✓ should fail when customer tries to create order for another customer (1011 ms)
      ✓ should validate required fields (940 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1040 ms)
      ✓ should return order details for affiliate (1046 ms)
      ✓ should fail for unauthorized customer (977 ms)
      ✓ should return 404 for non-existent order (1022 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1083 ms)
      ✓ should update weight when processing (1102 ms)
      ✓ should prevent invalid status transitions (1003 ms)
      ✓ should fail for unauthorized affiliate (972 ms)
      ✓ should fail for customers (974 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1088 ms)
      ✓ should cancel order as affiliate (1063 ms)
      ✓ should prevent cancelling non-cancellable orders (1073 ms)
      ✓ should fail for unauthorized user (962 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1079 ms)
      ✓ should handle partial bulk update failures (1067 ms)
      ✓ should cancel multiple orders in bulk (1091 ms)
    Order export functionality
      ✓ should export orders as CSV (1013 ms)
      ✓ should export orders as JSON (1042 ms)
      ✓ should export orders as Excel (1005 ms)
      ✓ should respect export permissions (956 ms)
    Payment status updates
      ✓ should update payment status (1020 ms)
      ✓ should handle payment failure (991 ms)
      ✓ should prevent payment status update on non-complete orders (1006 ms)
      ✓ should record refund (1037 ms)
    Order filtering and search
      ✓ should search orders by customer name (1087 ms)
      ✓ should filter orders by multiple criteria (1054 ms)
      ✓ should filter by pickup time slots (1060 ms)
      ✓ should provide aggregated statistics with filters (1008 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1611 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1739 ms)
      ✓ should calculate commission for multiple orders (2049 ms)
      ✓ should handle high delivery fee scenarios (1583 ms)

-----------------------------|---------|----------|---------|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                                                
-----------------------------|---------|----------|---------|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |    73.9 |    63.63 |   77.93 |   73.69 |                                                                                                                                                                                                                                                                                                                                                                                                  
 config                      |   88.71 |    76.27 |      96 |   88.65 |                                                                                                                                                                                                                                                                                                                                                                                                  
  csrf-config.js             |   82.75 |    70.45 |     100 |   82.75 | 212-213,232-256,266-267,282,297-298                                                                                                                                                                                                                                                                                                                                                              
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                                                   
  paygistix.config.js        |   65.71 |       50 |   91.66 |    64.7 | 26,45,57,69,102-103,125-143                                                                                                                                                                                                                                                                                                                                                                      
 controllers                 |    77.2 |     66.2 |   84.93 |   77.17 |                                                                                                                                                                                                                                                                                                                                                                                                  
  administratorController.js |   65.67 |    53.52 |   66.66 |   65.99 | 110-111,185-203,220,271,294-295,311,366-367,384,402,430-431,442-524,563-564,651-669,703,763-764,828-829,847,905-906,966-967,978-1014,1189-1198,1228-1229,1360-1361,1372-1490,1501-1590,1601-1655,1673,1684-1685,1716-1717,1728-1916,1941,1950,1979,1984,2003-2004,2032-2033,2082-2083,2107,2130-2131,2148,2201,2216-2217                                                                         
  affiliateController.js     |   86.51 |    79.01 |   96.96 |   86.24 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-563,578,667,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                                                      
  authController.js          |   69.54 |    56.21 |      90 |   69.54 | 128-129,141,174-179,183,213-214,232-233,277-286,338-339,357-358,366-367,396-397,447-448,495-496,546-547,562,574-579,608-616,624-625,640,658-669,685,688,710-711,736,777,801,811,821-822,865-880,993,998-1043,1071,1113-1154,1300,1367,1378,1441-1442,1457,1567-1568,1583,1636-1637,1649-1693,1714-1777,1782-1828,1856,1892-1930,1942,1978,1992-1993,2006,2019,2076,2125-2126,2140-2179,2193-2232 
  customerController.js      |   74.74 |    70.07 |   86.66 |   74.35 | 133,152-153,212-213,232,245,268-284,294-295,314,327,339,341,343,377-378,396,409,476-499,511-553,587,630,642,682-683                                                                                                                                                                                                                                                                              
  operatorController.js      |    91.4 |     81.3 |   83.33 |   91.66 | 367-368,374-404,491-492,582-583,610-611,635                                                                                                                                                                                                                                                                                                                                                      
  orderController.js         |   85.71 |    72.47 |     100 |   85.75 | 165-166,252-253,272,341-342,360,410-411,427,436,446,457,499-504,515-516,531,541,554,567-572,595-596,735-742,769,781,798,840-841,861-863,868,880-881,948-949,975-976,1038-1039                                                                                                                                                                                                                    
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                                              
 middleware                  |    96.6 |    91.45 |   94.73 |   96.41 |                                                                                                                                                                                                                                                                                                                                                                                                  
  auth.js                    |   82.97 |    80.43 |   66.66 |   82.97 | 79,102-104,143-153                                                                                                                                                                                                                                                                                                                                                                               
  errorHandler.js            |   97.82 |    87.09 |     100 |   97.82 | 10                                                                                                                                                                                                                                                                                                                                                                                               
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                                                  
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
 models                      |   75.37 |    68.95 |   70.52 |   75.52 |                                                                                                                                                                                                                                                                                                                                                                                                  
  Administrator.js           |   88.63 |    79.54 |    87.5 |   90.36 | 144,152,180-188                                                                                                                                                                                                                                                                                                                                                                                  
  Affiliate.js               |    92.1 |     87.5 |     100 |    92.1 | 89,182,186                                                                                                                                                                                                                                                                                                                                                                                       
  CallbackPool.js            |   51.85 |        0 |      40 |   51.85 | 41-46,51-54,106-119                                                                                                                                                                                                                                                                                                                                                                              
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                                          
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  Operator.js                |     100 |    96.55 |     100 |     100 | 124                                                                                                                                                                                                                                                                                                                                                                                              
  Order.js                   |      76 |    75.55 |     100 |   75.55 | 118,163-179                                                                                                                                                                                                                                                                                                                                                                                      
  Payment.js                 |   38.09 |        0 |       0 |   38.09 | 147,152-162,167,172-184,190,195,205-232,237-245,251-253                                                                                                                                                                                                                                                                                                                                          
  PaymentMethod.js           |       0 |        0 |       0 |       0 | 1-265                                                                                                                                                                                                                                                                                                                                                                                            
  PaymentToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                                               
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
 routes                      |    64.6 |    28.67 |   64.28 |   64.52 |                                                                                                                                                                                                                                                                                                                                                                                                  
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  authRoutes.js              |   96.55 |    83.33 |     100 |   96.55 | 55                                                                                                                                                                                                                                                                                                                                                                                               
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                                               
  customerRoutes.js          |   95.45 |    83.33 |     100 |   95.45 | 41                                                                                                                                                                                                                                                                                                                                                                                               
  generalPaymentCallback.js  |   12.19 |        0 |       0 |   12.19 | 14-207,215-297                                                                                                                                                                                                                                                                                                                                                                                   
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  paymentCallbackRoute.js    |       0 |        0 |       0 |       0 | 1-175                                                                                                                                                                                                                                                                                                                                                                                            
  paymentRoutes.js           |      92 |      100 |   66.66 |      92 | 37,43                                                                                                                                                                                                                                                                                                                                                                                            
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                                                
  socialAuthRoutes.js        |   56.25 |    17.64 |   14.28 |   56.25 | 50-57,79-86,150-163,176-177,187-196,219-228                                                                                                                                                                                                                                                                                                                                                      
  systemConfigRoutes.js      |   80.85 |       75 |     100 |   80.43 | 23-24,49-50,65,72-73,105-106                                                                                                                                                                                                                                                                                                                                                                     
 services                    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  callbackPoolManager.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
 utils                       |   48.44 |     46.8 |   55.35 |   46.86 |                                                                                                                                                                                                                                                                                                                                                                                                  
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 98                                                                                                                                                                                                                                                                                                                                                                                               
  emailService.js            |       0 |        0 |       0 |       0 | 4-2098                                                                                                                                                                                                                                                                                                                                                                                           
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  fieldFilter.js             |   85.71 |    72.41 |     100 |   87.71 | 140,201-206                                                                                                                                                                                                                                                                                                                                                                                      
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                                            
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                  
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                                              
-----------------------------|---------|----------|---------|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for statements (80%) not met: 73.9%
Jest: "global" coverage threshold for branches (80%) not met: 63.63%
Jest: "global" coverage threshold for lines (80%) not met: 73.69%
Jest: "global" coverage threshold for functions (80%) not met: 77.93%
Test Suites: 56 passed, 56 total
Tests:       22 skipped, 1232 passed, 1254 total
Snapshots:   0 total
Time:        475.957 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
