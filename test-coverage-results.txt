
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (84 ms)
    ✓ should be a winston logger instance (17 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (60 ms)
    ✓ should verify password correctly (175 ms)
    ✓ should encrypt and decrypt data correctly (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (2 ms)
    ✓ should parse page and limit from query params (1 ms)
    ✓ should enforce minimum values
    ✓ should enforce maximum limit (1 ms)
    ✓ should handle non-numeric values (1 ms)
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers
    ✓ should preserve other query parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields
    ✓ should configure Facebook strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly (1 ms)
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets (1 ms)
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function (1 ms)
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string (1 ms)
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats (1 ms)
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (546 ms)
      ✓ should authenticate valid x-auth-token header (222 ms)
      ✓ should reject request with no token (214 ms)
      ✓ should reject request with invalid token (208 ms)
      ✓ should reject request with expired token (209 ms)
      ✓ should handle malformed Authorization header (205 ms)
      ✓ should reject blacklisted token (207 ms)
    authorize
      ✓ should authorize user with correct role (209 ms)
      ✓ should authorize user with one of multiple roles (208 ms)
      ✓ should reject user with incorrect role (203 ms)
      ✓ should reject user with no role (203 ms)
      ✓ should reject when user is not set (204 ms)
    authLimiter
      ✓ should be a function (208 ms)
      ✓ should have rate limit configuration (210 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly (1 ms)
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully
      ✓ should create administrator with correct data (1 ms)
      ✓ should handle database save errors
    Email functionality
      ✓ should send welcome email after admin creation (1 ms)
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields (1 ms)
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block (1 ms)
      ✓ should close readline interface in finally block

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter (1 ms)
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly (1 ms)
      ✓ should generate correct CSS classes for highlighted customer
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token (1 ms)
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering (1 ms)
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly (1 ms)
      ✓ should validate customer ID format
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (11 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors
      ✓ should handle JWT token expiration errors
      ✓ should handle rate limiting errors
      ✓ should handle CastError (invalid MongoDB ObjectId) (7 ms)
      ✓ should include user context when available (2 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message (1 ms)
      ✓ should handle errors with code property
      ✓ should log all console error sections (2 ms)
    AppError
      ✓ should create custom error with status code (1 ms)
      ✓ should have stack trace
      ✓ should work with error handler
    Edge cases
      ✓ should handle null error (3 ms)
      ✓ should handle undefined error
      ✓ should handle non-error objects (1 ms)
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (29 ms)
      ✓ should allow access in test environment (5 ms)
      ✓ should deny access in production without key
      ✓ should allow access in production with valid key (4 ms)
      ✓ should deny access in production with invalid key (4 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (3 ms)
    Route Handlers
      ✓ should serve index.html at root path (3 ms)
      ✓ should serve critical-files page (4 ms)
      ✓ should serve test-templates page (4 ms)
      ✓ should serve action-plan page (4 ms)
      ✓ should return 404 for non-existent pages (4 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (4 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (3 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (4 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (3 ms)
      ✓ should apply X-Frame-Options even with valid access (4 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (3 ms)
      ✓ should return valid HTML for 404 page (2 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (3 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (10 ms)
      ✓ should handle specific route handlers (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/orderWithSystemConfig.test.js (10.029 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (844 ms)
      ✓ should use default rate when SystemConfig is not available (946 ms)
      ✓ should calculate estimated total using SystemConfig rate (641 ms)
      ✓ should calculate actual total using SystemConfig rate (685 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (656 ms)
      ✓ should calculate commission for zero delivery fee (650 ms)
      ✓ should handle commission calculation for large orders (642 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (649 ms)
      ✓ should update calculations when base rate changes (768 ms)
      ✓ should validate minimum and maximum base rates (866 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1185 ms)
      ✓ should match revenue calculator with different parameters (649 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (288 ms)
      ✓ should use default values for blacklistedAt and reason (115 ms)
      ✓ should require all mandatory fields (80 ms)
      ✓ should enforce unique token constraint (239 ms)
      ✓ should validate userType enum (80 ms)
      ✓ should accept all valid userTypes (205 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (116 ms)
        ✓ should use default reason when not provided (114 ms)
        ✓ should return null when token already blacklisted (235 ms)
        ✓ should handle custom reasons (174 ms)
        ✓ should propagate non-duplicate errors (83 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (145 ms)
        ✓ should return false for non-blacklisted token (106 ms)
        ✓ should handle empty token (106 ms)
        ✓ should handle null token (105 ms)
      cleanupExpired
        ✓ should delete expired tokens (230 ms)
        ✓ should return 0 when no expired tokens (197 ms)
        ✓ should handle empty collection (109 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (313 ms)
      ✓ should generate ADM002 when ADM001 exists (223 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (290 ms)
      ✓ should handle non-sequential admin IDs correctly (349 ms)
      ✓ should handle double-digit admin IDs (246 ms)
      ✓ should handle triple-digit admin IDs (222 ms)
      ✓ should handle large admin ID numbers (218 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (105 ms)
      ✓ should handle numbers above 999 without padding issues (105 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (106 ms)
      ✓ should handle edge cases in admin ID parsing (110 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (304 ms)
      ✓ should work correctly with different creation dates (285 ms)
      ✓ should work correctly with different permissions (287 ms)
    Performance and reliability
      ✓ should handle database query efficiently (223 ms)
      ✓ should handle concurrent admin creation scenario (381 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (17 ms)
      ✓ should throw error when encryption key is missing (1 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs (1 ms)
      ✓ should throw error with invalid encrypted object structure (2 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (55 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (168 ms)
      ✓ should return false for invalid salt format (61 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (10 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (2 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1457 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/models.test.js (6.821 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (791 ms)
      ✓ should require required fields (324 ms)
      ✓ should enforce unique constraints (613 ms)
      ✓ should handle payment information correctly (355 ms)
    Customer Model
      ✓ should create a valid customer (357 ms)
    Order Model
      ✓ should create a valid order (381 ms)
      ✓ should calculate estimated total correctly (379 ms)
      ✓ should calculate actual total and commission when weight is set (401 ms)
      ✓ should update timestamps for status changes (508 ms)
    Transaction Model
      ✓ should create a valid transaction (362 ms)
      ✓ should validate transaction type (317 ms)
      ✓ should validate transaction status (315 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (350 ms)
      ✓ should validate user type (319 ms)
      ✓ should check if token is expired (386 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (2 ms)
      ✓ should have valid endpoint patterns (6 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (1 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests (1 ms)
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests (1 ms)
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints (1 ms)
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration (1 ms)
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation (1 ms)
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (6 ms)
        ✓ should enforce CSRF for admin operations (1 ms)
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates (1 ms)
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2 (1 ms)
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2
        ✓ should handle bag management endpoints based on phase (1 ms)
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes (8 ms)
        ✓ should match nested parameterized routes (1 ms)
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths (1 ms)
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE (1 ms)
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array (1 ms)
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs (1 ms)
      ✓ should handle missing fields gracefully
      ✓ should not include inherited properties (1 ms)
      ✓ should handle nested objects without deep filtering (2 ms)
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array (1 ms)
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types (1 ms)
    fieldDefinitions
      ✓ should have definitions for all data types
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role (1 ms)
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (1 ms)
      ✓ should handle self context for customers (1 ms)
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method (1 ms)
      ✓ should filter response data when _filterType is provided
      ✓ should not filter when _filterType is not provided (1 ms)
      ✓ should handle public role when user is not authenticated
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively
      ✓ should sanitize objects recursively
      ✓ should handle null values
      ✓ should handle undefined values
      ✓ should handle numbers (1 ms)
      ✓ should handle booleans
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects (1 ms)
      ✓ should not modify prototype properties
    sanitizeRequest
      ✓ should sanitize request body (1 ms)
      ✓ should sanitize query parameters (1 ms)
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string (1 ms)
      ✓ should validate complex email formats
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters (1 ms)
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters
      ✓ should remove spaces (1 ms)
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths (1 ms)
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths (1 ms)
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts (1 ms)
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain (1 ms)
      ✓ should handle complex nested structures

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidator.test.js (5.634 s)
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters
        ✓ should require lowercase letters (1 ms)
        ✓ should require numbers
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email
        ✓ should reject sequential characters (1 ms)
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks (1 ms)
    customPasswordValidator
      ✓ should work as express-validator custom validator (14 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function (1 ms)
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (54 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (1 ms)
      ✓ should score length appropriately
      ✓ should score character variety
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2,
      serviceNotes: 'Handle with care',
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon',
      specialDeliveryInstructions: 'Leave at door'
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:114:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      153 |     } catch (emailError) {
    > 154 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      155 |       // Continue with the response even if emails fail
      156 |     }
      157 |

      at Object.error [as createOrder] (server/controllers/orderController.js:154:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:117:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:86:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:99:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:82:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:105:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (376 ms)
      ✓ should handle email sending failures gracefully (130 ms)
      ✓ should return error for invalid customer (54 ms)
      ✓ should return error for invalid affiliate (54 ms)
      ✓ should enforce authorization (55 ms)
    getOrderDetails
      ✓ should return order details for authorized user (52 ms)
      ✓ should return 404 for non-existent order (51 ms)
      ✓ should enforce authorization for customers (51 ms)
    updateOrderStatus
      ✓ should successfully update order status (52 ms)
      ✓ should update actual weight when processing (51 ms)
      ✓ should validate status transitions (55 ms)
      ✓ should send commission email when delivered (53 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

FAIL tests/unit/administratorController.test.js
  ● Test suite failed to run

    TypeError: administratorSchema.set is not a function

      222 |
      223 | // Transform output
    > 224 | administratorSchema.set('toJSON', {
          |                     ^
      225 |   transform: function(doc, ret) {
      226 |     delete ret.password;
      227 |     delete ret.passwordResetToken;

      at Object.set (server/models/Administrator.js:224:21)
      at Object.require (server/controllers/administratorController.js:4:23)
      at Object.require (tests/unit/administratorController.test.js:38:33)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (2 ms)
      ✓ should have unique event names
    logAuditEvent
      ✓ should log basic audit event (1 ms)
      ✓ should add request context when provided
      ✓ should handle customer context (1 ms)
      ✓ should use error level for critical events
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish
      ✓ should log successful responses
      ✓ should not log failed responses
      ✓ should include request context in logs (1 ms)
    logLoginAttempt
      ✓ should log successful login
      ✓ should log failed login with reason (1 ms)
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions (1 ms)
    logPaymentActivity
      ✓ should log payment info access
      ✓ should log payment info update
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      603 |     });
      604 |   } catch (error) {
    > 605 |     console.error('Delete customer data error:', error);
          |             ^
      606 |     res.status(500).json({
      607 |       success: false,
      608 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:605:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (3 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should return 404 for non-existent customer
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (21 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/createAdminScript.test.js (10.142 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (509 ms)
      ✓ should contain required functionality markers (365 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (585 ms)
      ✓ should calculate next admin ID correctly (660 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (404 ms)
      ✓ should accept strong passwords for admins (721 ms)
    Permission System Validation
      ✓ should validate all permission types (463 ms)
      ✓ should handle partial permission sets (481 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (561 ms)
      ✓ should prevent duplicate emails (551 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (480 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (504 ms)
      ✓ should normalize email addresses (485 ms)
      ✓ should validate email format (411 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (480 ms)
      ✓ should work with password hashing middleware (459 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (384 ms)
      ✓ should handle invalid input gracefully (383 ms)
    Security Considerations
      ✓ should not log or expose passwords (378 ms)
      ✓ should generate secure random passwords when needed (392 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/oAuthSession.test.js (6.695 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (398 ms)
      ✓ should require sessionId field (199 ms)
      ✓ should require result field (202 ms)
      ✓ should automatically set createdAt (228 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (229 ms)
      ✓ should enforce unique sessionId (269 ms)
      ✓ should allow complex result objects (241 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (280 ms)
        ✓ should throw error for duplicate session IDs (275 ms)
        ✓ should handle database errors (201 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (258 ms)
        ✓ should return null for non-existent session (225 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (313 ms)
        ✓ should return null when consuming non-existent session (227 ms)
        ✓ should handle race conditions safely (288 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (453 ms)
        ✓ should return zero deletions when no expired sessions exist (290 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (234 ms)
      ✓ should respect custom expiresAt when provided (241 ms)
    Data Integrity
      ✓ should preserve all data types in result field (257 ms)
      ✓ should handle empty and minimal result objects (369 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (197 ms)
      ✓ should handle very large result objects (299 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (8 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (3 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (7 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (2 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (2 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (10 ms)
      ✓ should validate required fields for social registration (3 ms)
      ✓ should validate service radius range (2 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (2 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (3 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (2 ms)
      ✓ should handle customer LinkedIn callback (3 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (3 ms)
      ✓ should validate service frequency (8 ms)
    Error Handling
      ✓ should handle errors gracefully (15 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/administrator.test.js (7.508 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (342 ms)
      ✓ should require all mandatory fields (89 ms)
      ✓ should enforce email format validation (77 ms)
      ✓ should enforce unique email constraint (521 ms)
      ✓ should enforce unique adminId constraint (525 ms)
      ✓ should validate permission enum values (80 ms)
      ✓ should accept valid permissions (173 ms)
      ✓ should trim whitespace from string fields (163 ms)
      ✓ should convert email to lowercase (169 ms)
      ✓ should not allow role to be changed after creation (220 ms)
    Password Handling
      ✓ should hash password on save (187 ms)
      ✓ should verify correct password (244 ms)
      ✓ should reject incorrect password (250 ms)
      ✓ should not expose password in JSON output (164 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (218 ms)
      ✓ should lock account after 5 failed attempts (222 ms)
      ✓ should reset login attempts on successful login (221 ms)
      ✓ should reset attempts if lock has expired (221 ms)
      ✓ should correctly identify locked accounts (171 ms)
    Password Reset
      ✓ should generate password reset token (166 ms)
      ✓ should set password reset expiry to 30 minutes (163 ms)
    Permissions
      ✓ should check single permission correctly (169 ms)
      ✓ should check multiple permissions with AND operation (170 ms)
      ✓ should check multiple permissions with OR operation (175 ms)
      ✓ should set default permissions if none provided (163 ms)
    Static Methods
      ✓ should find active administrators (434 ms)
      ✓ should find administrator by email with password (192 ms)
      ✓ should handle case-insensitive email search (201 ms)
      ✓ should return null for non-existent email (103 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (171 ms)
      ✓ should update updatedAt on modification (294 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (254 ms)
      ✓ should not override provided admin ID (167 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (1 ms)
        ✓ should accept passwords with 8 or more characters (1 ms)
      Character Type Requirements
        ✓ should require at least one uppercase letter
        ✓ should require at least one lowercase letter
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character (1 ms)
        ✓ should accept passwords with all required character types
      Common Password Detection
        ✓ should reject common passwords (2 ms)
        ✓ should accept non-common passwords
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers (1 ms)
        ✓ should reject passwords with sequential letters
        ✓ should accept passwords without sequential characters (1 ms)
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters
        ✓ should accept passwords with acceptable repeated characters (1 ms)
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history (1 ms)
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores (1 ms)
      ✓ should return correct strength labels
    isPasswordInHistory
      ✓ should return true for passwords in history (1 ms)
      ✓ should return false for passwords not in history
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function (1 ms)
      ✓ should validate passwords correctly in express-validator context
      ✓ should throw for invalid passwords in express-validator context (17 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator (1 ms)
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request (1 ms)
      ✓ should include strength assessment in response for invalid passwords
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully (1 ms)
      ✓ should handle very long passwords
      ✓ should handle special Unicode characters (1 ms)
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:466:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:467:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:468:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:501:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:686:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:247:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      697 |     });
      698 |   } catch (error) {
    > 699 |     console.error('Token verification error:', error);
          |             ^
      700 |     res.status(500).json({
      701 |       success: false,
      702 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:699:13)
      at Object.verifyToken (tests/unit/authController.test.js:247:28)

  console.error
    Administrator login error: TypeError: Administrator.findOne(...).select is not a function
        at Object.select [as administratorLogin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:228:66)
        at Object.administratorLogin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:385:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      309 |     });
      310 |   } catch (error) {
    > 311 |     console.error('Administrator login error:', error);
          |             ^
      312 |     res.status(500).json({
      313 |       success: false,
      314 |       message: 'An error occurred during login'

      at Object.error [as administratorLogin] (server/controllers/authController.js:311:13)
      at Object.administratorLogin (tests/unit/authController.test.js:385:28)

  console.error
    Administrator login error: TypeError: Administrator.findOne(...).select is not a function
        at Object.select [as administratorLogin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:228:66)
        at Object.administratorLogin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:410:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      309 |     });
      310 |   } catch (error) {
    > 311 |     console.error('Administrator login error:', error);
          |             ^
      312 |     res.status(500).json({
      313 |       success: false,
      314 |       message: 'An error occurred during login'

      at Object.error [as administratorLogin] (server/controllers/authController.js:311:13)
      at Object.administratorLogin (tests/unit/authController.test.js:410:28)

  console.error
    Administrator login error: TypeError: Administrator.findOne(...).select is not a function
        at Object.select [as administratorLogin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:228:66)
        at Object.administratorLogin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:430:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      309 |     });
      310 |   } catch (error) {
    > 311 |     console.error('Administrator login error:', error);
          |             ^
      312 |     res.status(500).json({
      313 |       success: false,
      314 |       message: 'An error occurred during login'

      at Object.error [as administratorLogin] (server/controllers/authController.js:311:13)
      at Object.administratorLogin (tests/unit/authController.test.js:430:28)

FAIL tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✕ should successfully login an affiliate with valid credentials (4 ms)
      ✓ should return 401 for non-existent affiliate (1 ms)
      ✓ should return 401 for incorrect password (1 ms)
    customerLogin
      ✓ should successfully login a customer with valid credentials (15 ms)
      ✓ should return 401 for non-existent customer
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (20 ms)
      ✓ should return customer user data
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✕ should successfully login administrator (3 ms)
      ✕ should handle locked account (8 ms)
      ✕ should handle inactive administrator (3 ms)
    operatorLogin
      ✕ should successfully login operator with PIN (1 ms)
      ✕ should increment login attempts on failure
    logout
      ✕ should logout user and blacklist token
    forgotPassword
      ✕ should send password reset email for affiliate
      ✕ should handle non-existent email gracefully (3 ms)
    resetPassword
      ✕ should reset password with valid token (1 ms)
      ✕ should reject expired token
    OAuth functions
      ✕ startOAuthSession should create session
      ✕ completeOAuthSession should handle successful OAuth
      ✕ checkOAuthSession should return session status

  ● Auth Controller › affiliateLogin › should successfully login an affiliate with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "refreshToken", Any<String>, Any<Object>

    Number of calls: 0

      88 |       );
      89 |       expect(mockAffiliate.save).toHaveBeenCalled();
    > 90 |       expect(res.cookie).toHaveBeenCalledWith('refreshToken', expect.any(String), expect.any(Object));
         |                          ^
      91 |       expect(res.status).toHaveBeenCalledWith(200);
      92 |       expect(res.json).toHaveBeenCalledWith(
      93 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:90:26)

  ● Auth Controller › administratorLogin › should successfully login administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "AdminPass123!"

    Number of calls: 0

      386 |
      387 |       expect(Administrator.findOne).toHaveBeenCalledWith({ email: 'admin@example.com' });
    > 388 |       expect(mockAdmin.comparePassword).toHaveBeenCalledWith('AdminPass123!');
          |                                         ^
      389 |       expect(mockAdmin.resetLoginAttempts).toHaveBeenCalled();
      390 |       expect(res.json).toHaveBeenCalledWith({
      391 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:388:41)

  ● Auth Controller › administratorLogin › should handle locked account

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 423
    Received: 500

    Number of calls: 1

      410 |       await authController.administratorLogin(req, res);
      411 |
    > 412 |       expect(res.status).toHaveBeenCalledWith(423);
          |                          ^
      413 |       expect(res.json).toHaveBeenCalledWith({
      414 |         success: false,
      415 |         message: 'Account is locked due to too many failed login attempts. Please try again later.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:412:26)

  ● Auth Controller › administratorLogin › should handle inactive administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401
    Received: 500

    Number of calls: 1

      430 |       await authController.administratorLogin(req, res);
      431 |
    > 432 |       expect(res.status).toHaveBeenCalledWith(401);
          |                          ^
      433 |       expect(res.json).toHaveBeenCalledWith({
      434 |         success: false,
      435 |         message: 'Account is deactivated. Please contact support.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:432:26)

  ● Auth Controller › operatorLogin › should successfully login operator with PIN

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"operatorId": "OP001"}

    Number of calls: 0

      456 |       await authController.operatorLogin(req, res);
      457 |
    > 458 |       expect(Operator.findOne).toHaveBeenCalledWith({ operatorId: 'OP001' });
          |                                ^
      459 |       expect(mockOperator.comparePassword).toHaveBeenCalledWith('1234');
      460 |       expect(res.json).toHaveBeenCalledWith({
      461 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:458:32)

  ● Auth Controller › operatorLogin › should increment login attempts on failure

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      482 |       await authController.operatorLogin(req, res);
      483 |
    > 484 |       expect(mockOperator.incLoginAttempts).toHaveBeenCalled();
          |                                             ^
      485 |       expect(res.status).toHaveBeenCalledWith(401);
      486 |     });
      487 |   });

      at Object.toHaveBeenCalled (tests/unit/authController.test.js:484:45)

  ● Auth Controller › logout › should logout user and blacklist token

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      498 |       await authController.logout(req, res);
      499 |
    > 500 |       expect(TokenBlacklist.prototype.save).toHaveBeenCalled();
          |                                             ^
      501 |       expect(RefreshToken.findOneAndUpdate).toHaveBeenCalledWith(
      502 |         { token: 'refresh-token' },
      503 |         expect.objectContaining({ revokedByIp: '127.0.0.1' })

      at Object.toHaveBeenCalled (tests/unit/authController.test.js:500:45)

  ● Auth Controller › forgotPassword › should send password reset email for affiliate

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      522 |       
      523 |       Affiliate.findOne.mockResolvedValue(mockAffiliate);
    > 524 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      525 |       emailService.sendPasswordResetEmail.mockResolvedValue(true);
      526 |
      527 |       await authController.forgotPassword(req, res);

      at Object.mockReturnValue (tests/unit/authController.test.js:524:31)

  ● Auth Controller › forgotPassword › should handle non-existent email gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Password reset instructions sent to your email",
    -   "success": true,
    +   "message": "No account found with that email address",
    +   "success": false,
      },

    Number of calls: 1

      544 |
      545 |       // Should still return success to prevent email enumeration
    > 546 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      547 |         success: true,
      548 |         message: 'Password reset instructions sent to your email'
      549 |       });

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:546:24)

  ● Auth Controller › resetPassword › should reset password with valid token

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      567 |       
      568 |       Affiliate.findOne.mockResolvedValue(mockAffiliate);
    > 569 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      570 |       encryptionUtil.hashPassword.mockReturnValue({
      571 |         salt: 'new-salt',
      572 |         hash: 'new-hash'

      at Object.mockReturnValue (tests/unit/authController.test.js:569:31)

  ● Auth Controller › resetPassword › should reject expired token

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      593 |       
      594 |       Customer.findOne.mockResolvedValue(null);
    > 595 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      596 |
      597 |       await authController.resetPassword(req, res);
      598 |

      at Object.mockReturnValue (tests/unit/authController.test.js:595:31)

  ● Auth Controller › OAuth functions › startOAuthSession should create session

    TypeError: authController.startOAuthSession is not a function

      618 |       OAuthSession.mockImplementation(() => mockSession);
      619 |
    > 620 |       await authController.startOAuthSession(req, res);
          |                            ^
      621 |
      622 |       expect(mockSession.save).toHaveBeenCalled();
      623 |       expect(res.json).toHaveBeenCalledWith({

      at Object.startOAuthSession (tests/unit/authController.test.js:620:28)

  ● Auth Controller › OAuth functions › completeOAuthSession should handle successful OAuth

    TypeError: authController.completeOAuthSession is not a function

      649 |       Affiliate.findById.mockResolvedValue(mockAffiliate);
      650 |
    > 651 |       await authController.completeOAuthSession(req, res);
          |                            ^
      652 |
      653 |       expect(res.json).toHaveBeenCalledWith({
      654 |         success: true,

      at Object.completeOAuthSession (tests/unit/authController.test.js:651:28)

  ● Auth Controller › OAuth functions › checkOAuthSession should return session status

    TypeError: authController.checkOAuthSession is not a function

      672 |       OAuthSession.findOne.mockResolvedValue(mockSession);
      673 |
    > 674 |       await authController.checkOAuthSession(req, res);
          |                            ^
      675 |
      676 |       expect(res.json).toHaveBeenCalledWith({
      677 |         success: true,

      at Object.checkOAuthSession (tests/unit/authController.test.js:674:28)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy (1 ms)
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources (1 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role
      ✓ should accept admin for any combination of roles (1 ms)
    checkResourceOwnership Middleware
      ✓ should reject when no user is present
      ✓ should allow admin access to any resource (1 ms)
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body (1 ms)
      ✓ should allow operator access to own resource
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (1 ms)
      ✓ should handle array of required permissions (1 ms)
      ✓ should reject when administrator lacks any required permission (11 ms)
      ✓ should handle database errors (1 ms)
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found
      ✓ should reject when operator is not active (1 ms)
      ✓ should reject when operator is not on shift
      ✓ should accept active operator on shift (1 ms)
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission (1 ms)
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions (1 ms)
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields
      ✓ should handle non-object data gracefully (1 ms)
      ✓ should handle empty allowed fields

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (5 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (2 ms)
      ✓ should not configure Facebook strategy without credentials (1 ms)
      ✓ should configure LinkedIn strategy when credentials are present (1 ms)
    Google OAuth Strategy
      ✓ should handle database errors (1 ms)
      Customer Context
        ✓ should handle existing customer with Google account (2 ms)
        ✓ should link Google account to existing customer (2 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (2 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (1 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (2 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (1 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (6 ms)
      ✓ should handle deserialization errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/systemConfig.test.js (8.2 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (272 ms)
      ✓ should require mandatory fields (80 ms)
      ✓ should enforce unique key constraint (285 ms)
      ✓ should validate category enum (79 ms)
      ✓ should validate dataType enum (79 ms)
      ✓ should accept all valid categories (389 ms)
      ✓ should accept all valid data types (241 ms)
      ✓ should trim string fields (114 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (79 ms)
        ✓ should enforce minimum value validation (81 ms)
        ✓ should enforce maximum value validation (80 ms)
        ✓ should accept valid number within range (114 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (80 ms)
        ✓ should accept boolean values (119 ms)
      String validation
        ✓ should reject non-string values for string dataType (81 ms)
        ✓ should enforce regex validation (79 ms)
        ✓ should accept valid string matching regex (116 ms)
      Array validation
        ✓ should reject non-array values for array dataType (81 ms)
        ✓ should accept array values (118 ms)
      Object validation
        ✓ should reject non-object values for object dataType (79 ms)
        ✓ should reject arrays for object dataType (82 ms)
        ✓ should accept object values (113 ms)
      Allowed values validation
        ✓ should enforce allowed values (80 ms)
        ✓ should accept allowed values (114 ms)
    Static Methods
      getValue
        ✓ should return config value (140 ms)
        ✓ should return defaultValue when value is undefined (141 ms)
        ✓ should return provided default when config not found (122 ms)
        ✓ should return null when config not found and no default provided (109 ms)
      setValue
        ✓ should update config value (173 ms)
        ✓ should throw error for non-existent config (105 ms)
        ✓ should throw error for non-editable config (137 ms)
        ✓ should update updatedBy when provided (171 ms)
        ✓ should validate new value according to dataType (138 ms)
      getByCategory
        ✓ should return all configs for a category (287 ms)
        ✓ should return only public configs when specified (144 ms)
        ✓ should return empty array for non-existent category (148 ms)
        ✓ should sort by key (183 ms)
      getPublicConfigs
        ✓ should return only public configs (144 ms)
        ✓ should sort by category then key (151 ms)
      initializeDefaults
        ✓ should create default configurations (503 ms)
        ✓ should not overwrite existing configurations (462 ms)
        ✓ should add missing configurations (487 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (111 ms)
      ✓ should update updatedAt on modification (245 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (114 ms)
      ✓ should use defaultValue when value is undefined (111 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (119 ms)
      ✓ should handle empty validation object (113 ms)
      ✓ should skip validation when value is not modified (141 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:804:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:869:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:804:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:804:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:869:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:46:49.301Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      914 |             await OAuthSession.createSession(sessionId, message);
      915 |           } catch (dbError) {
    > 916 |             console.error('Error storing OAuth session:', dbError);
          |                     ^
      917 |           }
      918 |         }
      919 |         

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:916:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:804:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:869:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1591:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1653:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-06T22:46:49.857Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-06T22:46:50.491Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-06T22:46:50.887Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:46:51.357Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-06T22:46:51.357Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:46:51.673Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-06T22:46:51.829Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1561:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1561:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1561:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1561:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1561:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1542:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1563 |     
      1564 |   } catch (error) {
    > 1565 |     console.error('OAuth session polling error:', error);
           |             ^
      1566 |     res.status(500).json({
      1567 |       success: false,
      1568 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1565:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.399 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (253 ms)
      ✓ should handle customer context from state parameter (185 ms)
      ✓ should handle missing user data gracefully (185 ms)
      ✓ should handle OAuth session creation errors (185 ms)
      ✓ should extract profile data correctly for different providers (171 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (157 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (207 ms)
      ✓ should sanitize social data and reject if fields become empty (156 ms)
      ✓ should check for existing email and username (160 ms)
      ✓ should check for existing social account (157 ms)
      ✓ should generate unique username from social data (159 ms)
      ✓ should handle JWT verification errors (154 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (236 ms)
      ✓ should validate affiliate existence (157 ms)
      ✓ should sanitize customer social data (157 ms)
    socialLogin
      ✓ should login existing affiliate with social account (158 ms)
      ✓ should return error for non-existent social account (158 ms)
      ✓ should login existing customer with social account (156 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (155 ms)
      ✓ should prevent linking already existing social account (154 ms)
      ✓ should handle user not found error (154 ms)
    pollOAuthSession
      ✓ should return complete session data when available (160 ms)
      ✓ should return social-auth-login session data (158 ms)
      ✓ should return social-auth-error session data (156 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (158 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (157 ms)
      ✓ should return pending status when session not ready (154 ms)
      ✓ should handle database errors gracefully (163 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (157 ms)
      ✓ should handle database connection errors (157 ms)
      ✓ should handle missing required fields in social data (164 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operator.test.js (11.357 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (345 ms)
      ✓ should require all mandatory fields (91 ms)
      ✓ should enforce email format validation (86 ms)
      ✓ should enforce unique email constraint (737 ms)
      ✓ should enforce unique operatorId constraint (846 ms)
      ✓ should validate shift time format (84 ms)
      ✓ should accept valid shift times (165 ms)
      ✓ should enforce quality score range (83 ms)
      ✓ should trim whitespace from string fields (166 ms)
      ✓ should convert email to lowercase (164 ms)
      ✓ should not allow role to be changed after creation (242 ms)
    Password Handling
      ✓ should hash password on save (196 ms)
      ✓ should verify correct password (249 ms)
      ✓ should reject incorrect password (247 ms)
      ✓ should not expose password in JSON output (181 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (228 ms)
      ✓ should lock account after 5 failed attempts (226 ms)
      ✓ should lock for 30 minutes (231 ms)
      ✓ should reset login attempts on successful login (229 ms)
      ✓ should reset attempts if lock has expired (227 ms)
      ✓ should correctly identify locked accounts (168 ms)
    Password Reset
      ✓ should generate password reset token (173 ms)
      ✓ should set password reset expiry to 30 minutes (178 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (188 ms)
        ✓ should correctly identify operator on shift during normal hours (178 ms)
        ✓ should correctly identify operator off shift (188 ms)
        ✓ should handle overnight shifts correctly (179 ms)
    Processing Statistics
      ✓ should update processing stats correctly (206 ms)
      ✓ should handle first order processing (200 ms)
      ✓ should update quality score with passing result (200 ms)
      ✓ should update quality score with failing result (199 ms)
    Static Methods
      findActive
        ✓ should find only active operators (446 ms)
      findOnShift
        ✓ should find only operators on shift (333 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (196 ms)
        ✓ should handle case-insensitive email search (203 ms)
        ✓ should return null for non-existent email (109 ms)
      findAvailableOperators
        ✓ should find operators with low order count (493 ms)
        ✓ should sort by current order count (299 ms)
        ✓ should respect limit parameter (859 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (176 ms)
      ✓ should update updatedAt on modification (299 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (262 ms)
      ✓ should not override provided operator ID (166 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:53:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching administrators:', error);
         |             ^
      73 |     res.status(500).json({
      74 |       success: false,
      75 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:72:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2005:70)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:925:9)

      2011 |     });
      2012 |   } catch (error) {
    > 2013 |     console.error('Error updating operator profile:', error);
           |             ^
      2014 |     res.status(500).json({
      2015 |       success: false,
      2016 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2013:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:925:9)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (1 ms)
        ✓ should filter administrators by search query
        ✓ should handle database errors (57 ms)
      getAdministratorById
        ✓ should get administrator by ID
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId
      createAdministrator
        ✓ should create new administrator with valid data (1 ms)
        ✓ should return validation errors (1 ms)
        ✓ should handle duplicate email error
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (1 ms)
        ✓ should prevent self-deletion
        ✓ should prevent deletion of last administrator (1 ms)
      resetAdministratorPassword
        ✓ should reset administrator password (6 ms)
        ✓ should handle email sending failure (1 ms)
      getPermissions
        ✓ should return all available permissions (1 ms)
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format (1 ms)
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields (2 ms)
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

       99 |       // Email sent successfully - no need to check result
      100 |     } catch (emailError) {
    > 101 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      102 |       // Continue with registration process even if email fails
      103 |     }
      104 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:101:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |     });
      110 |   } catch (error) {
    > 111 |     console.error('Affiliate registration error:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:111:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:172:28)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      173 |           : affiliate.paypalEmail;
      174 |       } catch (error) {
    > 175 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      176 |         // Don't include if decryption fails
      177 |       }
      178 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:175:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:596:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      644 |     });
      645 |   } catch (error) {
    > 646 |     console.error('Get affiliate orders error:', error);
          |             ^
      647 |     res.status(500).json({
      648 |       success: false,
      649 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:646:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      184 |     });
      185 |   } catch (error) {
    > 186 |     console.error('Get affiliate profile error:', error);
          |             ^
      187 |     res.status(500).json({
      188 |       success: false,
      189 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:186:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      896 |     });
      897 |   } catch (error) {
    > 898 |     console.error('Delete affiliate data error:', error);
          |             ^
      899 |     res.status(500).json({
      900 |       success: false,
      901 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:898:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (3 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (29 ms)
      ✓ should handle database errors (1 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (13 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (9 ms)
      ✓ should handle password change (1 ms)
      ✓ should reject incorrect current password
      ✓ should update payment method (1 ms)
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (3 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
    Error handling
      ✓ should handle database connection errors (1 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operatorController.test.js (5.048 s)
  Operator Controller
    getDashboard
      ✓ should return operator dashboard data (1 ms)
    getOrderQueue
      ✓ should return available orders for operator workstation (1 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed
      ✓ should fail if order not found (1 ms)
      ✓ should handle database error during claim
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation
      ✓ should set processingCompleted when status is ready (1 ms)
      ✓ should handle database error
    performQualityCheck
      ✓ should record quality check results
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check (1 ms)
    getMyOrders
      ✓ should return orders assigned to operator (1 ms)
    updateShiftStatus
      ✓ should update operator shift status
      ✓ should handle operator not found (1 ms)
      ✓ should end shift successfully
      ✓ should handle database error (1 ms)
    getPerformanceStats
      ✓ should return operator performance statistics
    getCustomerDetails
      ✓ should return customer details for an order
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getDashboard when operator not found
      ✓ should handle database error in getDashboard (1 ms)
      ✓ should handle error in getOrderQueue
      ✓ should handle different filters in getOrderQueue (1 ms)
      ✓ should handle operator at max capacity in claimOrder
      ✓ should handle quality check failure in performQualityCheck (1 ms)
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift (5 ms)
      ✓ should handle invalid action in updateShiftStatus (1 ms)
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats (1 ms)
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails (1 ms)
      ✓ should handle filters in getMyOrders

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:15.613Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:16.022Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 410.757 ms - 594[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:18.237Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:18.630Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 393.385 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-fb696051-4054-494d-9409-8474eb27f0ec/customers {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:18.641Z"}
[0mGET /api/v1/affiliates/AFF-fb696051-4054-494d-9409-8474eb27f0ec/customers [32m200[0m 608.433 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:20.437Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:20.593Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 156.462 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5b658967-1604-4f57-a5c4-07c23d68ca6a/customers?customerId=CUST-6f1709d4-5911-4732-8274-1edb623d740a {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:20.687Z"}
[0mGET /api/v1/affiliates/AFF-5b658967-1604-4f57-a5c4-07c23d68ca6a/customers?customerId=CUST-6f1709d4-5911-4732-8274-1edb623d740a [32m200[0m 364.158 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:22.457Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:22.616Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 159.083 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5cd90541-f69c-4ffd-b980-fe944d82ced7/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:22.621Z"}
[0mGET /api/v1/affiliates/AFF-5cd90541-f69c-4ffd-b980-fe944d82ced7/customers?customerId=NONEXISTENT123 [32m200[0m 126.684 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:24.628Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:24.780Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 151.799 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-fa744e88-e987-4872-84d0-1fd970520fda/customers {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:24.784Z"}
[0mGET /api/v1/affiliates/AFF-fa744e88-e987-4872-84d0-1fd970520fda/customers [33m401[0m 1.245 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:25.943Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:26.648Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 705.929 ms - 594[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:26.672Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:27.073Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 401.585 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-044a5e2b-7f49-4b82-8c33-a48ec4445b4d/customers {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:27.077Z"}
[0mGET /api/v1/affiliates/AFF-044a5e2b-7f49-4b82-8c33-a48ec4445b4d/customers [32m200[0m 365.088 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-044a5e2b-7f49-4b82-8c33-a48ec4445b4d/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:27.445Z"}
[0mGET /api/v1/affiliates/AFF-044a5e2b-7f49-4b82-8c33-a48ec4445b4d/dashboard [32m200[0m 386.855 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:29.214Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:29.358Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.479 ms - 594[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:30.533Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:30.678Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.524 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6d98ff5d-0fb9-4c5f-8713-154e2bbdfd5f {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:30.681Z"}
[0mGET /api/v1/affiliates/AFF-6d98ff5d-0fb9-4c5f-8713-154e2bbdfd5f [32m200[0m 59.041 ms - 538[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:32.146Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:32.552Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 405.688 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-caae6b03-a544-4581-8b2e-3ebaa809609b/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:32.556Z"}
[0mGET /api/v1/affiliates/AFF-caae6b03-a544-4581-8b2e-3ebaa809609b/dashboard [32m200[0m 377.406 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:34.821Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:34.967Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.044 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-9bcbbb42-eda3-44a2-8d61-c1ca0ef94e62/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:34.995Z"}
[0mGET /api/v1/affiliates/AFF-9bcbbb42-eda3-44a2-8d61-c1ca0ef94e62/customers?customerId=INVALID_ID [32m200[0m 367.486 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:37.055Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:37.452Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 396.954 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:37.463Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 29.035 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:39.190Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:39.373Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 184.664 ms - 594[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5d40b685-7066-4067-b8c9-024a714b6d25/customers {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:39.380Z"}
[0mGET /api/v1/affiliates/AFF-5d40b685-7066-4067-b8c9-024a714b6d25/customers [32m200[0m 679.640 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (28.165 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (3340 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (2442 ms)
      ✓ should filter customers by customerId when provided (2025 ms)
      ✓ should return empty array when filtering by non-existent customerId (1924 ms)
      ✓ should require authentication to access customer list (1564 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (3278 ms)
      ✓ should handle URL parameters correctly throughout the flow (1324 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1617 ms)
      ✓ should load dashboard statistics correctly (2678 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1938 ms)
      ✓ should handle invalid affiliate ID (2388 ms)
      ✓ should handle database connection issues gracefully (2342 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/integration/adminCreation.test.js (5.125 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (385 ms)
      ✓ should create admin with next sequential ID when admins exist (312 ms)
      ✓ should handle admin creation with all permissions (188 ms)
      ✓ should handle admin creation with partial permissions (188 ms)
    Admin Model Validation
      ✓ should require email field (106 ms)
      ✓ should save admins with different adminIds successfully (278 ms)
      ✓ should save admins with different emails successfully (274 ms)
    Password Handling
      ✓ should hash password before saving (192 ms)
      ✓ should validate password with verifyPassword method (300 ms)
    Admin Query Operations
      ✓ should find admin by adminId (482 ms)
      ✓ should find admin by email (330 ms)
      ✓ should find active admins only (329 ms)
      ✓ should find admins with specific permissions (328 ms)
      ✓ should get last admin for ID generation (331 ms)
    Email Integration
      ✓ should call email service after admin creation (189 ms)
      ✓ should handle email service failures gracefully (216 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:47.765Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Z7bVGBz_BxfnPr3vlEtA90OIM8or6Lqy',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: oRFVVcoV-q35ZxzTDndAkJihyd0RwZvDWC1E

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Z7bVGBz_BxfnPr3vlEtA90OIM8or6Lqy

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: hU-G7NTWrq...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 14.859 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:48.134Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 143.825 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:48.880Z"}
  console.log
    CSRF token generation: {
      sessionID: 'o3gLLNDeW3a9Ccw2NJ7W4qayb3Zmka_4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: M7O4oGiW-5BQTfL8JjOMXxIh_4mMmNPOQF1I

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: o3gLLNDeW3a9Ccw2NJ7W4qayb3Zmka_4

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: v_WULOROY2...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.308 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-e604aacf-2225-4894-95da-0a1562f5e6dc {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:48.923Z"}
[0mGET /api/v1/affiliates/AFF-e604aacf-2225-4894-95da-0a1562f5e6dc [32m200[0m 56.500 ms - 460[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:49.494Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pfe-DgJ_DSgj1cuB3Ck9jMrDUIcQ5W4Z',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Z5iBhmz3-L7w8lFwBolGLjDmUoxxuivC91oc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pfe-DgJ_DSgj1cuB3Ck9jMrDUIcQ5W4Z

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 5VPjjWZ7ut...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.140 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-4df29a12-a7ed-4bf5-a376-de22b8351c46 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:49.538Z"}
[0mPUT /api/v1/affiliates/AFF-4df29a12-a7ed-4bf5-a376-de22b8351c46 [32m200[0m 87.016 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:50.129Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fyKL_TRvKQR6iCNyt3FNO67XAip5IOAC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ukqyRCbY-MAmAA6P1cMAyDT6_9rAOOdom1C0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: fyKL_TRvKQR6iCNyt3FNO67XAip5IOAC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: dqHoC0ftct...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.954 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:50.257Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:47:50.424Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 167.477 ms - 594[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:50.898Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Nco94RtRBF9DuP5lhAe6eeklFsS4l34O',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: zTILquwG-z6h5lzksJ55mTyg-crJz8Rz7f0g

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Nco94RtRBF9DuP5lhAe6eeklFsS4l34O

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: _homHYgp0n...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.300 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-19ca278f-f313-4a90-a152-39cb9183ea4b/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:50.973Z"}
[0mGET /api/v1/affiliates/AFF-19ca278f-f313-4a90-a152-39cb9183ea4b/customers?page=1&limit=10 [32m200[0m 110.256 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:51.577Z"}
  console.log
    CSRF token generation: {
      sessionID: 'XnCtG_1z9N7_-hAMoHB0Hyu0o-RY1YH9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fVSqt1hF-TznoAYhHcqn9w20LwqeNQFvvat0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: XnCtG_1z9N7_-hAMoHB0Hyu0o-RY1YH9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 8PxNrmI8Ni...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.363 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-587fe206-085d-49b4-9769-ff8b63d28651/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:51.684Z"}
[0mGET /api/v1/affiliates/AFF-587fe206-085d-49b4-9769-ff8b63d28651/orders?page=1&limit=10 [32m200[0m 108.955 ms - 713[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:52.280Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZSU8d_e4baQ1eUaGEs-PuyhplOU5pmic',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: tLZKsnjp-thMWcXw8M0Dorhn_8slRavBwZ9Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZSU8d_e4baQ1eUaGEs-PuyhplOU5pmic

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: kXbSc4_BY5...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.742 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-713ab05d-01f2-489d-8969-90c0e943229d/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:52.356Z"}
[0mGET /api/v1/affiliates/AFF-713ab05d-01f2-489d-8969-90c0e943229d/transactions?page=1&limit=10 [32m200[0m 110.519 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:52.941Z"}
  console.log
    CSRF token generation: {
      sessionID: 'J6G44AN_ROkm3aAk9-J5E3ato0Cf_hQG',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZYYqLpAG-68tZw2NOGocKtHYTcKs-F__TVJ0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: J6G44AN_ROkm3aAk9-J5E3ato0Cf_hQG

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: E_lRJeU4Ih...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.189 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-f53e113d-2f7d-44ae-a353-cffa06b0ec56/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:53.087Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-f53e113d-2f7d-44ae-a353-cffa06b0ec56/delete-all-data {
      sessionID: 'J6G44AN_ROkm3aAk9-J5E3ato0Cf_hQG',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AJ6G44AN_ROkm3aAk9-J5E3ato0Cf_hQG.uw3dB4onLdl66R8wP%2B4oN6LwKo7FAZc1Od5Zhps4L2M',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/affiliates/AFF-f53e113d-2f7d-44ae-a353-cffa06b0ec56/delete-all-data [32m200[0m 208.567 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:53.836Z"}
  console.log
    CSRF token generation: {
      sessionID: 'K3Lfd-RgaJLGM3OCYs7J9cnni6Esu2HO',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WTLp1akB-V6bvTdEDpAjm11l0-Ifpor2vYqk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: K3Lfd-RgaJLGM3OCYs7J9cnni6Esu2HO

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: EO0SM613xA...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.361 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-504b977c-3d7b-4da4-adcf-93d9352f4350/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:53.876Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-504b977c-3d7b-4da4-adcf-93d9352f4350/delete-all-data {
      sessionID: 'K3Lfd-RgaJLGM3OCYs7J9cnni6Esu2HO',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AK3Lfd-RgaJLGM3OCYs7J9cnni6Esu2HO.ONTb2WLDAsJ48RrVHfyf4Ag7JNM8%2FYRhx8azX6kBWSM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/affiliates/AFF-504b977c-3d7b-4da4-adcf-93d9352f4350/delete-all-data [33m403[0m 29.415 ms - 59[0m
PASS tests/integration/affiliate.test.js (7.521 s)
  Affiliate API
    ✓ should register a new affiliate (1140 ms)
    ✓ should get affiliate profile (614 ms)
    ✓ should update affiliate profile (635 ms)
    ✓ should login affiliate (768 ms)
    ✓ should get affiliate's customers list (679 ms)
    ✓ should get affiliate's orders (702 ms)
    ✓ should get affiliate's earnings/transactions (662 ms)
    ✓ Delete all affiliate data (development only) (895 ms)
    ✓ Reject delete in production environment (541 ms)
    ○ skipped should update payment information
    ○ skipped should handle commission-related endpoints

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:56.313Z"}
[0mGET /api/v1/system/config/public [32m200[0m 31.080 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:57.304Z"}
[0mGET /api/v1/system/config/public [32m200[0m 28.321 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:58.200Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 28.025 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:59.059Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 27.022 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:47:59.947Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 27.477 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:00.836Z"}
[0mGET /api/v1/system/config [32m200[0m 58.779 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:01.730Z"}
[0mGET /api/v1/system/config [33m401[0m 0.999 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:02.574Z"}
[0mGET /api/v1/system/config [33m403[0m 27.301 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:03.443Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pQOgjMu6ZVkul8UomyjoCsuPKrc883cy',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: F5lNwN6E-krOtwVU0Y-u5Uy63dAIPHdJaT-s

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pQOgjMu6ZVkul8UomyjoCsuPKrc883cy

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: h9t0aA0xsc...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.286 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:03.562Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'pQOgjMu6ZVkul8UomyjoCsuPKrc883cy',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ApQOgjMu6ZVkul8UomyjoCsuPKrc883cy.HUJl7ukBgEzcVWhjCBNU5spHe%2BA2JIKDewc6ut%2F7z4A',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 118.915 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:04.604Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pb9hqE9ZdyFk-i3Qm7gejLQQQ344DQtT',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: EuCAffJR-8n6Y1d3NZ7Y1oOYgfvvu55Tlc04

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pb9hqE9ZdyFk-i3Qm7gejLQQQ344DQtT

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nHlNOK6XeX...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.891 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:04.723Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'pb9hqE9ZdyFk-i3Qm7gejLQQQ344DQtT',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Apb9hqE9ZdyFk-i3Qm7gejLQQQ344DQtT.2u%2FKQt1CL4%2FYO8Z0ElEHYaUNRCvH6ERfHDZF86oF3Ts',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 88.895 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:05.643Z"}
  console.log
    CSRF token generation: {
      sessionID: 'MpftHS3KlV0vQaxedypppCm6lpZs5AST',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cDK1DpTn-aBfhbO6wkt67wDCRf-_AqRuz2bA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: MpftHS3KlV0vQaxedypppCm6lpZs5AST

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: b38-0mTR1f...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.909 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:05.779Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'MpftHS3KlV0vQaxedypppCm6lpZs5AST',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AMpftHS3KlV0vQaxedypppCm6lpZs5AST.0TSWILi7%2BFuB9fseN4NuE%2ByedibGk4TaGpezx0j3RIE',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 84.868 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:06.703Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dhHux7K2c2E_Ptdnlviix0rHjo8YguEf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 2tndQRkz-ZBeC2zXCi2wM6ukgh0OtcHx7_lg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dhHux7K2c2E_Ptdnlviix0rHjo8YguEf

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7AaM9IvAaw...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.146 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:06.859Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: 'dhHux7K2c2E_Ptdnlviix0rHjo8YguEf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AdhHux7K2c2E_Ptdnlviix0rHjo8YguEf.V98tSZc4vjTCFTNRvuSxhFxQqzKmj50IRszyBprYfRQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 89.895 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:07.821Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PfX1RayybJwinlH_aX6W8r4YnYj1L12s',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9COFZK0O-M6JKTfiHy0TB4jGahqNBFe_Hyek

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PfX1RayybJwinlH_aX6W8r4YnYj1L12s

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: QH_DAsJl5X...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.982 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:08.053Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Oni_p7vS9QlWTFFg8C2NN3za7YchtiYH',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: qdrhnmyc-NCjgrkB_2zhFOGZXbzPBWJltybw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Oni_p7vS9QlWTFFg8C2NN3za7YchtiYH

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: HZvzLxU57D...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 8.419 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:08.076Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'Oni_p7vS9QlWTFFg8C2NN3za7YchtiYH',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AOni_p7vS9QlWTFFg8C2NN3za7YchtiYH.GOCsSBBOkA4dp9eJrtS%2Fbk8OT%2BSkBcN7EPv%2F1gPd9iI',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 67.367 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:09.022Z"}
  console.log
    CSRF token generation: {
      sessionID: '-W81GJeEPJ1j-wOaa8cC2peMpIuKDnK1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fbX078ng-FVoDXznkyjkTbrDe6JLFBuS0XKU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: -W81GJeEPJ1j-wOaa8cC2peMpIuKDnK1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: fyABA1Dims...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.628 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:09.063Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '-W81GJeEPJ1j-wOaa8cC2peMpIuKDnK1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A-W81GJeEPJ1j-wOaa8cC2peMpIuKDnK1.L8a9m0gJWLIpRMU7ijPlzMzM6BQs0pBpj70NeKR7qy4',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 327.578 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:10.238Z"}
  console.log
    CSRF token generation: {
      sessionID: '_cUGMN1JvCCGC1VtY-KlLsaIyfYNxacH',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: BF4VVvPC-FFCifHAsLLA2elQXhuoiRytnsiw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: _cUGMN1JvCCGC1VtY-KlLsaIyfYNxacH

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: eW8crkw8rH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.668 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:10.316Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '_cUGMN1JvCCGC1VtY-KlLsaIyfYNxacH',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A_cUGMN1JvCCGC1VtY-KlLsaIyfYNxacH.feWn6pOUQ2Zt4xWM00nf0kUJzQEhRO7zLy20EHeuO5k',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 388.324 ms - 48[0m
PASS tests/integration/systemConfig.test.js (17.916 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1088 ms)
        ✓ should not return private configurations (930 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (863 ms)
        ✓ should return 404 for non-existent config (851 ms)
        ✓ should return 404 for private config accessed via public endpoint (926 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (883 ms)
        ✓ should return 401 without authentication (837 ms)
        ✓ should return 403 for non-admin users (900 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1139 ms)
        ✓ should validate value based on data type (1058 ms)
        ✓ should validate value against min/max constraints (1042 ms)
        ✓ should not allow updating non-editable configs (1121 ms)
        ✓ should require system_config permission (1195 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1229 ms)
        ✓ should not overwrite existing configurations (1377 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1053 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:13.758Z"}
  console.log
    CSRF token generation: {
      sessionID: 'I3Og8wUzHbNAKlktR4uqzJSHpU1u6jkM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: UpNQKn4L-cKcMSJ41PYXeuxCkiPok26hNoyg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: I3Og8wUzHbNAKlktR4uqzJSHpU1u6jkM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: hBXejU1qSx...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.285 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:13.769Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.589 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:14.510Z"}
  console.log
    CSRF token generation: {
      sessionID: 'vZ5HjvmVK3-0-Q4jgg1szOedgM5_Cp2O',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Ro7iZ2gL-BRkHpzFfObanG7teEx5F7-1eeeA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: vZ5HjvmVK3-0-Q4jgg1szOedgM5_Cp2O

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 55hYOFvQw6...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.599 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:15.008Z"}
  console.log
    CSRF token generation: {
      sessionID: '7osDwgr7hr3vCgIQq_mODvm4pVpGmVTE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YSB8JF5K-MJJOUcqC22ig9An-j_eRbCQxTiI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 7osDwgr7hr3vCgIQq_mODvm4pVpGmVTE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wZFPWP8Wv6...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.908 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:15.503Z"}
  console.log
    CSRF token generation: {
      sessionID: 'CG5jzYDqZ4U6NENfz0HZJuoaLbWFE_A5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: r44eJlNR-lrecuIfmDBCQla8M35wZ9Uhy5I4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: CG5jzYDqZ4U6NENfz0HZJuoaLbWFE_A5

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wFT11yKT7J...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.311 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:15.512Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.411 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:16.004Z"}
  console.log
    CSRF token generation: {
      sessionID: '51VtgIMpw8XNZqsR2OeNZZZhk8pQyZkn',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: QW6vno5t-rDFHrx3Y5uZjyajYoWNNPedrRwU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 51VtgIMpw8XNZqsR2OeNZZZhk8pQyZkn

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Ay0F9end2c...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.675 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:16.014Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-24f2e19a-1380-4179-864d-90e0bf79f3d5","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:48:16.220Z","userId":"684370301c72368d7d0eb429","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 206.758 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:16.755Z"}
  console.log
    CSRF token generation: {
      sessionID: 'AyN6DvmW6DwGyHWehZnK6KDeryLX7olK',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: re8eeaZc-w0SmfnpM60qPY_OtR0BiUv5a3LA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: AyN6DvmW6DwGyHWehZnK6KDeryLX7olK

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 9bPHnu5xWY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 9.275 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:16.768Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.640 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:17.290Z"}
  console.log
    CSRF token generation: {
      sessionID: 'hVyz2F24kdIevBmH2Y2FmcYHVaQy1_uC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 7kL52aEU-RCBE23MCWGMxOe45sdHW2hJAKPo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: hVyz2F24kdIevBmH2Y2FmcYHVaQy1_uC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: on6cUELzZH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.031 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:17.299Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.063 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:17.787Z"}
  console.log
    CSRF token generation: {
      sessionID: 'zZpxgPsPN9wh0fjkZbdgqA4K9oZkaYB1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: LXdbbFZZ-EvWRliKKlNxmGdVpyy0gxeZ6XTc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: zZpxgPsPN9wh0fjkZbdgqA4K9oZkaYB1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: D1Gs38JkF1...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.484 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:17.887Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.841 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:18.384Z"}
  console.log
    CSRF token generation: {
      sessionID: 'DjG40rAU8xfDIGD9aDlSfNpRqjzPrp7_',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Plrk7w8C-8PjReVhL54x_H6cPBOVU94hO480

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: DjG40rAU8xfDIGD9aDlSfNpRqjzPrp7_

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: MeJwAEMemw...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.143 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:18.393Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Bxc1OmoP4qVUmjIcC4BhQONbhZgDGJVP',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: U1Nhdre1-6IBePWHpEDqpRLYnifzXVpnv7sE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Bxc1OmoP4qVUmjIcC4BhQONbhZgDGJVP

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: MmIUWH2A57...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.782 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:18.491Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'Bxc1OmoP4qVUmjIcC4BhQONbhZgDGJVP',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ABxc1OmoP4qVUmjIcC4BhQONbhZgDGJVP.ixj4RFLACg7jRZZ1KIyEt1Q2w%2F32w6TSfCDrMgmY%2Fto',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-06T22:48:18.581Z","userId":"684370321c72368d7d0eb47c","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 91.051 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.100Z"}
  console.log
    CSRF token generation: {
      sessionID: 'CAa-gHNHHb-jkuX6V3dsg0AMEVu7dUHC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: koqOsWk2--p8xBbKYgF46UeJnTUUdbhHSxfU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: CAa-gHNHHb-jkuX6V3dsg0AMEVu7dUHC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: T7Wy7OtVxF...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.675 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.109Z"}
  console.log
    CSRF token generation: {
      sessionID: 'VzWlgvLMrlUnzI8_EB98BVKYyUlg2llR',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: xukUyVUq-B20ZUdAbRUqb-HQEWl1TK4HDEYs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: VzWlgvLMrlUnzI8_EB98BVKYyUlg2llR

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Nqw3R4FQ5J...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.966 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.265Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'VzWlgvLMrlUnzI8_EB98BVKYyUlg2llR',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AVzWlgvLMrlUnzI8_EB98BVKYyUlg2llR.92Uu3EnfC2%2BRbWF57BYdyd5Zup769iB1GqHxiuOnoh8',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 30.393 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.794Z"}
  console.log
    CSRF token generation: {
      sessionID: 'M8x57KUCePBsSihlzn3SQK57cjVMCtAh',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 5zilrRy7-HOL8A88k_Y4heHc6VTRNL5BokW0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: M8x57KUCePBsSihlzn3SQK57cjVMCtAh

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 9fmD8ufIWU...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.607 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.804Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b_yDTCC_cqkuQg5PGevP_nCRBxFh0tfi',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cEQ6sVlO-Bq4Kbs1bcLmohAdvTx1xCP_cJUU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: b_yDTCC_cqkuQg5PGevP_nCRBxFh0tfi

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: fBXNQmKI08...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.988 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:19.897Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'b_yDTCC_cqkuQg5PGevP_nCRBxFh0tfi',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab_yDTCC_cqkuQg5PGevP_nCRBxFh0tfi.%2Fb7kTzovaLPfA9%2FKBcK9rX93qvhmPskkd%2BxVyowjIuc',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:48:19.988Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-3e65968f-5a9b-4ba6-b86c-fcd6187e542e","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-06T22:48:19.989Z","userId":"684370331c72368d7d0eb4ad","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 91.803 ms - 592[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:20.554Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5k4P_xzH9nbwQgpBFH-91fUgO_znzxp',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: SrKldVC2-BHVo5ZxVordsg_g4yp_a8q6lzQM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: d5k4P_xzH9nbwQgpBFH-91fUgO_znzxp

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: QX2A1ikRIu...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.075 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:20.562Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cr3-V7dQasxUMLKFfp9q4NJQ8x8V0m2P',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: tc1Pb2uN-FWTVgwwxoZLE9kaO2pav-wDq39c

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cr3-V7dQasxUMLKFfp9q4NJQ8x8V0m2P

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 9PfDksqgPk...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.173 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:20.657Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'cr3-V7dQasxUMLKFfp9q4NJQ8x8V0m2P',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acr3-V7dQasxUMLKFfp9q4NJQ8x8V0m2P.7ZvPGhJAHFuqGGXwANis%2BGjG8n9%2BLryrBY%2FWKKbYuG0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:48:20.780Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-e9c799b2-a81d-4fd9-827b-bf668f76713b","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-06T22:48:20.781Z","userId":"684370341c72368d7d0eb4c7","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 124.103 ms - 592[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:21.309Z"}
  console.log
    CSRF token generation: {
      sessionID: 'OBBd0xAwxER0eGbx8m5NnI6oUPZqA0IL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: TixyeDtX-kr2GF5FJwwk2Q9oxjvCnuesnQqg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: OBBd0xAwxER0eGbx8m5NnI6oUPZqA0IL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: f3blWpgp2k...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.716 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:21.318Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.508 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:21.808Z"}
  console.log
    CSRF token generation: {
      sessionID: 'HJwueaAMOXmkUlSnWteNspAdz21ezGe2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: AkKoNnRX-J6i8cp6L_9DI3EL8J_16OjW0acA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: HJwueaAMOXmkUlSnWteNspAdz21ezGe2

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: PH6s0_z9yN...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.618 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:21.822Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.523 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:22.324Z"}
  console.log
    CSRF token generation: {
      sessionID: 'hfnTcdziCa3rY75jtEWLx_JEHxH1bQr4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: EispBMjk-6VAn03iWCovxKdS6pJHibNvh7Q8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: hfnTcdziCa3rY75jtEWLx_JEHxH1bQr4

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wXFbn09vDe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.224 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:22.334Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.171 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:22.823Z"}
  console.log
    CSRF token generation: {
      sessionID: 'MohVoroyDp61Qi4c5RtsMfZTP_KkwMxR',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: uspTFK5c-VF83Z6TTJ1S5mIs-LGR05k6PkDM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: MohVoroyDp61Qi4c5RtsMfZTP_KkwMxR

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: MjGOiu--P2...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.837 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:22.833Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1296 |     
      1297 |   } catch (error) {
    > 1298 |     console.error('Social registration error:', error);
           |             ^
      1299 |     res.status(500).json({
      1300 |       success: false,
      1301 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1298:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 86.353 ms - 49[0m
PASS tests/integration/socialAuth.test.js (10.928 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (994 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (500 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (493 ms)
      ✓ should return 404 for unconfigured OAuth providers (502 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (750 ms)
      ✓ should reject social registration with invalid social token (535 ms)
      ✓ should reject social registration with missing required fields (497 ms)
      ✓ should prevent duplicate social registrations (596 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (717 ms)
      ✓ should reject linking if social account already exists (694 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (759 ms)
      ✓ should update social account tokens on login (756 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (498 ms)
      ✓ should handle expired social tokens (516 ms)
      ✓ should sanitize social profile data (499 ms)
      ✓ should handle database errors during social registration (589 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:24.381Z"}
  console.log
    CSRF token generation: {
      sessionID: 'RNBtXZiYNGYBwc1sGH0DL7hTp1IsoFT3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: LaXPpGuu-7vk-y1_3X8MMk_q7x6eY9rTZZik

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: RNBtXZiYNGYBwc1sGH0DL7hTp1IsoFT3

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ohgBh-oErd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.191 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:25.033Z"}
[0mPOST /api/v1/customers/register [32m201[0m 182.335 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:25.797Z"}
  console.log
    CSRF token generation: {
      sessionID: 'DLQp36bssN7T_wzVTH1NKO11Wd9zVw2N',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: wyISS9WK-133kbyIyIG8Ynl2sL5BLJ10AWdo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: DLQp36bssN7T_wzVTH1NKO11Wd9zVw2N

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1gCcKA6eVZ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.998 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:26.070Z"}
[0mPOST /api/v1/customers/register [33m400[0m 29.049 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:26.567Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PIoh18pLzkjpNm3fhLzdI_pV2nBymL3H',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: L9pxgjXe-unxvlkE7OtZD8lYpyihPP3rQ0gc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PIoh18pLzkjpNm3fhLzdI_pV2nBymL3H

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: H1qdWpSnDR...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.410 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:26.817Z"}
[0mPOST /api/v1/customers/register [33m400[0m 54.439 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:27.368Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fqNPJV_CmS0qOmf0VZN86JjUJvzajLjh',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: DD7D69V1-SWciQZ5dbG2iNfpaHLo1Y2BhW14

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: fqNPJV_CmS0qOmf0VZN86JjUJvzajLjh

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ef5O8pfqBe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.098 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:27.634Z"}
[0mPOST /api/v1/customers/register [33m400[0m 54.335 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:28.160Z"}
  console.log
    CSRF token generation: {
      sessionID: 'GJ6vY6p5p0nXVnn_YXMeGh_27qLh1k49',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: wBONNVg8-8vKtZCWMBi-cq66xVQ_fJ2xQ2Qs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: GJ6vY6p5p0nXVnn_YXMeGh_27qLh1k49

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: MQSecvjVBV...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.355 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:28.435Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 82.230 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:28.985Z"}
  console.log
    CSRF token generation: {
      sessionID: 'jZ9wzaHlmfhWoLuoz9_Fg4O-8GTKdLa6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WFTCNA2f-keo0te5cIo26ovpp7xH88z6B3pY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: jZ9wzaHlmfhWoLuoz9_Fg4O-8GTKdLa6

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: IgExenLWtw...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.857 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:29.243Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 82.714 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:29.809Z"}
  console.log
    CSRF token generation: {
      sessionID: '5dr1HKufnTJKLdukpoSOs3gQ1bpekC3u',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: QmViBsX3-2y3De7Wx15uUycUENyubFNQFDLA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5dr1HKufnTJKLdukpoSOs3gQ1bpekC3u

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 76cgzAAN7R...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.428 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:30.067Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 53.556 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:30.609Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3XlxNlvNxOfm5n5OJGhYsZH3NlUo4Kv',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: wtkzIzBZ-sGNleKJViEujenlxMnx4qthNahs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: d3XlxNlvNxOfm5n5OJGhYsZH3NlUo4Kv

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: TTAQVMyFOY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.178 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:30.862Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 53.884 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:31.405Z"}
  console.log
    CSRF token generation: {
      sessionID: '7qy4H0X2VA-3yQNFwBXSonOIM-67DAbg',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: TdnuGaYJ-RA0kTiOwOZB9viDvKVuLiAAS8mc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 7qy4H0X2VA-3yQNFwBXSonOIM-67DAbg

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: jtOe4slaIE...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.902 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:31.669Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 84.363 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:32.257Z"}
  console.log
    CSRF token generation: {
      sessionID: 'qHLYJpdy79rHw1STgp7W5IU_KhWh4SO3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: pDpsjeJU-59ngL0HaAvbw_1fF44TNZlHcppY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: qHLYJpdy79rHw1STgp7W5IU_KhWh4SO3

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 9X0GGhFwfv...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.423 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:32.516Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 85.097 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:33.099Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pfuSvzBrWvLXzJM48H4R_Iuj8bCavF6S',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: mqJzfuRq-1o8JdP8FY7SxFuNlJzIQnByHUgk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pfuSvzBrWvLXzJM48H4R_Iuj8bCavF6S

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: qJ31GZXEM8...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.605 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:33.393Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 108.897 ms - 610[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:33.978Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aJ9pWWANSIdgCaME_a_IEKvtDrCgkW9y',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: z3UB7mAl-OyVoPeaSByMgk3_PzTQbQBu6PiA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: aJ9pWWANSIdgCaME_a_IEKvtDrCgkW9y

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Ezv4qKZH6b...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.528 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=delivered {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:34.262Z"}
[0mGET /api/v1/customers/CUST123/orders?status=delivered [32m200[0m 107.257 ms - 370[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:34.851Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bI0h3W_sgOtYi0U_Mj2k7EIKPeyoToHp',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: f4N8XuGP-pp5mhqCEBXv2-Lw1DmZn6ZGZYZM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: bI0h3W_sgOtYi0U_Mj2k7EIKPeyoToHp

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: YAgePxF-8t...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.528 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:35.121Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'bI0h3W_sgOtYi0U_Mj2k7EIKPeyoToHp',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AbI0h3W_sgOtYi0U_Mj2k7EIKPeyoToHp.3QR5DpIxv%2FxoZAhqlRhEiK8IwTGah2rO5uxUEuS2RJI',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 207.661 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:35.332Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:466:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:467:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:468:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:501:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 143.224 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:35.945Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Oj11C79Ap0Qy8eBw2HwuoA76wgYtUgLZ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: BwchREKr-jzfzCfo3ofOyOK0OpvI9kP7ONRY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Oj11C79Ap0Qy8eBw2HwuoA76wgYtUgLZ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: EQ0yQxkclz...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.959 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:36.199Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'Oj11C79Ap0Qy8eBw2HwuoA76wgYtUgLZ',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AOj11C79Ap0Qy8eBw2HwuoA76wgYtUgLZ.BEyfXasdI7exY%2BWrHT7wQGqO8RGGkfIqumr%2Fhv6IHaU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 109.193 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:36.814Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZVF2gNx3MdWzkfHaISqgfTURph6qa9dq',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6eAWE96B-5MXxjMrBFtUke8HpynZQEscQg_A

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZVF2gNx3MdWzkfHaISqgfTURph6qa9dq

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: KDvk-j3Rqf...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.879 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:37.085Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'ZVF2gNx3MdWzkfHaISqgfTURph6qa9dq',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AZVF2gNx3MdWzkfHaISqgfTURph6qa9dq.VMaYKFucN1rA5bgZXxdb8aNADbR2cgyr1AoGM3oSovc',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 124.656 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:37.685Z"}
  console.log
    CSRF token generation: {
      sessionID: '3Ou_2x3aEXhoT4ORFkefMjQqqLNIzh9C',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Cdm0wrNm-KI-rImmbYQFPp9Z2wBIHwD8M0qs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 3Ou_2x3aEXhoT4ORFkefMjQqqLNIzh9C

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: haIRJgLuhG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.697 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:37.985Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 134.565 ms - 956[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:38.593Z"}
  console.log
    CSRF token generation: {
      sessionID: '5mAJUBl6-yYH0uKu0zXhCTyTkGK-5jhj',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: pyqBefL3-n7OdeEckhZTLLp3wQUw69dSK2ag

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5mAJUBl6-yYH0uKu0zXhCTyTkGK-5jhj

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: J6u8OjSPU_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.830 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:38.894Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 135.342 ms - 956[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:39.501Z"}
  console.log
    CSRF token generation: {
      sessionID: 'juWhB4u8L7VnU6ORHxp4pTaqlb2Kdmjs',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: usYMbk9f-72x3EepiiXAIxyj48W0n_r3PCjg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: juWhB4u8L7VnU6ORHxp4pTaqlb2Kdmjs

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: LyDgqWdE8x...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.937 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:39.813Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 133.241 ms - 956[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:40.427Z"}
  console.log
    CSRF token generation: {
      sessionID: 'GkhhuseGHh8LeiNLeiGqlBaf0sWN8i_N',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: LpQIqfXH-v0QqCQH5amWtvTqnabYSEoUyY8M

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: GkhhuseGHh8LeiNLeiGqlBaf0sWN8i_N

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: llR9yaH_9B...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.808 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:40.761Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'GkhhuseGHh8LeiNLeiGqlBaf0sWN8i_N',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AGkhhuseGHh8LeiNLeiGqlBaf0sWN8i_N.hsTJAUQMl1uZyrSdWhrfTyLgEdPWcJopwsLk3nCSI7I',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 118.174 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:41.431Z"}
  console.log
    CSRF token generation: {
      sessionID: 'NPYNxLzixcgt6aUlbVb032eGQjzNRXxa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 93VFLIIw-FN78WUjxU4hqTfj1h0zsthyEWgQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: NPYNxLzixcgt6aUlbVb032eGQjzNRXxa

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: W163hlD5Bn...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.004 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:41.694Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'NPYNxLzixcgt6aUlbVb032eGQjzNRXxa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ANPYNxLzixcgt6aUlbVb032eGQjzNRXxa.VsczqrxWu%2B8DPXopmMAks0nb3K%2B56OGgP%2BpLm1o380g',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.201 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:42.200Z"}
  console.log
    CSRF token generation: {
      sessionID: 'oCzS-gpvOKPg8WfP7XqZAgpffDOtLyZt',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZBdjH6tU-xLTqZ2-4MCOBYMMLLbiB4KlYHPM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: oCzS-gpvOKPg8WfP7XqZAgpffDOtLyZt

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: k8SW2pTTwn...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.341 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:42.549Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'oCzS-gpvOKPg8WfP7XqZAgpffDOtLyZt',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AoCzS-gpvOKPg8WfP7XqZAgpffDOtLyZt.arZH7sWcxsCF9uR6SfC0n1hEPCqSjr1PCL2b84Qc7zo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.191 ms - 63[0m
PASS tests/integration/customer.test.js (19.625 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1429 ms)
      ✓ should fail with invalid affiliate ID (770 ms)
      ✓ should fail with duplicate email (801 ms)
      ✓ should fail with duplicate username (792 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (825 ms)
      ✓ should return customer profile for affiliate (819 ms)
      ✓ should fail for unauthorized customer (805 ms)
      ✓ should return limited data without authentication (796 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (846 ms)
      ✓ should not update protected fields (847 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (879 ms)
      ✓ should filter orders by status (872 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1094 ms)
      ✓ should fail with incorrect current password (869 ms)
      ✓ should fail with weak new password (871 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (908 ms)
      ✓ should return monthly statistics (908 ms)
      ✓ should allow affiliate to view customer dashboard (925 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1003 ms)
      ✓ should reject deletion in production environment (770 ms)
      ✓ should reject unauthorized deletion (901 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:44.577Z"}
  console.log
    CSRF token generation: {
      sessionID: 'soEwOFbWrjm4pOBJVD7FdObbeAuKI89H',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: BDnoezPf-kqluqQTsCuF1YobBTfBFhvlIBl4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: soEwOFbWrjm4pOBJVD7FdObbeAuKI89H

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: gn-loQj5oo...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.441 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:44.690Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 176.882 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:45.072Z"}
[0mGET /api/v1/administrators [32m200[0m 112.674 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:45.863Z"}
  console.log
    CSRF token generation: {
      sessionID: 'HiBLP1OX3IgtxHId7SWCINK6H_C6qd3o',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: XPEIWGQy-K5V-S7pmZKYhgDs54t2uVq6y7fA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: HiBLP1OX3IgtxHId7SWCINK6H_C6qd3o

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: pSwD9nNIpx...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.516 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:45.952Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.868 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:46.198Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 113.848 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:46.914Z"}
  console.log
    CSRF token generation: {
      sessionID: 'LuS1tSyJ00-a3ZW839zLQgWgSiatIlfK',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZXHLnVPS-fFkHT3mKVqmXL_-p1E-SrECxU6Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: LuS1tSyJ00-a3ZW839zLQgWgSiatIlfK

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: X8Q1U53uNd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.709 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:47.009Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 194.969 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:48.243Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 114.472 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:48.963Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ZCDQ46-_lSFbuhufCqcvCj_xRrCvdTx',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9DetciJJ-OvYFLMdmSK-O6ku5fE1DGaD4Kwc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 8ZCDQ46-_lSFbuhufCqcvCj_xRrCvdTx

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: O9LvOVB3dc...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 12.235 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:49.067Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.672 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:49.222Z"}
[0mGET /api/v1/administrators [33m401[0m 0.890 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:49.818Z"}
  console.log
    CSRF token generation: {
      sessionID: '_xAgcV7rZ12hj0vhjHWWdrPkjppfQ6OJ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kLjszGsY-xxKM5kigx3L5OavGTlo6Yhl0rFE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: _xAgcV7rZ12hj0vhjHWWdrPkjppfQ6OJ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: YOKu4vJJWU...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.696 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:49.913Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.817 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:50.148Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.725 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:50.298Z"}
[0mGET /api/v1/administrators [33m403[0m 29.454 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:50.945Z"}
  console.log
    CSRF token generation: {
      sessionID: 'CdplOEi48oxce8R0ZkfTkYxMIsVhafPP',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: vjwK0ZDo-jftYGgtXrHD7MaVykorXo12ONXU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: CdplOEi48oxce8R0ZkfTkYxMIsVhafPP

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: JujZViJ4YC...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.411 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:51.039Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.472 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/684370539a8721f57837eabc {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:51.292Z"}
[0mGET /api/v1/administrators/684370539a8721f57837eabc [32m200[0m 83.677 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:51.988Z"}
  console.log
    CSRF token generation: {
      sessionID: 'QrJrPHyA-TiF9ZbE4PprRA_Q5tr_O25J',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: oXR8D7VH-gp4f8fEP46OR-76gWB0tfyhx-14

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: QrJrPHyA-TiF9ZbE4PprRA_Q5tr_O25J

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 3ctMe1vAkh...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.220 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:52.099Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.702 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/684370549a8721f57837eadd {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:52.253Z"}
[0mGET /api/v1/administrators/684370549a8721f57837eadd [33m404[0m 83.939 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:52.935Z"}
  console.log
    CSRF token generation: {
      sessionID: 'VCYmLenJCv6VcFc5A8hfvTtARoV41PZJ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: DgsvfCdG-PEKPF0cdymm0k_Xjus0kQpzSgc8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: VCYmLenJCv6VcFc5A8hfvTtARoV41PZJ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: d7TJqb_xnH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.027 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:53.024Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.769 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:53.174Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 56.952 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:53.829Z"}
  console.log
    CSRF token generation: {
      sessionID: 'xvUflY63aNphmWe7Io-jDP_Uix9Ok6Ck',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZNZgYMdv--imb1bzxV5D_EtY2ddl6SFq6_UI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: xvUflY63aNphmWe7Io-jDP_Uix9Ok6Ck

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7e1kR9S3Dc...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.915 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:53.927Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.720 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:54.084Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'xvUflY63aNphmWe7Io-jDP_Uix9Ok6Ck',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AxvUflY63aNphmWe7Io-jDP_Uix9Ok6Ck.jDPFQB0aXBc5PRFwM4Q2XADs2fygnJ8OwOJU3HINLhQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [32m201[0m 197.074 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:54.284Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.810 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:55.042Z"}
  console.log
    CSRF token generation: {
      sessionID: '7yfe27-0FpyV6KmdjctSZAm5HnjsmyZj',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fnOLUV4o-1rMrf6dtPG4-W_E5Pg8FJHUPokc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 7yfe27-0FpyV6KmdjctSZAm5HnjsmyZj

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: TmwfrJKfZ2...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.600 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:55.139Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 176.393 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:55.318Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '7yfe27-0FpyV6KmdjctSZAm5HnjsmyZj',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7yfe27-0FpyV6KmdjctSZAm5HnjsmyZj.39%2BpFo4XbiuLzqIKWR7MbugyIdaTbHjCcKJd6sxvQBU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m400[0m 59.063 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:55.974Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Q-IFAf3tyJLfWduOFup8esQGxgW65oOV',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: mruOrZHA-tKMwdBK0qaWmRwzXsO53Q7gTTds

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Q-IFAf3tyJLfWduOFup8esQGxgW65oOV

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Cp26QCkfcH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.255 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:56.069Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.624 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:56.220Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'Q-IFAf3tyJLfWduOFup8esQGxgW65oOV',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AQ-IFAf3tyJLfWduOFup8esQGxgW65oOV.spKBXjgbdQyZxArGZijgSVYceevcwKcv5CUWxlJgnL0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m400[0m 59.301 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:56.895Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Qx-7PNOHspE8cAnAQt6YqX1bxZ4G__E7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: RujLYfLq-wAuETbgz19v6KqmA9WyCsiLI0Bs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Qx-7PNOHspE8cAnAQt6YqX1bxZ4G__E7

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 0Qzc_nO0oJ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.810 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:56.993Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.336 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:57.155Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'Qx-7PNOHspE8cAnAQt6YqX1bxZ4G__E7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AQx-7PNOHspE8cAnAQt6YqX1bxZ4G__E7.Tg7zdBf54aO5N11k4ujkeupBoNgG2xWGEuZeu%2FNaugM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m400[0m 59.246 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:57.822Z"}
  console.log
    CSRF token generation: {
      sessionID: '0TZaUjfg8CrFRe1JjbLGF9bf_UfzHN1m',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 0NkQcP1X-M6hOasMyFzrhij3VlUvGfpOE7Sg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 0TZaUjfg8CrFRe1JjbLGF9bf_UfzHN1m

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lh56rL9Mhz...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.902 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:57.924Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.695 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:58.073Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '0TZaUjfg8CrFRe1JjbLGF9bf_UfzHN1m',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0TZaUjfg8CrFRe1JjbLGF9bf_UfzHN1m.vwunsSLJoS6%2BxF0QkHDiuWcc4LSzp1BMvWeMSTJiMtc',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m409[0m 86.165 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:58.759Z"}
  console.log
    CSRF token generation: {
      sessionID: 'wNV0P6Nok2SaxHmLwaB79YEm8GVMPz6E',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: RFsqNBGP-YNwqAlfiDYU3JlRqs4oUjH-6WKs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: wNV0P6Nok2SaxHmLwaB79YEm8GVMPz6E

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 4ph_bgebdK...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.399 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:58.855Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.923 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:59.099Z"}
  console.log
    CSRF token generation: {
      sessionID: 'QWwIk0XjHEmjADxZ-Q5U25NXDzsagdVX',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ca1q6tkT-QDzrGR2zQWBrp7vrXlLQXydwTrM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: QWwIk0XjHEmjADxZ-Q5U25NXDzsagdVX

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: oSYcbLXLAI...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.024 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:59.108Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.872 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:59.267Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'QWwIk0XjHEmjADxZ-Q5U25NXDzsagdVX',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AQWwIk0XjHEmjADxZ-Q5U25NXDzsagdVX.jqOiGWXjYfRaBbQyfd6st9cVxdJIB8wH%2Fr4v1lyhzrg',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m403[0m 60.963 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:48:59.939Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Otup0z9N5uL9r4av84wfCHgDLo6gbT1r',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: to1Yi8ro-4OKa1lovK620BCCSAPhEKciXGdU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Otup0z9N5uL9r4av84wfCHgDLo6gbT1r

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ahd9s7PTnE...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:00.047Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.095 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/6843705c9a8721f57837ebde {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:00.301Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843705c9a8721f57837ebde {
      sessionID: 'Otup0z9N5uL9r4av84wfCHgDLo6gbT1r',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AOtup0z9N5uL9r4av84wfCHgDLo6gbT1r.xFc%2FjKvibIVH68NPG6RAEwTeL8o02ruwP1WLCqNj8xM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/6843705c9a8721f57837ebde [32m200[0m 95.380 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:01.005Z"}
  console.log
    CSRF token generation: {
      sessionID: 'llICyA3w6CClW6DrQ2GqxS0nT5u4BYWS',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: CTiKSLhH-JAw-AucUZB7bxxA4xI2DMAWR6uA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: llICyA3w6CClW6DrQ2GqxS0nT5u4BYWS

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Ap2akthksY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.652 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:01.109Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.819 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/6843705d9a8721f57837ebff {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:01.351Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843705d9a8721f57837ebff {
      sessionID: 'llICyA3w6CClW6DrQ2GqxS0nT5u4BYWS',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AllICyA3w6CClW6DrQ2GqxS0nT5u4BYWS.ZqUB6K2m5sO3bCHfezUpmk2HsEGNyUCE6fA0u7h9%2BpE',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/6843705d9a8721f57837ebff [32m200[0m 119.149 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:02.072Z"}
  console.log
    CSRF token generation: {
      sessionID: 'foThlYc-9eNnlRTwNlPyExf10WgifAIe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: GQzrMO5p-Hu1Vo3j3wsLBBu7UFzuuH7vS15w

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: foThlYc-9eNnlRTwNlPyExf10WgifAIe

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: huCK8a_DIP...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.926 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:02.169Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.473 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/6843705e9a8721f57837ec21 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:02.436Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843705e9a8721f57837ec21 {
      sessionID: 'foThlYc-9eNnlRTwNlPyExf10WgifAIe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AfoThlYc-9eNnlRTwNlPyExf10WgifAIe.7tbtRSkS%2BKQWFZ2lgQ5bdE%2FkqX5ikQxHup%2BhI4luCsE',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/6843705e9a8721f57837ec21 [32m200[0m 199.983 ms - 316[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:02.639Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.563 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:03.394Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aYL_eErlPaEwiL3i2h61YU018odapKhv',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: VH7pstfJ-E86_1VzpiR_mjlpsOqHsKFr5IXk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: aYL_eErlPaEwiL3i2h61YU018odapKhv

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 58yGdI7afp...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.852 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:03.492Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.302 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/6843705f9a8721f57837ec48 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:03.725Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843705f9a8721f57837ec48 {
      sessionID: 'aYL_eErlPaEwiL3i2h61YU018odapKhv',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AaYL_eErlPaEwiL3i2h61YU018odapKhv.pbqqgT23vPnUddw0MX4Ff4Px%2FJK0z4qG3RBDxMcuBCw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/6843705f9a8721f57837ec48 [32m200[0m 89.168 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:03.816Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.460 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:04.450Z"}
  console.log
    CSRF token generation: {
      sessionID: '8-89h8CUk1MGqNOpZx5K0Uzp2pSYy8eF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YVbyKLBo-g_hnRzEQE-AH3vDN7W2zzYGWFWw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 8-89h8CUk1MGqNOpZx5K0Uzp2pSYy8eF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: l_OMvUe75-...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.072 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:04.545Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.141 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684370609a8721f57837ec6a {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:04.784Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370609a8721f57837ec6a {
      sessionID: '8-89h8CUk1MGqNOpZx5K0Uzp2pSYy8eF',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8-89h8CUk1MGqNOpZx5K0Uzp2pSYy8eF.o5TyWHInBo1NRV1a5K8%2BV5McfKWXUSVosKGu%2BaHK31I',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/684370609a8721f57837ec6a [32m200[0m 87.681 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:05.484Z"}
  console.log
    CSRF token generation: {
      sessionID: 'lQ4c9UqSkm8JsjNQX535HCATYd_abYlx',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: LACTrkZa-b99zWf6x0drFt880VmZxShdhnoQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: lQ4c9UqSkm8JsjNQX535HCATYd_abYlx

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 10PUCFHWui...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.481 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:05.577Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.882 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684370619a8721f57837ec8b {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:05.816Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370619a8721f57837ec8b {
      sessionID: 'lQ4c9UqSkm8JsjNQX535HCATYd_abYlx',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AlQ4c9UqSkm8JsjNQX535HCATYd_abYlx.CvvktW307jO%2B%2B4aI14UXR4oKC8khm9xedS0PRttQBd0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/684370619a8721f57837ec8b [33m409[0m 85.843 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:06.515Z"}
  console.log
    CSRF token generation: {
      sessionID: '0PQxvIKUiKAhtGiIvMqXZtpvtau6iNAt',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Fz5cvwkg-g_a4RoszrnDhmRiozrng58duOwA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 0PQxvIKUiKAhtGiIvMqXZtpvtau6iNAt

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nVEzDHGhWe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.286 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:06.621Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.229 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/684370629a8721f57837eca6 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:06.862Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370629a8721f57837eca6 {
      sessionID: '0PQxvIKUiKAhtGiIvMqXZtpvtau6iNAt',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0PQxvIKUiKAhtGiIvMqXZtpvtau6iNAt.Gd5wqSiynStSflSd6iQjE%2BDMweNmHb0fqLf602IU8dY',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/684370629a8721f57837eca6 [33m400[0m 57.899 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:07.523Z"}
  console.log
    CSRF token generation: {
      sessionID: 'xaf_F9PBhZ6QGfQio_xfIohxEF32PPxu',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: i4FDUEv9-dREK16BVp3WZaKd14cPrvhJzUEA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: xaf_F9PBhZ6QGfQio_xfIohxEF32PPxu

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 6S2bwFwFyG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.144 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:07.622Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.670 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:07.942Z"}
  console.log
    CSRF token generation: {
      sessionID: 'qJqgfWWIRbeI9iOeIZIBKC-kAiRRC6ns',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Kx4HxB5Y-etfW8_2h-Da_ojtVi7FUqq4bMBE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: qJqgfWWIRbeI9iOeIZIBKC-kAiRRC6ns

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: S4YnDzGfKW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.552 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:07.950Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.192 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/684370639a8721f57837eccc {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:08.095Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370639a8721f57837eccc {
      sessionID: 'qJqgfWWIRbeI9iOeIZIBKC-kAiRRC6ns',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AqJqgfWWIRbeI9iOeIZIBKC-kAiRRC6ns.uMCTBWENYVC2Apwwwxx7q0Jd9v4CKicYdR4NbAs3p7c',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/administrators/684370639a8721f57837eccc [33m403[0m 58.445 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:08.756Z"}
  console.log
    CSRF token generation: {
      sessionID: 'zrIrmeLvae0sOAEiKZdac4YM7fh0mTpL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YzTp5d8I-ogI8K2YaTdjDLIR_xrXzX680SZs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: zrIrmeLvae0sOAEiKZdac4YM7fh0mTpL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: NRedhNNArb...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.628 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:08.851Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.793 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684370659a8721f57837ecf2 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:09.102Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370659a8721f57837ecf2 {
      sessionID: 'zrIrmeLvae0sOAEiKZdac4YM7fh0mTpL',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AzrIrmeLvae0sOAEiKZdac4YM7fh0mTpL.hLFYMgeNKnTuojcH%2Bh%2FdkUGHvgNamCmjVRGMLwCrVxg',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/administrators/684370659a8721f57837ecf2 [32m200[0m 119.308 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:09.848Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aiXsuQHBFa71wwZEUAYqRhr5J9tZkwO4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: JF1Lrzs5-TybUC8UtX6Dfy1tzjKQp82yd6QA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: aiXsuQHBFa71wwZEUAYqRhr5J9tZkwO4

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: q7vLgtTzxe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.536 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:09.942Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.329 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684370659a8721f57837ed0f {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:10.167Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370659a8721f57837ed0f {
      sessionID: 'aiXsuQHBFa71wwZEUAYqRhr5J9tZkwO4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AaiXsuQHBFa71wwZEUAYqRhr5J9tZkwO4.R%2F%2BkOl6%2FOVg370%2Fh5M2WZYKFl7qN%2FCHfP7CjBqoAFWU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/administrators/684370659a8721f57837ed0f [33m400[0m 58.059 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:10.832Z"}
  console.log
    CSRF token generation: {
      sessionID: 'WO9cbjD68fggPueGSv_czs-62ZDCM_nj',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: r1wLsjRe-7zKwNk8HZ3kQWEQKHuP_Nt3XkKY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: WO9cbjD68fggPueGSv_czs-62ZDCM_nj

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 0JZ8SMVe_i...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.476 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:10.938Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.977 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684370669a8721f57837ed2f {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:11.235Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370669a8721f57837ed2f {
      sessionID: 'WO9cbjD68fggPueGSv_czs-62ZDCM_nj',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWO9cbjD68fggPueGSv_czs-62ZDCM_nj.xsR0b7gOHJteqiMkyupM4KS4tycIA9DZohvTcyywSwQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/administrators/684370669a8721f57837ed2f [33m400[0m 58.998 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:11.895Z"}
  console.log
    CSRF token generation: {
      sessionID: 'M_ue6IMnCbmpmSFUES8cwXC8suZBH8Be',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kyPa5NDc-KyKtWQ94wTfHGd5OaW9iM6fw4lo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: M_ue6IMnCbmpmSFUES8cwXC8suZBH8Be

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 6CJz8J7XCR...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.402 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:11.991Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.829 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:12.310Z"}
  console.log
    CSRF token generation: {
      sessionID: 'S2KwQ0JToi9OEY7vSmkEVjOkjqrr2MpY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6QO4GoW0-KwWNeVpdwq2hUF8vRKDysLK6U3Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: S2KwQ0JToi9OEY7vSmkEVjOkjqrr2MpY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -CBZz1cIJm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.437 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:12.318Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.784 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/684370689a8721f57837ed56 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:12.468Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370689a8721f57837ed56 {
      sessionID: 'S2KwQ0JToi9OEY7vSmkEVjOkjqrr2MpY',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AS2KwQ0JToi9OEY7vSmkEVjOkjqrr2MpY.MsCgFkANu7vVFMPlL6W0X3SmXBIUU2KsUkxBU91he7I',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/administrators/684370689a8721f57837ed56 [33m403[0m 58.970 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:13.131Z"}
  console.log
    CSRF token generation: {
      sessionID: 'qW1TC-Di37eXAUnEl3vEj8TVW4k_ESfn',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3zypKXGn-WstviMrBBuP3UZQnoo_CIiX6sbs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: qW1TC-Di37eXAUnEl3vEj8TVW4k_ESfn

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -wQJGzMj4i...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.199 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:13.244Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.832 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/684370699a8721f57837ed7e {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:13.489Z"}
  console.log
    CSRF check for: /api/v1/administrators/684370699a8721f57837ed7e {
      sessionID: 'qW1TC-Di37eXAUnEl3vEj8TVW4k_ESfn',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AqW1TC-Di37eXAUnEl3vEj8TVW4k_ESfn.zHFuxU%2FHTRxM9CA06JA71HDiOJArVSX69xt9x4KZR74',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/administrators/684370699a8721f57837ed7e [33m404[0m 112.265 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:14.197Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Kv6y12Wv97zm7F69uWIVaCb94fhiLT_b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: v7ThoDDC-IuGy0LvVr8vGPLpGxi-oJmOgl3U

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Kv6y12Wv97zm7F69uWIVaCb94fhiLT_b

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: vH7d3wxtYL...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.178 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:14.293Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.369 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/6843706a9a8721f57837ed9f/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:14.543Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843706a9a8721f57837ed9f/reset-password {
      sessionID: 'Kv6y12Wv97zm7F69uWIVaCb94fhiLT_b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AKv6y12Wv97zm7F69uWIVaCb94fhiLT_b.hcK%2FAEf4fhSEA%2FplVcJUmss%2F8MEA9uJSpdo8jauKEiQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators/6843706a9a8721f57837ed9f/reset-password [32m200[0m 170.470 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:14.716Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.910 ms - 644[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:14.871Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 111.890 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:15.599Z"}
  console.log
    CSRF token generation: {
      sessionID: 'O9Fb4AqUB9kYOMuXeZgwd9Si-DdK4H3B',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: LEx2cl5O--5Choc5qDp89l-hjLxWvKaeRVdk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: O9Fb4AqUB9kYOMuXeZgwd9Si-DdK4H3B

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: L7P4KkZifr...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.423 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:15.696Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.764 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/6843706b9a8721f57837edc7/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:15.967Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843706b9a8721f57837edc7/reset-password {
      sessionID: 'O9Fb4AqUB9kYOMuXeZgwd9Si-DdK4H3B',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AO9Fb4AqUB9kYOMuXeZgwd9Si-DdK4H3B.yuCX8D33JwY%2F5rbzfiphmo3JtylzdUo%2B3MX9R27Aozs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators/6843706b9a8721f57837edc7/reset-password [32m200[0m 169.018 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:16.767Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ozpKiJbOM08bi4kP6R-eBbJQKm1jZgn',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YuUuo1wL-x1RAyEau0kpmwMuxhQ_2oncyMBc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 7ozpKiJbOM08bi4kP6R-eBbJQKm1jZgn

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ePfD_xQGL5...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.366 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:16.860Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.430 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/6843706d9a8721f57837edeb/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:17.093Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843706d9a8721f57837edeb/reset-password {
      sessionID: '7ozpKiJbOM08bi4kP6R-eBbJQKm1jZgn',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7ozpKiJbOM08bi4kP6R-eBbJQKm1jZgn.x5MZngf1216bARCg8qEnY0UZbHValH5jH5wmAT3%2BAFs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators/6843706d9a8721f57837edeb/reset-password [33m400[0m 60.281 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:17.757Z"}
  console.log
    CSRF token generation: {
      sessionID: '2eqWsnpLydQImK7y4reglwGATbwRTAQ8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: SRUD1Luu-5JrZWz-Kfq25Vy71P-Vs-A3YB7o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 2eqWsnpLydQImK7y4reglwGATbwRTAQ8

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: amvMSzkwGy...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.122 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:17.852Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.715 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:18.173Z"}
  console.log
    CSRF token generation: {
      sessionID: 'K0bx-rCoPr3cwYCrfOev4FD01gsjKaLF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: jHynXGoK-lVUKHRNiMNBjIKWes06zCgNB05E

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: K0bx-rCoPr3cwYCrfOev4FD01gsjKaLF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: bJbom4fxRW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.771 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:18.183Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.621 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/6843706d9a8721f57837ee0b/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:18.341Z"}
  console.log
    CSRF check for: /api/v1/administrators/6843706d9a8721f57837ee0b/reset-password {
      sessionID: 'K0bx-rCoPr3cwYCrfOev4FD01gsjKaLF',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AK0bx-rCoPr3cwYCrfOev4FD01gsjKaLF.19TEdSQYVz7Cu3DKSi5OqZYV1pZcSL9ksSRVOXM2p8w',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators/6843706d9a8721f57837ee0b/reset-password [33m403[0m 57.837 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:19.008Z"}
  console.log
    CSRF token generation: {
      sessionID: '4yWz1a8S8m7uQdvv7YonAKBbyi85jkAi',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: MLpyfGId-Gpnv_5SVYtN6a_8gq4fR7a_KI1U

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 4yWz1a8S8m7uQdvv7YonAKBbyi85jkAi

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: sBFymel_jW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.488 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:19.116Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 162.781 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:19.283Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 30.731 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:19.915Z"}
  console.log
    CSRF token generation: {
      sessionID: 'K0ukjbPHDl6YUJyACoV-o8MsQn1JEke9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kmujBkP8-mbhBY7ExWKbVFoOrIVpMEBHnTDs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: K0ukjbPHDl6YUJyACoV-o8MsQn1JEke9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: N-9QIPM7bt...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.295 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:20.006Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.317 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:20.151Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 0.951 ms - 47[0m
PASS tests/integration/administrator.test.js (37.47 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1691 ms)
      ✓ should filter by active status (1049 ms)
      ✓ should support pagination (2048 ms)
      ✓ should require admin authentication (858 ms)
      ✓ should require administrator permissions (1123 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1037 ms)
      ✓ should return 404 for non-existent administrator (955 ms)
      ✓ should handle invalid ObjectId (892 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1214 ms)
      ✓ should validate required fields (931 ms)
      ✓ should validate email format (911 ms)
      ✓ should validate password strength (926 ms)
      ✓ should prevent duplicate emails (944 ms)
      ✓ should require administrators.create permission (1183 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1064 ms)
      ✓ should update email (1065 ms)
      ✓ should update password (1317 ms)
      ✓ should deactivate administrator (1058 ms)
      ✓ should not allow updating adminId (1038 ms)
      ✓ should validate email uniqueness on update (1031 ms)
      ✓ should prevent self-deactivation (1004 ms)
      ✓ should require administrators.update permission (1237 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1088 ms)
      ✓ should prevent self-deletion (986 ms)
      ✓ should prevent deleting last administrator with all permissions (1064 ms)
      ✓ should require administrators.delete permission (1233 ms)
      ✓ should handle non-existent administrator (1068 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1399 ms)
      ✓ should clear login attempts on password reset (1164 ms)
      ✓ should validate password strength (993 ms)
      ✓ should require administrators.update permission (1252 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (909 ms)
      ✓ should require authentication (828 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.306Z"}
  console.log
    CSRF token generation: {
      sessionID: 'W4fFsrPydakXfx7gXbtqi8ezPTzQRIj5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6POzalCM-APCL4HHC6oJC2RsOA0bOHceZ2lQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: W4fFsrPydakXfx7gXbtqi8ezPTzQRIj5

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -GmNAByv7j...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 8.538 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.319Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 6.746 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.329Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.056 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.342Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.383 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.347Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.583 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.351Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.801 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.355Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.701 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.360Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.974 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.365Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.633 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.370Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.771 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.375Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.655 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.380Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.892 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.384Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.736 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.392Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.088 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.398Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.978 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.404Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 3.306 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.409Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.882 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.415Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.408 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:22.418Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.828 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.076Z"}
  console.log
    CSRF token generation: {
      sessionID: '_9yigwsst2c4Q3HYSrUAs6nsRHVFjYFa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 54Mxfb42-lgzRoocBX2d_csoQzCcRXeEPuiI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: _9yigwsst2c4Q3HYSrUAs6nsRHVFjYFa

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: IH-Kv3qaEd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 12.614 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.092Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 114.650 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.209Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 115.578 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.327Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 113.859 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.444Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 121.886 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:23.568Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 120.711 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:24.282Z"}
  console.log
    CSRF token generation: {
      sessionID: 'oISbGFSAfJL4t_SN9nTvEVYhqP8lV9L1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: mujmBfVh-H1ysnyWiQxAT-XL-st1tGHTuKVM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: oISbGFSAfJL4t_SN9nTvEVYhqP8lV9L1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Oo9BlKBgV1...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.112 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:24.291Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.875 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:24.924Z"}
  console.log
    CSRF token generation: {
      sessionID: 'emVD0sc6_KnskifpxV9p0gYuVIjpLMF8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: nHWjdbLD-xuq4S8IOK0f5R78uamTqmNxyDDs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: emVD0sc6_KnskifpxV9p0gYuVIjpLMF8

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: F6ArMcj4ZQ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.131 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:24.933Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.641 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:25.537Z"}
  console.log
    CSRF token generation: {
      sessionID: 't7o1uGnd7kmy2F3yA-_1DIv8PoNVFonE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 5ZsjdVZw-ji17AsR60MbC4j_Tw5yUSo_8yDY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: t7o1uGnd7kmy2F3yA-_1DIv8PoNVFonE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wHhgD39fJC...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.293 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:25.544Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.749 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:25.548Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.634 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:25.552Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.616 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:25.556Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.710 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:26.129Z"}
  console.log
    CSRF token generation: {
      sessionID: 'jOoaKAltKryBxTO7YcR3lE_Ap6HWikd0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 2qmB52hL-5qDXsa1CYNpCOlr9nkWxN6NAYHk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: jOoaKAltKryBxTO7YcR3lE_Ap6HWikd0

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: GvEGnVBnR-...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.164 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:26.288Z"}
[0mPOST /api/v1/customers/register [33m400[0m 1.631 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:26.869Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cPM0231UhgRltBoRm75Q0o-25lEhnG05',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: f8f9Q9Cg-OjMbfEBRxATlhyLFsLwQHwgYUls

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cPM0231UhgRltBoRm75Q0o-25lEhnG05

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lMXbJZgE4R...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.955 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:27.017Z"}
[0mPOST /api/v1/customers/register [32m201[0m 164.802 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:27.767Z"}
  console.log
    CSRF token generation: {
      sessionID: 'DytZnZX_DiqjvEewXiE12o6KZQfkH2q1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: lXWIh1L6-uItX8eoV5yRlwyT3YehXutOLIDY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: DytZnZX_DiqjvEewXiE12o6KZQfkH2q1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: pWCubi_guJ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.695 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:27.863Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:28.011Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:28.011Z","userId":"68437077fdec3eecaf6e6d41","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.261 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:28.014Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'DytZnZX_DiqjvEewXiE12o6KZQfkH2q1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ADytZnZX_DiqjvEewXiE12o6KZQfkH2q1.DcaM2Vh5ivrnblP94bam7ryAVIU%2FSNDp217dOgS%2FAYU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/administrators [33m400[0m 57.183 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:28.646Z"}
  console.log
    CSRF token generation: {
      sessionID: 'WtDL2udHifDKGJxzxuic2R5OeThDgety',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: T0YpBMWC-v7AW0dD8E1wep6KvtppoTOM_XOk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: WtDL2udHifDKGJxzxuic2R5OeThDgety

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 67jihn1rGE...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.197 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:28.741Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:28.911Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:28.911Z","userId":"68437078fdec3eecaf6e6d5f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 170.694 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:28.914Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'WtDL2udHifDKGJxzxuic2R5OeThDgety',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWtDL2udHifDKGJxzxuic2R5OeThDgety.MrkQkSSmOGRvvZmc7%2Fojv4SRt2aADvdMZhKeMRyd3Tw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"68437079fdec3eecaf6e6d69","targetType":"administrator","timestamp":"2025-06-06T22:49:29.106Z","userId":"68437078fdec3eecaf6e6d5f","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 193.012 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:29.687Z"}
  console.log
    CSRF token generation: {
      sessionID: 'YbYz8taeh2GPRdQl-dp51OFvzYevPV3u',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fGL87SwR-1bk86sRrZG9YXeyc6eGmMUZognU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: YbYz8taeh2GPRdQl-dp51OFvzYevPV3u

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: rv9TT9QIIe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.925 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:29.783Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:29.920Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:29.921Z","userId":"68437079fdec3eecaf6e6d81","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 137.856 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:29.923Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'YbYz8taeh2GPRdQl-dp51OFvzYevPV3u',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AYbYz8taeh2GPRdQl-dp51OFvzYevPV3u.Hg7kiq7PzPUH3dJkTNy4A7rxpoSMS75Gx4aE1jxq0bQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m400[0m 56.335 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:30.555Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZKcnEWpO5EZGs6_4rk7LRVV7vgWrj-Rr',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Yxbu8ocU-Fd8Sa1Kuon1qq2YHzDnHBT9P5HI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZKcnEWpO5EZGs6_4rk7LRVV7vgWrj-Rr

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: SIu0yeaY_L...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.966 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:30.656Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:30.806Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:30.806Z","userId":"6843707afdec3eecaf6e6d9f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.564 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:30.809Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'ZKcnEWpO5EZGs6_4rk7LRVV7vgWrj-Rr',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AZKcnEWpO5EZGs6_4rk7LRVV7vgWrj-Rr.cmkJe9%2Fqal6AXV7ZOdeQSsO32vylz%2BwyApjuLCcWiEs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMBLEDY4UE64C15"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"6843707afdec3eecaf6e6da8","targetType":"operator","timestamp":"2025-06-06T22:49:30.978Z","userId":"6843707afdec3eecaf6e6d9f","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 169.368 ms - 656[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:31.552Z"}
  console.log
    CSRF token generation: {
      sessionID: 'xybOGoT6_uc746CQot0k0BwTTlr2NcJe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: QwaU0uqg-gRC6Csu7P33wU9u9DuOhCJZHrl4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: xybOGoT6_uc746CQot0k0BwTTlr2NcJe

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 2qMNdhZGu9...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.533 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:31.658Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.506 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:31.749Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.862 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:32.330Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Xgtie7eWOBNvLTWuKR36tlOxDlY70d6g',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: NRaARa6E-rAp9w70aMrCWrrsLYN8hgLcvE0E

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Xgtie7eWOBNvLTWuKR36tlOxDlY70d6g

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: XrddH4QiKg...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.856 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:32.431Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 58.932 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:32.519Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 111.397 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:33.204Z"}
  console.log
    CSRF token generation: {
      sessionID: 'miWtpAsQx2dVZFU651oll3SAVuDbxqGE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: xF0jHDcA-wbSTnsr91fgYFSWHIuQ-giFh_q8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: miWtpAsQx2dVZFU651oll3SAVuDbxqGE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: CXmR4XtTgG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 8.061 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:33.316Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:33.482Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 166.668 ms - 595[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:34.058Z"}
  console.log
    CSRF token generation: {
      sessionID: 'LztMserItVqp7u1ZF5Q9jHtFx0UOoi3e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WWnkcklP-sVmWyvJFK_FUHNEsclPC0CXy-Qw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: LztMserItVqp7u1ZF5Q9jHtFx0UOoi3e

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: _OkooibLx9...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.294 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:34.068Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.364 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:34.648Z"}
  console.log
    CSRF token generation: {
      sessionID: 'L_V-j-MvG-QDJJlRBPzk0wC6kQUh9Vnv',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3KEo5CSz-u4EOgNyBJNxcwQz_zU4VvL1jNig

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: L_V-j-MvG-QDJJlRBPzk0wC6kQUh9Vnv

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 0jtBuJmzlb...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.844 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:34.656Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.018 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:35.226Z"}
  console.log
    CSRF token generation: {
      sessionID: 'XWFz5HhkgvmKcV6LGPhTtDKWsqwHA_49',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: D3K3Nvek-p7RMYlkPJk5gujKwTxBHgN7ziys

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: XWFz5HhkgvmKcV6LGPhTtDKWsqwHA_49

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wCijgLOZq6...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.980 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:35.236Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 125.978 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:35.942Z"}
  console.log
    CSRF token generation: {
      sessionID: 'gB-unVabJFom09k7ZmUQxAcIq9D3q8US',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: dOjRoJ1I-yw2RWaVvDcMXViR-4CuN4KyYob8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: gB-unVabJFom09k7ZmUQxAcIq9D3q8US

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: K11JJp7Ab-...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.759 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:35.952Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 117.178 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (15.842 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1206 ms)
      ✓ should accept strong passwords during affiliate registration (1205 ms)
      ✓ should reject passwords containing username (641 ms)
      ✓ should reject passwords containing email (575 ms)
      ✓ should reject passwords with sequential characters (630 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (739 ms)
      ✓ should accept strong passwords for customer registration (890 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (885 ms)
      ✓ should accept strong passwords for administrator creation (1038 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (871 ms)
      ✓ should accept strong passwords for operator creation (997 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (778 ms)
      ✓ should accept strong passwords during password reset (872 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (853 ms)
      ✓ should handle case-insensitive username/email validation during registration (590 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (575 ms)
      ✓ should accept passwords with mixed character distribution (712 ms)
      ✓ should handle Unicode characters in passwords appropriately (701 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:37.911Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PQVOq-yBrVxj6UXqcG18NRgsDq0p0sEz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ljiuimkK-ktwzOfEhWCvV0Cv-cH8p5nl6yuw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PQVOq-yBrVxj6UXqcG18NRgsDq0p0sEz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: yrvDeQcbIO...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 9.331 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:38.728Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:38.883Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 155.573 ms - 509[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:39.424Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd--tfWdkr9_xOpG3PiV7r-7L2ntAaGlO',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: tlspSl6Y-VABnvoVOuEELYBcUrVJzpwgR3eQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: d--tfWdkr9_xOpG3PiV7r-7L2ntAaGlO

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: CJcx7kRuZR...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.920 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:39.656Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-06T22:49:39.738Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 81.893 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:40.208Z"}
  console.log
    CSRF token generation: {
      sessionID: 'GoiCYeR77EZjaxl47_xB9TRubRveZIfv',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: OnRLNOq3-u7AV_2MNoc2nc3wrJkN7kUvbVks

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: GoiCYeR77EZjaxl47_xB9TRubRveZIfv

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: OgGSaIFok_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.217 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:40.351Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-06T22:49:40.379Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 27.846 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:40.839Z"}
  console.log
    CSRF token generation: {
      sessionID: 'HfvIhZlRJprmB9H9fpn62UjV9N634CZw',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Blx77wwi-ZYlosYJ4JstodxCz2_6EQKqqPKY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: HfvIhZlRJprmB9H9fpn62UjV9N634CZw

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: VwwdREUDUd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.869 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:41.098Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:466:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:467:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:468:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:501:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 148.968 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:41.720Z"}
  console.log
    CSRF token generation: {
      sessionID: 'OdbNKHEFtY95kFCpsrw3gz7jqNiJot-T',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: EV9lANRn-AxuIwOxIPTaKE_g1jBNSbKPonUM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: OdbNKHEFtY95kFCpsrw3gz7jqNiJot-T

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: tILnZQrmLy...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.965 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:41.956Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:42.105Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 149.333 ms - 509[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:42.109Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.328 ms - 99[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:42.602Z"}
  console.log
    CSRF token generation: {
      sessionID: '-pldtCfCGYglGM8iT88t9ctPNqVj7teY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: CbTyZ9aA-Jt72jpKvMojPuHY_l5djGvGtSuI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: -pldtCfCGYglGM8iT88t9ctPNqVj7teY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: dq3HkoEFlA...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.994 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:42.740Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.428 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:43.213Z"}
  console.log
    CSRF token generation: {
      sessionID: 'BV08-XFzGHYrSJ6MiJxCi7p9lByetBmZ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Wb4Ua6Db-f2O379kySKLpkl0oNC_OIwpjEfs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: BV08-XFzGHYrSJ6MiJxCi7p9lByetBmZ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: xK4pkWsD0N...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.043 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:43.350Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.182 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:43.810Z"}
  console.log
    CSRF token generation: {
      sessionID: 'NcXcOpjcCVTp0VQ_dd-T8Le4IKIPNnI1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZQOC4X8f-bGtzeNjqQva8x9Q5nJg0urA7Gow

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: NcXcOpjcCVTp0VQ_dd-T8Le4IKIPNnI1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: kbRZpTnXGu...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.995 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:44.067Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:44.225Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 157.743 ms - 509[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:44.228Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 122.322 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:44.817Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ASh-_Pa2pAlKsn53zdQclFcJCVBEC7UM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: wvDknL5G-FBeMjTyjlk_Jbsl5C1Z0XS_h7oA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ASh-_Pa2pAlKsn53zdQclFcJCVBEC7UM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Xp0erQN9If...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.910 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:44.960Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.700 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:45.426Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iayeEIhmTcGnh2jk7FEyKp_YfIqa7kgU',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: NJlX97JF-YPvNjn5xe1tC1jYY-8W3AUB-Hno

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iayeEIhmTcGnh2jk7FEyKp_YfIqa7kgU

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: mVdCut_dH_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.971 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:45.687Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.269 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:46.184Z"}
  console.log
    CSRF token generation: {
      sessionID: 'i5WsfaiZpVs0d_D15YhdRkzCXCAOz5Pz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: jRI3Sfxs-OzZfZnHvFEycpvboR3-XF4gNLfE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: i5WsfaiZpVs0d_D15YhdRkzCXCAOz5Pz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 78FQ9kKqkr...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.198 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:46.413Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:46.556Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.809 ms - 509[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:46.559Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'i5WsfaiZpVs0d_D15YhdRkzCXCAOz5Pz',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ai5WsfaiZpVs0d_D15YhdRkzCXCAOz5Pz.cf8YsfnjxZu7iKWul7zKJfiX9jQT6RtbZpTpdoQ9c3A',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.857 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:46.654Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.258 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:46.687Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.154 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.182Z"}
  console.log
    CSRF token generation: {
      sessionID: 'zn0S7P9RebE1e8JPhFXW4NSiT61A40Dz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: UTmxb4cO-qT_FPX28bNzYUXm9pUJIhtsi4bU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: zn0S7P9RebE1e8JPhFXW4NSiT61A40Dz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: I-hvnXOE-s...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.060 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.409Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:47.567Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 158.604 ms - 509[0m
  console.log
    Got refresh token: d7ddad20083e5bf94a8d4a9561da25fb249dbdcb616249f9278b01c1a66ca264137b4ec28f93d5d9

      at Object.log (tests/integration/auth.test.js:586:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:600:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.575Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.577Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.579Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.581Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:47.583Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.467 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 32.201 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.585 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.125 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 120.819 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NDM3MDhiMjg0OWI1M2FiYjBlNTBjNyIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc0OTI1MDE4NywiZXhwIjoxNzQ5MjUzNzg3LCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.J_-DG33nNVGB9cun5XseoIWz2LZTBesjUaCz0WCBdrA',
          refreshToken: '1f203975fd6dbd64b24ede04d8980e0b53d27e2194c777584eb6314b1189c889fcdcbc3fc1d5da70'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:602:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:48.166Z"}
  console.log
    CSRF token generation: {
      sessionID: 'L6OVT9F78uzEq4-q_2msvmNW684k413g',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cEh8LonB-6mOuxZouR1H1EWnUD6Wd-ZjWaT4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: L6OVT9F78uzEq4-q_2msvmNW684k413g

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgAqX3FArH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.130 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:48.420Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:48.561Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 140.515 ms - 512[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.664Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:49.806Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.175 ms - 512[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.808Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.464 ms - 99[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.838Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.340 ms - 99[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.870Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'L6OVT9F78uzEq4-q_2msvmNW684k413g',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AL6OVT9F78uzEq4-q_2msvmNW684k413g.RuyMlFW%2FH6uNouNBPraYutx5uR563j3uoKjJ2J0pWW0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/auth/logout [32m200[0m 94.912 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.967Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.017 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:49.998Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.480 ms - 99[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:50.028Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'L6OVT9F78uzEq4-q_2msvmNW684k413g',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AL6OVT9F78uzEq4-q_2msvmNW684k413g.RuyMlFW%2FH6uNouNBPraYutx5uR563j3uoKjJ2J0pWW0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/auth/logout [32m200[0m 89.656 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:50.119Z"}
[0mGET /api/v1/auth/verify [33m401[0m 39.257 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:50.629Z"}
  console.log
    CSRF token generation: {
      sessionID: '-K814JcVw9IBzROuT2FFVHf5n7GjA32n',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: qB9ly5E8-yFVSUKZ_N6nK4pKcv41z_s1aDtQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: -K814JcVw9IBzROuT2FFVHf5n7GjA32n

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: EteysY3aZk...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.992 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:50.859Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:51.017Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:51.018Z","userId":"6843708e2849b53abb0e511b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 158.512 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:51.509Z"}
  console.log
    CSRF token generation: {
      sessionID: '8KFWcCRyKcNWt9Z3KRo34bXKw3-Wdm8Q',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: xwPeqSSQ-0YiEgw5c_qQJRHCHSlsCDzK_We4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 8KFWcCRyKcNWt9Z3KRo34bXKw3-Wdm8Q

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1ErEhCif2G...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.217 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:51.728Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-06T22:49:51.843Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 115.907 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:52.310Z"}
  console.log
    CSRF token generation: {
      sessionID: 'v3IBNkUswHz9fSun2ulETZkDdkx_nNcS',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Zd2HoynC-lIPfwuJXIewjJioMKAK41YW5JPw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: v3IBNkUswHz9fSun2ulETZkDdkx_nNcS

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: x23w2Qk9-r...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.325 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:52.540Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-06T22:49:52.568Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.219 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:53.041Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dyUbLB9mXQUjHYskaf5wFRsF5Ms_yIoS',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fT7Bdx6N-Ez17sUvU6WMY9GEWZzOaKZyBsro

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dyUbLB9mXQUjHYskaf5wFRsF5Ms_yIoS

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: q9n68Es913...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.191 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:53.340Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:53.483Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:49:53.483Z","userId":"684370912849b53abb0e516f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.236 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:53.962Z"}
  console.log
    CSRF token generation: {
      sessionID: '93flNghZM7zwN4Tajpv5pwpBflPhMt7D',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9CxilL2g-lpay7OyW-_rfMuSkd_u6lJnNUew

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 93flNghZM7zwN4Tajpv5pwpBflPhMt7D

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ArZYJVLjRW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.851 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:54.284Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-06T22:49:54.399Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 115.117 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:54.867Z"}
  console.log
    CSRF token generation: {
      sessionID: 'hKmaeU7t-uJCzIryrDuHnlJi-ligR81-',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: mp7YLmHJ-qA254r_eUvmG-rJ0SvBAsRZkfLo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: hKmaeU7t-uJCzIryrDuHnlJi-ligR81-

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: TXSWrhRZ09...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.120 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:55.177Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-06T22:49:55.205Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.242 ms - 82[0m
PASS tests/integration/auth.test.js (19.013 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1541 ms)
      ✓ should fail with invalid credentials (784 ms)
      ✓ should fail with non-existent username (630 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (880 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (882 ms)
      ✓ should fail with invalid token (611 ms)
      ✓ should fail with missing token (597 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1006 ms)
      ✓ should fail with invalid refresh token (609 ms)
      ✓ should fail with expired refresh token (758 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (997 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (984 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2462 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (880 ms)
      ✓ should fail with invalid administrator credentials (800 ms)
      ✓ should fail when administrator is inactive (731 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (921 ms)
      ✓ should fail with invalid operator credentials (905 ms)
      ✓ should fail when operator is inactive (807 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.099Z"}
  console.log
    CSRF token generation: {
      sessionID: 'V-TPhkwJEo7k-7GjR0ZtsXh_nPsca7HT',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: G2iLh5c7-iUuIqb1ZeY-PCwkiWvngCa0ip4A

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: V-TPhkwJEo7k-7GjR0ZtsXh_nPsca7HT

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: sANhyIeyoD...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.599 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.202Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:57.364Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:57.373Z","userId":"68437095831b431e5a0b2c97","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 171.635 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.380Z"}
  console.log
    CSRF token generation: {
      sessionID: 'It0Z5tAzKG_Fq093_rclD9saupyU5Qc9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: U0yAEHK6-mvs6C3fhsiN5Zd2Ztq-ypKjJ-vA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: It0Z5tAzKG_Fq093_rclD9saupyU5Qc9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: G0CPAwouoF...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 25.892 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.523Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:57.683Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:49:57.683Z","userId":"68437095831b431e5a0b2ca7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 159.797 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.686Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ByxFfSwglqyqXTMWwctr7rYbTXHEGiZ8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 1xGrqVre-dloaSwCDZEoW1I7cJe85Beh0--U

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ByxFfSwglqyqXTMWwctr7rYbTXHEGiZ8

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: IHfDRV7HN1...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.003 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:57.842Z"}
[0mGET /api/v1/operators [32m200[0m 168.766 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:58.672Z"}
  console.log
    CSRF token generation: {
      sessionID: 'XISeOEvatfFxuPN1m1D2mgY4mxbaTPrF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: v92Y8CsF-vzPl89VaP_xUdwJ9m8HrJZKBLqs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: XISeOEvatfFxuPN1m1D2mgY4mxbaTPrF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: K-4kuUvDkl...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.232 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:58.769Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:58.912Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:49:58.912Z","userId":"68437096831b431e5a0b2ccf","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.924 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:58.915Z"}
  console.log
    CSRF token generation: {
      sessionID: '6UvNGaslLr_Z-z0OmSEdVgV369DOpYh5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: UhD9f7Jh-TnpT7dKDoffLAnu-DU2Hhhsoft8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 6UvNGaslLr_Z-z0OmSEdVgV369DOpYh5

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: G22voLc4CJ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.096 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:59.019Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:49:59.172Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:49:59.172Z","userId":"68437096831b431e5a0b2cd5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.283 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:59.175Z"}
  console.log
    CSRF token generation: {
      sessionID: 'gMqoQNwvJ9D4LWpFZLYB6guqt7g_mNXI',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: I6SBlZJG-XyYwPd8uR6mLsXgcLnU-ltZlHuo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: gMqoQNwvJ9D4LWpFZLYB6guqt7g_mNXI

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 3K4H7NbZvf...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.817 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:59.266Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 140.223 ms - 554[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:49:59.975Z"}
  console.log
    CSRF token generation: {
      sessionID: 'A5Gb0UaKYD6w7YW7D4raWDPSWwemUa8j',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 4sDCMAm3-dtZY-zZqNW0N2vjozjlJeetTVWg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: A5Gb0UaKYD6w7YW7D4raWDPSWwemUa8j

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 47pquYUL1s...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.945 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:00.077Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:00.238Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:00.238Z","userId":"68437097831b431e5a0b2cf7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.337 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:00.241Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iPgzdq9_aFde_qeiUZ8X38wtsmXIm7M8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9916TSaY-Yx0u6zHHylQdc2fpLg0ZDyTn05Y

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iPgzdq9_aFde_qeiUZ8X38wtsmXIm7M8

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: cMctpgCRVH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.451 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:00.344Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:00.498Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:00.499Z","userId":"68437098831b431e5a0b2cfd","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 154.903 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:00.502Z"}
  console.log
    CSRF token generation: {
      sessionID: 'RXwC4zff9aaBO6GHUQSBsJD0hkMVXe0d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3apQ0bO9-rpr_jXaxuzKJr-dvNvrsv6nneX4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: RXwC4zff9aaBO6GHUQSBsJD0hkMVXe0d

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: I-G2UijP0I...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.394 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?workStation=Station%20A {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:00.662Z"}
[0mGET /api/v1/operators?workStation=Station%20A [32m200[0m 139.141 ms - 973[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.352Z"}
  console.log
    CSRF token generation: {
      sessionID: 'VQEflSvPabeMq255P5YjMPWb-Y9fYATX',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 33JvkXSf-nqXbWVGLp4tRAI6dV9lV8fuM1Ms

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: VQEflSvPabeMq255P5YjMPWb-Y9fYATX

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Q4gODrDO3i...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.078 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.452Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:01.603Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:01.603Z","userId":"68437099831b431e5a0b2d21","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.157 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.606Z"}
  console.log
    CSRF token generation: {
      sessionID: 'CE7pxoHXYRTgmH08VkytSfMMWSDEs9S0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: UlB7zg4C-PFGGpIOl0rnN8wWay_LDg8RNQfc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: CE7pxoHXYRTgmH08VkytSfMMWSDEs9S0

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: fdGnRNuuW3...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.966 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.706Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:01.856Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:01.857Z","userId":"68437099831b431e5a0b2d27","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.607 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.860Z"}
  console.log
    CSRF token generation: {
      sessionID: 'IIdfueyWBK9nVI-nY_vN-fUR5MKvshI6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ORegXre4-Ffib8rb_4fndQe4u2_kx9Zjz3Ac

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: IIdfueyWBK9nVI-nY_vN-fUR5MKvshI6

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: SlQJSZt34H...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.874 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:01.965Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 111.185 ms - 554[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:02.642Z"}
  console.log
    CSRF token generation: {
      sessionID: '5ChiFLLkQgUt3HvabyPH8Q1WyNK_Wld4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3i8zDzVS-V9uVsTezcP6FnOfZn-ewWg3rhjg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5ChiFLLkQgUt3HvabyPH8Q1WyNK_Wld4

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: PkBfzExs-J...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.522 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:02.772Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:02.920Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:02.920Z","userId":"6843709a831b431e5a0b2d48","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.953 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:02.923Z"}
  console.log
    CSRF token generation: {
      sessionID: 'K-LWxHSiGCSF_usPGT5Ixg0PM3GfsLhE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: bmaO3cuY-6sr8LnGMdHQLELyZAK8u-YCeLtg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: K-LWxHSiGCSF_usPGT5Ixg0PM3GfsLhE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -IsLMDPxfe...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.067 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:03.014Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:03.155Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:03.155Z","userId":"6843709a831b431e5a0b2d4e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.259 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:03.158Z"}
  console.log
    CSRF token generation: {
      sessionID: 'tOt7wLc8vV5M6S1fSh07whAOdtlTzQv6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: jbJzmf8n-sdmveSa9soypST7BibKq5xfob6w

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: tOt7wLc8vV5M6S1fSh07whAOdtlTzQv6

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: iC2jQK_5J3...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.827 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:04.226Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 147.431 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:04.950Z"}
  console.log
    CSRF token generation: {
      sessionID: '4tZcov4f4fD080lSRNWwADVTmhltodVT',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: aHNbLPmb-Q7zNIWqbQPydxbQAvu3QU45TBLY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 4tZcov4f4fD080lSRNWwADVTmhltodVT

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: fg5aTohHKr...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.616 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:05.046Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:05.192Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:05.192Z","userId":"6843709c831b431e5a0b2d8d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.612 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:05.195Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Cbm7uPBvprAPlh0yRf-y8l1wJ5aklZ2R',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: w6yaWoRN-MHFZZYag9xSS3v0g67DhUWKe0EM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Cbm7uPBvprAPlh0yRf-y8l1wJ5aklZ2R

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: gux-KIrIgp...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.191 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:05.314Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:05.461Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:05.462Z","userId":"6843709d831b431e5a0b2d93","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.146 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:05.464Z"}
  console.log
    CSRF token generation: {
      sessionID: 'V8FGd3eklazkFp40CluScxbmNtnd4yVu',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: bkQI8j6i-4xMkglKyY2TnogAwnrUmq2ti9xc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: V8FGd3eklazkFp40CluScxbmNtnd4yVu

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 8VdkLolnW8...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.782 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:05.472Z"}
[0mGET /api/v1/operators [33m401[0m 0.914 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.043Z"}
  console.log
    CSRF token generation: {
      sessionID: 'IXz3jjLa5XJKJsMgeLqBVcbNPoWhZ0hR',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kIakAB5j-PJC0cMpL0Fo3oG-IZrnDEsMxiYs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: IXz3jjLa5XJKJsMgeLqBVcbNPoWhZ0hR

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 5_36D7EBjS...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.219 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.138Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:06.285Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:06.285Z","userId":"6843709e831b431e5a0b2dae","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.812 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.288Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dr4FtFbzBnSV91F7O--HDaa6jzNbibLI',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 7BgelgOy-2R2IVuk5OVaFm6cPwbfSUNW9Pb0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dr4FtFbzBnSV91F7O--HDaa6jzNbibLI

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Ww2rkBaXp-...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.455 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.381Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:06.527Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:06.528Z","userId":"6843709e831b431e5a0b2db4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.747 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.531Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dFdEhGrt4Vw9WJont94a0nlnIB_NMno2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rggh4aCI-cBTPuGSvBBVjmvYdbIhJH2dEjFA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dFdEhGrt4Vw9WJont94a0nlnIB_NMno2

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nrQh8kSJKd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.582 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.625Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:06.770Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:06.771Z","userId":"6843709e831b431e5a0b2dba","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.110 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:06.773Z"}
[0mGET /api/v1/operators [33m403[0m 55.693 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.395Z"}
  console.log
    CSRF token generation: {
      sessionID: 'tow_2jIXrHkxukVMrvGWcvA6BTLr82nc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: OvEYc3GJ-Fmfi_vJoywCvq0e9gy_dXufTbNg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: tow_2jIXrHkxukVMrvGWcvA6BTLr82nc

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 4TCkFAjHQV...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.839 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.492Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:07.638Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:07.638Z","userId":"6843709f831b431e5a0b2dd7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.166 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.641Z"}
  console.log
    CSRF token generation: {
      sessionID: 'J0wH0MrKkOIawhRTRb217bwx38JVx9pO',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3n5cFgoP-0iAelDmlr2OxBYICVOCGkPNXcLM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: J0wH0MrKkOIawhRTRb217bwx38JVx9pO

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: fOpDNMxr12...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.538 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.737Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:07.896Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:07.897Z","userId":"6843709f831b431e5a0b2ddd","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 159.591 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.900Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iEFXPlHmLoRJeCRz2dcwO0vu3YSGapTE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: gwU3qtzh-rxWaKnn_kV6qLhuDt-nsBmai2O0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iEFXPlHmLoRJeCRz2dcwO0vu3YSGapTE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: iXoaxRJHDL...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.616 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/6843709f831b431e5a0b2de3 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:07.994Z"}
[0mGET /api/v1/operators/6843709f831b431e5a0b2de3 [32m200[0m 170.798 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:08.734Z"}
  console.log
    CSRF token generation: {
      sessionID: 'yuhpwoGaaikvgCZJNHhy8ez__3p5bJPN',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rKPehOpd-dD906s3Fl7aAkp5xdqDGkmQ_fw8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: yuhpwoGaaikvgCZJNHhy8ez__3p5bJPN

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: LySlweHFKa...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.512 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:08.827Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:08.975Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:08.975Z","userId":"684370a0831b431e5a0b2e00","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.909 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:08.978Z"}
  console.log
    CSRF token generation: {
      sessionID: 'MlzQa39Fdq40aQQHzxnDQLJouD-qOReF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: zjqq05lp-zISZ2MGycs0Iu_SjwdNyjxml0Ms

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: MlzQa39Fdq40aQQHzxnDQLJouD-qOReF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: irXjpVmMVL...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.536 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:09.074Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:09.221Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:09.222Z","userId":"684370a0831b431e5a0b2e06","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.916 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:09.225Z"}
  console.log
    CSRF token generation: {
      sessionID: 'uzi3_kl65lDmtSwstvLzmxnOPZB0v8L9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WERNtVRV-T7wVPJ6okYBLzU241gr-n9t6Z5I

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: uzi3_kl65lDmtSwstvLzmxnOPZB0v8L9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Tsw6FR6evW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.985 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684370a0831b431e5a0b2e06 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:09.233Z"}
[0mGET /api/v1/operators/684370a0831b431e5a0b2e06 [32m200[0m 84.781 ms - 227[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:09.904Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Um6OSXFar8IM3a4rujKJqUFBfKDMsXXH',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: o7zus2Pp-zcoEnefKpHcP9QMnVeTHKsgVkc8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Um6OSXFar8IM3a4rujKJqUFBfKDMsXXH

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: f1j9kN-_pA...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.951 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:09.992Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:10.140Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:10.140Z","userId":"684370a1831b431e5a0b2e24","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.670 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:10.144Z"}
  console.log
    CSRF token generation: {
      sessionID: 'N6Gj5YdRxU2pAM6yKCakraBYNiwDKeXy',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6Q9Jsqpk-tSZDzdD1957rP9ZcbybTVLM2zgU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: N6Gj5YdRxU2pAM6yKCakraBYNiwDKeXy

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: rwu4kx5SiG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.589 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:10.245Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:10.397Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:10.397Z","userId":"684370a2831b431e5a0b2e2a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.104 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:10.402Z"}
  console.log
    CSRF token generation: {
      sessionID: '4XB0E5ztpLzmcSOM2LDQiRpoBsjrOHcK',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: skcBVkQV-L0qXhzfUz-Bx1EI38HnIC1MQLwo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 4XB0E5ztpLzmcSOM2LDQiRpoBsjrOHcK

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: unm6c3r1ol...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.452 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684370a2831b431e5a0b2e30 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:10.500Z"}
[0mGET /api/v1/operators/684370a2831b431e5a0b2e30 [33m403[0m 57.451 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.120Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Bmk6ZCRVYRwJMHtdJ-FwUVNp8mf65cgm',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 525EVXq4-piicRAGvlkPDiW7wuAkr9oVLcg0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Bmk6ZCRVYRwJMHtdJ-FwUVNp8mf65cgm

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: WmXHOrzdAQ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.802 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.218Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:11.364Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:11.364Z","userId":"684370a3831b431e5a0b2e49","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.279 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.367Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iRk0DUR1as7R2kDUZzJxVZhUBz1BLwYY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ufCJ3fD3-k1EDzvY08uOm37S6E5nCc5NbKso

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iRk0DUR1as7R2kDUZzJxVZhUBz1BLwYY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: kDm-N1GLp3...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.731 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.459Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:11.635Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:11.635Z","userId":"684370a3831b431e5a0b2e4f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 175.773 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.637Z"}
  console.log
    CSRF token generation: {
      sessionID: '-Pim1i_PBiwoM9nN8QCnNZ6Oe_a26LGY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Pbh9A3Jg-SicTeZCYHQWPHxRpu6yqzzB5zQk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: -Pim1i_PBiwoM9nN8QCnNZ6Oe_a26LGY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1kx5IdjWph...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.934 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/684370a3831b431e5a0b2e55 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:11.644Z"}
[0mGET /api/v1/operators/684370a3831b431e5a0b2e55 [33m404[0m 109.931 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.353Z"}
  console.log
    CSRF token generation: {
      sessionID: '9qL6mEYC_Lk7KR3dUQcv_0AMNwuyjyEI',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: VbVLDYGM-1ZdFMd5tbo4SzqavKZus1G-OYQQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 9qL6mEYC_Lk7KR3dUQcv_0AMNwuyjyEI

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ohUZjXopcD...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.193 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.450Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:12.596Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:12.597Z","userId":"684370a4831b431e5a0b2e6f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.006 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.600Z"}
  console.log
    CSRF token generation: {
      sessionID: 'x1M-kIRxzVsyI0itFckKynuPpCsDbkgD',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: iGQJLfr8-ML7YitfgtgkxP2S3rBEF2U_9lKM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: x1M-kIRxzVsyI0itFckKynuPpCsDbkgD

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: RpYr0WC97p...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.979 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.697Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:12.850Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:12.850Z","userId":"684370a4831b431e5a0b2e75","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.895 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.853Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PODB7wtqj-LCdnSqIHSeSjCasJID4Uqd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: yZdtCEox-04dC9f-tXtjxChG30C7J9bcd7Fo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PODB7wtqj-LCdnSqIHSeSjCasJID4Uqd

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wvATyZUnt3...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.260 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:12.864Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'x1M-kIRxzVsyI0itFckKynuPpCsDbkgD',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ax1M-kIRxzVsyI0itFckKynuPpCsDbkgD.PW4lF1Bt2f2ycjpOo3lZEtaeRnaSaRZE%2FRftJC9CrEw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMBLEEUL22D9BA2"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"684370a4831b431e5a0b2e7e","targetType":"operator","timestamp":"2025-06-06T22:50:13.033Z","userId":"684370a4831b431e5a0b2e6f","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 169.935 ms - 475[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:13.037Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:13.184Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMBLEEUL22D9BA2","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:13.184Z","userId":"684370a4831b431e5a0b2e7e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.488 ms - 647[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:13.759Z"}
  console.log
    CSRF token generation: {
      sessionID: 'tSrau7AB9SGpPrgMa3vjHU2nQSuQpbCi',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: JfvoOQEG-RxtPdrJ5ojGrPXlvxMsGYFjnLs0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: tSrau7AB9SGpPrgMa3vjHU2nQSuQpbCi

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: g9YwcdVQqo...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.976 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:13.858Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:14.003Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:14.003Z","userId":"684370a5831b431e5a0b2e99","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.020 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:14.006Z"}
  console.log
    CSRF token generation: {
      sessionID: '2SeeJknHnIHKw6xH_0zaXJv1eOURjPyE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: yrDOycUr-G4n5CCq-bKsAwQRFFGBnmUoBrdw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 2SeeJknHnIHKw6xH_0zaXJv1eOURjPyE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: OUFL0Bd2HR...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.091 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:14.104Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:14.259Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:14.259Z","userId":"684370a6831b431e5a0b2e9f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.607 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:14.264Z"}
  console.log
    CSRF token generation: {
      sessionID: '2yBd76APLdHYqlY5NgHcvkYo4mnCjFz2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: dILmP3VM--3xddGPnQCN4qTqIGEL8esbJ1Mw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 2yBd76APLdHYqlY5NgHcvkYo4mnCjFz2

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: xm8RQ8dZQV...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.889 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:14.273Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '2SeeJknHnIHKw6xH_0zaXJv1eOURjPyE',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2SeeJknHnIHKw6xH_0zaXJv1eOURjPyE.sJa5Crq%2FUUXSSNF%2BZG2IBcqPV4z8gBW0aNapNz9nGGA',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m400[0m 60.903 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:14.900Z"}
  console.log
    CSRF token generation: {
      sessionID: 'nVbRePu0l681tyaesb45a0dbeRHSaNwM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 8JETu5cM-BwdtRM0XsML_9R-M5Eln-ZegCu4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: nVbRePu0l681tyaesb45a0dbeRHSaNwM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: JBcJm8CDNx...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.558 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:15.027Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:15.175Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:15.175Z","userId":"684370a6831b431e5a0b2ebc","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.322 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:15.178Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZsaiuWu9AT8R3h8DjN-CTVHsmAjQ3arD',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: CAPRy9p0-xgbxy9k6Vxk-FGEfIeZfumNUD2s

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZsaiuWu9AT8R3h8DjN-CTVHsmAjQ3arD

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: l0OGhWECUH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.259 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:15.271Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:15.431Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:15.431Z","userId":"684370a7831b431e5a0b2ec2","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 160.161 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:15.434Z"}
  console.log
    CSRF token generation: {
      sessionID: 'VpdjvblvRduqSMErtvsn--RYddGvX2yX',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: B1ER2iL6-1T4PDKhmNCm0MULmU2T0LSxgTd4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: VpdjvblvRduqSMErtvsn--RYddGvX2yX

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nIU0fwZ02T...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.386 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:15.442Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'ZsaiuWu9AT8R3h8DjN-CTVHsmAjQ3arD',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AZsaiuWu9AT8R3h8DjN-CTVHsmAjQ3arD.TpeaTHXfHckgdXwafaiUJlh4e2hWS8YvdMf4094ZID8',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m400[0m 57.085 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.068Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pb-DFbC0JE9SkMDaOJ9343nskCE13ARn',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: arCi6j8U-LvEqLzIfTVnGCsBZHdw0uxLLTJc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pb-DFbC0JE9SkMDaOJ9343nskCE13ARn

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: dhMy4kxdDc...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.289 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.158Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:16.302Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:16.302Z","userId":"684370a8831b431e5a0b2edf","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.350 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.306Z"}
  console.log
    CSRF token generation: {
      sessionID: 'H6b8ZmplB27KKNLGjcTHbk_pvfupd2xw',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YB59Vzqr-4KGLjwyk4qltrgp-8zQblSA5YEw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: H6b8ZmplB27KKNLGjcTHbk_pvfupd2xw

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: KKot7DtNMt...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 16.844 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.428Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:16.604Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:16.604Z","userId":"684370a8831b431e5a0b2ee5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 176.339 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.607Z"}
  console.log
    CSRF token generation: {
      sessionID: 'StnOVaIxXsxOYM7WXZO3FKFlK-zvqIP4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: GqgTHLDh-zetxc34BLT6tJIrjwat7MM83dSQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: StnOVaIxXsxOYM7WXZO3FKFlK-zvqIP4

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 5et7lZ4Q4P...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.605 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:16.619Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'H6b8ZmplB27KKNLGjcTHbk_pvfupd2xw',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AH6b8ZmplB27KKNLGjcTHbk_pvfupd2xw.ktDsroLuZ6d%2B7AVscL6aeZq9389qy1r%2BxtDCRsmS8DU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m400[0m 56.902 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.242Z"}
  console.log
    CSRF token generation: {
      sessionID: 'BZLEX3p7AlItFntfPq2PLtZWc3If6MWV',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: e8lw0QYS-JbOe6VvH6AaOzbYhkCyB0Kwp2V0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: BZLEX3p7AlItFntfPq2PLtZWc3If6MWV

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: JWHvSuUO4v...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.586 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.336Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:17.488Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:17.488Z","userId":"684370a9831b431e5a0b2f02","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.807 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.491Z"}
  console.log
    CSRF token generation: {
      sessionID: 'g862vCHOS2EYoZRjv514_VbRVU1gssSA',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: vpZlRdfK-gPgVxL0TPlKGVtCpqHdayInMzD8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: g862vCHOS2EYoZRjv514_VbRVU1gssSA

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ybXw4j9s2m...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.525 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.595Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:17.751Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:17.752Z","userId":"684370a9831b431e5a0b2f08","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 157.245 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.754Z"}
  console.log
    CSRF token generation: {
      sessionID: '5N4opIuc0CRLRliyviVNcmSHpv0z5ilP',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: jV1lAPe1-lIPS4b7VoVlsGKwN91vDggr291w

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5N4opIuc0CRLRliyviVNcmSHpv0z5ilP

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 8BpHrfN_Zg...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.199 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:17.762Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'g862vCHOS2EYoZRjv514_VbRVU1gssSA',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ag862vCHOS2EYoZRjv514_VbRVU1gssSA.he6IKEM4BXJ7rOuGjIoijXtg3PMHWmu144BJACq0I2U',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m409[0m 83.774 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:18.404Z"}
  console.log
    CSRF token generation: {
      sessionID: '1KxJGBFfystV9kyfWKzXlPHhtqIZryiJ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: OupO9oqt-NrWB33bJrMMZLXwX2KWKGH2RAf8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 1KxJGBFfystV9kyfWKzXlPHhtqIZryiJ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: v1-mPQzqwZ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.708 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:18.512Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:18.657Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:18.658Z","userId":"684370aa831b431e5a0b2f26","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.167 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:18.661Z"}
  console.log
    CSRF token generation: {
      sessionID: 'FvMLgCSCcuNs8NiT5vld-fzE2jL9GFY3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: OChVapPx-kBQToNhdE6WBifTgog59u0h5e8k

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: FvMLgCSCcuNs8NiT5vld-fzE2jL9GFY3

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: cjdGp7veeN...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.857 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:18.752Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:18.898Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:18.898Z","userId":"684370aa831b431e5a0b2f2c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.109 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:18.901Z"}
  console.log
    CSRF token generation: {
      sessionID: 'vc8TpArSB5qRMpfNKXg8A2nctXT_8e8v',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cKe3uQ3z-OPSV08EkImYkbk2PQLnNTObGcKs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: vc8TpArSB5qRMpfNKXg8A2nctXT_8e8v

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7dKfYYV9fu...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.477 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:19.015Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:19.172Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:19.172Z","userId":"684370aa831b431e5a0b2f32","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.334 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:19.175Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '1KxJGBFfystV9kyfWKzXlPHhtqIZryiJ',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1KxJGBFfystV9kyfWKzXlPHhtqIZryiJ.5GKdDcnm0gne4rSpQlbAlwc4rneS572hhxd6DdCmevw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/operators [33m403[0m 60.199 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:19.804Z"}
  console.log
    CSRF token generation: {
      sessionID: '9jbFkh3B81ohWqLJEJyv63_Y_TY4cIf_',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: d8ufuPKm-FFeHQoXfRPEe955GWceXkDTk59Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 9jbFkh3B81ohWqLJEJyv63_Y_TY4cIf_

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: xrpl2WQYl_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.409 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:19.905Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:20.055Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:20.055Z","userId":"684370ab831b431e5a0b2f4f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.570 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:20.058Z"}
  console.log
    CSRF token generation: {
      sessionID: 'k0BsQC45QzouPUvQO8LrWs_Wz_gFQF7X',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: DAz3LEPe-PK-ni0f_D149WT2VxqdLm8OlzDs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: k0BsQC45QzouPUvQO8LrWs_Wz_gFQF7X

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: K-vzBMvko8...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.611 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:20.161Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:20.305Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:20.305Z","userId":"684370ac831b431e5a0b2f55","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.718 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:20.308Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dKB3_64LUcS-j8vYy9h_lW0fqeQIva4B',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: z757ghyV-0ECCEUkxNVBi3tazteX1Gr2Rgo8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dKB3_64LUcS-j8vYy9h_lW0fqeQIva4B

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: vOjTRZfj1v...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.415 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370ac831b431e5a0b2f5b {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:20.406Z"}
  console.log
    CSRF check for: /api/v1/operators/684370ac831b431e5a0b2f5b {
      sessionID: 'k0BsQC45QzouPUvQO8LrWs_Wz_gFQF7X',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ak0BsQC45QzouPUvQO8LrWs_Wz_gFQF7X.gTx0JrC0mo3zgpAckHZZMwNTeT4I8IUZteUMC5rpRpU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00","workStation":"Station Y"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684370ac831b431e5a0b2f5b","targetId":"684370ac831b431e5a0b2f5b","targetType":"operator","timestamp":"2025-06-06T22:50:20.569Z","userId":"684370ab831b431e5a0b2f4f","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684370ac831b431e5a0b2f5b [32m200[0m 162.921 ms - 468[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.133Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZgGfr1eisDbDTPUY4Ht1gRwQ0rI3iikh',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6KwYFZS0-amruMyIiIA2ozVu6JUFhjzpU3xw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZgGfr1eisDbDTPUY4Ht1gRwQ0rI3iikh

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: V8K0FWHrWm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.866 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.228Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:21.367Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:21.368Z","userId":"684370ad831b431e5a0b2f77","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.240 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.371Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fP_t1D8BLvkxjpatDoXQY-76xUNJnx2F',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: RlzdGnaS-CDPTvo2cPETAyV-CI72nyy5lrtw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: fP_t1D8BLvkxjpatDoXQY-76xUNJnx2F

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: n3jfelTJwa...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.709 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.483Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:21.632Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:21.632Z","userId":"684370ad831b431e5a0b2f7d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.484 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.635Z"}
  console.log
    CSRF token generation: {
      sessionID: 'EjQhJOPn3CJF_q6uAJoql3IZ2ftuaUtt',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: nu2xzDDl-6fwFXBZ7M-Y8_an66smQLn3cHQk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: EjQhJOPn3CJF_q6uAJoql3IZ2ftuaUtt

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: PfkalcE1wU...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.961 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370ad831b431e5a0b2f83 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:21.754Z"}
  console.log
    CSRF check for: /api/v1/operators/684370ad831b431e5a0b2f83 {
      sessionID: 'fP_t1D8BLvkxjpatDoXQY-76xUNJnx2F',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AfP_t1D8BLvkxjpatDoXQY-76xUNJnx2F.%2FULaXe%2BV7ppyVrjR8r4mBCpfTliIBdcqTBTz0%2FizEXs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684370ad831b431e5a0b2f83","targetId":"684370ad831b431e5a0b2f83","targetType":"operator","timestamp":"2025-06-06T22:50:22.008Z","userId":"684370ad831b431e5a0b2f77","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684370ad831b431e5a0b2f83 [32m200[0m 254.363 ms - 471[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:22.011Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:22.159Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:22.160Z","userId":"684370ad831b431e5a0b2f83","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.728 ms - 632[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:22.721Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iL3B_UfUA8TLV46GwI988hKKqmDkETXL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: SLahBNkF-1fLTVdKMrVUtSkUAhUwZWES3ByM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iL3B_UfUA8TLV46GwI988hKKqmDkETXL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ANYDOdDRCC...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.460 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:22.815Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:22.952Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:22.953Z","userId":"684370ae831b431e5a0b2fa5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 137.680 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:22.955Z"}
  console.log
    CSRF token generation: {
      sessionID: 'H1xCt_w--qBJysadnAHIbXSQs_3CUDLo',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cLZu4V5b-WWe-P-46wkObiQRu1nn2t95YGV8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: H1xCt_w--qBJysadnAHIbXSQs_3CUDLo

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: U_yshFZW0G...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.897 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:23.051Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:23.194Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:23.195Z","userId":"684370ae831b431e5a0b2fab","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.128 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:23.197Z"}
  console.log
    CSRF token generation: {
      sessionID: '61dd-Hc7v3Ns4bwUC_2h7Dyf_mDEr4Oz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 6DMi52CC-aM1fnAj4i5YJD2GkQAf3tZeWkA0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 61dd-Hc7v3Ns4bwUC_2h7Dyf_mDEr4Oz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: u7VTEuhU1j...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.184 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370af831b431e5a0b2fb1 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:23.289Z"}
  console.log
    CSRF check for: /api/v1/operators/684370af831b431e5a0b2fb1 {
      sessionID: 'H1xCt_w--qBJysadnAHIbXSQs_3CUDLo',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AH1xCt_w--qBJysadnAHIbXSQs_3CUDLo.G6oKuTILVob%2Bl7lYwgN4DDXm99eslm9RX8NyskIqie8',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684370af831b431e5a0b2fb1","targetId":"684370af831b431e5a0b2fb1","targetType":"operator","timestamp":"2025-06-06T22:50:23.431Z","userId":"684370ae831b431e5a0b2fa5","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684370af831b431e5a0b2fb1 [32m200[0m 142.870 ms - 472[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:23.434Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-06T22:50:23.463Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.794 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.035Z"}
  console.log
    CSRF token generation: {
      sessionID: 'wi_iuA7GMpgkrqN35dm1Kr25gBCF-SUD',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: waK6trMf-DvosKvmcwmPs4tQVBPVb4s3ThbU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: wi_iuA7GMpgkrqN35dm1Kr25gBCF-SUD

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 6oeMzk2Ohh...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.216 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.129Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:24.274Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:24.275Z","userId":"684370b0831b431e5a0b2fce","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.562 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.278Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Kqoe4Q0wmWNtKMG_ORVmG5JyalLnHAJ2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: lBQ4wpfQ-EPBuN96y6Vo0esDs_4yGCx_F1zY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Kqoe4Q0wmWNtKMG_ORVmG5JyalLnHAJ2

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: xHNLmpLDlQ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.935 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.386Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:24.533Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:24.534Z","userId":"684370b0831b431e5a0b2fd4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.599 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.537Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZnZupL4VEeSE12ybjHnLwxWHwb6WfySk',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: UwwpztI1-hGP9p-KLzQMIy5YDCoVGvdgSc3I

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZnZupL4VEeSE12ybjHnLwxWHwb6WfySk

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: BnPqNaIBCg...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.535 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.635Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:24.783Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:24.783Z","userId":"684370b0831b431e5a0b2fda","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.853 ms - 632[0m
[34mdebug[39m: PATCH /api/v1/operators/684370b0831b431e5a0b2fda {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:24.786Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b0831b431e5a0b2fda {
      sessionID: 'wi_iuA7GMpgkrqN35dm1Kr25gBCF-SUD',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Awi_iuA7GMpgkrqN35dm1Kr25gBCF-SUD.B6UTE1xFjzwidw%2BVtPp6oujkLmxVhzPPdqzZvLAe1CY',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370b0831b431e5a0b2fda [32m200[0m 170.619 ms - 266[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:25.523Z"}
  console.log
    CSRF token generation: {
      sessionID: 'zbaNQwUiAfPOMvVEWpgjzKIQ8zZKcclT',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: xXaDEaFu-TNR16NYmN7nqGNU4s16Jt0x3VJA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: zbaNQwUiAfPOMvVEWpgjzKIQ8zZKcclT

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: XNvjjvx7rm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.744 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:25.613Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:25.757Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:25.757Z","userId":"684370b1831b431e5a0b2ff9","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.993 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:25.760Z"}
  console.log
    CSRF token generation: {
      sessionID: '2cAo4fy9F3rUqW3CPD-B2aHwNlI8RewM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: bCizn2IW-LxTSPT6Il7JtcGBZuYrOuPRLw8c

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 2cAo4fy9F3rUqW3CPD-B2aHwNlI8RewM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: BDUtBzKlGh...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.920 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:25.854Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:25.998Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:25.998Z","userId":"684370b1831b431e5a0b2fff","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.064 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:26.001Z"}
  console.log
    CSRF token generation: {
      sessionID: 'WgRHwBux5KGKV30qYH16pwW1UN06-4Jr',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 4dYPjCOY-j1ZpbFHQNoFcsJQghZe6MgtkcBU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: WgRHwBux5KGKV30qYH16pwW1UN06-4Jr

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: DkDaPIqwJ2...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.246 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:26.097Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:26.242Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:26.243Z","userId":"684370b2831b431e5a0b3005","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.436 ms - 632[0m
[34mdebug[39m: PATCH /api/v1/operators/684370b2831b431e5a0b3005 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:26.245Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b2831b431e5a0b3005 {
      sessionID: 'zbaNQwUiAfPOMvVEWpgjzKIQ8zZKcclT',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AzbaNQwUiAfPOMvVEWpgjzKIQ8zZKcclT.hKjggE9FQYvp4aTomb4%2BhaMP3lEAKWaBw%2Bo8gysBYUw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370b2831b431e5a0b3005 [32m200[0m 113.135 ms - 271[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:26.925Z"}
  console.log
    CSRF token generation: {
      sessionID: 'HJ8OKMZ_M1vzt-3WEoiSo7_mx7h_Cpsg',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: BvWTj36i-rG2n87z23hCBxyjSdiu-k0BZ1fs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: HJ8OKMZ_M1vzt-3WEoiSo7_mx7h_Cpsg

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1C7iMxaj4x...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.479 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:27.013Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:27.161Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:27.161Z","userId":"684370b2831b431e5a0b3024","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.485 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:27.163Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Hc-KHnxkumN1tiPHh8FF4sBxeUqmkhMI',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: DE6eLZVy-aLYZyAXeofjw6kRAOjvz5ulp--o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Hc-KHnxkumN1tiPHh8FF4sBxeUqmkhMI

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: zJ6ll3tnMM...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.132 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:27.265Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:27.412Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:27.413Z","userId":"684370b3831b431e5a0b302a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.838 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:27.416Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iKCq7iUa-AuDsWxcg_gQcUPZgozg88Pu',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Efx9J5US-D3i34pOAx4jl0rKUiFlkVi3HcEY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iKCq7iUa-AuDsWxcg_gQcUPZgozg88Pu

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Nb_JwGGDFY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.528 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370b3831b431e5a0b3030 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:27.518Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b3831b431e5a0b3030 {
      sessionID: 'Hc-KHnxkumN1tiPHh8FF4sBxeUqmkhMI',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AHc-KHnxkumN1tiPHh8FF4sBxeUqmkhMI.CA09SEPm2orJSySTFbgVQDWxxTLX5LcHcYXqMGSBhZ0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/684370b3831b431e5a0b3030","targetId":"684370b3831b431e5a0b3030","targetType":"operator","timestamp":"2025-06-06T22:50:27.656Z","userId":"684370b2831b431e5a0b3024","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/684370b3831b431e5a0b3030 [32m200[0m 138.480 ms - 471[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.224Z"}
  console.log
    CSRF token generation: {
      sessionID: '33rpFWq6isab2-wEkgOoGLOsDjmBmXxn',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: zJF4ORTa-qgLkoPBVPfS22tAtyRb2Qy_if3s

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 33rpFWq6isab2-wEkgOoGLOsDjmBmXxn

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: R1g4chATEN...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.712 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.326Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:28.481Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:28.481Z","userId":"684370b4831b431e5a0b304c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.561 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.484Z"}
  console.log
    CSRF token generation: {
      sessionID: '6v2ETq8rdthmfFQlzF7lGb5zhDLwzsfs',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: dlwykbgD-yeQt_P7p_w-xI0plOadBCblZFzg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 6v2ETq8rdthmfFQlzF7lGb5zhDLwzsfs

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: z7-_PlhZIi...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.777 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.582Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:28.735Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:28.735Z","userId":"684370b4831b431e5a0b3052","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.152 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.738Z"}
  console.log
    CSRF token generation: {
      sessionID: 'phWuFRDrQiHJ1Jy2Dk98F1c5ll6buLpC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ewPmzVIv-NPkxFn3P09oox6XLVEGa61TNk0M

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: phWuFRDrQiHJ1Jy2Dk98F1c5ll6buLpC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ZykID3SfmI...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.508 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370b4831b431e5a0b3058 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:28.831Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b4831b431e5a0b3058 {
      sessionID: '6v2ETq8rdthmfFQlzF7lGb5zhDLwzsfs',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6v2ETq8rdthmfFQlzF7lGb5zhDLwzsfs.Fz2w9PqN9rqcrnicUc9DEoRKLKz53XO5PhZXz50gPCQ',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370b4831b431e5a0b3058 [33m409[0m 141.244 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:29.551Z"}
  console.log
    CSRF token generation: {
      sessionID: 'O8hri9KDxwyzXZRzY5atfoZvnOYEV-nB',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kxg9BWX2-u4NQ1EWnPJayEAxWH1jPm87EfqA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: O8hri9KDxwyzXZRzY5atfoZvnOYEV-nB

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: oRMVDI9zGM...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.365 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:29.652Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:29.800Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:29.800Z","userId":"684370b5831b431e5a0b3074","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.484 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:29.803Z"}
  console.log
    CSRF token generation: {
      sessionID: '0y792igqUDcwaQf4aZwUS3qYYhVhGZ3r',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: SaMjDf3Y-t9hLZG9ceM3mg8Soo0wGElgbuPo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 0y792igqUDcwaQf4aZwUS3qYYhVhGZ3r

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -XrNXyPp56...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.837 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:29.898Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:30.051Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:30.051Z","userId":"684370b5831b431e5a0b307a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.237 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:30.054Z"}
  console.log
    CSRF token generation: {
      sessionID: 'jKSqMZaIYK9bewZ3vdBvbEKtuyTaN5wZ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: CaGnagi5-U4w9k4lyC3tv2S3OrzhH_PyZ0fg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: jKSqMZaIYK9bewZ3vdBvbEKtuyTaN5wZ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lkNr-E110z...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.649 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684370b6831b431e5a0b3080 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:30.150Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b6831b431e5a0b3080 {
      sessionID: '0y792igqUDcwaQf4aZwUS3qYYhVhGZ3r',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0y792igqUDcwaQf4aZwUS3qYYhVhGZ3r.eyaWgxxY7RQtyd4B7IhRH%2BOrBPZ68qR1InMH5fKiIIw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"0":"6","1":"8","10":"1","11":"b","12":"4","13":"3","14":"1","15":"e","16":"5","17":"a","18":"0","19":"b","2":"4","20":"3","21":"0","22":"7","23":"4","3":"3","4":"7","5":"0","6":"b","7":"5","8":"8","9":"3","timestamp":"2025-06-06T22:50:30.291Z"}
[0mDELETE /api/v1/operators/684370b6831b431e5a0b3080 [32m200[0m 141.918 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:30.885Z"}
  console.log
    CSRF token generation: {
      sessionID: 'CukDQ98VuVN3ZXoSss-RMqNqnw56zfcX',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9nzvIJIV-3_P3FMOmVXnYu5UiU2LytR3MEkU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: CukDQ98VuVN3ZXoSss-RMqNqnw56zfcX

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: N23FA8Ovwr...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.497 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:30.979Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:31.125Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:31.126Z","userId":"684370b6831b431e5a0b309d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.911 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:31.129Z"}
  console.log
    CSRF token generation: {
      sessionID: 'I_q-fp5Ctbp-g0aKZWsMsfTgdDsU7M4m',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: D4z5ghPx-BQe-h6CWHdCpnAl6A8X0e2Pd-vc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: I_q-fp5Ctbp-g0aKZWsMsfTgdDsU7M4m

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 8MCCpfVila...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.001 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:31.224Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:31.371Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:31.371Z","userId":"684370b7831b431e5a0b30a3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.712 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:31.374Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ZmvGbM7sue2dM-_cF3amsD5Abdyy2YQ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: PcWiTZhZ--pCbt1YgfFzUeq0gHur-d8J-Cks

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 0ZmvGbM7sue2dM-_cF3amsD5Abdyy2YQ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: bD4fee71Cm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.259 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684370b7831b431e5a0b30a9 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:31.498Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b7831b431e5a0b30a9 {
      sessionID: 'I_q-fp5Ctbp-g0aKZWsMsfTgdDsU7M4m',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AI_q-fp5Ctbp-g0aKZWsMsfTgdDsU7M4m.YvAnutlk5Zb1icON3%2BGF3WQeegrJWOSb%2BzTYbRtXGqk',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/operators/684370b7831b431e5a0b30a9 [33m400[0m 113.037 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.196Z"}
  console.log
    CSRF token generation: {
      sessionID: 'WT3Hs6jKMny5bHuBjsPd_pBirLvzAZSG',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: uLssetok-h9_r3G7BmpxyeT8hDn0fsTMkPjU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: WT3Hs6jKMny5bHuBjsPd_pBirLvzAZSG

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: bK0XvGTT02...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.803 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.297Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:32.448Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:32.448Z","userId":"684370b8831b431e5a0b30c5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.694 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.450Z"}
  console.log
    CSRF token generation: {
      sessionID: 'u1NkDJMKalzbwXvi8ZBdElFHaN8mC1SL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: TCf1jNoG-NI5hli21FGpWwIZVLV_6-w2-wMY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: u1NkDJMKalzbwXvi8ZBdElFHaN8mC1SL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: k2OyHagVsk...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.938 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.540Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:32.681Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:32.682Z","userId":"684370b8831b431e5a0b30cb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.105 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.685Z"}
  console.log
    CSRF token generation: {
      sessionID: 'TY71ExKi3vhLGxgKJNAmuLCAAWTNKCQQ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: RUZOe5C1-wriekpVJ2k2Zv28Jc8zJM8PmfD0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: TY71ExKi3vhLGxgKJNAmuLCAAWTNKCQQ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 80B6_3qA1E...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.214 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:32.863Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:33.009Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:33.010Z","userId":"684370b8831b431e5a0b30d3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.178 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/684370b8831b431e5a0b30d1 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:33.012Z"}
  console.log
    CSRF check for: /api/v1/operators/684370b8831b431e5a0b30d1 {
      sessionID: 'WT3Hs6jKMny5bHuBjsPd_pBirLvzAZSG',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWT3Hs6jKMny5bHuBjsPd_pBirLvzAZSG.%2BtGdbdtHmK71QqvIfDkGS%2B1pXjy0F%2Be1BjkSUW8WA%2Bo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/operators/684370b8831b431e5a0b30d1 [33m403[0m 56.286 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:33.632Z"}
  console.log
    CSRF token generation: {
      sessionID: 'RTqic_igvjgwYTSykwfTIDzFJb09U0n2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: inxRzVr9-t7kP5j4_SaDrr3gacS2Fy4T0TV0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: RTqic_igvjgwYTSykwfTIDzFJb09U0n2

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: f2b1J8ga8U...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.500 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:33.722Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:33.868Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:33.868Z","userId":"684370b9831b431e5a0b30f0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.712 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:33.871Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dFqK3EPoLlvc-GXK-4ri1wckxABV2fiB',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ZdgrnrDn-2IjmukDichs-_SVizq-tdzZaQdE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: dFqK3EPoLlvc-GXK-4ri1wckxABV2fiB

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: LPaLOtSfhP...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.025 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:33.964Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:34.105Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:34.105Z","userId":"684370b9831b431e5a0b30f6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.364 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:34.108Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cexyJBndHil-fNq8y8vtocInB-Op2ltS',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: bUQKAOIs-uxaHR0nf2OKvaBDpLEPxlrc9k7Y

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cexyJBndHil-fNq8y8vtocInB-Op2ltS

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: uG2lwNHF-g...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.794 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/684370ba831b431e5a0b30fe {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:34.203Z"}
  console.log
    CSRF check for: /api/v1/operators/684370ba831b431e5a0b30fe {
      sessionID: 'dFqK3EPoLlvc-GXK-4ri1wckxABV2fiB',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AdFqK3EPoLlvc-GXK-4ri1wckxABV2fiB.ZW%2FkgDRyiqdpsMS47H4zKcPpZfMff4AeSDVgPlE%2F%2FGY',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mDELETE /api/v1/operators/684370ba831b431e5a0b30fe [33m404[0m 83.625 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:34.852Z"}
  console.log
    CSRF token generation: {
      sessionID: 'oLCE6ORiBLhWQHtEmjNaTm7QfNS9xABR',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3MXrrY4J-jmAgIzs_9mjtE_bzeXbuMNudD3o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: oLCE6ORiBLhWQHtEmjNaTm7QfNS9xABR

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: r4_mNZ-ZBN...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.812 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:34.945Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:35.108Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:35.109Z","userId":"684370ba831b431e5a0b3117","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.575 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:35.112Z"}
  console.log
    CSRF token generation: {
      sessionID: 'nqFoqQMT8T07e0XWXRBNunuMcX3DJBwF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: YOHqUSbg-b6c_fyxZSE78GsNN_9tvl2TPnGU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: nqFoqQMT8T07e0XWXRBNunuMcX3DJBwF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: HHgLhrUDob...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.358 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:35.232Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:35.374Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:35.374Z","userId":"684370bb831b431e5a0b311d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.604 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:35.377Z"}
  console.log
    CSRF token generation: {
      sessionID: 'RlYY5_YTveeOl_K_C4Qq4Xe4GdzH17wB',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: mHtRe6MF-I4w5mTpj7mbaRlFfXydAHLnXxAk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: RlYY5_YTveeOl_K_C4Qq4Xe4GdzH17wB

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: qjkz9Jy2EG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.496 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/684370bb831b431e5a0b3123/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:35.467Z"}
  console.log
    CSRF check for: /api/v1/operators/684370bb831b431e5a0b3123/reset-pin {
      sessionID: 'nqFoqQMT8T07e0XWXRBNunuMcX3DJBwF',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AnqFoqQMT8T07e0XWXRBNunuMcX3DJBwF.VAsSuDVSQ4GIHitzgTgnOIhnAOt56R4ULXrqZ%2BhP2%2B4',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"0":"6","1":"8","10":"1","11":"b","12":"4","13":"3","14":"1","15":"e","16":"5","17":"a","18":"0","19":"b","2":"4","20":"3","21":"1","22":"1","23":"7","3":"3","4":"7","5":"0","6":"b","7":"a","8":"8","9":"3","timestamp":"2025-06-06T22:50:35.635Z"}
[0mPOST /api/v1/operators/684370bb831b431e5a0b3123/reset-pin [32m200[0m 168.069 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:35.638Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:35.784Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-06T22:50:35.785Z","userId":"684370bb831b431e5a0b3123","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.729 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.343Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cZfBLdBeDwXDtPBj_Z2Um52_lUNjAlM-',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: dWNqoKFY-cUix95xo34ELaMptbKqK1q-xGFg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cZfBLdBeDwXDtPBj_Z2Um52_lUNjAlM-

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: azJDHlB3wB...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.856 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.443Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:36.588Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:36.588Z","userId":"684370bc831b431e5a0b3142","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.821 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.591Z"}
  console.log
    CSRF token generation: {
      sessionID: '-LeySLjM88uM8YmyFF0ct-NDL6lLPVgj',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: oGQAM5tt-YieSz5yps_6BQGcqWfaZmjWlGjM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: -LeySLjM88uM8YmyFF0ct-NDL6lLPVgj

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: acQ4vbgASY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.844 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.684Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:36.827Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:36.827Z","userId":"684370bc831b431e5a0b3148","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.091 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.830Z"}
  console.log
    CSRF token generation: {
      sessionID: 'G7LtMF2mQv6GwhqJnuRPGcIEcaQLZ0eL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: nh6DEdnw-ZPdzM9UUrmLiBEs3Ojh8Zk5TW2o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: G7LtMF2mQv6GwhqJnuRPGcIEcaQLZ0eL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: wt6Jf4GyYS...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.856 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/684370bc831b431e5a0b314e/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:36.981Z"}
  console.log
    CSRF check for: /api/v1/operators/684370bc831b431e5a0b314e/reset-pin {
      sessionID: '-LeySLjM88uM8YmyFF0ct-NDL6lLPVgj',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A-LeySLjM88uM8YmyFF0ct-NDL6lLPVgj.Shi0Q1kuSxMciiFwUITzNGNh%2BC9TasVq06705K1NIbI',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"0":"6","1":"8","10":"1","11":"b","12":"4","13":"3","14":"1","15":"e","16":"5","17":"a","18":"0","19":"b","2":"4","20":"3","21":"1","22":"4","23":"2","3":"3","4":"7","5":"0","6":"b","7":"c","8":"8","9":"3","timestamp":"2025-06-06T22:50:37.147Z"}
[0mPOST /api/v1/operators/684370bc831b431e5a0b314e/reset-pin [32m200[0m 165.477 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:37.735Z"}
  console.log
    CSRF token generation: {
      sessionID: 'JkBukYFguk51-ft0s7PyixbHISU4PuBU',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: HNnIvbT3-f0xiGU_INWnZ8v9moZdSF6Duq9o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: JkBukYFguk51-ft0s7PyixbHISU4PuBU

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1Bz8L-k593...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.484 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:37.823Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:37.967Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:37.968Z","userId":"684370bd831b431e5a0b316b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.081 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:37.971Z"}
  console.log
    CSRF token generation: {
      sessionID: 'HvEZ1utQrrK7xnrv6ZTSlOMCS0uF-hHj',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Q36mJ3rp-1HIk78sd_MSY67yzU_q2HRTbuaI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: HvEZ1utQrrK7xnrv6ZTSlOMCS0uF-hHj

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: paVRTvKBP3...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.329 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:38.092Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:38.263Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:38.263Z","userId":"684370bd831b431e5a0b3171","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 170.713 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:38.266Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZdDMiKqqr_5cWRVrR9wLFSgzKKRQGK8i',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: FL1gfe8T-Mc75YW2dEaJ9tquDu03f14a8QOs

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZdDMiKqqr_5cWRVrR9wLFSgzKKRQGK8i

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: HsAE6hO22K...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.186 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:38.645Z"}
[0mGET /api/v1/operators/available [32m200[0m 83.887 ms - 597[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:39.283Z"}
  console.log
    CSRF token generation: {
      sessionID: '3ApwRDbJvAEHczP7GGJbw40A4ShXIne9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: iQe2YBxN-X1KxN29POriQHf0MSpxkmtjl4No

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 3ApwRDbJvAEHczP7GGJbw40A4ShXIne9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: TNpKppFCGF...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.713 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:39.377Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:39.518Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:39.518Z","userId":"684370bf831b431e5a0b3197","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.564 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:39.521Z"}
  console.log
    CSRF token generation: {
      sessionID: 'iRhBbSwMPPgZei3ibIhqOnjEf5XYcAuz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rZ8wEnLA-bvFlXbdnp8FFGMUBMiNiRRcsimI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: iRhBbSwMPPgZei3ibIhqOnjEf5XYcAuz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: qc_2qyiQ56...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.045 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:39.614Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:39.770Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:39.770Z","userId":"684370bf831b431e5a0b319d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 157.148 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:39.774Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eTOzuSIuV7_sp99GQGV0U9SdVj924Ler',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: KDxMTSEz-1Xx1HJuBTIjki7FDhhv7a5icuEc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: eTOzuSIuV7_sp99GQGV0U9SdVj924Ler

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: PEm2QHsSyK...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.036 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:40.173Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 81.251 ms - 430[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:40.813Z"}
  console.log
    CSRF token generation: {
      sessionID: 'BOKrOVxK294Svfe-i3BlYcfPNpQLtxdQ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ORoCA3wU-7yBo8-XV-WA1d0mSzGcbegqnNDE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: BOKrOVxK294Svfe-i3BlYcfPNpQLtxdQ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: g3u5mcCQnM...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.462 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:40.903Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:41.043Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:41.044Z","userId":"684370c0831b431e5a0b31c3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.621 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:41.047Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cYpjQnb4Te40B4gIeyFgAuV7OZVhoPWZ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: MDZHHEBN-uUaT579-y43wfTTAdrPM3Og0gVQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cYpjQnb4Te40B4gIeyFgAuV7OZVhoPWZ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7HtuAx69-f...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.629 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:41.140Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:41.282Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:41.282Z","userId":"684370c1831b431e5a0b31c9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.469 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:41.285Z"}
  console.log
    CSRF token generation: {
      sessionID: 'J5yUmFWSeTFtNVNjDYvfrJ8sitGlO24j',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Vv8xOru5-zZNDZdn6puv-iiHQ3Db4hz8hhLE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: J5yUmFWSeTFtNVNjDYvfrJ8sitGlO24j

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: vJ5XC3ZApm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.963 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:41.553Z"}
[0mGET /api/v1/operators/available [32m200[0m 82.080 ms - 597[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:42.196Z"}
  console.log
    CSRF token generation: {
      sessionID: 'U53bcdPC8zEa5wxX_ENyavkYH0825Xo-',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: dNb5PXPC-AfRzRrF_92jxmivUfvqQkCjWYoY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: U53bcdPC8zEa5wxX_ENyavkYH0825Xo-

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: hi8olVs6gd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.021 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:42.289Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:42.443Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:42.443Z","userId":"684370c2831b431e5a0b31ef","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.332 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:42.447Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aXoQCJtuw2H44LUDhnv156JpS5duBTGd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 12DkVZDt-OTjtqyepfTF1sJCfsHW6RQYnD3A

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: aXoQCJtuw2H44LUDhnv156JpS5duBTGd

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7B6_Lb_v1E...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.799 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:42.579Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:42.727Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:42.727Z","userId":"684370c2831b431e5a0b31f5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.610 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:42.733Z"}
  console.log
    CSRF token generation: {
      sessionID: 'zosXZFpaStz5p-mddNiEg5dwbBrmWmMD',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: cTtSL9zI-9-X_yG5X3PBp6RYJptE7lP7eJQk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: zosXZFpaStz5p-mddNiEg5dwbBrmWmMD

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: yhphN5xmTm...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 11.475 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:43.051Z"}
[0mGET /api/v1/operators/available [33m401[0m 0.976 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:43.613Z"}
  console.log
    CSRF token generation: {
      sessionID: 'YalblSnLHO457Ab_RUK_TEz8qfgBaO-M',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: aDDuSWI8-XMZG_AmxQoKk3WYZRWfrRydK0GU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: YalblSnLHO457Ab_RUK_TEz8qfgBaO-M

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: n6alTXoMiA...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.455 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:43.717Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:43.857Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:43.858Z","userId":"684370c3831b431e5a0b3218","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.284 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:43.861Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a-5HeqoAu4gRA2u7gpvEJ2IEmzEQMbmL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WK6dIsDt-iva-grfSq2SIanmPtEpyvue0bgw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: a-5HeqoAu4gRA2u7gpvEJ2IEmzEQMbmL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: IWMaXMCdA_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.063 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:43.953Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:44.091Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:44.092Z","userId":"684370c3831b431e5a0b321e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 138.707 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:44.094Z"}
  console.log
    CSRF token generation: {
      sessionID: 'LCDIc6dKWtLrTaN2N8EPvLjTcwT34ntR',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: KLMufkX4-a-LqnwgnzbqxkVtBg9t_vqWn7No

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: LCDIc6dKWtLrTaN2N8EPvLjTcwT34ntR

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Hr7nCXZFj_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.230 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370c4831b431e5a0b3224/stats {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:44.190Z"}
  console.log
    CSRF check for: /api/v1/operators/684370c4831b431e5a0b3224/stats {
      sessionID: 'a-5HeqoAu4gRA2u7gpvEJ2IEmzEQMbmL',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa-5HeqoAu4gRA2u7gpvEJ2IEmzEQMbmL.q3X%2B4Tw1H2zPhh1VEuqH7SLEfmAsGcU%2Bd6psgoXyRIg',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370c4831b431e5a0b3224/stats [32m200[0m 115.688 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:44.868Z"}
  console.log
    CSRF token generation: {
      sessionID: 'F0rbm_h1pPqOU6KHwAu3TSPd8XrPkbPM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: IEU0Dyzh-_xenRn9LrJrvrJMQ7ic9BwBFJkI

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: F0rbm_h1pPqOU6KHwAu3TSPd8XrPkbPM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: U56E_0DcJQ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.331 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:44.965Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:45.125Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:45.126Z","userId":"684370c4831b431e5a0b323f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.827 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:45.130Z"}
  console.log
    CSRF token generation: {
      sessionID: 'pFC1U_1ERVmXE5aQ2bcvdxHEmAYx4-yL',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: RS7JG50H-oueol9cnOdskPITS7VFL4jTXZsA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: pFC1U_1ERVmXE5aQ2bcvdxHEmAYx4-yL

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: KUybA2ZwIp...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.526 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:45.224Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:45.367Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:45.367Z","userId":"684370c5831b431e5a0b3245","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.301 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:45.370Z"}
  console.log
    CSRF token generation: {
      sessionID: 'nwEPFSOyvTa4viZhkzNztXMjzRE1kZZF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: KEkVLvgJ-O4R6FQTsmP-Jaj2U_46EZARI6CM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: nwEPFSOyvTa4viZhkzNztXMjzRE1kZZF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 9Z0hzYhDff...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.872 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370c5831b431e5a0b324b/stats {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:45.460Z"}
  console.log
    CSRF check for: /api/v1/operators/684370c5831b431e5a0b324b/stats {
      sessionID: 'pFC1U_1ERVmXE5aQ2bcvdxHEmAYx4-yL',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ApFC1U_1ERVmXE5aQ2bcvdxHEmAYx4-yL.fUmrin35tpEWWg33Lz6sHTxNLb2mdfqXeuJCBoDDy5c',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370c5831b431e5a0b324b/stats [32m200[0m 115.122 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.156Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ZLGgIFm1Wi0_WclAW3sTrN10yxXBXdc9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: isQNrrDd-NS9uzBFx85cLM9TEpXjYDbkByeQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ZLGgIFm1Wi0_WclAW3sTrN10yxXBXdc9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: VleL1-5ZcZ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.604 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.245Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:46.391Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:46.392Z","userId":"684370c6831b431e5a0b3266","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.060 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.395Z"}
  console.log
    CSRF token generation: {
      sessionID: 'U48-KC4uAFG3aqli6am-wwL3WTE2nIwr',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 36zClOIc-52JxXNLAg8Bg1gp-RfK0zbJtAek

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: U48-KC4uAFG3aqli6am-wwL3WTE2nIwr

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 8X0Bmg7Zm5...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.576 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.495Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:46.633Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:46.634Z","userId":"684370c6831b431e5a0b326c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.388 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.637Z"}
  console.log
    CSRF token generation: {
      sessionID: '53QRYAa_5KncoQEh_PQsSuH1oFySocf5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Fqi0fT5l-mYJgY8nhk4e1Nf21uowNV93kfEY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 53QRYAa_5KncoQEh_PQsSuH1oFySocf5

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ujuq2gcBQw...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.529 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370c6831b431e5a0b3272/stats {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:46.737Z"}
  console.log
    CSRF check for: /api/v1/operators/684370c6831b431e5a0b3272/stats {
      sessionID: 'U48-KC4uAFG3aqli6am-wwL3WTE2nIwr',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AU48-KC4uAFG3aqli6am-wwL3WTE2nIwr.dMht2k4HtdCEKRqKPOKwyPy%2BcrIgP7E8An%2BkdaIhmPA',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370c6831b431e5a0b3272/stats [32m200[0m 137.790 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:47.563Z"}
  console.log
    CSRF token generation: {
      sessionID: 'lcuMd7mRUKH7K4N_Ovi5JpeX19tXk2pE',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: oIYoXg4L-mlMtb32iEuvKAYhqZL57sGK0N5s

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: lcuMd7mRUKH7K4N_Ovi5JpeX19tXk2pE

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: _zDIq-e9h-...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.725 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:47.675Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:47.830Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-06T22:50:47.831Z","userId":"684370c7831b431e5a0b328d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.743 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:47.834Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cNhvpcY87URnJwbcZwtEm7cJfAp0sAiz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: pTCgmcox-NMTGEAi76fVnJnPIra1bVe2GNB0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cNhvpcY87URnJwbcZwtEm7cJfAp0sAiz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: ZU6gQBEyCi...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.078 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:47.930Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-06T22:50:48.075Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-06T22:50:48.075Z","userId":"684370c7831b431e5a0b3293","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.906 ms - 625[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:48.078Z"}
  console.log
    CSRF token generation: {
      sessionID: 'QMnXDKTtaHoa0hWe0JNpk2l6wTNzM9kQ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 5ufj1ync-vQRGW7UpJgqpKf9F_B8u2C1BIjk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: QMnXDKTtaHoa0hWe0JNpk2l6wTNzM9kQ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 5VWTfmMKVE...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.608 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/684370c8831b431e5a0b3299/stats {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:48.179Z"}
  console.log
    CSRF check for: /api/v1/operators/684370c8831b431e5a0b3299/stats {
      sessionID: 'cNhvpcY87URnJwbcZwtEm7cJfAp0sAiz',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AcNhvpcY87URnJwbcZwtEm7cJfAp0sAiz.WmiUVhjG5%2F7dVUgUTSf3DDj1IdtRtKxdvmfNTbw3SYk',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPATCH /api/v1/operators/684370c8831b431e5a0b3299/stats [33m400[0m 57.234 ms - 62[0m
PASS tests/integration/operator.test.js (53.097 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (1917 ms)
      ✓ should filter by active status (1307 ms)
      ✓ should filter by work station (1379 ms)
      ✓ should filter by on-shift status (1290 ms)
      ✓ should support pagination (2306 ms)
      ✓ should require authentication (1087 ms)
      ✓ should require operator management permissions (1356 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1339 ms)
      ✓ should allow operators to view their own profile (1165 ms)
      ✓ should prevent operators from viewing other operators (1222 ms)
      ✓ should return 404 for non-existent operator (1233 ms)
    POST /api/v1/operators
      ✓ should create new operator (1405 ms)
      ✓ should validate required fields (1140 ms)
      ✓ should validate email format (1166 ms)
      ✓ should validate shift time format (1174 ms)
      ✓ should prevent duplicate emails (1164 ms)
      ✓ should require operators.manage permission (1398 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1330 ms)
      ✓ should update password (1588 ms)
      ✓ should deactivate operator (1314 ms)
      ✓ should allow operators to update their own profile (limited fields) (1488 ms)
      ✓ should prevent operators from changing their own work station (1403 ms)
      ✓ should not allow updating operatorId (1299 ms)
      ✓ should validate email uniqueness on update (1327 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1334 ms)
      ✓ should prevent deleting operator with active orders (1290 ms)
      ✓ should require operators.manage permission (1456 ms)
      ✓ should handle non-existent operator (1219 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1492 ms)
      ✓ should clear login attempts on PIN reset (1390 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1550 ms)
      ✓ should respect limit parameter (1527 ms)
      ✓ should only include active operators (1381 ms)
      ✓ should require authentication (1416 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1255 ms)
      ✓ should update quality score (1284 ms)
      ✓ should update both stats in one call (1374 ms)
      ✓ should validate processingTime is positive (1281 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:50.543Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: IGbKne2F-6hzqCt8x6ytQK4A0f1JDjKciggM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 7.772 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:51.312Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: kiz634AC-IBoaV4PXsWkNdFGG2z2FupDRH6M

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.918 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:51.357Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1561:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 30.527 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:52.006Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: vJxqQasz-OF1GmU89WC-wv4kUwlg2J7b29F0

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.571 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:52.044Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1561:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 32.518 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:52.695Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Zadn3giZ-9c2NZBOEs-zxD-xezLELhZdGb0Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.942 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:52.703Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1542:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 30.972 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:53.329Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: gXt9Mod3-R7ekXPfVhZ93F4SLeFuEEMJTDeA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.484 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:53.369Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:53.371Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:53.371Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1561:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 34.779 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1542:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 33.657 ms - 58[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1542:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 36.575 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:54.038Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ICIEW0f4-rwnsxDTILVOnqapD5H0B9wx8Kko

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.913 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:54.048Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-4d4c1eea-1666-4bff-9252-3cc9f62892b9","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:50:54.256Z","userId":"684370ce0a41c11ec86677be","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 208.900 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:54.901Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: n2l0HS82-FnO2Rn7ggU5aiIBj1FAEoieL1iU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.900 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:54.910Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.943 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:55.544Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: XNBgLXr9-kJuuO0-1kDUIRnVs8XHPYu_Oafk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.904 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:55.557Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-b8bcc9ae-cc51-4a83-9719-8bb2a20927c6","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:50:55.775Z","userId":"684370cf0a41c11ec86677f5","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 217.585 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:55.779Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 83.396 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:56.471Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: aCoXJpk9-2_CkmvUplI1PQtIKNa-yqUsZR9w

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.953 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:56.509Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 56.595 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:57.175Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: taCwAuX3-lArfppGMjIWgkWetQq1VNbfpKgk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.428 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:57.185Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-80d01898-8e79-4079-8462-b0f6273c1ea5","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:50:57.386Z","userId":"684370d10a41c11ec8667831","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 201.067 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:57.390Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-2da8601a-9ee7-4b91-9149-65e6086dc515","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:50:57.632Z","userId":"684370d10a41c11ec8667839","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 242.625 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:57.635Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-8617eca4-385e-486b-a751-22fc11330617","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:50:57.891Z","userId":"684370d10a41c11ec8667842","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 256.093 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:58.578Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 80PrU6eX-jW9lIA9t4w_kO6tDtTsMPRI0e4I

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.421 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:58.619Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-aa5a68d3-eb07-4a04-ac53-77d9d01e5c27","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-06T22:50:58.850Z","userId":"684370d20a41c11ec8667864","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 231.872 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:59.495Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: BB8EoLLz-ZhP9Iv3wB4RaxaIoS3-2d8qbPqE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.013 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:50:59.504Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 107.696 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:00.221Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 4p6fOHd1-yuBKKCY6-pvl9CeCrxVBHkckf8M

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.830 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:00.269Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ar0A1BGG94rmkzestAMMuyTqWthBMxHMC.vFdq4DQ1SsZydEt%2BBjCcHZm10ZdIbgy%2FZRT0hn15HAo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:51:00.365Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-06T22:51:00.366Z","userId":"684370d40a41c11ec866789b","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 97.118 ms - 525[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:01.007Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rGQpnhwQ-FgGFraDf9oyHUkw2Haj1IO7lqAg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.413 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:01.079Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ar0A1BGG94rmkzestAMMuyTqWthBMxHMC.vFdq4DQ1SsZydEt%2BBjCcHZm10ZdIbgy%2FZRT0hn15HAo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-06T22:51:01.201Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 122.980 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:01.825Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: zl2cG7WQ-UtTNKU2meYlvMOeRWmeTnLpJOto

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.870 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:01.833Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ar0A1BGG94rmkzestAMMuyTqWthBMxHMC.vFdq4DQ1SsZydEt%2BBjCcHZm10ZdIbgy%2FZRT0hn15HAo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 55.798 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:02.503Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 4B8FUo0C-jM5h8WWlXhtk71lwU_DRSJcsBDk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.050 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:02.551Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ar0A1BGG94rmkzestAMMuyTqWthBMxHMC.vFdq4DQ1SsZydEt%2BBjCcHZm10ZdIbgy%2FZRT0hn15HAo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-06T22:51:02.637Z","userId":"684370d60a41c11ec86678f1","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 86.256 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:03.252Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: F7lliBER-op-8QIo_rCUZnyUlwMaLzC3C2js

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.959 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:03.261Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-ac092fa0-07d9-4c95-92a2-37ebb8941708","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-06T22:51:03.468Z","userId":"684370d70a41c11ec8667910","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 206.646 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:04.089Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: bmTmGUtg-1u8Rn-vElawL7udfxCQKUVn_4ig

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.879 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:04.097Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.940 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:04.700Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: o3PzwmiM-OarPj0GN2_9JjJs-SAl-ZomucmQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.232 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:04.708Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.808 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:05.317Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: yhcFbcZj-ZXDijgvkfl-9g96e68sBfsf0vAQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.836 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:05.325Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.274 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:05.931Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: osqwXyEj-ULZ7ldd9Lh9FIe4qJM1ev5TJeZA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.760 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:06.630Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: msFoCCbF-jKKJ8B3FpnrKbq5FD5NNF7wBxD4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.019 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:07.356Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: vo7bWJTf-yxSUrwVAaXTDmZ9POTyDsFOupWU

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.233 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:07.430Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1561:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 33.186 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:08.102Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r0A1BGG94rmkzestAMMuyTqWthBMxHMC',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 8tlxlUNd-02T6SwJ1m-wCbjOmbem7ziGi9EA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r0A1BGG94rmkzestAMMuyTqWthBMxHMC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lgmgiQLfub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.415 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:08.170Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1542:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1561:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 33.946 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (19.943 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1211 ms)
      ✓ should poll for OAuth session results with complete data structure (695 ms)
      ✓ should poll for OAuth login session results (689 ms)
      ✓ should return pending status for non-existent session (632 ms)
      ✓ should handle session polling race conditions (705 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (865 ms)
      ✓ should reject registration with malicious social data (639 ms)
      ✓ should prevent duplicate social account registration (930 ms)
      ✓ should prevent duplicate email registration (703 ms)
      ✓ should generate unique usernames for social registrations (1399 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (919 ms)
      ✓ should reject customer registration with invalid affiliate ID (728 ms)
    Social Login
      ✓ should login existing affiliate with social account (786 ms)
      ✓ should login existing customer with social account (817 ms)
      ✓ should return error for non-existent social account (678 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (746 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (834 ms)
      ✓ should handle expired JWT tokens gracefully (615 ms)
      ✓ should handle invalid JWT tokens (617 ms)
      ✓ should validate required fields (613 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (697 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (728 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (745 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (764 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:09.929Z"}
  console.log
    CSRF token generation: {
      sessionID: '3JhvZtuGoBKo-CCBudnL7n2W6mxnQT8R',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 3RgFGz75-nB8UOAEYeBg0UwyvkZz9GR0wGok

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 3JhvZtuGoBKo-CCBudnL7n2W6mxnQT8R

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 1gLBoKIFXW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.337 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:10.515Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3JhvZtuGoBKo-CCBudnL7n2W6mxnQT8R',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3JhvZtuGoBKo-CCBudnL7n2W6mxnQT8R.Eesk7%2BH2mp7gAAIISoEzf19Jc5uGKWYRcnfkaqo69os',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2,
      serviceNotes: 'Handle with care',
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon',
      specialDeliveryInstructions: 'Leave at door'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 220.263 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:11.337Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ouZLhCfQod3Qy8hcDdsiPeXOdOKPlTS',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: vJGWTIf8-RENS7FzaKhwOoH5vjarua9dLYC4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 0ouZLhCfQod3Qy8hcDdsiPeXOdOKPlTS

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7kYOMZpop4...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.435 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:11.594Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '0ouZLhCfQod3Qy8hcDdsiPeXOdOKPlTS',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0ouZLhCfQod3Qy8hcDdsiPeXOdOKPlTS.hxPPBE2CIyYGBl75UcvlG8X4wElioFfQTsyEMO76oLw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1,
      deliveryDate: '2025-05-27',
      deliveryTime: 'evening'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 203.937 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:12.289Z"}
  console.log
    CSRF token generation: {
      sessionID: 'J3TRcwL0K536_ecBa1SexGS1PqxIlWMM',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Rzz0zqVg-of2yrnROnROrM560bFDcA1ZHGe4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: J3TRcwL0K536_ecBa1SexGS1PqxIlWMM

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -ykievwn9g...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.552 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:12.554Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'J3TRcwL0K536_ecBa1SexGS1PqxIlWMM',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AJ3TRcwL0K536_ecBa1SexGS1PqxIlWMM.t70In0j3AzaBhAZlP3cMObP1MCfOrrjqn80hbfNMNuc',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:82:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:86:15)

[0mPOST /api/v1/orders [33m400[0m 57.841 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:13.094Z"}
  console.log
    CSRF token generation: {
      sessionID: 'tO-mMkfO_B9MxycF42Uw0hHHHu2EJnhv',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: yanCxH8J-D4Boj1Y13KK38VdHr7zY2MlUOFk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: tO-mMkfO_B9MxycF42Uw0hHHHu2EJnhv

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Z-nmsg_EbI...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.138 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:13.362Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'tO-mMkfO_B9MxycF42Uw0hHHHu2EJnhv',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AtO-mMkfO_B9MxycF42Uw0hHHHu2EJnhv.pSyFVdL%2FoicYXqIs%2B%2BKPHlvsqimdGG43uBE4%2FMPJslc',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:95:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:99:15)

[0mPOST /api/v1/orders [33m400[0m 85.551 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:13.926Z"}
  console.log
    CSRF token generation: {
      sessionID: 'q2aA76sMg_v6HnTfNGOWmSB_UlOtO6w8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: JJxcbGes-Fkmarrgh3xwooe2NjpCmcCiFF1g

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: q2aA76sMg_v6HnTfNGOWmSB_UlOtO6w8

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: UCLToXs1eW...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.680 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:14.236Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'q2aA76sMg_v6HnTfNGOWmSB_UlOtO6w8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aq2aA76sMg_v6HnTfNGOWmSB_UlOtO6w8.4sJHmBQX%2Bq%2B6k%2BBcbtXoqUXF54ahdou106oisXXaJ0M',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [33m403[0m 86.783 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:14.804Z"}
  console.log
    CSRF token generation: {
      sessionID: 'qrkcvYU1LacqnZI6nRaa-hLAYyLZ8xJ9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: Jde92v6V-QnS8OZHcamSyvnlxZcrh7kBcJAE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: qrkcvYU1LacqnZI6nRaa-hLAYyLZ8xJ9

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: HFAPlG75UG...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.696 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:15.064Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'qrkcvYU1LacqnZI6nRaa-hLAYyLZ8xJ9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AqrkcvYU1LacqnZI6nRaa-hLAYyLZ8xJ9.qChii%2FMFfUZSIITy%2F9ipmidKTIuTF%2BJRBug%2BQS1kQUs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Valid delivery date is required',
        path: 'deliveryDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid delivery time',
        path: 'deliveryTime',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:57:15)

[0mPOST /api/v1/orders [33m400[0m 31.905 ms - 628[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:15.573Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PsnPfM0O6EP0O8cuIHJ-K16MVd1NrmbI',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: OxY4olKQ-mJOvO3qGraDoaD8OhhDBlsy-TNk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PsnPfM0O6EP0O8cuIHJ-K16MVd1NrmbI

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: leOmRdRGfQ...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.106 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:15.870Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 110.709 ms - 662[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:16.484Z"}
  console.log
    CSRF token generation: {
      sessionID: 'EpU0boFOEiJ7k7-ssKqxH6TqzGg1-e4y',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: AEVcKuqK-Hr-epN3ntIBLJL7eepLVM651zx4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: EpU0boFOEiJ7k7-ssKqxH6TqzGg1-e4y

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: NPPBLNtzHx...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.756 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:16.779Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 112.377 ms - 662[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:17.410Z"}
  console.log
    CSRF token generation: {
      sessionID: 'L-22PjajX9ldjefBGAxNWf4PHV8v0GiQ',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: nQpIkLIG-rDayiEzG4q0y84XoTsazkx2RIJo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: L-22PjajX9ldjefBGAxNWf4PHV8v0GiQ

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: VTeXoIL1-v...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.266 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:17.710Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 55.302 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:18.251Z"}
  console.log
    CSRF token generation: {
      sessionID: 'VsBHU_0l2q-ttlg__BNZafygkv3cp1Sk',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: ijMjnPsI-6-5Zr8IiLhz8u25n-fBSbDSJlro

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: VsBHU_0l2q-ttlg__BNZafygkv3cp1Sk

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: O-FusFNJqT...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.841 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:18.544Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 55.554 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:19.090Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Gu-ymSkRSfAC7vm7v_Cz86Hmoi_E1JkC',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: puIpFBHy-_0MkXfwDtgJy7hdMpY8sOL3G-y4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Gu-ymSkRSfAC7vm7v_Cz86Hmoi_E1JkC

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: H6a-MDw7SO...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.214 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:19.385Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'Gu-ymSkRSfAC7vm7v_Cz86Hmoi_E1JkC',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AGu-ymSkRSfAC7vm7v_Cz86Hmoi_E1JkC.5amxxhEGMal%2BJ8OWoWd4A4UXRWYb34uQfMvKESYxgB4',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 143.894 ms - 130[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:20.044Z"}
  console.log
    CSRF token generation: {
      sessionID: 'izZY_ZNmfziIjjBmKiW2-YMmJn8SGz7z',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: w06pfY4Y-o5zyOZckL8JJmZ3ZinubGFJsIdY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: izZY_ZNmfziIjjBmKiW2-YMmJn8SGz7z

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: xdt1ACAOTa...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.414 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:20.368Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'izZY_ZNmfziIjjBmKiW2-YMmJn8SGz7z',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AizZY_ZNmfziIjjBmKiW2-YMmJn8SGz7z.WR%2BQ%2FLaNd10xzrhXkEGzwupzsuoQcGIrtxHmzy5%2FUIg',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 144.203 ms - 173[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:21.023Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cFLw-Q_MpIWcXYDSzMoHNzQbwESlX6Jz',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: K0UG0jVM-Ymq1QYv9db-BlbOcT2-zE42nMRo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: cFLw-Q_MpIWcXYDSzMoHNzQbwESlX6Jz

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: p6EK8Jj3E8...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.891 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:21.350Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'cFLw-Q_MpIWcXYDSzMoHNzQbwESlX6Jz',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AcFLw-Q_MpIWcXYDSzMoHNzQbwESlX6Jz.ilHLstlZ5j7hHyj%2FukwlgrwdUM8cjaMGCj8D7yX%2FLUU',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 56.551 ms - 83[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:21.896Z"}
  console.log
    CSRF token generation: {
      sessionID: '98bLTnhlWvWx92swUrReRCwmfhPIpdyD',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: FZH1q9Df--SqRhYA1CHTdiEHUuRQIHdPXuIg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 98bLTnhlWvWx92swUrReRCwmfhPIpdyD

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 4No8m3bujp...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.381 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:22.192Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '98bLTnhlWvWx92swUrReRCwmfhPIpdyD',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A98bLTnhlWvWx92swUrReRCwmfhPIpdyD.IqsCvlB01qKrrpvvyye%2BzVAYg2ozZ0AU%2F7CrA%2BDrlmw',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 57.110 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:22.777Z"}
  console.log
    CSRF token generation: {
      sessionID: '8QPu7WXJRCUsyUwUUzxQBF8gJB0ddsOF',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: uBpwdePz-ZhS21VOY2GGjp5B0MqiH5hr6cM8

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 8QPu7WXJRCUsyUwUUzxQBF8gJB0ddsOF

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: k1QJc-LOGY...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.142 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:23.066Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '8QPu7WXJRCUsyUwUUzxQBF8gJB0ddsOF',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8QPu7WXJRCUsyUwUUzxQBF8gJB0ddsOF.ChHAC5jL7uybkRCUQFdIuVZnNsRdDHuLOSu7esH08X8',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 61.223 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:23.610Z"}
  console.log
    CSRF token generation: {
      sessionID: 'YWI5D1hsz6QL9P2GjITUbxLpl7KTOqx_',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: KQwGyAN4-S3eawh2M_X2X-10zbwtHj9abiXo

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: YWI5D1hsz6QL9P2GjITUbxLpl7KTOqx_

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: SATVGnD78_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.651 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:23.899Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'YWI5D1hsz6QL9P2GjITUbxLpl7KTOqx_',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AYWI5D1hsz6QL9P2GjITUbxLpl7KTOqx_.7l1iXf1i5cywJua0arbRTrofTJR1o1wqlIQwmZ5HcUo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 141.064 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:24.574Z"}
  console.log
    CSRF token generation: {
      sessionID: '57AtUfTvzs4n4lNUkwix_L8ozxMvWiGe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: oXMvfQs8-LIsaphAHWVT_CxjctOzkzn5KKiA

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 57AtUfTvzs4n4lNUkwix_L8ozxMvWiGe

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Fx8wNBPUVM...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.702 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:24.883Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '57AtUfTvzs4n4lNUkwix_L8ozxMvWiGe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A57AtUfTvzs4n4lNUkwix_L8ozxMvWiGe.GCRe4MD6SKuvdMu6ZfRe5XCxSlDGbb%2FNNXeMEM0Bj5Q',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 145.103 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:25.515Z"}
  console.log
    CSRF token generation: {
      sessionID: 'yb-yu0j4ygaqQhIYG2_IV0yXu1OmOwFY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: XfPR1OI4-cTiPjpIu-hGSHfX3rVv-Rh7XjK4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: yb-yu0j4ygaqQhIYG2_IV0yXu1OmOwFY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: S4-hn3d4su...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.678 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:25.840Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'yb-yu0j4ygaqQhIYG2_IV0yXu1OmOwFY',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ayb-yu0j4ygaqQhIYG2_IV0yXu1OmOwFY.0JU2%2BrJjCL%2BwThQXYHXG7L1YJox7QGMBX5pX6nsBIeM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 55.956 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:26.387Z"}
  console.log
    CSRF token generation: {
      sessionID: 'PoLHSN6dbOEz2o2A_J-tymfpgru3ob5J',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: b9QP3B6t-0_6YvxAPBRCQQ_IrvWAl77aSWmQ

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: PoLHSN6dbOEz2o2A_J-tymfpgru3ob5J

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: MqItn7biV_...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.673 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:26.692Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'PoLHSN6dbOEz2o2A_J-tymfpgru3ob5J',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3APoLHSN6dbOEz2o2A_J-tymfpgru3ob5J.cKxKE%2Fs2j1q9A5P1g8EHw7MXMWuPwnwHb%2BKvktcHfB8',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 56.324 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:27.227Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ewKZ9Og25nMh9ju_dOcLoicBD03lah0i',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: XCbFu9SJ-peFeSd9OXF8uBANi-gFBFiFrznE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: ewKZ9Og25nMh9ju_dOcLoicBD03lah0i

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: mdkLKnADub...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.617 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:27.526Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'ewKZ9Og25nMh9ju_dOcLoicBD03lah0i',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AewKZ9Og25nMh9ju_dOcLoicBD03lah0i.zb68%2B08kZYWnE9IsbL%2BBf8tCjBTvm7DAKjQWhzGEelE',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 120.291 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:28.181Z"}
  console.log
    CSRF token generation: {
      sessionID: 'yhH4mVQs534sOWjC-vhCPo_V9-DgduX7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: yjWaWdkC-XbrVh5kZqxiH9SKoQQythkRCK6Y

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: yhH4mVQs534sOWjC-vhCPo_V9-DgduX7

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: -Ns_ykn-b1...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.177 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:28.549Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'yhH4mVQs534sOWjC-vhCPo_V9-DgduX7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AyhH4mVQs534sOWjC-vhCPo_V9-DgduX7.3YdsXDmWDfl4IHb%2FMNRF6OZmdtRpTPxd2wRbJKi5sSM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 125.181 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:29.170Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bX37QWD1LzQ6KyMfqht-BW0snzqwxzVd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: GAf8Zwq7-41W1h1RDCxVhABCgxheoAAsxYPE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: bX37QWD1LzQ6KyMfqht-BW0snzqwxzVd

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 5Gk_TRRosd...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.876 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:29.464Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: 'bX37QWD1LzQ6KyMfqht-BW0snzqwxzVd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AbX37QWD1LzQ6KyMfqht-BW0snzqwxzVd.TTjYbTpalxE0cZf7eYzSeGxZCiEVlLaNNOjAOReSN8Y',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 151.256 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:30.132Z"}
  console.log
    CSRF token generation: {
      sessionID: 'B7TzwX7Vg-x94vJu-pXfUPZNsH-fY50y',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rHzyhXGu-8cYNrzqxG1hGOB0IFE4UY2hJOQw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: B7TzwX7Vg-x94vJu-pXfUPZNsH-fY50y

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: oJmEtJ5p1J...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.128 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:30.446Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 87.887 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:31.028Z"}
  console.log
    CSRF token generation: {
      sessionID: '5_nws8bybnO0mG4tIAKG5nsrKBTi5c0g',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 1s8us3CM-E5xDD_Zlowcw0Xz_RoU_xQZKbeg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5_nws8bybnO0mG4tIAKG5nsrKBTi5c0g

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nHNQpZ9auL...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.563 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=delivered&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:31.328Z"}
[0mGET /api/v1/orders/export?format=json&status=delivered&affiliateId=AFF123 [32m200[0m 85.895 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:31.902Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Ic6v77Gdgby2BYte6aKp-Xi4llpeX4Yk',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: iriUUtAf-4RKAwdv5986SVntTKYz1SkTSHnc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Ic6v77Gdgby2BYte6aKp-Xi4llpeX4Yk

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: BgDZ-Dn5EU...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.861 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:32.215Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 83.776 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:32.790Z"}
  console.log
    CSRF token generation: {
      sessionID: '5lWHDRumg_Hp6lAtPzk3pTaZOQSs89_Z',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: sg05BsxR-DHa_ENZMOhnDQbuoT5bfnLl7fsM

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 5lWHDRumg_Hp6lAtPzk3pTaZOQSs89_Z

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: nkdfwkDd50...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.687 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:33.094Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 28.113 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:33.603Z"}
  console.log
    CSRF token generation: {
      sessionID: 'TPQg5yAog3jfoAhhm10UWbPuB0mGvOed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: erTmB9Ed-vpC-yLGMyc8YkCgOojrW7kxqc8Q

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: TPQg5yAog3jfoAhhm10UWbPuB0mGvOed

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 2Jj61elCvs...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 6.029 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:33.910Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'TPQg5yAog3jfoAhhm10UWbPuB0mGvOed',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3ATPQg5yAog3jfoAhhm10UWbPuB0mGvOed.XxljpHkDVFgyJyAB9kG1aG%2BNg895aYwxNwkSpy81E30',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 89.850 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:34.528Z"}
  console.log
    CSRF token generation: {
      sessionID: '2bBTE78oOfvk0k6CJTk-av_84oZgPmbY',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: WTkYMk6g-nC47POIVvPVB-0r4MdsuSWXat6U

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 2bBTE78oOfvk0k6CJTk-av_84oZgPmbY

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Fy5Zo503eO...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.546 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:34.813Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '2bBTE78oOfvk0k6CJTk-av_84oZgPmbY',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2bBTE78oOfvk0k6CJTk-av_84oZgPmbY.dEKcAREwd7ONyCeEEssDyZRnFZ%2B%2B6dDOLQqyqDs9Awo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 86.273 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:35.396Z"}
  console.log
    CSRF token generation: {
      sessionID: 'q0wDQXtk376-1x4LDDyKdcsIklEVIKF3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 621SoFqK-S71PAxSqV-XIszTx9hM9KwD0RfY

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: q0wDQXtk376-1x4LDDyKdcsIklEVIKF3

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: bwsmFPGmMH...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.495 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:35.737Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'q0wDQXtk376-1x4LDDyKdcsIklEVIKF3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aq0wDQXtk376-1x4LDDyKdcsIklEVIKF3.GA1cDwE80UmHEBdKr5jsMCD48S2pR8zcg2e4AWJ5LCs',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 57.361 ms - 83[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:36.274Z"}
  console.log
    CSRF token generation: {
      sessionID: 'js_itc5rVIPsjnFs-gNkGc__vRde5bpy',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: rJ5uR0u4-WrhVR-ijPYR5LBZ9PDz4mEQmsj4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: js_itc5rVIPsjnFs-gNkGc__vRde5bpy

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: P9q3pN0Ae8...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.451 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:36.609Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'js_itc5rVIPsjnFs-gNkGc__vRde5bpy',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ajs_itc5rVIPsjnFs-gNkGc__vRde5bpy.yl2x7DazSc%2FXVDOm9UxX%2Bnz1PzzIN0aHVYMT6tGO%2FCo',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.745 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:37.185Z"}
  console.log
    CSRF token generation: {
      sessionID: 'FalIQ2bn8KjG7NXdQSjdcYX0NFMRCQZK',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: fSoB2XnJ-mCDTvwgudBPLHoM8XjCrhBVa-Gc

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: FalIQ2bn8KjG7NXdQSjdcYX0NFMRCQZK

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: lcTPBRiTJn...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.892 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:37.524Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 139.421 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:38.150Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Fy3GmFBoaglsZLebRNlr17hOqxCyu9X1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: smUD84Mx-91GIycWhjC1ngcvV3XjGKCgmCPw

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Fy3GmFBoaglsZLebRNlr17hOqxCyu9X1

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 0twprGFylz...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.487 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=delivered&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:38.474Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=delivered&date=month [32m200[0m 111.297 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:39.081Z"}
  console.log
    CSRF token generation: {
      sessionID: 'r_YznAgyxI5Dk_soFRF5C_cmJ5Ezppwy',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: q2oIuVgu-Rdw6BuqcIJ3tIiy01aDYapS6G5o

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: r_YznAgyxI5Dk_soFRF5C_cmJ5Ezppwy

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: Ftmrs2jxY6...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.817 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:39.419Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 110.483 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:40.017Z"}
  console.log
    CSRF token generation: {
      sessionID: '73UYYyuRWP-MwwsBuL-1pezh_PF4HwIb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: DxzDcuwg-W_vjXC_ZW65UbsRgQap1l24uunk

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: 73UYYyuRWP-MwwsBuL-1pezh_PF4HwIb

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 7Fe5avIKL7...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 5.304 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:40.355Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 56.251 ms - 251[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:40.897Z"}
  console.log
    CSRF token generation: {
      sessionID: 'vesRTPEIGwIKWg-xvhTlrl_Mpo29HGti',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: JgNMZpIg-8Y-cRbIszT1dx_2fPXusy0J7V5M

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: vesRTPEIGwIKWg-xvhTlrl_Mpo29HGti

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: v1Fxo3jM-D...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 4.853 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:41.595Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'vesRTPEIGwIKWg-xvhTlrl_Mpo29HGti',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AvesRTPEIGwIKWg-xvhTlrl_Mpo29HGti.Ek1vWCjt9aI0HSVMWhIi%2Fp%2Bn51Z%2BjWosiigvQIbnsac',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 206.648 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:42.419Z"}
  console.log
    CSRF token generation: {
      sessionID: 'OxjA8fYd1b9Oi2Ok4V9HrQm7eE-QmSu-',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: x2Q7G7Tf-kwBfmbXnldy8tQm1oFvw6xRO_Eg

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: OxjA8fYd1b9Oi2Ok4V9HrQm7eE-QmSu-

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: z-D8vD4YgE...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 8.702 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:43.175Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'OxjA8fYd1b9Oi2Ok4V9HrQm7eE-QmSu-',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AOxjA8fYd1b9Oi2Ok4V9HrQm7eE-QmSu-.ohyuZiyxXwvut3tVRFaynbtvZrzqMWF9WtSE2dmbuyM',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3,
      deliveryDate: '2025-05-28',
      deliveryTime: 'evening'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 202.532 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1173:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:44.076Z"}
  console.log
    CSRF token generation: {
      sessionID: 'WIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 4Xlz60MA-3YsFbgfC6shZdigluLOLdgy0xRE

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: WIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: hcvjd7hzkt...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 12.253 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:44.755Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'WIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7.2COIfWzvSQtvDeIdpH%2Fjke1eIzeONHbRAaUTYRddl0g',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 203.408 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:44.961Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'WIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7.2COIfWzvSQtvDeIdpH%2Fjke1eIzeONHbRAaUTYRddl0g',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 204.540 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:45.168Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'WIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AWIDnR7iIJfuBgDWz2UXg-m11wT3ulGf7.2COIfWzvSQtvDeIdpH%2Fjke1eIzeONHbRAaUTYRddl0g',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2,
      deliveryDate: '2025-05-27',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 202.493 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:46.065Z"}
  console.log
    CSRF token generation: {
      sessionID: 'Q5wPLHq6fo4PkXHB1rnRT-TRB_ddiazb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:268:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:285:13)

  console.log
    Token: 9Jp9siY8-FAhmvQ1a_sABCiFI7PKAlheVGC4

      at log (server/config/csrf-config.js:286:13)

  console.log
    Session ID: Q5wPLHq6fo4PkXHB1rnRT-TRB_ddiazb

      at log (server/config/csrf-config.js:287:13)

  console.log
    CSRF Secret: 2NrNEiq87E...

      at log (server/config/csrf-config.js:288:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:289:13)

[0mGET /api/csrf-token [32m200[0m 8.146 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-06T22:51:46.760Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'Q5wPLHq6fo4PkXHB1rnRT-TRB_ddiazb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3AQ5wPLHq6fo4PkXHB1rnRT-TRB_ddiazb.5W0uPWIjAkHtlcr2T4ATfSstjlv4cWDz%2BPVOwGdMHn0',
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:201:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1,
      deliveryDate: '2025-05-28',
      deliveryTime: 'afternoon'
    }

      at log (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:82:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:92:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:95:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:105:13)

[0mPOST /api/v1/orders [32m201[0m 204.772 ms - 104[0m
PASS tests/integration/order.test.js (38.594 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1428 ms)
      ✓ should create order as affiliate for their customer (952 ms)
      ✓ should fail with invalid customer ID (805 ms)
      ✓ should fail with invalid affiliate ID (832 ms)
      ✓ should fail when customer tries to create order for another customer (879 ms)
      ✓ should validate required fields (768 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (910 ms)
      ✓ should return order details for affiliate (925 ms)
      ✓ should fail for unauthorized customer (843 ms)
      ✓ should return 404 for non-existent order (839 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (953 ms)
      ✓ should update weight when processing (979 ms)
      ✓ should prevent invalid status transitions (873 ms)
      ✓ should fail for unauthorized affiliate (880 ms)
      ✓ should fail for customers (834 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (962 ms)
      ✓ should cancel order as affiliate (941 ms)
      ✓ should prevent cancelling non-cancellable orders (871 ms)
      ✓ should fail for unauthorized user (840 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (953 ms)
      ✓ should handle partial bulk update failures (989 ms)
      ✓ should cancel multiple orders in bulk (962 ms)
    Order export functionality
      ✓ should export orders as CSV (896 ms)
      ✓ should export orders as JSON (874 ms)
      ✓ should export orders as Excel (886 ms)
      ✓ should respect export permissions (813 ms)
    Payment status updates
      ✓ should update payment status (926 ms)
      ✓ should handle payment failure (867 ms)
      ✓ should prevent payment status update on non-delivered orders (877 ms)
      ✓ should record refund (911 ms)
    Order filtering and search
      ✓ should search orders by customer name (964 ms)
      ✓ should filter orders by multiple criteria (927 ms)
      ✓ should filter by pickup time slots (940 ms)
      ✓ should provide aggregated statistics with filters (879 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1522 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1656 ms)
      ✓ should calculate commission for multiple orders (1989 ms)
      ✓ should handle high delivery fee scenarios (1486 ms)

-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                           
-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   79.45 |    71.32 |   82.65 |   79.26 |                                                                                                                                                                                                                                                                                                                                                             
 config                      |    94.9 |       80 |     100 |    94.9 |                                                                                                                                                                                                                                                                                                                                                             
  csrf-config.js             |   85.45 |       70 |     100 |   85.45 | 212-236,246-247,262,277-278                                                                                                                                                                                                                                                                                                                                 
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                              
 controllers                 |   77.31 |    66.37 |   82.31 |   77.22 |                                                                                                                                                                                                                                                                                                                                                             
  administratorController.js |   63.16 |    52.01 |   53.19 |   63.06 | 110-111,185-203,220,271,294-295,311,366-367,384,402,430-431,470-471,558-576,614,674-675,739-740,758,816-817,877-878,889-925,938-1092,1103-1189,1200-1318,1329-1418,1429-1483,1496-1513,1524-1545,1556-1744,1769,1778,1807,1812,1831-1832,1860-1861,1910-1911,1935,1958-1959,1976,2030,2045-2046                                                             
  affiliateController.js     |   89.11 |    81.29 |     100 |   88.88 | 204,214,245-247,281-282,299,309,324,383-384,436-437,442,502-503,526,557-560,575,664,722-723,739,822-823,858,940-941                                                                                                                                                                                                                                         
  authController.js          |    72.6 |    57.53 |     100 |    72.6 | 127-128,140,173-178,182,212-213,231-232,249-250,339-340,369-370,420-421,453-454,504-505,520,532-537,566-574,582-583,598,611-627,634,643,646,668-669,716,730,754,775-776,819-834,946,951-996,1024,1066-1107,1251,1318,1329,1392-1393,1408,1517-1518,1533,1586-1587,1599-1643,1664-1727,1732-1778,1806,1842-1880,1892,1928,1942-1943,1956,1969,2026,2075-2076 
  customerController.js      |   74.35 |    68.88 |   86.66 |   73.95 | 128,147-148,207-208,227,240,263-279,289-290,309,322,334,336,338,372-373,391,404,471-494,506-548,582,625,637,677-678                                                                                                                                                                                                                                         
  operatorController.js      |    91.4 |     81.3 |   83.33 |   91.66 | 367-368,374-404,491-492,582-583,610-611,635                                                                                                                                                                                                                                                                                                                 
  orderController.js         |    86.4 |    73.48 |     100 |   86.98 | 165-166,252-253,272,341-342,360,410-411,427,436,446,457,503-508,519-520,535,545,558,571-576,599-600,739-746,773,785,802,844-845,872-873,940-941,967-968,1030-1031                                                                                                                                                                                           
 middleware                  |   96.95 |    93.65 |   94.73 |   96.78 |                                                                                                                                                                                                                                                                                                                                                             
  auth.js                    |   84.44 |    88.88 |   66.66 |   84.44 | 88-90,129-139                                                                                                                                                                                                                                                                                                                                               
  errorHandler.js            |   97.82 |    87.09 |     100 |   97.82 | 10                                                                                                                                                                                                                                                                                                                                                          
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                             
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
 models                      |    95.1 |    90.95 |     100 |   95.56 |                                                                                                                                                                                                                                                                                                                                                             
  Administrator.js           |   97.18 |    92.85 |     100 |     100 | 202-209                                                                                                                                                                                                                                                                                                                                                     
  Affiliate.js               |   91.66 |    86.11 |     100 |   91.66 | 77,164,168                                                                                                                                                                                                                                                                                                                                                  
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 97,101                                                                                                                                                                                                                                                                                                                                                      
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  Order.js                   |   75.55 |    74.28 |     100 |   75.55 | 118,163-179                                                                                                                                                                                                                                                                                                                                                 
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                          
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
 routes                      |   88.53 |    54.54 |   77.41 |   88.48 |                                                                                                                                                                                                                                                                                                                                                             
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  authRoutes.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                          
  customerRoutes.js          |   95.45 |    83.33 |     100 |   95.45 | 41                                                                                                                                                                                                                                                                                                                                                          
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  socialAuthRoutes.js        |   56.25 |    17.64 |   14.28 |   56.25 | 50-57,79-86,150-163,176-177,187-196,219-228                                                                                                                                                                                                                                                                                                                 
  systemConfigRoutes.js      |   80.85 |       75 |     100 |   80.43 | 23-24,49-50,65,72-73,105-106                                                                                                                                                                                                                                                                                                                                
 utils                       |   56.39 |    63.74 |   55.35 |    54.7 |                                                                                                                                                                                                                                                                                                                                                             
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 98                                                                                                                                                                                                                                                                                                                                                          
  emailService.js            |       0 |        0 |       0 |       0 | 4-743                                                                                                                                                                                                                                                                                                                                                       
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  fieldFilter.js             |   92.06 |    81.17 |     100 |   92.98 | 140,202,204,206                                                                                                                                                                                                                                                                                                                                             
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                       
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                             
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                         
-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for statements (80%) not met: 79.45%
Jest: "global" coverage threshold for branches (80%) not met: 71.32%
Jest: "global" coverage threshold for lines (80%) not met: 79.26%
Summary of all failing tests
FAIL tests/unit/administratorController.test.js
  ● Test suite failed to run

    TypeError: administratorSchema.set is not a function

      222 |
      223 | // Transform output
    > 224 | administratorSchema.set('toJSON', {
          |                     ^
      225 |   transform: function(doc, ret) {
      226 |     delete ret.password;
      227 |     delete ret.passwordResetToken;

      at Object.set (server/models/Administrator.js:224:21)
      at Object.require (server/controllers/administratorController.js:4:23)
      at Object.require (tests/unit/administratorController.test.js:38:33)

FAIL tests/unit/authController.test.js
  ● Auth Controller › affiliateLogin › should successfully login an affiliate with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "refreshToken", Any<String>, Any<Object>

    Number of calls: 0

      88 |       );
      89 |       expect(mockAffiliate.save).toHaveBeenCalled();
    > 90 |       expect(res.cookie).toHaveBeenCalledWith('refreshToken', expect.any(String), expect.any(Object));
         |                          ^
      91 |       expect(res.status).toHaveBeenCalledWith(200);
      92 |       expect(res.json).toHaveBeenCalledWith(
      93 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:90:26)

  ● Auth Controller › administratorLogin › should successfully login administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "AdminPass123!"

    Number of calls: 0

      386 |
      387 |       expect(Administrator.findOne).toHaveBeenCalledWith({ email: 'admin@example.com' });
    > 388 |       expect(mockAdmin.comparePassword).toHaveBeenCalledWith('AdminPass123!');
          |                                         ^
      389 |       expect(mockAdmin.resetLoginAttempts).toHaveBeenCalled();
      390 |       expect(res.json).toHaveBeenCalledWith({
      391 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:388:41)

  ● Auth Controller › administratorLogin › should handle locked account

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 423
    Received: 500

    Number of calls: 1

      410 |       await authController.administratorLogin(req, res);
      411 |
    > 412 |       expect(res.status).toHaveBeenCalledWith(423);
          |                          ^
      413 |       expect(res.json).toHaveBeenCalledWith({
      414 |         success: false,
      415 |         message: 'Account is locked due to too many failed login attempts. Please try again later.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:412:26)

  ● Auth Controller › administratorLogin › should handle inactive administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401
    Received: 500

    Number of calls: 1

      430 |       await authController.administratorLogin(req, res);
      431 |
    > 432 |       expect(res.status).toHaveBeenCalledWith(401);
          |                          ^
      433 |       expect(res.json).toHaveBeenCalledWith({
      434 |         success: false,
      435 |         message: 'Account is deactivated. Please contact support.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:432:26)

  ● Auth Controller › operatorLogin › should successfully login operator with PIN

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"operatorId": "OP001"}

    Number of calls: 0

      456 |       await authController.operatorLogin(req, res);
      457 |
    > 458 |       expect(Operator.findOne).toHaveBeenCalledWith({ operatorId: 'OP001' });
          |                                ^
      459 |       expect(mockOperator.comparePassword).toHaveBeenCalledWith('1234');
      460 |       expect(res.json).toHaveBeenCalledWith({
      461 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:458:32)

  ● Auth Controller › operatorLogin › should increment login attempts on failure

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      482 |       await authController.operatorLogin(req, res);
      483 |
    > 484 |       expect(mockOperator.incLoginAttempts).toHaveBeenCalled();
          |                                             ^
      485 |       expect(res.status).toHaveBeenCalledWith(401);
      486 |     });
      487 |   });

      at Object.toHaveBeenCalled (tests/unit/authController.test.js:484:45)

  ● Auth Controller › logout › should logout user and blacklist token

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      498 |       await authController.logout(req, res);
      499 |
    > 500 |       expect(TokenBlacklist.prototype.save).toHaveBeenCalled();
          |                                             ^
      501 |       expect(RefreshToken.findOneAndUpdate).toHaveBeenCalledWith(
      502 |         { token: 'refresh-token' },
      503 |         expect.objectContaining({ revokedByIp: '127.0.0.1' })

      at Object.toHaveBeenCalled (tests/unit/authController.test.js:500:45)

  ● Auth Controller › forgotPassword › should send password reset email for affiliate

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      522 |       
      523 |       Affiliate.findOne.mockResolvedValue(mockAffiliate);
    > 524 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      525 |       emailService.sendPasswordResetEmail.mockResolvedValue(true);
      526 |
      527 |       await authController.forgotPassword(req, res);

      at Object.mockReturnValue (tests/unit/authController.test.js:524:31)

  ● Auth Controller › forgotPassword › should handle non-existent email gracefully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Password reset instructions sent to your email",
    -   "success": true,
    +   "message": "No account found with that email address",
    +   "success": false,
      },

    Number of calls: 1

      544 |
      545 |       // Should still return success to prevent email enumeration
    > 546 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      547 |         success: true,
      548 |         message: 'Password reset instructions sent to your email'
      549 |       });

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:546:24)

  ● Auth Controller › resetPassword › should reset password with valid token

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      567 |       
      568 |       Affiliate.findOne.mockResolvedValue(mockAffiliate);
    > 569 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      570 |       encryptionUtil.hashPassword.mockReturnValue({
      571 |         salt: 'new-salt',
      572 |         hash: 'new-hash'

      at Object.mockReturnValue (tests/unit/authController.test.js:569:31)

  ● Auth Controller › resetPassword › should reject expired token

    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')

      593 |       
      594 |       Customer.findOne.mockResolvedValue(null);
    > 595 |       encryptionUtil.hashData.mockReturnValue('hashed-token');
          |                               ^
      596 |
      597 |       await authController.resetPassword(req, res);
      598 |

      at Object.mockReturnValue (tests/unit/authController.test.js:595:31)

  ● Auth Controller › OAuth functions › startOAuthSession should create session

    TypeError: authController.startOAuthSession is not a function

      618 |       OAuthSession.mockImplementation(() => mockSession);
      619 |
    > 620 |       await authController.startOAuthSession(req, res);
          |                            ^
      621 |
      622 |       expect(mockSession.save).toHaveBeenCalled();
      623 |       expect(res.json).toHaveBeenCalledWith({

      at Object.startOAuthSession (tests/unit/authController.test.js:620:28)

  ● Auth Controller › OAuth functions › completeOAuthSession should handle successful OAuth

    TypeError: authController.completeOAuthSession is not a function

      649 |       Affiliate.findById.mockResolvedValue(mockAffiliate);
      650 |
    > 651 |       await authController.completeOAuthSession(req, res);
          |                            ^
      652 |
      653 |       expect(res.json).toHaveBeenCalledWith({
      654 |         success: true,

      at Object.completeOAuthSession (tests/unit/authController.test.js:651:28)

  ● Auth Controller › OAuth functions › checkOAuthSession should return session status

    TypeError: authController.checkOAuthSession is not a function

      672 |       OAuthSession.findOne.mockResolvedValue(mockSession);
      673 |
    > 674 |       await authController.checkOAuthSession(req, res);
          |                            ^
      675 |
      676 |       expect(res.json).toHaveBeenCalledWith({
      677 |         success: true,

      at Object.checkOAuthSession (tests/unit/authController.test.js:674:28)


Test Suites: 2 failed, 50 passed, 52 total
Tests:       14 failed, 22 skipped, 1145 passed, 1181 total
Snapshots:   0 total
Time:        387.957 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
