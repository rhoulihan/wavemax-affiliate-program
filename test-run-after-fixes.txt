
> wavemax-affiliate-program@1.0.0 test
> jest --runInBand --forceExit --testTimeout=30000

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (76 ms)
    ✓ should be a winston logger instance (18 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (58 ms)
    ✓ should verify password correctly (171 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (1 ms)
    isConfigured
      ✓ should return true when properly configured
      ✓ should return false when not configured (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params
    ✓ should enforce minimum values
    ✓ should enforce maximum limit (1 ms)
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers (1 ms)
    ✓ should preserve other query parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (1 ms)
      ✓ should log email operations (1 ms)
      ✓ should handle email errors
    Email Templates
      ✓ should process email templates (1 ms)
      ✓ should handle missing template variables
    Email Validation
      ✓ should validate email addresses (1 ms)
    Email Queue
      ✓ should queue emails for sending

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (21 ms)
      ✓ should export vendors as CSV (3 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (3 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (3 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (3 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields (1 ms)
    ✓ should configure Facebook strategy with correct parameters (8 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (13 ms)
    GET /api/orders/export
      ✓ should export orders (4 ms)
    GET /api/orders/search
      ✓ should search orders (8 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (2 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (2 ms)
    GET /api/orders/:orderId
      ✓ should get order details (2 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (3 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (2 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:47.360Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:47.498Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T17:30:47.530Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:47.680Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:47.804Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:48.422Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:30:48.541Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (142 ms)
      ✓ should update existing token if one exists (183 ms)
      ✓ should calculate expiration time correctly (124 ms)
    getCurrentToken
      ✓ should return the most recent token (141 ms)
      ✓ should return null if no tokens exist (106 ms)
    clearTokens
      ✓ should remove all tokens (230 ms)
    token expiration
      ✓ should identify expired tokens (141 ms)
      ✓ should handle tokens without refresh token (117 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (246 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (18 ms)
    ✓ GET /api/orders/export - should export orders (4 ms)
    ✓ GET /api/orders/search - should search orders (4 ms)
    ✓ GET /api/orders/statistics - should get statistics (3 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (4 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (3 ms)
    ✓ GET /api/orders/:orderId - should get order details (3 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (3 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (3 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (4 ms)
    ✓ Error handling - should return 404 for unknown routes (3 ms)
    ✓ Error handling - should handle controller errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (8 ms)
      ✓ should reject invalid credentials (2 ms)
    POST /api/auth/register
      ✓ should register new user (2 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (3 ms)
      ✓ should reject logout without token (2 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (2 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (2 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (2 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (5 ms)
      ✓ should reject without token (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (15 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values (1 ms)
      ✓ should parse string amounts
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts
      ✓ should round to 2 decimal places (1 ms)
    formatDate
      ✓ should format date with short format by default (5 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format
      ✓ should handle string dates (1 ms)
      ✓ should handle null and undefined dates
      ✓ should handle invalid dates
      ✓ should handle different format cases
    generateRandomString
      ✓ should generate a string of default length 10 (1 ms)
      ✓ should generate strings of specified length
      ✓ should generate different strings on each call (1 ms)
      ✓ should only use alphanumeric characters
    sanitizeForCSV
      ✓ should return empty string for null and undefined (1 ms)
      ✓ should convert non-string values to strings
      ✓ should leave simple strings unchanged
      ✓ should escape double quotes by doubling them (1 ms)
      ✓ should wrap strings containing commas in quotes
      ✓ should wrap strings containing newlines in quotes
      ✓ should handle complex strings with multiple special characters
    calculatePercentage
      ✓ should calculate percentage correctly (1 ms)
      ✓ should handle zero total
      ✓ should handle null or undefined total
      ✓ should respect decimal places parameter (1 ms)
      ✓ should round correctly
      ✓ should handle edge cases (1 ms)
      ✓ should handle negative values

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (6 ms)
      ✓ should handle missing form gracefully
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter (1 ms)
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly
      ✓ should handle both login and customer parameters together (1 ms)
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function (1 ms)
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email (1 ms)
    Admin data validation
      ✓ should handle admin with required fields
      ✓ should handle admin with different adminId formats (3 ms)
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (7 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (6 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (11 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (3 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (3 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (4 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (3 ms)
    Error Handling
      ✓ should handle controller errors gracefully (3 ms)
      ✓ should handle missing routes with 404 (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle JSON parsing errors (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (439 ms)
      ✓ should authenticate valid x-auth-token header (224 ms)
      ✓ should reject request with no token (204 ms)
      ✓ should reject request with invalid token (204 ms)
      ✓ should reject request with expired token (204 ms)
      ✓ should handle malformed Authorization header (205 ms)
      ✓ should reject blacklisted token (212 ms)
    authorize
      ✓ should authorize user with correct role (210 ms)
      ✓ should authorize user with one of multiple roles (205 ms)
      ✓ should reject user with incorrect role (208 ms)
      ✓ should reject user with no role (219 ms)
      ✓ should reject when user is not set (206 ms)
    authLimiter
      ✓ should be a function (203 ms)
      ✓ should have rate limit configuration (204 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly (1 ms)
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully (1 ms)
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input (1 ms)
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing (1 ms)
      ✓ should not warn when all required variables are present (1 ms)
    getEnvironment
      ✓ should return configured environment (1 ms)
      ✓ should default to production if not configured
    getMerchantId
      ✓ should return merchant ID when configured
      ✓ should throw error when not configured (8 ms)
    getFormId
      ✓ should return form ID when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormActionUrl
      ✓ should return configured form action URL
      ✓ should return default URL when not configured (1 ms)
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured
    isConfigured
      ✓ should return true when all required config is present
      ✓ should return false and log error when config is incomplete (1 ms)
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing (1 ms)
      ✓ should set testModeEnabled to false when not configured (1 ms)
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter (1 ms)
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer (1 ms)
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter (1 ms)
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering (1 ms)
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (7 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (7 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (3 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (8 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (2 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (3 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (3 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (3 ms)
      ✓ should handle POST callback routes (3 ms)
      ✓ should handle multiple callback paths (7 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (3 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (3 ms)
      ✓ should handle empty request bodies (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (16 ms)
      ✓ should allow access in test environment (3 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (2 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (2 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (1 ms)
      ✓ should allow access with normal referer (2 ms)
    Route Handlers
      ✓ should serve index.html at root path (2 ms)
      ✓ should serve critical-files page (3 ms)
      ✓ should serve test-templates page (3 ms)
      ✓ should serve action-plan page (2 ms)
      ✓ should return 404 for non-existent pages (2 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (6 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (2 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (2 ms)
      ✓ should return valid HTML for 404 page (2 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (3 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (3 ms)
      ✓ should handle specific route handlers (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (9 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production
      ✓ should handle errors without message (1 ms)
      ✓ should handle errors with code property (1 ms)
      ✓ should log all console error sections
    AppError
      ✓ should create custom error with status code
      ✓ should have stack trace (1 ms)
      ✓ should work with error handler
    Edge cases
      ✓ should handle null error (2 ms)
      ✓ should handle undefined error (5 ms)
      ✓ should handle non-error objects (1 ms)
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderWithSystemConfig.test.js (9.467 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (800 ms)
      ✓ should use default rate when SystemConfig is not available (922 ms)
      ✓ should calculate estimated total using SystemConfig rate (649 ms)
      ✓ should calculate actual total using SystemConfig rate (631 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (629 ms)
      ✓ should calculate commission for zero delivery fee (635 ms)
      ✓ should handle commission calculation for large orders (633 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (632 ms)
      ✓ should update calculations when base rate changes (790 ms)
      ✓ should validate minimum and maximum base rates (858 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1150 ms)
      ✓ should match revenue calculator with different parameters (662 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (136 ms)
      ✓ should use default values for blacklistedAt and reason (116 ms)
      ✓ should require all mandatory fields (79 ms)
      ✓ should enforce unique token constraint (233 ms)
      ✓ should validate userType enum (79 ms)
      ✓ should accept all valid userTypes (204 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (110 ms)
        ✓ should use default reason when not provided (108 ms)
        ✓ should return null when token already blacklisted (237 ms)
        ✓ should handle custom reasons (110 ms)
        ✓ should propagate non-duplicate errors (77 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (137 ms)
        ✓ should return false for non-blacklisted token (102 ms)
        ✓ should handle empty token (102 ms)
        ✓ should handle null token (103 ms)
      cleanupExpired
        ✓ should delete expired tokens (238 ms)
        ✓ should return 0 when no expired tokens (208 ms)
        ✓ should handle empty collection (102 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (2 ms)
      ✓ should reject invalid email addresses (1 ms)
    isValidPhone
      ✓ should validate correct US phone numbers
      ✓ should reject invalid phone numbers (1 ms)
    isValidUsername
      ✓ should validate correct usernames
      ✓ should reject invalid usernames (1 ms)
    isValidZipCode
      ✓ should validate correct US zip codes
      ✓ should reject invalid zip codes (1 ms)
    isValidTimeFormat
      ✓ should validate correct time formats
      ✓ should reject invalid time formats (1 ms)
    isValidName
      ✓ should validate correct names
      ✓ should reject invalid names (1 ms)
    mongooseValidators
      ✓ should provide email validator
      ✓ should provide phone validator
      ✓ should provide username validator (1 ms)
      ✓ should provide zipCode validator
      ✓ should provide timeFormat validator
      ✓ should provide name validator
    expressValidators
      ✓ should provide email validator function (1 ms)
      ✓ should provide phone validator function
      ✓ should provide username validator function
      ✓ should provide zipCode validator function
      ✓ should provide timeFormat validator function (1 ms)
      ✓ should provide name validator function
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails
      validatePhone
        ✓ should return validation result for phones (1 ms)
      validateUsername
        ✓ should return validation result for usernames
      validateZipCode
        ✓ should return validation result for zip codes (1 ms)
      validateTimeFormat
        ✓ should return validation result for time formats
      validateName
        ✓ should return validation result for names

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (11 ms)
      ✓ should throw error when encryption key is missing (2 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (3 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (56 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (2 ms)
      ✓ should handle invalid inputs gracefully (158 ms)
      ✓ should return false for invalid salt format (68 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens
      ✓ should handle token generation errors
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (8 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (1 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1327 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/models.test.js (16.169 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (1151 ms)
      ✓ should require required fields (793 ms)
      ✓ should enforce unique constraints (1104 ms)
      ✓ should handle payment information correctly (1087 ms)
    Customer Model
      ✓ should create a valid customer (1547 ms)
    Order Model
      ✓ should create a valid order (658 ms)
      ✓ should calculate estimated total correctly (621 ms)
      ✓ should calculate actual total and commission when weight is set (400 ms)
      ✓ should update timestamps for status changes (1698 ms)
    Transaction Model
      ✓ should create a valid transaction (602 ms)
      ✓ should validate transaction type (1560 ms)
      ✓ should validate transaction status (1026 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (1574 ms)
      ✓ should validate user type (1045 ms)
      ✓ should check if token is expired (406 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (18 ms)
      ✓ should handle errors when fetching public configs (7 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (3 ms)
      ✓ should return 404 for non-existent public config (2 ms)
      ✓ should handle errors when fetching specific config (4 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (3 ms)
      ✓ should filter configurations by category (3 ms)
      ✓ should handle errors when fetching all configs (3 ms)
      ✓ should require authentication (2 ms)
      ✓ should require administrator role (72 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (11 ms)
      ✓ should require system_config permission (56 ms)
      ✓ should handle validation errors (13 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (15 ms)
      ✓ should handle errors during initialization (39 ms)
      ✓ should require authentication and admin role (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (137 ms)
      ✓ should generate ADM002 when ADM001 exists (255 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (285 ms)
      ✓ should handle non-sequential admin IDs correctly (276 ms)
      ✓ should handle double-digit admin IDs (223 ms)
      ✓ should handle triple-digit admin IDs (227 ms)
      ✓ should handle large admin ID numbers (225 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (106 ms)
      ✓ should handle numbers above 999 without padding issues (107 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (106 ms)
      ✓ should handle edge cases in admin ID parsing (106 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (270 ms)
      ✓ should work correctly with different creation dates (276 ms)
      ✓ should work correctly with different permissions (332 ms)
    Performance and reliability
      ✓ should handle database query efficiently (249 ms)
      ✓ should handle concurrent admin creation scenario (260 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (7 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (1 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF (1 ms)
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests (1 ms)
        ✓ should consider CSRF for POST requests
        ✓ should consider CSRF for PUT requests (1 ms)
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests (5 ms)
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration (1 ms)
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation (1 ms)
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (1 ms)
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes (1 ms)
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2 (1 ms)
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase (1 ms)
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods (1 ms)
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints (1 ms)
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters (1 ms)
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array (1 ms)
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully (1 ms)
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array
      ✓ should handle non-array inputs (1 ms)
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles
      ✓ should not expose sensitive fields in public view (1 ms)
      ✓ should include appropriate fields for each role
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (1 ms)
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions (1 ms)
    responseFilter middleware
      ✓ should create filtered json method
      ✓ should filter response data when _filterType is provided (1 ms)
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated (1 ms)
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (2 ms)
      ✓ should handle empty store IP
      ✓ should load additional IPs from environment (1 ms)
      ✓ should trim whitespace from IPs
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment
      ✓ should handle empty IP ranges (1 ms)
    Session renewal configuration
      ✓ should use default session renewal settings
      ✓ should load custom session renewal settings from environment (1 ms)
      ✓ should handle invalid numeric values
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs (1 ms)
      ✓ should return false for non-whitelisted IPs (1 ms)
      ✓ should check IP ranges (1 ms)
      ✓ should return false for IPs outside ranges
    isInRange function
      ✓ should correctly check IPs in /24 subnet (1 ms)
      ✓ should correctly check IPs in /16 subnet
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host)
      ✓ should correctly check IPs in /0 subnet (all IPs) (1 ms)
      ✓ should handle invalid CIDR notation (1 ms)
      ✓ should handle invalid mask bits
      ✓ should handle invalid IP addresses (1 ms)
      ✓ should handle IP parts out of range
      ✓ should handle edge cases with console error (1 ms)
      ✓ should correctly handle boundary cases (1 ms)
      ✓ should handle various subnet sizes correctly
    Configuration export structure
      ✓ should export all required properties and functions (1 ms)
      ✓ should have correct session renewal properties (1 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully (1 ms)
      ✓ should return null when no callbacks available
    releaseCallback
      ✓ should release callback successfully (1 ms)
      ✓ should handle null callback gracefully
    getPoolStatus
      ✓ should return pool status with all handler details (1 ms)
      ✓ should handle empty pool (1 ms)
    startCleanupJob
      ✓ should start cleanup interval (1 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (1 ms)
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (1 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should reject sequential characters
        ✓ should reject repeated characters
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks (1 ms)
    customPasswordValidator
      ✓ should work as express-validator custom validator (10 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function (1 ms)
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (54 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (7 ms)
      ✓ should score length appropriately
      ✓ should score character variety (1 ms)
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPool.test.js (6.201 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (144 ms)
      ✓ should have default values (147 ms)
      ✓ should have unique constraint on callbackPath (137 ms)
      ✓ should create document with defaults (166 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (206 ms)
        ✓ should increment usage count on each lock (285 ms)
        ✓ should update lastUsedAt timestamp (202 ms)
      release()
        ✓ should release locked callback (253 ms)
        ✓ should handle releasing already unlocked callback (187 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (205 ms)
        ✓ should use least recently used callback (240 ms)
        ✓ should acquire expired locked callback (236 ms)
        ✓ should return null when no callbacks available (232 ms)
        ✓ should increment usage count atomically (208 ms)
      releaseCallback()
        ✓ should release callback by payment token (198 ms)
        ✓ should return null if no callback found with token (163 ms)
        ✓ should only release callback locked by specific token (221 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (264 ms)
        ✓ should not release recently locked callbacks (238 ms)
        ✓ should handle custom timeout values (237 ms)
        ✓ should return 0 when no expired locks (240 ms)
        ✓ should handle empty collection (234 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (169 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (782 ms)
      ✓ should handle invalid ObjectId gracefully (169 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (1 ms)
      ✓ should sanitize arrays recursively
      ✓ should sanitize objects recursively (1 ms)
      ✓ should handle null values
      ✓ should handle undefined values
      ✓ should handle numbers (1 ms)
      ✓ should handle booleans
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters (1 ms)
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (4 ms)
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should validate complex email formats (1 ms)
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters
      ✓ should handle international format
      ✓ should remove HTML and special characters (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters
      ✓ should remove spaces (1 ms)
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths (1 ms)
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain (1 ms)
      ✓ should handle complex nested structures

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (171 ms)
      ✓ should handle email sending failures gracefully (123 ms)
      ✓ should return error for invalid customer (53 ms)
      ✓ should return error for invalid affiliate (56 ms)
      ✓ should enforce authorization (56 ms)
    getOrderDetails
      ✓ should return order details for authorized user (52 ms)
      ✓ should return 404 for non-existent order (51 ms)
      ✓ should enforce authorization for customers (51 ms)
    updateOrderStatus
      ✓ should successfully update order status (52 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (53 ms)
      ✓ should send commission email when complete (51 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (51 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (3 ms)
      ✓ should have unique event names (1 ms)
    logAuditEvent
      ✓ should log basic audit event (1 ms)
      ✓ should add request context when provided (1 ms)
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish
      ✓ should log successful responses (1 ms)
      ✓ should not log failed responses
      ✓ should include request context in logs (1 ms)
    logLoginAttempt
      ✓ should log successful login
      ✓ should log failed login with reason (1 ms)
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access (1 ms)
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods
      ✓ should not add console transport in production

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminScript.test.js (10.03 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (358 ms)
      ✓ should contain required functionality markers (360 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (577 ms)
      ✓ should calculate next admin ID correctly (701 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (356 ms)
      ✓ should accept strong passwords for admins (753 ms)
    Permission System Validation
      ✓ should validate all permission types (449 ms)
      ✓ should handle partial permission sets (473 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (539 ms)
      ✓ should prevent duplicate emails (551 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (457 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (467 ms)
      ✓ should normalize email addresses (458 ms)
      ✓ should validate email format (718 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (449 ms)
      ✓ should work with password hashing middleware (459 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (361 ms)
      ✓ should handle invalid input gracefully (362 ms)
    Security Considerations
      ✓ should not log or expose passwords (369 ms)
      ✓ should generate secure random passwords when needed (365 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/oAuthSession.test.js (6.652 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (330 ms)
      ✓ should require sessionId field (222 ms)
      ✓ should require result field (204 ms)
      ✓ should automatically set createdAt (234 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (245 ms)
      ✓ should enforce unique sessionId (282 ms)
      ✓ should allow complex result objects (236 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (263 ms)
        ✓ should throw error for duplicate session IDs (275 ms)
        ✓ should handle database errors (202 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (259 ms)
        ✓ should return null for non-existent session (226 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (288 ms)
        ✓ should return null when consuming non-existent session (241 ms)
        ✓ should handle race conditions safely (292 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (449 ms)
        ✓ should return zero deletions when no expired sessions exist (291 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (237 ms)
      ✓ should respect custom expiresAt when provided (231 ms)
    Data Integrity
      ✓ should preserve all data types in result field (239 ms)
      ✓ should handle empty and minimal result objects (364 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (210 ms)
      ✓ should handle very large result objects (310 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (58 ms)
      ✓ should require customerId (61 ms)
      ✓ should require paygistixId (61 ms)
      ✓ should validate type enum (57 ms)
      ✓ should reject invalid type (66 ms)
      ✓ should default type to card (57 ms)
    Card Validation
      ✓ should require card details when type is card (58 ms)
      ✓ should validate card last4 length (58 ms)
      ✓ should validate card brand enum (55 ms)
      ✓ should reject invalid card brand (55 ms)
      ✓ should validate expiry month range (54 ms)
      ✓ should validate expiry year is not in the past (63 ms)
      ✓ should require card fingerprint (56 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (54 ms)
      ✓ should require bank account details when type is bank_account (53 ms)
      ✓ should validate bank account last4 length (53 ms)
      ✓ should validate account type enum (54 ms)
      ✓ should reject invalid account type (53 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (53 ms)
      ✓ should require wallet type when type is wallet (53 ms)
      ✓ should validate wallet type enum (54 ms)
    Default Values
      ✓ should default isDefault to false (53 ms)
      ✓ should default isActive to true (53 ms)
      ✓ should default isVerified to false (53 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (53 ms)
        ✓ should format bank account display name (53 ms)
        ✓ should format wallet display name (53 ms)
        ✓ should handle google_pay formatting (53 ms)
        ✓ should return default for unknown type (53 ms)
      isExpired
        ✓ should return false for non-card types (53 ms)
        ✓ should return false for future expiry (55 ms)
        ✓ should return true for past year (53 ms)
        ✓ should return true for current year past month (53 ms)
        ✓ should return false for current year future month (55 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (53 ms)
        ✓ should not allow use of inactive payment method (53 ms)
        ✓ should not allow use of expired card (53 ms)
        ✓ should not allow use of unverified bank account (57 ms)
        ✓ should allow use of verified bank account (53 ms)
      markAsUsed()
        ✓ should update lastUsedAt (53 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (53 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (53 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (53 ms)
        ✓ should return null if no duplicate found (53 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (54 ms)
    Metadata Field
      ✓ should store metadata as Map (54 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (54 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (55 ms)
      ✓ should require orderId (56 ms)
      ✓ should require customerId (56 ms)
      ✓ should require paymentMethodId (57 ms)
      ✓ should require paygistixId (66 ms)
      ✓ should require amount (56 ms)
      ✓ should validate amount is non-negative (56 ms)
      ✓ should default currency to USD (60 ms)
      ✓ should validate currency enum (54 ms)
      ✓ should reject invalid currency (54 ms)
      ✓ should validate status enum (62 ms)
      ✓ should reject invalid status (53 ms)
      ✓ should default status to pending (53 ms)
    Default Values
      ✓ should default capturedAmount to 0 (52 ms)
      ✓ should default refundedAmount to 0 (52 ms)
      ✓ should default hasDispute to false (53 ms)
      ✓ should have empty refunds array (53 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (56 ms)
      ✓ should handle zero amounts (52 ms)
      ✓ should handle full refund (52 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (53 ms)
        ✓ should allow refund when status is partially_refunded (55 ms)
        ✓ should not allow refund when status is pending (53 ms)
        ✓ should not allow refund when fully refunded (52 ms)
        ✓ should validate refund amount (53 ms)
        ✓ should handle null amount parameter (54 ms)
      canCapture()
        ✓ should allow capture when status is authorized (53 ms)
        ✓ should not allow capture when status is captured (53 ms)
        ✓ should not allow capture when status is pending (56 ms)
      addRefund()
        ✓ should add refund to refunds array (55 ms)
        ✓ should update refundedAmount (57 ms)
        ✓ should update lastRefundAt (56 ms)
        ✓ should set status to partially_refunded for partial refund (52 ms)
        ✓ should set status to refunded for full refund (52 ms)
        ✓ should handle multiple refunds (53 ms)
        ✓ should handle refund that exceeds captured amount (53 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (54 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (54 ms)
        ✓ should accept custom limit (53 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (53 ms)
    Middleware
      ✓ should have pre-save middleware defined (53 ms)
    Refund Schema
      ✓ should validate refund subdocument (53 ms)
      ✓ should require refundId in refund (54 ms)
      ✓ should require amount in refund (54 ms)
      ✓ should validate refund amount is non-negative (54 ms)
      ✓ should set default createdAt for refund (53 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (56 ms)
      ✓ should allow dispute fields when hasDispute is true (53 ms)
      ✓ should validate dispute amount is non-negative (52 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (53 ms)
      ✓ should store response as mixed type (53 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (9 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (2 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (2 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (16 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (4 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (3 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (8 ms)
      ✓ should validate required fields for social registration (4 ms)
      ✓ should validate service radius range (2 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (3 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (3 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (3 ms)
      ✓ should handle customer Facebook callback (3 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (2 ms)
      ✓ should validate service frequency (3 ms)
    Error Handling
      ✓ should handle errors gracefully (19 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (52 ms)
      ✓ should return error when Paygistix is not configured (55 ms)
      ✓ should handle errors gracefully (60 ms)
    logSubmission
      ✓ should log payment submission successfully (51 ms)
      ✓ should handle logging errors (51 ms)
    createPaymentToken
      ✓ should create payment token successfully (52 ms)
      ✓ should handle no available callbacks (57 ms)
      ✓ should handle token creation errors (56 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (51 ms)
      ✓ should handle token not found (53 ms)
      ✓ should handle database errors (51 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (61 ms)
      ✓ should not cancel non-pending tokens (51 ms)
      ✓ should handle token not found (52 ms)
    updatePaymentStatus
      ✓ should update payment status to success (52 ms)
      ✓ should update payment status to failed (51 ms)
    handleFormCallback
      ✓ should process callback successfully (52 ms)
      ✓ should handle no pending payment for callback (51 ms)
      ✓ should handle callback processing errors (51 ms)
    processCallbackResult
      ✓ should process successful payment from query params (52 ms)
      ✓ should process failed payment (51 ms)
      ✓ should handle body parameters (52 ms)
      ✓ should redirect with all parameters (60 ms)
    getPoolStats
      ✓ should return pool statistics (52 ms)
      ✓ should handle stats retrieval errors (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (7 ms)
        ✓ should handle success status as well as approved (2 ms)
        ✓ should update existing payment if found (2 ms)
        ✓ should handle customer not found gracefully (2 ms)
        ✓ should handle email send failure gracefully (3 ms)
        ✓ should not update customer if already active (1 ms)
      Failed payment
        ✓ should handle declined payment (1 ms)
        ✓ should handle failed status (1 ms)
        ✓ should increment payment attempts on failure (2 ms)
        ✓ should use default error message when none provided (1 ms)
      Error handling
        ✓ should handle order not found (2 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle database errors gracefully (2 ms)
        ✓ should handle payment save error (1 ms)
      Edge cases
        ✓ should handle missing amount parameter (2 ms)
        ✓ should handle malformed maskedCard (2 ms)
        ✓ should log callback parameters (2 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (4 ms)
      ✓ should handle POST callback errors (8 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-27T15:32:21.564Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:21.896Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:32:21.896Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-27T16:32:21.896Z","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:21.932Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:21.932Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:22.047Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:22.143Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:22.143Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:32:22.222Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:32:22.280Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T16:32:22.526Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:22.915Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-27T15:32:22.999Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:23.080Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:23.159Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-27T15:32:23.395Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-27T15:32:23.475Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:23.632Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-27T15:32:23.710Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (84 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (90 ms)
      ✓ should delete verifier after retrieval (90 ms)
      ✓ should clean up old PKCE files (88 ms)
    Authorization URL
      ✓ should generate correct authorization URL (79 ms)
      ✓ should use provided state if given (84 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (150 ms)
      ✓ should throw error if PKCE verifier not found (97 ms)
      ✓ should handle token exchange errors (79 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (198 ms)
      ✓ should throw error if no refresh token available (105 ms)
    Access Token Management
      ✓ should return valid access token if not expired (172 ms)
      ✓ should refresh token if expired (113 ms)
      ✓ should throw error if no valid token and no refresh token (104 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (84 ms)
      ✓ should handle envelope creation errors (81 ms)
      ✓ should return mock envelope in test mode (79 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (79 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (77 ms)
      ✓ should reject invalid webhook signature (79 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (80 ms)
      ✓ should handle declined envelope (77 ms)
    Envelope Status
      ✓ should get envelope status (78 ms)
    Document Download
      ✓ should download completed W9 document (78 ms)
    Envelope Voiding
      ✓ should void an envelope (78 ms)

(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (8 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully (1 ms)
    exportPaymentSummary
      ✓ should export payment summary as JSON (2 ms)
      ✓ should export payment summary as CSV (2 ms)
      ✓ should return 400 when dates are missing
      ✓ should return 404 when no payable commissions found
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (1 ms)
      ✓ should return 400 when required parameters are missing (1 ms)
      ✓ should return 404 when affiliate not found
      ✓ should return 400 when affiliate has no verified W-9 (1 ms)
    getExportHistory
      ✓ should get export history (1 ms)
      ✓ should filter by type

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (1 ms)
        ✓ should accept passwords with 8 or more characters
      Character Type Requirements
        ✓ should require at least one uppercase letter (1 ms)
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (11 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers
        ✓ should reject passwords with sequential letters (1 ms)
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history
        ✓ should accept passwords not in history (1 ms)
      Complete Valid Passwords
        ✓ should accept completely valid passwords
    getPasswordStrength
      ✓ should return correct strength scores (1 ms)
      ✓ should return correct strength labels
    isPasswordInHistory
      ✓ should return true for passwords in history (1 ms)
      ✓ should return false for passwords not in history
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function (1 ms)
      ✓ should validate passwords correctly in express-validator context
      ✓ should throw for invalid passwords in express-validator context (13 ms)
      ✓ should include admin-specific validation when userType is admin
      ✓ should include admin-specific validation when userType is operator
    passwordValidationMiddleware
      ✓ should call next() for valid passwords (1 ms)
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request
      ✓ should include strength assessment in response for invalid passwords
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully (1 ms)
      ✓ should handle very long passwords
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administrator.test.js (7.377 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (205 ms)
      ✓ should require all mandatory fields (86 ms)
      ✓ should enforce email format validation (147 ms)
      ✓ should enforce unique email constraint (520 ms)
      ✓ should enforce unique adminId constraint (494 ms)
      ✓ should validate permission enum values (131 ms)
      ✓ should accept valid permissions (177 ms)
      ✓ should trim whitespace from string fields (162 ms)
      ✓ should convert email to lowercase (164 ms)
      ✓ should not allow role to be changed after creation (221 ms)
    Password Handling
      ✓ should store password as hash and salt (187 ms)
      ✓ should verify correct password (267 ms)
      ✓ should reject incorrect password (236 ms)
      ✓ should not expose password in JSON output (181 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (219 ms)
      ✓ should lock account after 5 failed attempts (224 ms)
      ✓ should reset login attempts on successful login (219 ms)
      ✓ should reset attempts if lock has expired (224 ms)
      ✓ should correctly identify locked accounts (164 ms)
    Password Reset
      ✓ should generate password reset token (164 ms)
      ✓ should set password reset expiry to 30 minutes (162 ms)
    Permissions
      ✓ should check single permission correctly (165 ms)
      ✓ should check multiple permissions with AND operation (167 ms)
      ✓ should check multiple permissions with OR operation (168 ms)
      ✓ should set default permissions if none provided (168 ms)
    Static Methods
      ✓ should find active administrators (299 ms)
      ✓ should find administrator by email with password (194 ms)
      ✓ should handle case-insensitive email search (199 ms)
      ✓ should return null for non-existent email (102 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (163 ms)
      ✓ should update updatedAt on modification (300 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (243 ms)
      ✓ should not override provided admin ID (174 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/generalPaymentCallback.test.js
  General Payment Callback Routes
    GET /
      Registration Payment
        ✓ should redirect to success page on approved registration payment (5 ms)
        ✓ should redirect to success page on success status (2 ms)
        ✓ should redirect to register page with error on failed registration payment (2 ms)
        ✓ should handle missing response message on failure (1 ms)
        ✓ should handle registration payment callback errors (2 ms)
      Order Payment
        ✓ should handle approved order payment successfully (4 ms)
        ✓ should handle success status for order payment (2 ms)
        ✓ should update existing payment record (2 ms)
        ✓ should handle declined order payment (3 ms)
        ✓ should handle failed order payment (2 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle order not found (2 ms)
        ✓ should handle missing orderId in query (3 ms)
        ✓ should handle email service failure gracefully (2 ms)
        ✓ should skip customer update if customer not found (2 ms)
        ✓ should not update already active customer (2 ms)
        ✓ should handle payment callback errors (2 ms)
        ✓ should use order amount if payment amount not provided (1 ms)
        ✓ should handle partial masked card (2 ms)
        ✓ should handle missing masked card (2 ms)
      General error handling
        ✓ should handle general callback errors (11 ms)
    POST /
      Registration Payment
        ✓ should create customer on approved registration payment with session (10 ms)
        ✓ should handle success status for registration (3 ms)
        ✓ should handle customer creation error (3 ms)
        ✓ should handle no pending registration (2 ms)
        ✓ should handle declined registration payment (2 ms)
        ✓ should handle failed registration payment without message (2 ms)
      Order Payment POST
        ✓ should acknowledge order payment callback (1 ms)
        ✓ should handle order payment with explicit type (1 ms)
      General POST error handling
        ✓ should handle POST callback errors (21 ms)
        ✓ should log POST callback data (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:822:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:365:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      843 |     });
      844 |   } catch (error) {
    > 845 |     console.error('Token verification error:', error);
          |             ^
      846 |     res.status(500).json({
      847 |       success: false,
      848 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:845:13)
      at Object.verifyToken (tests/unit/authController.test.js:365:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (2 ms)
      ✓ should return 401 for non-existent affiliate (1 ms)
      ✓ should return 401 for incorrect password
    customerLogin
      ✓ should successfully login a customer with valid credentials (13 ms)
      ✓ should return 401 for non-existent customer (1 ms)
      ✓ should login customer using emailOrUsername field (2 ms)
      ✓ should prioritize emailOrUsername over username field (3 ms)
      ✓ should return error when neither username nor emailOrUsername provided (1 ms)
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (43 ms)
      ✓ should return customer user data
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token (1 ms)
      ✓ should return error for expired refresh token
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator (1 ms)
    operatorLogin
      ✓ should successfully login operator with PIN
      ✓ should increment login attempts on failure (1 ms)
    logout
      ✓ should logout user and blacklist token
    forgotPassword
      ✓ should send password reset email for affiliate (1 ms)
      ✓ should handle non-existent email gracefully
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy (1 ms)
      ✓ should reject when user has lower role in hierarchy
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources (1 ms)
      ✓ should reject operator accessing administrator resources
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role (1 ms)
      ✓ should accept admin for any combination of roles (12 ms)
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource (1 ms)
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource (1 ms)
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (1 ms)
      ✓ should handle array of required permissions
      ✓ should reject when administrator lacks any required permission
      ✓ should handle database errors (1 ms)
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators
      ✓ should reject when operator not found
      ✓ should reject when operator is not active
      ✓ should reject when operator is not on shift (1 ms)
      ✓ should accept active operator on shift
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions
      ✓ should handle array data (1 ms)
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields (1 ms)
      ✓ should handle non-object data gracefully
      ✓ should handle empty allowed fields

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (3 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials
      ✓ should configure LinkedIn strategy when credentials are present (1 ms)
    Google OAuth Strategy
      ✓ should handle database errors (8 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account
        ✓ should handle customer conflict
        ✓ should link Google account to existing affiliate with email (1 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (1 ms)
      ✓ should handle Facebook error
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (1 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id
      ✓ should serialize user with socialId
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (56 ms)
      ✓ should generate exportId automatically (56 ms)
      ✓ should require type field (57 ms)
      ✓ should validate type enum values (60 ms)
      ✓ should reject invalid type values (53 ms)
      ✓ should require generatedBy field (53 ms)
    Period Fields
      ✓ should store period dates for payment summary (54 ms)
      ✓ should store period dates for commission detail (53 ms)
    Export Data
      ✓ should store vendor export data (57 ms)
      ✓ should store payment summary data (54 ms)
      ✓ should store commission detail data (52 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (53 ms)
      ✓ should store single affiliate ID for commission detail (52 ms)
      ✓ should allow empty affiliate IDs array (53 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (52 ms)
    Indexes
      ✓ should have required indexes defined (53 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (56 ms)
      ✓ should handle payment summary export type correctly (54 ms)
      ✓ should handle commission detail export type correctly (62 ms)
    Export ID Generation
      ✓ should generate unique export IDs (55 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (53 ms)
      ✓ should accept valid ObjectId for generatedBy (54 ms)
    Instance Methods
      markDownloaded()
        ✓ should mark export as downloaded (188 ms)
        ✓ should increment download count on multiple downloads (226 ms)
        ✓ should not change status if already downloaded (169 ms)
        ✓ should update downloadedAt timestamp (187 ms)
      updateImportStatus()
        ✓ should update import status to success (169 ms)
        ✓ should update import status to failed (170 ms)
        ✓ should handle partial import status (172 ms)
    Static Methods
      findByPeriod()
        ✓ should find exports within period (147 ms)
        ✓ should filter by type when specified (146 ms)
        ✓ should return empty array when no matches (145 ms)
        ✓ should sort by generatedAt descending (179 ms)
      existsForPeriod()
        ✓ should find existing export for period (143 ms)
        ✓ should not find export for different period (143 ms)
        ✓ should exclude failed exports (173 ms)
        ✓ should find export with non-failed status (175 ms)
    Virtual Properties
      ageInDays
        ✓ should calculate age in days correctly (85 ms)
        ✓ should return 1 for exports created today (83 ms)
        ✓ should handle exports created in the past correctly (55 ms)
        ✓ should update as time passes (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/systemConfig.test.js (7.865 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (118 ms)
      ✓ should require mandatory fields (84 ms)
      ✓ should enforce unique key constraint (284 ms)
      ✓ should validate category enum (77 ms)
      ✓ should validate dataType enum (79 ms)
      ✓ should accept all valid categories (380 ms)
      ✓ should accept all valid data types (231 ms)
      ✓ should trim string fields (121 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (78 ms)
        ✓ should enforce minimum value validation (78 ms)
        ✓ should enforce maximum value validation (78 ms)
        ✓ should accept valid number within range (111 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (77 ms)
        ✓ should accept boolean values (109 ms)
      String validation
        ✓ should reject non-string values for string dataType (78 ms)
        ✓ should enforce regex validation (80 ms)
        ✓ should accept valid string matching regex (108 ms)
      Array validation
        ✓ should reject non-array values for array dataType (78 ms)
        ✓ should accept array values (110 ms)
      Object validation
        ✓ should reject non-object values for object dataType (77 ms)
        ✓ should reject arrays for object dataType (77 ms)
        ✓ should accept object values (110 ms)
      Allowed values validation
        ✓ should enforce allowed values (77 ms)
        ✓ should accept allowed values (109 ms)
    Static Methods
      getValue
        ✓ should return config value (139 ms)
        ✓ should return defaultValue when value is undefined (137 ms)
        ✓ should return provided default when config not found (103 ms)
        ✓ should return null when config not found and no default provided (105 ms)
      setValue
        ✓ should update config value (164 ms)
        ✓ should throw error for non-existent config (103 ms)
        ✓ should throw error for non-editable config (138 ms)
        ✓ should update updatedBy when provided (165 ms)
        ✓ should validate new value according to dataType (139 ms)
      getByCategory
        ✓ should return all configs for a category (146 ms)
        ✓ should return only public configs when specified (145 ms)
        ✓ should return empty array for non-existent category (145 ms)
        ✓ should sort by key (189 ms)
      getPublicConfigs
        ✓ should return only public configs (142 ms)
        ✓ should sort by category then key (168 ms)
      initializeDefaults
        ✓ should create default configurations (553 ms)
        ✓ should not overwrite existing configurations (484 ms)
        ✓ should add missing configurations (477 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (117 ms)
      ✓ should update updatedAt on modification (244 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (111 ms)
      ✓ should use defaultValue when value is undefined (122 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (114 ms)
      ✓ should handle empty validation object (109 ms)
      ✓ should skip validation when value is not modified (143 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:32:52.042Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1055 |             await OAuthSession.createSession(sessionId, message);
      1056 |           } catch (dbError) {
    > 1057 |             console.error('Error storing OAuth session:', dbError);
           |                     ^
      1058 |           }
      1059 |         }
      1060 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:1057:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1735:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1797:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T15:32:52.558Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T15:32:53.173Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T15:32:53.540Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:32:54.000Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-27T15:32:54.001Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:32:54.307Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-27T15:32:54.465Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1707 |
      1708 |   } catch (error) {
    > 1709 |     console.error('OAuth session polling error:', error);
           |             ^
      1710 |     res.status(500).json({
      1711 |       success: false,
      1712 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1709:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.422 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (334 ms)
      ✓ should handle customer context from state parameter (169 ms)
      ✓ should handle missing user data gracefully (157 ms)
      ✓ should handle OAuth session creation errors (170 ms)
      ✓ should extract profile data correctly for different providers (163 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (167 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (173 ms)
      ✓ should sanitize social data and reject if fields become empty (153 ms)
      ✓ should check for existing email and username (153 ms)
      ✓ should check for existing social account (153 ms)
      ✓ should generate unique username from social data (156 ms)
      ✓ should handle JWT verification errors (153 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (211 ms)
      ✓ should validate affiliate existence (153 ms)
      ✓ should sanitize customer social data (152 ms)
    socialLogin
      ✓ should login existing affiliate with social account (154 ms)
      ✓ should return error for non-existent social account (153 ms)
      ✓ should login existing customer with social account (157 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (153 ms)
      ✓ should prevent linking already existing social account (156 ms)
      ✓ should handle user not found error (152 ms)
    pollOAuthSession
      ✓ should return complete session data when available (155 ms)
      ✓ should return social-auth-login session data (154 ms)
      ✓ should return social-auth-error session data (155 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (154 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (154 ms)
      ✓ should return pending status when session not ready (153 ms)
      ✓ should handle database errors gracefully (156 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (152 ms)
      ✓ should handle database connection errors (153 ms)
      ✓ should handle missing required fields in social data (153 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/operator.test.js (10.632 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (184 ms)
      ✓ should require all mandatory fields (90 ms)
      ✓ should enforce email format validation (85 ms)
      ✓ should enforce unique email constraint (621 ms)
      ✓ should enforce unique username constraint (671 ms)
      ✓ should validate username format (78 ms)
      ✓ should validate shift time format (77 ms)
      ✓ should accept valid shift times (164 ms)
      ✓ should enforce quality score range (77 ms)
      ✓ should trim whitespace from string fields (161 ms)
      ✓ should convert email and username to lowercase (164 ms)
      ✓ should not allow role to be changed after creation (225 ms)
    Password Handling
      ✓ should hash password on save (189 ms)
      ✓ should verify correct password (240 ms)
      ✓ should reject incorrect password (265 ms)
      ✓ should not expose password in JSON output (166 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (251 ms)
      ✓ should lock account after 5 failed attempts (442 ms)
      ✓ should lock for 30 minutes (461 ms)
      ✓ should reset login attempts on successful login (306 ms)
      ✓ should reset attempts if lock has expired (246 ms)
      ✓ should correctly identify locked accounts (162 ms)
    Password Reset
      ✓ should generate password reset token (77 ms)
      ✓ should set password reset expiry to 30 minutes (77 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (78 ms)
        ✓ should correctly identify operator on shift during normal hours (77 ms)
        ✓ should correctly identify operator off shift (79 ms)
        ✓ should handle overnight shifts correctly (78 ms)
    Processing Statistics
      ✓ should update processing stats correctly (196 ms)
      ✓ should handle first order processing (193 ms)
      ✓ should update quality score with passing result (190 ms)
      ✓ should update quality score with failing result (199 ms)
    Static Methods
      findActive
        ✓ should find only active operators (276 ms)
      findOnShift
        ✓ should find only operators on shift (287 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (186 ms)
        ✓ should handle case-insensitive email search (204 ms)
        ✓ should return null for non-existent email (111 ms)
      findAvailableOperators
        ✓ should find operators with low order count (278 ms)
        ✓ should sort by current order count (279 ms)
        ✓ should respect limit parameter (990 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (164 ms)
      ✓ should update updatedAt on modification (327 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (300 ms)
      ✓ should not override provided operator ID (181 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

PASS tests/unit/w9ControllerDocuSign.test.js (7.614 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (158 ms)
      ✓ should return authorization URL if no valid token (122 ms)
      ✓ should handle service errors (130 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (116 ms)
      ✓ should handle missing authorization code (118 ms)
      ✓ should handle missing state parameter (110 ms)
      ✓ should display error page on token exchange failure (116 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (209 ms)
      ✓ should return existing envelope if one is in progress (174 ms)
      ✓ should require DocuSign authorization if no valid token (142 ms)
      ✓ should handle affiliate not found (169 ms)
      ✓ should handle envelope creation errors (145 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (730 ms)
      ✓ should handle mismatched envelope ID (172 ms)
      ✓ should handle affiliate with no W9 information (203 ms)
      ✓ should return local status if DocuSign API fails (171 ms)
      ✓ should clear envelope ID if declined (255 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (235 ms)
      ✓ should reject webhook with invalid signature (115 ms)
      ✓ should handle affiliate not found (145 ms)
      ✓ should process completed W9 without downloading document (234 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (113 ms)
      ✓ should return authorized false if no valid token (113 ms)
      ✓ should handle service errors (113 ms)
    Get W9 Signing Status
      ✓ should return W9 status for affiliate (114 ms)
      ✓ should include tax info for verified W9 (116 ms)
      ✓ should check DocuSign status for in-progress envelopes (114 ms)
      ✓ should handle affiliate not found (113 ms)
      ✓ should handle errors gracefully (113 ms)
    Cancel W9 Signing
      ✓ should cancel W9 signing successfully (202 ms)
      ✓ should handle no W9 signing in progress (143 ms)
      ✓ should handle affiliate not found (122 ms)
      ✓ should handle void envelope errors (144 ms)
    Resend W9 Request
      ✓ should resend W9 request successfully (164 ms)
      ✓ should handle affiliate not found (117 ms)
      ✓ should continue if voiding existing envelope fails (174 ms)
      ✓ should handle envelope creation errors (113 ms)
    Send W9 To Affiliate
      ✓ should send W9 to affiliate successfully (149 ms)
      ✓ should handle affiliate not found (119 ms)
      ✓ should prevent sending to affiliate with verified W9 (115 ms)
      ✓ should prevent sending to affiliate with submitted W9 (113 ms)
      ✓ should handle authorization errors (116 ms)
      ✓ should handle template configuration errors (115 ms)
      ✓ should handle general errors (121 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (23 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user
      ✓ should return 404 for non-existent affiliate (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (8 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (1 ms)
      ✓ should handle password change (1 ms)
      ✓ should reject incorrect current password
      ✓ should update payment method (1 ms)
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods (1 ms)
      ✓ should handle missing customers gracefully
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (1 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (3 ms)
      ✓ should return 404 for non-existent affiliate
    Error handling
      ✓ should handle database connection errors (1 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:54:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2255:70)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1073:9)

      2261 |     });
      2262 |   } catch (error) {
    > 2263 |     console.error('Error updating operator profile:', error);
           |             ^
      2264 |     res.status(500).json({
      2265 |       success: false,
      2266 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2263:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1073:9)

  console.error
    Error fetching administrators: Error: Connection timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1088:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1091:7)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query
        ✓ should handle database errors (60 ms)
      getAdministratorById
        ✓ should get administrator by ID
        ✓ should return 404 for non-existent administrator (1 ms)
        ✓ should return 400 for invalid ObjectId
      createAdministrator
        ✓ should create new administrator with valid data (56 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ✓ should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (1 ms)
        ✓ should prevent self-deletion
        ✓ should prevent deletion of last administrator (1 ms)
      resetAdministratorPassword
        ✓ should reset administrator password (55 ms)
        ✓ should handle email sending failure (55 ms)
      getPermissions
        ✓ should return all available permissions (1 ms)
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ✓ should reset operator password and send email (8 ms)
      resetOperatorPin
        ✓ should reset operator PIN (1 ms)
        ✓ should validate PIN format
      deleteOperator
        ✓ should delete operator permanently (1 ms)
      getAvailableOperators
        ✓ should get available operators for assignment (1 ms)
      updateOperatorStats
        ✓ should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ✓ should get operator analytics with date range (1 ms)
        ✓ should handle missing date range
      getAffiliateAnalytics
        ✓ should get affiliate analytics
      exportReport
        ✓ should export report as CSV (1 ms)
        ✓ should export report as JSON (1 ms)
        ✓ should reject invalid report type
    Operator Self-Management
      getOperatorSelf
        ✓ should get current operator profile (1 ms)
        ✓ should handle non-operator users
      updateOperatorSelf
        ✓ should allow operator to update own profile (1 ms)
        ✓ should prevent changing restricted fields (1 ms)
    Error Handling
      ✓ should handle database connection errors (2 ms)
      ✓ should handle validation errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

  console.error
    Get customer dashboard stats error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:688:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      498 |     });
      499 |   } catch (error) {
    > 500 |     console.error('Get customer dashboard stats error:', error);
          |             ^
      501 |     res.status(500).json({
      502 |       success: false,
      503 |       message: 'An error occurred while retrieving dashboard statistics'

      at Object.error [as getCustomerDashboardStats] (server/controllers/customerController.js:500:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:690:7)

  console.error
    Update payment info error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:792:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      552 |     });
      553 |   } catch (error) {
    > 554 |     console.error('Update payment info error:', error);
          |             ^
      555 |     res.status(500).json({
      556 |       success: false,
      557 |       message: 'An error occurred while updating payment information'

      at Object.error [as updatePaymentInfo] (server/controllers/customerController.js:554:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:794:7)

  console.error
    Update customer password error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:957:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      682 |     });
      683 |   } catch (error) {
    > 684 |     console.error('Update customer password error:', error);
          |             ^
      685 |     res.status(500).json({
      686 |       success: false,
      687 |       message: 'An error occurred while updating password'

      at Object.error [as updateCustomerPassword] (server/controllers/customerController.js:684:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:959:7)

  console.error
    Get customers for admin error: TypeError: Cannot read properties of undefined (reading 'search')
        at Object.search [as getCustomersForAdmin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/customerController.js:702:19)
        at Object.getCustomersForAdmin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1192:32)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      779 |     });
      780 |   } catch (error) {
    > 781 |     console.error('Get customers for admin error:', error);
          |             ^
      782 |     res.status(500).json({
      783 |       success: false,
      784 |       message: 'Failed to retrieve customers'

      at Object.error [as getCustomersForAdmin] (server/controllers/customerController.js:781:13)
      at Object.getCustomersForAdmin (tests/unit/customerController.test.js:1192:32)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Customer registration error: Error: Database save failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1259:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |     });
      153 |   } catch (error) {
    > 154 |     console.error('Customer registration error:', error);
          |             ^
      155 |     res.status(500).json({
      156 |       success: false,
      157 |       message: 'An error occurred during registration'

      at Object.error [as registerCustomer] (server/controllers/customerController.js:154:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:1278:7)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST999

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (11 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should return 404 for non-existent customer
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (31 ms)
      ✓ should return 404 for non-existent customer (1 ms)
    getCustomerDashboardStats
      ✓ should return dashboard stats for authorized customer (1 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should allow affiliate access to their customer dashboard
      ✓ should handle database errors gracefully (2 ms)
    updatePaymentInfo
      ✓ should successfully update payment information (1 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should allow admin to update customer payment info
      ✓ should handle database errors (2 ms)
    updateCustomerPassword
      ✓ should successfully update password
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password length
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle missing new password
      ✓ should handle database errors (2 ms)
    getCustomersForAdmin
      ✓ should return all customers for admin (1 ms)
      ✓ should filter customers by search query
      ✓ should filter customers by affiliate
      ✓ should filter customers by active status
      ✓ should filter customers by inactive status (1 ms)
      ✓ should filter new customers with no orders
      ✓ should handle combined filters (1 ms)
      ✓ should handle database errors (9 ms)
      ✓ should ignore "all" filter values (1 ms)
    validation errors
      ✓ should return validation errors for registerCustomer
    error handling for registration
      ✓ should handle database save errors during registration (3 ms)
      ✓ should handle missing payment info gracefully (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1068:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1595:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)
      at Object.<anonymous> (tests/unit/operatorController.test.js:1597:7)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getOrderQueue
      ✓ should return available orders for operator workstation (2 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed
      ✓ should fail if order not found
      ✓ should handle database error during claim (1 ms)
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation (1 ms)
      ✓ should set processingCompleted when status is ready
      ✓ should handle database error (1 ms)
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check (1 ms)
      ✓ should handle database error during quality check
    getMyOrders
      ✓ should return orders assigned to operator
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found
      ✓ should end shift successfully
      ✓ should handle database error (1 ms)
    getPerformanceStats
      ✓ should return operator performance statistics
    getCustomerDetails
      ✓ should return customer details for an order
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getOrderQueue
      ✓ should handle different filters in getOrderQueue (1 ms)
      ✓ should handle operator at max capacity in claimOrder (1 ms)
      ✓ should handle quality check failure in performQualityCheck
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift (5 ms)
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift (1 ms)
      ✓ should handle different time periods in getPerformanceStats
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails (1 ms)
      ✓ should handle filters in getMyOrders
    scanCustomer
      ✓ should scan customer and return current order (1 ms)
      ✓ should handle customer not found
    scanBag
      ✓ should redirect to scanCustomer (1 ms)
      ✓ should handle error in scanBag (30 ms)
    receiveOrder
      ✓ should receive order and update status (1 ms)
      ✓ should handle order not found
    markBagProcessed
      ✓ should mark bag as processed (1 ms)
      ✓ should update order status when all bags processed (99 ms)
    confirmPickup
      ✓ should confirm pickup and complete order (1 ms)
      ✓ should handle partial pickup
    getTodayStats
      ✓ should return today's operator statistics (1 ms)
      ✓ should handle no orders for today
    getWorkstationStatus
      ✓ should return workstation status for all workstations (1 ms)
      ✓ should handle database error (1 ms)
    Additional coverage tests
      ✓ should handle error in getMyOrders
      ✓ should handle different performance stat periods (1 ms)
      ✓ should handle error in getPerformanceStats
      ✓ should handle error in getCustomerDetails (1 ms)
      ✓ should handle no active order in scanCustomer
      ✓ should handle different scan actions in scanCustomer (9 ms)
      ✓ should handle affiliate lookup in scanCustomer
      ✓ should handle error in scanCustomer (7 ms)
      ✓ should handle error in receiveOrder
      ✓ should handle order not found in markBagProcessed
      ✓ should handle error in markBagProcessed
      ✓ should handle order not found in confirmPickup (1 ms)
      ✓ should handle error in confirmPickup
      ✓ should handle error in getTodayStats (1 ms)
      ✓ should handle markOrderReady (deprecated function)
      ✓ should handle markOrderReady with affiliate notification (1 ms)
      ✓ should handle errors in markOrderReady

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:375:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:378:7)

  console.error
    Error fetching administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:809:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |
      110 |   } catch (error) {
    > 111 |     console.error('Error fetching administrator:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'Failed to fetch administrator'

      at Object.error [as getAdministratorById] (server/controllers/administratorController.js:111:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:812:7)

  console.error
    Error changing administrator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:924:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      544 |
      545 |   } catch (error) {
    > 546 |     console.error('Error changing administrator password:', error);
          |             ^
      547 |     res.status(500).json({
      548 |       success: false,
      549 |       message: 'Failed to change password'

      at Object.error [as changeAdministratorPassword] (server/controllers/administratorController.js:546:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:927:7)

  console.error
    Error fetching operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:991:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      849 |
      850 |   } catch (error) {
    > 851 |     console.error('Error fetching operator:', error);
          |             ^
      852 |     res.status(500).json({
      853 |       success: false,
      854 |       message: 'Failed to fetch operator details'

      at Object.error [as getOperatorById] (server/controllers/administratorController.js:851:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:994:7)

  console.error
    Error resetting operator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1057:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1034 |
      1035 |   } catch (error) {
    > 1036 |     console.error('Error resetting operator password:', error);
           |             ^
      1037 |     res.status(500).json({
      1038 |       success: false,
      1039 |       message: 'Failed to reset operator password'

      at Object.error [as resetOperatorPassword] (server/controllers/administratorController.js:1036:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1059:7)

  console.error
    Error fetching operator analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1112:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1510 |
      1511 |   } catch (error) {
    > 1512 |     console.error('Error fetching operator analytics:', error);
           |             ^
      1513 |     res.status(500).json({
      1514 |       success: false,
      1515 |       message: 'Failed to fetch operator analytics'

      at Object.error [as getOperatorAnalytics] (server/controllers/administratorController.js:1512:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1114:7)

  console.error
    Error fetching affiliate analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1166:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1612 |
      1613 |   } catch (error) {
    > 1614 |     console.error('Error fetching affiliate analytics:', error);
           |             ^
      1615 |     res.status(500).json({
      1616 |       success: false,
      1617 |       message: 'Failed to fetch affiliate analytics'

      at Object.error [as getAffiliateAnalytics] (server/controllers/administratorController.js:1614:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1168:7)

  console.error
    Error exporting report: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1288:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1677 |
      1678 |   } catch (error) {
    > 1679 |     console.error('Error exporting report:', error);
           |             ^
      1680 |     res.status(500).json({
      1681 |       success: false,
      1682 |       message: 'Failed to export report'

      at Object.error [as exportReport] (server/controllers/administratorController.js:1679:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1291:7)

  console.error
    Error fetching affiliates list: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1334:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1730 |     });
      1731 |   } catch (error) {
    > 1732 |     console.error('Error fetching affiliates list:', error);
           |             ^
      1733 |     res.status(500).json({
      1734 |       success: false,
      1735 |       message: 'Failed to fetch affiliates list',

      at Object.error [as getAffiliatesList] (server/controllers/administratorController.js:1732:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1337:7)

  console.error
    Error updating operator stats: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1515:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2080 |     });
      2081 |   } catch (error) {
    > 2082 |     console.error('Error updating operator stats:', error);
           |             ^
      2083 |     res.status(500).json({
      2084 |       success: false,
      2085 |       message: 'An error occurred while updating operator statistics'

      at Object.error [as updateOperatorStats] (server/controllers/administratorController.js:2082:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1517:7)

  console.error
    Error getting available operators: TypeError: Operator.find(...).sort(...).limit is not a function
        at Object.limit [as getAvailableOperators] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2103:8)
        at Object.getAvailableOperators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1565:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2109 |     });
      2110 |   } catch (error) {
    > 2111 |     console.error('Error getting available operators:', error);
           |             ^
      2112 |     res.status(500).json({
      2113 |       success: false,
      2114 |       message: 'An error occurred while fetching available operators'

      at Object.error [as getAvailableOperators] (server/controllers/administratorController.js:2111:13)
      at Object.getAvailableOperators (tests/unit/administratorController.test.js:1565:37)

  console.error
    Error deleting operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1619:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2159 |     });
      2160 |   } catch (error) {
    > 2161 |     console.error('Error deleting operator:', error);
           |             ^
      2162 |     res.status(500).json({
      2163 |       success: false,
      2164 |       message: 'An error occurred while deleting the operator'

      at Object.error [as deleteOperator] (server/controllers/administratorController.js:2161:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1621:7)

  console.error
    Error resetting operator PIN: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1679:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2207 |     });
      2208 |   } catch (error) {
    > 2209 |     console.error('Error resetting operator PIN:', error);
           |             ^
      2210 |     res.status(500).json({
      2211 |       success: false,
      2212 |       message: 'An error occurred while resetting the PIN'

      at Object.error [as resetOperatorPin] (server/controllers/administratorController.js:2209:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1681:7)

  console.error
    Error fetching environment variables: TypeError: Cannot read properties of undefined (reading 'DEFAULT_ADMIN_EMAIL')
        at Object.DEFAULT_ADMIN_EMAIL [as getEnvironmentVariables] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2402:56)
        at Object.getEnvironmentVariables (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1727:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2443 |
      2444 |   } catch (error) {
    > 2445 |     console.error('Error fetching environment variables:', error);
           |             ^
      2446 |     res.status(500).json({
      2447 |       success: false,
      2448 |       message: 'Failed to fetch environment variables'

      at Object.error [as getEnvironmentVariables] (server/controllers/administratorController.js:2445:13)
      at Object.getEnvironmentVariables (tests/unit/administratorController.test.js:1727:37)

  console.error
    Error updating administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1847:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      313 |
      314 |   } catch (error) {
    > 315 |     console.error('Error updating administrator:', error);
          |             ^
      316 |     res.status(500).json({
      317 |       success: false,
      318 |       message: 'Failed to update administrator'

      at Object.error [as updateAdministrator] (server/controllers/administratorController.js:315:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1850:7)

  console.error
    Error deleting administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1884:44)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      385 |
      386 |   } catch (error) {
    > 387 |     console.error('Error deleting administrator:', error);
          |             ^
      388 |     res.status(500).json({
      389 |       success: false,
      390 |       message: 'Failed to delete administrator'

      at Object.error [as deleteAdministrator] (server/controllers/administratorController.js:387:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1886:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (1 ms)
      ✓ should handle errors (42 ms)
    createAdministrator
      ✓ should create administrator (1 ms)
      ✓ should handle validation errors (1 ms)
    updateAdministrator
      ✓ should update administrator
      ✓ should prevent self-deactivation (1 ms)
    deleteAdministrator
      ✓ should delete administrator
      ✓ should prevent self-deletion (1 ms)
    resetAdministratorPassword
      ✓ should reset password
    Operator Management
      ✓ createOperator should create new operator (1 ms)
      ✓ getOperators should return operators list (1 ms)
      ✓ updateOperator should update operator details
      ✓ deactivateOperator should deactivate operator (1 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (1 ms)
      ✓ getOrderAnalytics should return order analytics
    System Configuration
      ✓ getSystemConfig should return configurations (1 ms)
      ✓ updateSystemConfig should update configuration
    getPermissions
      ✓ should return available permissions (1 ms)
    getAdministratorById
      ✓ should get administrator by id
      ✓ should handle not found
      ✓ should handle errors (2 ms)
    changeAdministratorPassword
      ✓ should change password successfully (1 ms)
      ✓ should reject incorrect current password
      ✓ should validate new password strength
      ✓ should handle errors (1 ms)
    getOperatorById
      ✓ should get operator by id (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (2 ms)
    resetOperatorPassword
      ✓ should reset operator password (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (2 ms)
    getOperatorAnalytics
      ✓ should get operator analytics (1 ms)
      ✓ should handle errors (1 ms)
    getAffiliateAnalytics
      ✓ should get affiliate analytics (1 ms)
      ✓ should handle errors (1 ms)
    exportReport
      ✓ should export orders report (1 ms)
      ✓ should export operators report (7 ms)
      ✓ should handle invalid report type (1 ms)
      ✓ should handle errors (2 ms)
    getAffiliatesList
      ✓ should get affiliates list (1 ms)
      ✓ should handle errors (2 ms)
    getSystemHealth
      ✓ should get system health status
      ✓ should handle database connection issues (1 ms)
      ✓ should handle errors
    updateOperatorStats
      ✓ should update operator stats with processing time (1 ms)
      ✓ should handle operator not found
      ✓ should validate processing time
      ✓ should handle errors (2 ms)
    getAvailableOperators
      ✓ should get available operators
      ✓ should handle errors (17 ms)
    deleteOperator
      ✓ should delete operator
      ✓ should prevent deletion with active orders
      ✓ should handle errors (2 ms)
    resetOperatorPin
      ✓ should reset operator PIN (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (1 ms)
    getEnvironmentVariables
      ✓ should get environment variables (1 ms)
      ✓ should handle errors (2 ms)
    Additional coverage for getAdministrators
      ✓ should handle search with active filter
    Additional coverage for createAdministrator
      ✓ should handle duplicate email (1 ms)
      ✓ should handle password validation failure
    Additional coverage for updateAdministrator
      ✓ should handle administrator not found (1 ms)
      ✓ should handle database errors (7 ms)
    Additional coverage for deleteAdministrator
      ✓ should prevent deleting last super admin (1 ms)
      ✓ should handle database errors (1 ms)
    Additional coverage for resetAdministratorPassword
      ✓ should handle admin not found (1 ms)
      ✓ should handle weak password

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error loading email template affiliate-password-reset: [Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'] {
      errno: -2,
      code: 'ENOENT',
      syscall: 'open',
      path: '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'
    }

      75 |     }
      76 |   } catch (error) {
    > 77 |     console.error(`Error loading email template ${templateName}:`, error);
         |             ^
      78 |     // Return a basic template as fallback
      79 |     return `
      80 |       <!DOCTYPE html>

      at error (server/utils/emailService.js:77:13)
      at Object.<anonymous>.exports.sendAffiliatePasswordResetEmail (server/utils/emailService.js:871:22)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.warn
    Email template placeholder [EMAIL_CONTENT] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliatePasswordResetEmail] (server/utils/emailService.js:881:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.log
    Missing template: password-reset.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.log
    Missing template: order-confirmation.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.warn
    Email template placeholder [AFFILIATE_ID] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliateWelcomeEmail] (server/utils/emailService.js:336:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:223:9)

  console.log
    === EMAIL CONSOLE LOG ===

      at Object.log [as sendMail] (server/utils/emailService.js:18:17)

  console.log
    From: test@wavemax.promo

      at Object.log [as sendMail] (server/utils/emailService.js:19:17)

  console.log
    To: undefined

      at Object.log [as sendMail] (server/utils/emailService.js:20:17)

  console.log
    Subject: Welcome to WaveMAX Laundry Affiliate Program

      at Object.log [as sendMail] (server/utils/emailService.js:21:17)

  console.log
    HTML Preview: [HTML content logged to console]

      at Object.log [as sendMail] (server/utils/emailService.js:22:17)

  console.log
    ========================

      at Object.log [as sendMail] (server/utils/emailService.js:23:17)

  console.log
    Email sent: console-1751038400937

      at log (server/utils/emailService.js:154:13)

PASS tests/integration/emailService.integration.test.js
  Email Service Integration
    Email Service Configuration
      ✓ should load and configure the email service correctly (10 ms)
      ✓ should have all required email functions (3 ms)
    Console Email Provider
      ✓ should log affiliate welcome emails to console (3 ms)
      ✓ should log customer welcome emails to console (3 ms)
      ✓ should log password reset emails to console (12 ms)
    Email Template Verification
      ✓ should verify email templates directory exists (1 ms)
      ✓ should verify essential email templates exist (1 ms)
    Mailcow SMTP Configuration
      ✓ should handle Mailcow SMTP configuration (1 ms)
      ✓ should handle secure Mailcow SMTP on port 465 (2 ms)
    Error Handling
      ✓ should handle missing required fields gracefully (5 ms)
      ✓ should handle invalid email addresses (2 ms)
    Bulk Email Operations
      ✓ should handle multiple email sends efficiently (2 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:21.302Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:21.621Z"}
  console.log
    CSRF token generation: {
      sessionID: '1998a27af9250928fc96c77eb4570aad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7feVp3nY-s2AaNxGbT4bWMhm749kuTWnn3Ic

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1998a27af9250928fc96c77eb4570aad

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W7gd23Te2V...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.753 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.119Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.445Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.445Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.537Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-61122b2b-fe31-42a7-9c6a-96cb203478f0",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 154.381 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.752Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:22.754Z"}
[0mGET /api/v1/payments/config [32m200[0m 1.928 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:23.556Z"}
  console.log
    CSRF token generation: {
      sessionID: '5af2e81cba7a706aab47b470c6af3e47',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eLJR8Zxv-RPB-qxmBo7e9Xl_tQCLy3vW3UjM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5af2e81cba7a706aab47b470c6af3e47

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h33_jOKMfA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.351 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:23.695Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:23.992Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:23.992Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:24.078Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-48a59bda-b641-4656-8d14-cfbe810e4939",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.502 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:24.281Z"}
[32minfo[39m: Acquired callback handler for payment token mcez1zuj-stfr6ms: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:24.314Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:24.347Z","token":"mcez1zuj-stfr6ms"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.900 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.082Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7ff81b14252a16b2ede22f33b649b61',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UFZJ81ze-cWaYJ_sGX28rdamR6TfOBnAkog0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7ff81b14252a16b2ede22f33b649b61

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7y2MPKEeH4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.848 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.219Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.518Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.518Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.606Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-63b7d3b0-5869-4667-b11f-fd2c87cd8e1b",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.758 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.807Z"}
[32minfo[39m: Acquired callback handler for payment token mcez210w-day9z2o: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.839Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.870Z","token":"mcez210w-day9z2o"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.980 ms - 283[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mcez210w-day9z2o {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:25.872Z"}
[0mGET /api/v1/payments/check-status/mcez210w-day9z2o [32m200[0m 28.229 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:26.653Z"}
  console.log
    CSRF token generation: {
      sessionID: '08fd7fa45523439ead3aa88bb77d41fc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ARrVfeYP-jd-mDe7MDu-O6sS3LFRxlMzm3Jc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 08fd7fa45523439ead3aa88bb77d41fc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ux5Na3kI2n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.761 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:26.790Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.085Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.085Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.202Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-9fd7916d-2f6d-42ac-93a5-65fd68a59072",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 170.712 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.431Z"}
[32minfo[39m: Acquired callback handler for payment token mcez22a1-lzu9vu4: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.463Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.494Z","token":"mcez22a1-lzu9vu4"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.957 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcez22a1-lzu9vu4 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.498Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcez22a1-lzu9vu4 {
      sessionID: '08fd7fa45523439ead3aa88bb77d41fc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A08fd7fa45523439ead3aa88bb77d41fc.iwEktQSTV%2B2UKbOWqYp%2BhbPtMiQgtIoeqKqdKtmgji0',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcez22a1-lzu9vu4: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.590Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:27.591Z","token":"mcez22a1-lzu9vu4"}
[0mPOST /api/v1/payments/cancel-token/mcez22a1-lzu9vu4 [32m200[0m 93.299 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:28.320Z"}
  console.log
    CSRF token generation: {
      sessionID: '617e2d193c2b3de755698eed7775ea3a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2VYDQUQE-JkEf5tOI1RXd7AWNbcCrx385TXk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 617e2d193c2b3de755698eed7775ea3a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: q0kr8S4Gvf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.111 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:28.457Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:28.752Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:28.753Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:28.839Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-e4a271a9-40ee-4068-8bd8-e314eb8f0db4",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 144.896 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.046Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.049Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.051Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.052Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.054Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.056Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.057Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.059Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.061Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.062Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23iv-9rrtv6k: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.078Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j1-upq9bx8: {"callbackPath":"/api/v1/payments/callback/handler-4","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-4","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.085Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j0-dei5nrr: {"callbackPath":"/api/v1/payments/callback/handler-3","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-3","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.087Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23iy-rif98ku: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.089Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j3-5dd8ktr: {"callbackPath":"/api/v1/payments/callback/handler-5","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-5","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.091Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j8-50htlgg: {"callbackPath":"/api/v1/payments/callback/handler-8","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-8","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.093Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j6-audpl8q: {"callbackPath":"/api/v1/payments/callback/handler-6","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-6","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.095Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j4-mm0ixv0: {"callbackPath":"/api/v1/payments/callback/handler-7","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-7","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.096Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23jb-snmvfl3: {"callbackPath":"/api/v1/payments/callback/handler-10","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-10","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.097Z"}
[32minfo[39m: Acquired callback handler for payment token mcez23j9-nlgetx6: {"callbackPath":"/api/v1/payments/callback/handler-9","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-9","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.099Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"customer0@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.107Z","token":"mcez23iv-9rrtv6k"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.584 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-4","customerEmail":"customer3@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.114Z","token":"mcez23j1-upq9bx8"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.376 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-3","customerEmail":"customer2@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.117Z","token":"mcez23j0-dei5nrr"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.932 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-5","customerEmail":"customer4@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.122Z","token":"mcez23j3-5dd8ktr"}
[0mPOST /api/v1/payments/create-token [32m200[0m 67.808 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"customer1@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.123Z","token":"mcez23iy-rif98ku"}
[0mPOST /api/v1/payments/create-token [32m200[0m 74.167 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-8","customerEmail":"customer7@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.124Z","token":"mcez23j8-50htlgg"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-6","customerEmail":"customer6@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.125Z","token":"mcez23j6-audpl8q"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-7","customerEmail":"customer5@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.126Z","token":"mcez23j4-mm0ixv0"}
[0mPOST /api/v1/payments/create-token [32m200[0m 65.550 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 68.054 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 70.528 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-9","customerEmail":"customer8@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.129Z","token":"mcez23j9-nlgetx6"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-10","customerEmail":"customer9@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.130Z","token":"mcez23jb-snmvfl3"}
[0mPOST /api/v1/payments/create-token [32m200[0m 68.319 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 67.445 ms - 285[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.136Z"}
[33mwarn[39m: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.164Z"}
[0mPOST /api/v1/payments/create-token [31m503[0m 28.124 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:29.919Z"}
  console.log
    CSRF token generation: {
      sessionID: '24f7ea9907034a1df9e3a3c4fac6ef45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8A9Ru6y8-S11zhNeYuseeS9kqy-Ol8JQ-ydo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 24f7ea9907034a1df9e3a3c4fac6ef45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZbF-eKnuX8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.114 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.059Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.364Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.364Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.459Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-40212fa9-5a34-4684-bf2a-ea3ada211077",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 139.603 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.658Z"}
[32minfo[39m: Acquired callback handler for payment token mcez24ro-i34fa1m: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.691Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"cancel@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.722Z","token":"mcez24ro-i34fa1m"}
[0mPOST /api/v1/payments/create-token [32m200[0m 63.204 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcez24ro-i34fa1m {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.724Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcez24ro-i34fa1m {
      sessionID: '24f7ea9907034a1df9e3a3c4fac6ef45',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A24f7ea9907034a1df9e3a3c4fac6ef45.btTw2mI3YJvi9eUf5ED0%2BojfeEwN%2FdQBAuYdW3cgkUc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcez24ro-i34fa1m: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.819Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.820Z","token":"mcez24ro-i34fa1m"}
[0mPOST /api/v1/payments/cancel-token/mcez24ro-i34fa1m [32m200[0m 95.755 ms - 73[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.823Z"}
[32minfo[39m: Acquired callback handler for payment token mcez24w8-xjd85ha: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.855Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"new@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:30.884Z","token":"mcez24w8-xjd85ha"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.998 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:31.629Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a239b53544b6c8ead1f306370e76cce8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3EvzGiBE-77b86SoRRShRkB-jjf8MYMDdRhU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a239b53544b6c8ead1f306370e76cce8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IA21v4W9TX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.205 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:31.769Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:32.082Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:32.083Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:32.168Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-55edea25-860c-4849-a39b-4a4fae400a1a",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.548 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:32.370Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 30.045 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:33.243Z"}
PASS tests/integration/payment.test.js (12.692 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (1943 ms)
    Payment Token Tests
      ✓ should create payment token (1529 ms)
      ✓ should check payment status (1571 ms)
      ✓ should cancel payment token (1667 ms)
    Payment Callback Tests
      ✓ should return 503 when all callback handlers are locked (1598 ms)
      ✓ should release callback handler when payment is cancelled (1710 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1615 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:34.004Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:35.647Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:36.126Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 479.530 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:38.374Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:38.519Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.524 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d3ecebf9-af19-49ce-af07-f0453f655dd4/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:38.530Z"}
[0mGET /api/v1/affiliates/AFF-d3ecebf9-af19-49ce-af07-f0453f655dd4/customers [32m200[0m 378.009 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:41.599Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:41.989Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 389.613 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-38969efc-b34b-466e-97bf-44aaa5dc0b8b/customers?customerId=CUST-77c121cc-7e59-4bae-a860-12105edc980d {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:42.099Z"}
[0mGET /api/v1/affiliates/AFF-38969efc-b34b-466e-97bf-44aaa5dc0b8b/customers?customerId=CUST-77c121cc-7e59-4bae-a860-12105edc980d [32m200[0m 606.796 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:45.371Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:45.517Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.924 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-44575da5-a983-4892-afd7-8a9f5e925980/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:45.522Z"}
[0mGET /api/v1/affiliates/AFF-44575da5-a983-4892-afd7-8a9f5e925980/customers?customerId=NONEXISTENT123 [32m200[0m 601.602 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:48.272Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:48.419Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.573 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-ded4bfe7-4de6-40f1-be97-746ba5ffeadf/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:48.424Z"}
[0mGET /api/v1/affiliates/AFF-ded4bfe7-4de6-40f1-be97-746ba5ffeadf/customers [33m401[0m 1.160 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:50.081Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:50.234Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 152.920 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:50.240Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:50.637Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 397.647 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6fe20df0-896b-4850-8340-62bdc54d647f/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:50.640Z"}
[0mGET /api/v1/affiliates/AFF-6fe20df0-896b-4850-8340-62bdc54d647f/customers [32m200[0m 366.608 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6fe20df0-896b-4850-8340-62bdc54d647f/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:51.011Z"}
[0mGET /api/v1/affiliates/AFF-6fe20df0-896b-4850-8340-62bdc54d647f/dashboard [32m200[0m 385.653 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:54.721Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:54.881Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 161.113 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:56.783Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:33:56.928Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.620 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6c6c10ad-5150-44a6-8ff2-8ebe29c88bcb {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:56.932Z"}
[0mGET /api/v1/affiliates/AFF-6c6c10ad-5150-44a6-8ff2-8ebe29c88bcb [32m200[0m 304.894 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:33:59.916Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:34:00.083Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 167.266 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-a395bb27-fbc0-4d69-9c9f-90515820ce2c/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:00.090Z"}
[0mGET /api/v1/affiliates/AFF-a395bb27-fbc0-4d69-9c9f-90515820ce2c/dashboard [32m200[0m 402.879 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:03.119Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:34:03.272Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 153.470 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-0c3e515b-0825-4cb1-8fdc-9a6cf599f20b/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:03.278Z"}
[0mGET /api/v1/affiliates/AFF-0c3e515b-0825-4cb1-8fdc-9a6cf599f20b/customers?customerId=INVALID_ID [32m200[0m 115.349 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:06.010Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:34:06.156Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.204 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:06.162Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 29.917 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:08.348Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:34:08.746Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 398.680 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-ac9bfdf7-0ffb-42ad-ae11-6738032745c0/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:08.750Z"}
[0mGET /api/v1/affiliates/AFF-ac9bfdf7-0ffb-42ad-ae11-6738032745c0/customers [32m200[0m 406.179 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (39.177 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (2867 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (3179 ms)
      ✓ should filter customers by customerId when provided (3817 ms)
      ✓ should return empty array when filtering by non-existent customerId (2908 ms)
      ✓ should require authentication to access customer list (1799 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (4623 ms)
      ✓ should handle URL parameters correctly throughout the flow (2074 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (3122 ms)
      ✓ should load dashboard statistics correctly (3206 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (2890 ms)
      ✓ should handle invalid affiliate ID (2094 ms)
      ✓ should handle database connection issues gracefully (3751 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:13.573Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:13.922Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c3002b06eb426b155980aba8fa3c6bd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Nzsc06wm-RaUdvc444UOeDegvJaljUXvcs6o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c3002b06eb426b155980aba8fa3c6bd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: j9Mo0q3Gre...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.906 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:14.112Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 376.166 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:15.536Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e77a33f57e6c5fe8c6ac4a1d9f6717f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MCPwFLAg-1h6C03lq0ZR3dTkGByg-uceL9Pw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e77a33f57e6c5fe8c6ac4a1d9f6717f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eXuiPwnVnG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.249 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-ee13e047-8a74-43cb-88e1-284f91012d83 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:15.580Z"}
[0mGET /api/v1/affiliates/AFF-ee13e047-8a74-43cb-88e1-284f91012d83 [32m200[0m 57.164 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:16.369Z"}
  console.log
    CSRF token generation: {
      sessionID: '2617155bd0999520f8c3056def8091f7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LRiKyPmO-6yXsHkmlpvHa2fARbXd3q9ZO4AU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2617155bd0999520f8c3056def8091f7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rb4kwT7AY_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.059 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-774b2f6e-1c33-4e2a-8002-5227ce859f0c {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:16.425Z"}
[0mPUT /api/v1/affiliates/AFF-774b2f6e-1c33-4e2a-8002-5227ce859f0c [32m200[0m 86.934 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:17.276Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb56704ee536646d5ebea2452e31f553',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HHKws6S2-8m2ICmxm8y3nqie9PxX7Xlg-f2s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb56704ee536646d5ebea2452e31f553

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K-FOL0XNB9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.651 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:17.405Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:34:17.547Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.262 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:18.276Z"}
  console.log
    CSRF token generation: {
      sessionID: '3ca939c585940e0d6973f9e9d01fddf5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fRvGFDlY-8tlDoko9jidZk5llZ_hApRQawjU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3ca939c585940e0d6973f9e9d01fddf5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KUpHXQ8rOy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.424 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-f996df45-83d4-4d0e-9552-0b0742426206/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:18.352Z"}
[0mGET /api/v1/affiliates/AFF-f996df45-83d4-4d0e-9552-0b0742426206/customers?page=1&limit=10 [32m200[0m 109.023 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:19.195Z"}
  console.log
    CSRF token generation: {
      sessionID: '40fed670090b898bcbc1729689dc8952',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iqk9eTM3-i9r8MYI94-pgbIygrZnXO2rseeA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 40fed670090b898bcbc1729689dc8952

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: z410OuC3c2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.074 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-9364c864-3c3d-42e2-894c-864fff79bb06/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:19.295Z"}
[0mGET /api/v1/affiliates/AFF-9364c864-3c3d-42e2-894c-864fff79bb06/orders?page=1&limit=10 [32m200[0m 108.360 ms - 576[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:20.157Z"}
  console.log
    CSRF token generation: {
      sessionID: '267c225eaa10966fdf3f8d9e4817322f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XnQa2Z4l-qpoo8nSAAbr99HfrfF_bDPPn9cs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 267c225eaa10966fdf3f8d9e4817322f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QxnkmYRAc_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.444 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-ecf630a9-24da-43c1-88a5-8f33a02a8bc7/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:20.232Z"}
[0mGET /api/v1/affiliates/AFF-ecf630a9-24da-43c1-88a5-8f33a02a8bc7/transactions?page=1&limit=10 [32m200[0m 120.920 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:21.091Z"}
  console.log
    CSRF token generation: {
      sessionID: '799c147fc972ce7e0e5c3ac34ccefb9b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BCt8gOjB-JYVpzQ1Pk-i8cVcATsdkt_PgVNg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 799c147fc972ce7e0e5c3ac34ccefb9b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LPnHZvUOiR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.328 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-cbbd439d-2b28-4cc9-9818-cf3d73ac4ce1/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:21.237Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-cbbd439d-2b28-4cc9-9818-cf3d73ac4ce1/delete-all-data {
      sessionID: '799c147fc972ce7e0e5c3ac34ccefb9b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A799c147fc972ce7e0e5c3ac34ccefb9b.3%2FvQiw4ypUpxH%2FTy4kyCdShdlNE2eIfnxU8eet4pRWc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-cbbd439d-2b28-4cc9-9818-cf3d73ac4ce1/delete-all-data [32m200[0m 255.360 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:22.321Z"}
  console.log
    CSRF token generation: {
      sessionID: '496a479bee8696a681cae5476dbfded9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JDhJqcnh-gyBV1o2qO1hrraLj8xBcufXyrTo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 496a479bee8696a681cae5476dbfded9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G7eU5N2wAD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.311 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-d8adfec4-c922-4c9d-aff4-fda5677e19ff/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:22.363Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-d8adfec4-c922-4c9d-aff4-fda5677e19ff/delete-all-data {
      sessionID: '496a479bee8696a681cae5476dbfded9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A496a479bee8696a681cae5476dbfded9.KDMbACYhFTIcQ8Dg%2FT1theyp1b0C35D9qPOHZ5AMqWE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-d8adfec4-c922-4c9d-aff4-fda5677e19ff/delete-all-data [33m403[0m 30.177 ms - 59[0m
PASS tests/integration/affiliate.test.js (10.703 s)
  Affiliate API
    ✓ should register a new affiliate (1626 ms)
    ✓ should get affiliate profile (833 ms)
    ✓ should update affiliate profile (906 ms)
    ✓ should login affiliate (1000 ms)
    ✓ should get affiliate's customers list (914 ms)
    ✓ should get affiliate's orders (966 ms)
    ✓ should get affiliate's earnings/transactions (934 ms)
    ✓ Delete all affiliate data (development only) (1230 ms)
    ✓ Reject delete in production environment (811 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/integration/adminCreation.test.js
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (219 ms)
      ✓ should create admin with next sequential ID when admins exist (334 ms)
      ✓ should handle admin creation with all permissions (202 ms)
      ✓ should handle admin creation with partial permissions (198 ms)
    Admin Model Validation
      ✓ should require email field (161 ms)
      ✓ should save admins with different adminIds successfully (280 ms)
      ✓ should save admins with different emails successfully (286 ms)
    Password Handling
      ✓ should hash password before saving (195 ms)
      ✓ should validate password with verifyPassword method (307 ms)
    Admin Query Operations
      ✓ should find admin by adminId (343 ms)
      ✓ should find admin by email (346 ms)
      ✓ should find active admins only (343 ms)
      ✓ should find admins with specific permissions (319 ms)
      ✓ should get last admin for ID generation (332 ms)
    Email Integration
      ✓ should call email service after admin creation (195 ms)
      ✓ should handle email service failures gracefully (223 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:28.730Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:29.580Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 37.656 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:29.623Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:29.626Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 4.074 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:29.691Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"env_123456","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685eba054101ebc4a996efb4","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T15:34:30.033Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 342.466 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:30.066Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 329.700 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:30.399Z"}
[32minfo[39m: W9 status updated for affiliate AFF000001: {"details":{"envelopeId":"env_123456","event":"envelope-completed","status":"completed","success":true},"docusignStatus":"completed","envelopeId":"env_123456","performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"system@docusign","userName":"DocuSign System","userType":"system"},"service":"wavemax-affiliate","status":"verified","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T15:34:30.707Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 309.124 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:33.650Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 59.878 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:36.752Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 324.386 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:40.179Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"new_env_after_refresh","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685eba0f4101ebc4a996f03e","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T15:34:40.510Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 331.877 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:42.529Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T15:34:42.597Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 68.444 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:44.428Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T15:34:44.725Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 297.578 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:46.528Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:46.529Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.582 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:48.575Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 56.355 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:51.674Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 273.143 ms - 65[0m
PASS tests/integration/docusignW9.test.js (26.468 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (4250 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (3094 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (2936 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (3127 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (1885 ms)
      ✓ should handle network errors during envelope creation (2111 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (1779 ms)
      ✓ should prevent accessing another affiliates envelope status (3372 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (2538 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:55.247Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:56.715Z"}
[0mGET /api/v1/system/config/public [32m200[0m 42.395 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:58.004Z"}
[0mGET /api/v1/system/config/public [32m200[0m 30.008 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:34:59.212Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 29.125 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:00.396Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 30.899 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:01.611Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 28.672 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:02.825Z"}
[0mGET /api/v1/system/config [32m200[0m 67.356 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:04.062Z"}
[0mGET /api/v1/system/config [33m401[0m 1.397 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:05.222Z"}
[0mGET /api/v1/system/config [33m403[0m 30.121 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:06.392Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f43bf65cdc5b486605eaa3c2e202a0d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: n4ooPTvn-kQkaDRP-61bBIg6QD79fMlAHk8o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f43bf65cdc5b486605eaa3c2e202a0d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6NSBEVk1Bk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.244 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:06.531Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'f43bf65cdc5b486605eaa3c2e202a0d5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af43bf65cdc5b486605eaa3c2e202a0d5.OzVNTGnjnW8HSwlbmknlNVPsdqUqtWzIoR0Ri2Nzyds',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 132.425 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:07.904Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1f768f5c7926fc0ca7bd041445d904e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: x6O0H60o-hTlZOGVUa0lKJGpHfEoJNuXFMgQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d1f768f5c7926fc0ca7bd041445d904e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: S2LzbRkatZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.499 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:08.038Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'd1f768f5c7926fc0ca7bd041445d904e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad1f768f5c7926fc0ca7bd041445d904e.LIhzdJUwTD%2FC%2BMjtwYKH5uSOlbY2czhoZtgOY0wF9vg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 90.798 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:09.284Z"}
  console.log
    CSRF token generation: {
      sessionID: '6f43963bb7fbdf8400446266131c8e52',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9wMJnUzn-CGcZky-g3D2c1C4CWUVI6Zrplqg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6f43963bb7fbdf8400446266131c8e52

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C9F-OvY0Ib...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.241 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:09.405Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '6f43963bb7fbdf8400446266131c8e52',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6f43963bb7fbdf8400446266131c8e52.AvpQ60f%2FquRDFVKheanN7lAYHXv7%2FH4MgxDCgcEF1Mc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 87.104 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:10.640Z"}
  console.log
    CSRF token generation: {
      sessionID: 'acd6d5edcc1a9b0965afa08b0a00e1b0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: f30iqYcb-z3aSfJ1odg54qQX6ReZrtAA065s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: acd6d5edcc1a9b0965afa08b0a00e1b0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sxUurtKPeQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.533 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:10.804Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: 'acd6d5edcc1a9b0965afa08b0a00e1b0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aacd6d5edcc1a9b0965afa08b0a00e1b0.h3%2FbxGU18HD9%2FC0Z2%2Fpbyg8zyo6CMCT%2BoZ5PZ3yj%2Fd0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 88.007 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:12.065Z"}
  console.log
    CSRF token generation: {
      sessionID: '74007192544b44fda6faf7d246517c01',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: spZ4QOAC-HWRslQOigofiTgvHxoAdEy3Xp_g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 74007192544b44fda6faf7d246517c01

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4DwwyaGhM6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.111 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:12.274Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bef5512e8ac6e4cd6ca88606b728cfc4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9Ord1Yp6-AT_aXU6HM0f2PQgcSroNAQqhxFQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bef5512e8ac6e4cd6ca88606b728cfc4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ft56VviJoQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.444 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:12.282Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'bef5512e8ac6e4cd6ca88606b728cfc4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abef5512e8ac6e4cd6ca88606b728cfc4.MyN2jgCL9QF5zSpxJZxlTfohAlW4vn76XdeCHcGCeEI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 58.464 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:13.514Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fdbd3b5f947eecf1fe2243c59cc01b62',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TpQRz39S--0_M2RNW9n6fR5k2zNOch202i8E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fdbd3b5f947eecf1fe2243c59cc01b62

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TDjb9aBep4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.874 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:13.554Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'fdbd3b5f947eecf1fe2243c59cc01b62',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afdbd3b5f947eecf1fe2243c59cc01b62.QuSy8BenAyVs9H%2F65AxHCeAnCk%2Fy2yV%2Brrqpf4Jj9lw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 358.995 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:15.075Z"}
  console.log
    CSRF token generation: {
      sessionID: '50427d88bc2fb107c32dbe3f20f3dbdc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QK0wKo3i-LRTGJfok_JXDkPI8U-2VHUiqv7M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50427d88bc2fb107c32dbe3f20f3dbdc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ANtZTH7l6u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.607 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:15.143Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '50427d88bc2fb107c32dbe3f20f3dbdc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A50427d88bc2fb107c32dbe3f20f3dbdc.1User8Uazj2lYes4my22Lbgs4mNZ40mSzDxiRNhKwHg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 337.070 ms - 48[0m
PASS tests/integration/systemConfig.test.js (23.399 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1427 ms)
        ✓ should not return private configurations (1241 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1173 ms)
        ✓ should return 404 for non-existent config (1185 ms)
        ✓ should return 404 for private config accessed via public endpoint (1245 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1222 ms)
        ✓ should return 401 without authentication (1169 ms)
        ✓ should return 403 for non-admin users (1179 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1517 ms)
        ✓ should validate value based on data type (1377 ms)
        ✓ should validate value against min/max constraints (1356 ms)
        ✓ should not allow updating non-editable configs (1426 ms)
        ✓ should require system_config permission (1449 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1573 ms)
        ✓ should not overwrite existing configurations (1620 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1376 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:18.496Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:19.367Z"}
  console.log
    CSRF token generation: {
      sessionID: '1a5d34bf926f15016e7e3ef6d4575af6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: j7G7w6iZ-LGx7Qb-iohxHy3TTzlU6rlJK2uA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1a5d34bf926f15016e7e3ef6d4575af6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CDrLFy7jSy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.362 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:19.380Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.918 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:22.537Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c56aeb3f2af647fb2be0a7ce526bb22b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: q5Wcj0Hm-cTe_RE_q7Wie72R0pi9q2QKU_HM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c56aeb3f2af647fb2be0a7ce526bb22b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 92_hGKA53S...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.017 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:24.788Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ae844bc82870b460c6efed04da1a7312',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wkOvj6K6-5QjbdAFT_fayLkk_hmDgb5l0UYY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ae844bc82870b460c6efed04da1a7312

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -9dLxVzlQ-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.068 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:27.759Z"}
  console.log
    CSRF token generation: {
      sessionID: '41d1c361d83141cb3eae591f303fc8cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Kq1gWKv3-Dt95Mf-90eu4_iqqX-i6la8F6Jc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 41d1c361d83141cb3eae591f303fc8cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IYG_WYfl4z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.620 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:27.772Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.835 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:29.994Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c49b4136043e5f4a91e87c6b354a7d6c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xgoCuqnI-rxriGGeA_uFpIpm7d_toAF2j9CM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c49b4136043e5f4a91e87c6b354a7d6c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8dd54bJ2hg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.462 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:30.009Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-71de35af-8385-4f99-ae01-6fe1dbed3d25","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:35:30.477Z","userId":"685eba425fa9fa62feefcf76","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 468.221 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:32.519Z"}
  console.log
    CSRF token generation: {
      sessionID: '6e56121404720759be2f56ecf7dccb0b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PnSgutOR-6ltoWQcBf_SMk4F8SgTEuZFxfdA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6e56121404720759be2f56ecf7dccb0b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WhuWwhh9K9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.930 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:32.529Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.550 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:34.503Z"}
  console.log
    CSRF token generation: {
      sessionID: '6fe9bf2d26f5bc49b2182423931488a0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 83NFfC2M-sLsdvGSP-1wyKCJB8d43_n08hVI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6fe9bf2d26f5bc49b2182423931488a0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5ah3IAlpwA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.512 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:34.515Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.794 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:36.791Z"}
  console.log
    CSRF token generation: {
      sessionID: 'faa7c6026031f5f56f65be15ded9268d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qhIWVwRC-W90FrRMqgt89XDHB8kPGGxUBX5I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: faa7c6026031f5f56f65be15ded9268d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3YgdJxSL0I...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.062 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:36.892Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.728 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:38.865Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ca65d636d04fb2053acc454257b79a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6zFroZtl-dvzkrTc95KlM2Cq1HaSH1B3vK80

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ca65d636d04fb2053acc454257b79a4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WrqqE4M3Q9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.875 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:38.878Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c20b63c8e44d4934dc906791ad4e543e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FL7b8xa6-q52KvUgKn98_352OZ46ckf8P67g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c20b63c8e44d4934dc906791ad4e543e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6a00tJIbZM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.611 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:38.972Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'c20b63c8e44d4934dc906791ad4e543e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac20b63c8e44d4934dc906791ad4e543e.dBUrKBSogO1%2Bj4%2BQXvAXlHIHRR4INR7YyrznS5qCTSw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T15:35:39.062Z","userId":"685eba4a5fa9fa62feefcff1","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 90.636 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:40.814Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c8f6380f880a706e3711421076b6bb9f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EVo2Niq3-sfTk34CSlfMNqUTR5kKRNe-84HE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c8f6380f880a706e3711421076b6bb9f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7PtoGJm6VF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.630 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:40.824Z"}
  console.log
    CSRF token generation: {
      sessionID: '26f30145267498d7867e2c76776d3788',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Q67lH7aT-mIH-mb7qrPuVK5lUBpRoKJ1UfTM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26f30145267498d7867e2c76776d3788

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rCv4WlZUrf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.964 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:41.221Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '26f30145267498d7867e2c76776d3788',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26f30145267498d7867e2c76776d3788.EHK03dd%2BxwPx8z6jupYNqKQ6xq7%2F45biSBAPVuUSwCw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 275.927 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:43.302Z"}
  console.log
    CSRF token generation: {
      sessionID: '9f73776389dcd6af2910b38a43bf6e1f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cElLH8gM-KcvG1p8WC3Q34TpVtoHPHv1oTUo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9f73776389dcd6af2910b38a43bf6e1f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1Q0em1hKT2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.134 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:43.314Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d629f48f6e6a722d989ff0e9b3e8170',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2V8gigYF-kJxayMD-znOV_RZhd08BEJtX9GI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d629f48f6e6a722d989ff0e9b3e8170

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e3vHrh8P4d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.124 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:43.403Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '3d629f48f6e6a722d989ff0e9b3e8170',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3d629f48f6e6a722d989ff0e9b3e8170.sF%2BTU6U2GrNPcLUO1jpMphda1ZrFeWn7F0AtI2%2Bmr60',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:35:43.503Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-babd9d45-da03-472f-9841-ca4b38bc72b8","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T15:35:43.503Z","userId":"685eba4f5fa9fa62feefd036","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 100.727 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:45.265Z"}
  console.log
    CSRF token generation: {
      sessionID: '91501b5deb803c176ef508020a4407ad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ncYUOe9N-NY0V3bC_SjpZv9VqMT-2xYkzAks

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 91501b5deb803c176ef508020a4407ad

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: i-yFxEHfmK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.320 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:45.276Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ea6a16db0f763d98e4658decd01e52e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7EjB6o5m-WM4O6z-7PIKweRLMd3FYLEx8zks

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ea6a16db0f763d98e4658decd01e52e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fqPgh-p08w...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.297 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:45.372Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '0ea6a16db0f763d98e4658decd01e52e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0ea6a16db0f763d98e4658decd01e52e.WFPO1g0CsEhqyzZMepOafnEXC7YaJFpTFrylyuCCXI8',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:35:45.495Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-3211f612-6c98-45af-8ffc-af12fba2fef2","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T15:35:45.496Z","userId":"685eba515fa9fa62feefd05a","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 123.833 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:47.531Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fd9542f77bab69ecdd34f127920578f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OJyXpsVx-WslrCznhizmmemAWhIelDBbiR0Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fd9542f77bab69ecdd34f127920578f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: evQVYzFVXY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.179 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:47.539Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.913 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:50.049Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b4487365e28578b9cb53c633ef72669',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i5cK9Tui-54PoHfveVQB2ELqedI1Ubq9h7B0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b4487365e28578b9cb53c633ef72669

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 60q2VbFEIu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.730 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:50.059Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.898 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:52.528Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fcbdd2281c166f39ed0c3d348f01a387',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qxJRCs6y-9kw7XtajcbLtsZrQIZ-8nNau1m8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fcbdd2281c166f39ed0c3d348f01a387

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oI9qkziZSx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.660 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:52.539Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.794 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:55.008Z"}
  console.log
    CSRF token generation: {
      sessionID: '02fb407ab05871ffe290e7fe22401516',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w08F17h7-SsULqci2znEdHgPjWm163pBQX7g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 02fb407ab05871ffe290e7fe22401516

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BNG7RTHa7H...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.057 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:55.018Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1439 |
      1440 |   } catch (error) {
    > 1441 |     console.error('Social registration error:', error);
           |             ^
      1442 |     res.status(500).json({
      1443 |       success: false,
      1444 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1441:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 315.929 ms - 49[0m
PASS tests/integration/socialAuth.test.js (39.74 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (3724 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (2246 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (2739 ms)
      ✓ should return 404 for unconfigured OAuth providers (2471 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (2525 ms)
      ✓ should reject social registration with invalid social token (1725 ms)
      ✓ should reject social registration with missing required fields (2537 ms)
      ✓ should prevent duplicate social registrations (2073 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (1959 ms)
      ✓ should reject linking if social account already exists (2483 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (1967 ms)
      ✓ should update social account tokens on login (2267 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (2518 ms)
      ✓ should handle expired social tokens (2241 ms)
      ✓ should sanitize social profile data (2482 ms)
      ✓ should handle database errors during social registration (2295 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:35:58.371Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:00.029Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-9270de44-c708-43e6-ba89-6af57ef421d6

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 99.522 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:01.634Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-c63b315c-ac96-4e44-940c-8b84d42b952b

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 91.761 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:03.206Z"}
[0mGET /api/v1/quickbooks/vendors [33m404[0m 54.259 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:04.578Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 118.772 ms - 318[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:06.039Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json [32m200[0m 115.148 ms - 955[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:07.518Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m400[0m 28.400 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:08.878Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 [33m404[0m 82.232 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:10.308Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 149.439 ms - 169[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:11.842Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 [33m400[0m 28.899 ms - 81[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:13.266Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 [33m400[0m 58.569 ms - 76[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:14.707Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 [33m404[0m 55.896 ms - 49[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:16.160Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-e244c1ab-5939-48f9-b02d-783e1a903ba7

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 90.422 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:16.255Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 81.435 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:16.340Z"}
[0mGET /api/v1/quickbooks/history [32m200[0m 97.451 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:17.807Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-b2fd4e45-10fc-4e25-b115-de927dc8e38a

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 94.975 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:17.905Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 80.755 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?type=vendor {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:17.989Z"}
[0mGET /api/v1/quickbooks/history?type=vendor [32m200[0m 84.179 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.430Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-725ce647-89cc-48f0-8f8f-710e6a67fe37

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 92.066 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.525Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 85.346 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.614Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-ffb6831f-2e1e-4fb0-a8af-d7ffa3ccfbf1

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 92.125 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.708Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-b76e92bc-4977-4a0d-b909-8383f6089b7c

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 91.176 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.802Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-e13f8f8a-377b-4bf5-8376-451e11f6b77c

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 90.429 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.895Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-78280b5a-305c-4d19-bb63-1e88d6b85807

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 93.311 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:19.991Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-6eeb3ba8-83d7-471b-8591-7a57aedc2088

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 89.492 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?limit=3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:20.083Z"}
[0mGET /api/v1/quickbooks/history?limit=3 [32m200[0m 86.220 ms - -[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:21.548Z"}
[0mGET /api/v1/quickbooks/vendors [33m401[0m 1.300 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:21.552Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m401[0m 1.019 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:21.554Z"}
[0mGET /api/v1/quickbooks/commission-detail [33m401[0m 0.755 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:21.557Z"}
[0mGET /api/v1/quickbooks/history [33m401[0m 0.854 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:22.947Z"}
  console.log
    Authorization failed for path: /vendors - User role: affiliate Allowed roles: [ 'administrator' ]

      at log (server/middleware/auth.js:184:15)

[0mGET /api/v1/quickbooks/vendors [33m403[0m 28.955 ms - 54[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:24.345Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-4e4e13a9-b091-41d2-ac68-d7b297f500dd

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 87.794 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:25.853Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 117.290 ms - 318[0m
PASS tests/integration/quickbooks.test.js (29.196 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✓ should export verified vendors as CSV (1996 ms)
      ✓ should export vendors as JSON (1490 ms)
      ✓ should handle no verified vendors gracefully (1487 ms)
    Payment Summary Export
      ✓ should export payment summary for date range as CSV (1444 ms)
      ✓ should export payment summary as JSON with correct aggregations (1476 ms)
      ✓ should require date parameters (1361 ms)
      ✓ should handle empty date range (1426 ms)
    Commission Detail Export
      ✓ should export commission details for specific affiliate (1508 ms)
      ✓ should require all parameters (1431 ms)
      ✓ should reject unverified affiliate export (1437 ms)
      ✓ should handle non-existent affiliate (1446 ms)
    Export History
      ✓ should retrieve export history (1663 ms)
      ✓ should filter export history by type (1626 ms)
      ✓ should limit export history results (2115 ms)
    Security and Permissions
      ✓ should require admin authentication for all QuickBooks endpoints (1407 ms)
      ✓ should not allow affiliate access to QuickBooks exports (1383 ms)
    CSV Format Validation
      ✓ should generate QuickBooks-compatible vendor CSV (1482 ms)
      ✓ should generate QuickBooks-compatible payment CSV (1521 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:27.585Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:27.942Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ddf8e76c4d8ed0d58bd94252799a410a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2854gF0S-glJAsSPKXmEvq1Jsc_yPQITgAzg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ddf8e76c4d8ed0d58bd94252799a410a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: N43Tcbg-Yh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 19.977 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:28.802Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-08ac1ea7-23bf-42a7-adff-0efac45ee634

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 173.275 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:29.823Z"}
  console.log
    CSRF token generation: {
      sessionID: '00e711014be5e0bd61396df44f04b80e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LQE4F4c4-bMmkqpr60shoaS5LIkVwhcMpeGM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 00e711014be5e0bd61396df44f04b80e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K1qlsyeaKf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 14.814 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:30.100Z"}
[0mPOST /api/v1/customers/register [33m400[0m 29.270 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:30.859Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b4133f770ba3c4fedd67505eadc59708',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: k9KNAMBx-ak-28HOWk7oDmjLjOD-1ohLfdmw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b4133f770ba3c4fedd67505eadc59708

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qqefCDP2mN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.784 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:31.162Z"}
[0mPOST /api/v1/customers/register [33m400[0m 56.216 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:31.981Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b1d543a8b433e5718ae91bfeda6634c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CmK0rS26-NSTHSGfMnS-_SWFNljzaIE3ZDtk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b1d543a8b433e5718ae91bfeda6634c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rjTBoZd8Hg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.735 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:32.241Z"}
[0mPOST /api/v1/customers/register [33m400[0m 55.837 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:33.034Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b1a46725050c1fece0ead3d6f59d36f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qxvoPUZq-dlp1uRaReAm8ML6zlUZ61DbHV_Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b1a46725050c1fece0ead3d6f59d36f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1SHu9Ugqqq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 15.933 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:33.317Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 83.137 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:34.121Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd349690847a4a135692225b820fbceb8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MSxvvBv7-LST0AoC7nKkmaiGkyXzb0c8R95I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d349690847a4a135692225b820fbceb8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FiET05uwas...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.302 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:34.394Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 81.707 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:35.242Z"}
  console.log
    CSRF token generation: {
      sessionID: '7daa1c18e3d3ae0e93707b6256ef40de',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jjWhB0Tl-NX1k8JfTpDjUDXGCM3vmlfsOV0E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7daa1c18e3d3ae0e93707b6256ef40de

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OWTkc843Rd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.551 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:35.526Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 54.410 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:36.310Z"}
  console.log
    CSRF token generation: {
      sessionID: '88d8712d3f6600491d30f3633d034743',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LdCJyOro-k9mbE86sRtjm8PafY99fl7MnriU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 88d8712d3f6600491d30f3633d034743

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: noawIIOIF0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.601 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:36.571Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 54.152 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:37.357Z"}
  console.log
    CSRF token generation: {
      sessionID: '6af2d133f7e18f2011269d88cf03b857',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mcwCfIAW-2vbAqG--FtvZcAjj0p8112Sa0fo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6af2d133f7e18f2011269d88cf03b857

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oSsnChES9-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.279 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:37.622Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 101.867 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:38.531Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c3f63edb8ebe273106795e48dde59196',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: df4fzsx4-oIrqp2p8eIdh1VFhnHvReFT_cdw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c3f63edb8ebe273106795e48dde59196

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GH2DxtSVrr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 13.248 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:38.800Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 85.865 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:39.640Z"}
  console.log
    CSRF token generation: {
      sessionID: '572cc71ed36c9a27f6acb255956e7b47',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: d3wapDaX-x5tRQs069jvZUBDwwTtdm8hdjMQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 572cc71ed36c9a27f6acb255956e7b47

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1d6VW5VNvw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.008 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:39.944Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 109.503 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:40.801Z"}
  console.log
    CSRF token generation: {
      sessionID: '378c77f061c98c64e89c41e2264c73ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fdwj68mk-NZfyMWTGLHzWXa1fGyNMlgfqYa4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 378c77f061c98c64e89c41e2264c73ab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Tu8DIMf05o...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.645 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:41.102Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 108.605 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:41.962Z"}
  console.log
    CSRF token generation: {
      sessionID: '67827b6dc37586eb632b99d7a271ab34',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hpqTZDMz-iNn8Thsn84djfHDPj85ThmeHQsQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 67827b6dc37586eb632b99d7a271ab34

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6ci-ZlFaq1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.887 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:42.238Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '67827b6dc37586eb632b99d7a271ab34',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A67827b6dc37586eb632b99d7a271ab34.KM%2FADhNu8N0XU4nP%2BnrwUeNEC4kjJfksxUTDwxyl1so',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 198.446 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:42.439Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 142.244 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:43.303Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ba6f788fbd031779dcb896b10e26b40a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GZkrGIeA-dHySkpLu74HZPAAOgpHuQedeo98

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ba6f788fbd031779dcb896b10e26b40a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 70wy_Zdi0e...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.036 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:43.572Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'ba6f788fbd031779dcb896b10e26b40a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aba6f788fbd031779dcb896b10e26b40a.T0GE8o6hiAsuRB0BEC5GsPHk9ZajaRtQCh1XsLZmwLs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 112.327 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:44.420Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f74932d9d3898a78dc94cf4a69930776',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qazaTzCS-YwwfLrUopf0ecLl_5gteSX3LQ7g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f74932d9d3898a78dc94cf4a69930776

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fx9xwxWIgw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.079 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:44.684Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'f74932d9d3898a78dc94cf4a69930776',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af74932d9d3898a78dc94cf4a69930776.mULz4Timi3VmRCXWEpHT%2BEwaG5V6tbksKWDnTsMzOzw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 131.618 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:45.567Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cf57f350f91173156cfd64b7509e93e7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NTEPBcD3-Hn5M0Oxx-pQQI5pnZpDmRO3P38A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cf57f350f91173156cfd64b7509e93e7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L8k6HEXRKv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.638 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:45.927Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 133.774 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:46.792Z"}
  console.log
    CSRF token generation: {
      sessionID: '36ca303ac79ad0c7233368c47c50e9f7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ivSQNFRI-etmOlUNdMmPNL1qXhSgJI0CyXew

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 36ca303ac79ad0c7233368c47c50e9f7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: j4w2h1pAQZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.787 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:47.085Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 143.195 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:47.957Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dbaefd8ed02bd4646f1362d268ed307f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Pj3sD88N-u2yzHNdDo3e9w6Ut_6UMuuJ2QbM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dbaefd8ed02bd4646f1362d268ed307f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ALOePrGXuK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.538 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:48.284Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 135.777 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:49.147Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af7dd04d963835441326454f5e63c71d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rZj3I2Nt-1sO3wLC0bq5J3xUhIwvf0A2fZ6w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: af7dd04d963835441326454f5e63c71d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2a2mbGQ9cw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.070 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:49.480Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'af7dd04d963835441326454f5e63c71d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaf7dd04d963835441326454f5e63c71d.WuvlbS7uULe40L3mxfaF9GIlpfR2LBK1Kf%2FHyeEs4gE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 147.506 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:50.428Z"}
  console.log
    CSRF token generation: {
      sessionID: '7535ed7044f7020b6fa3be464cbea2ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gNzJS0BC-VJfIalvjTgmt1EgLMJwDrmgk0J4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7535ed7044f7020b6fa3be464cbea2ec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RCAjdbHbGt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.419 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:50.688Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '7535ed7044f7020b6fa3be464cbea2ec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7535ed7044f7020b6fa3be464cbea2ec.2ApkZJ%2FfF9SuAFavq5M3e%2BYhCr7xBX6OWcISt9nZvY8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 31.024 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:51.467Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bce4298b0862c0ca815149eb7c6f3289',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: o0OiBgcE-x_skGxFV2DinOwsfGW3rkFv_9tE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bce4298b0862c0ca815149eb7c6f3289

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VXrGqlhfrP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.329 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:51.821Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'bce4298b0862c0ca815149eb7c6f3289',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abce4298b0862c0ca815149eb7c6f3289.puACuL7JVOTI7vJpkPJvFNLHy2JXbMf5J8oBGr7EjY8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 31.286 ms - 63[0m
PASS tests/integration/customer.test.js (25.927 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1896 ms)
      ✓ should fail with invalid affiliate ID (1037 ms)
      ✓ should fail with duplicate email (1122 ms)
      ✓ should fail with duplicate username (1053 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1086 ms)
      ✓ should return customer profile for affiliate (1120 ms)
      ✓ should fail for unauthorized customer (1068 ms)
      ✓ should return limited data without authentication (1046 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1174 ms)
      ✓ should not update protected fields (1109 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1160 ms)
      ✓ should filter orders by status (1160 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1341 ms)
      ✓ should fail with incorrect current password (1117 ms)
      ✓ should fail with weak new password (1147 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1224 ms)
      ✓ should return monthly statistics (1164 ms)
      ✓ should allow affiliate to view customer dashboard (1190 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1279 ms)
      ✓ should reject deletion in production environment (1039 ms)
      ✓ should reject unauthorized deletion (1198 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:53.542Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:54.509Z"}
  console.log
    CSRF token generation: {
      sessionID: '02921ce53fb99a0fba62a7852b778f7b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PNrZPVOj-jUkYjphABM739Jg3m97fOM-d0tQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 02921ce53fb99a0fba62a7852b778f7b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 409DNJTckB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.357 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:54.630Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.677 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:54.938Z"}
[0mGET /api/v1/administrators [32m200[0m 110.498 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:55.994Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e11ac5da1f92425bddf5a38cebba6cbe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QReQIFm3-BCiZYfQ1jdtI9NQFtmaZCAsUsfU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e11ac5da1f92425bddf5a38cebba6cbe

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: D_YJmFRBN7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.282 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:56.091Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.470 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:56.339Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 108.953 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:57.287Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a4b3f1532a0a57a73f75537b32f4242',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oqjs7wYq-m1Yi1PXBXClphsVpE7lJWZO8pKE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a4b3f1532a0a57a73f75537b32f4242

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0F-Sysj6JG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.742 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:57.380Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 174.009 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:58.492Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 112.401 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:59.491Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be967845b5f8839c7f7999e5c03723a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xc3t7Fxp-GQ6Y_xcvEKNv4WgHezS-u375e9s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: be967845b5f8839c7f7999e5c03723a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZRyohjH60B...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.853 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:59.601Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.606 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:36:59.767Z"}
[0mGET /api/v1/administrators [33m401[0m 1.257 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:00.630Z"}
  console.log
    CSRF token generation: {
      sessionID: '86e275d9c3af0a401a72f68d6400df61',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tcwq4aBS-jOVFRyTrqaRdqP2-LSvdQf9uNNc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 86e275d9c3af0a401a72f68d6400df61

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nqJFpAyUBJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.242 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:00.734Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.062 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:00.964Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.158 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:01.115Z"}
[0mGET /api/v1/administrators [33m403[0m 29.641 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:02.010Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e356f8675d8060f83f89a2dbcf05d480',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yGlXrZCu-o7qEaI3jlwUxbT89sizemsnt54A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e356f8675d8060f83f89a2dbcf05d480

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _frSDTllW7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.077 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:02.106Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.557 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685eba9e7feeb2efa4ab37cd {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:02.338Z"}
[0mGET /api/v1/administrators/685eba9e7feeb2efa4ab37cd [32m200[0m 85.383 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:03.266Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a4fbffb916140be3366c9ba1b7ca916',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SUoZTS4L-czWbvdDe7kRJb35J0Zi5Q_0h_AQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a4fbffb916140be3366c9ba1b7ca916

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6XPJ0F83dp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.684 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:03.375Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.335 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685eba9f7feeb2efa4ab37f8 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:03.519Z"}
[0mGET /api/v1/administrators/685eba9f7feeb2efa4ab37f8 [33m404[0m 84.594 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:04.467Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a53120f6d6fc0c4ddca332ba611fb4a3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kc5XphyV-Tus-_tBve4JIX1cuPY_SqBuCywU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a53120f6d6fc0c4ddca332ba611fb4a3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: g4fekyBpGc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.702 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:04.571Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.409 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:04.720Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 55.543 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:05.663Z"}
  console.log
    CSRF token generation: {
      sessionID: '7986a948187b7224a22a0223b77d8614',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8JqnsHeF-SFzU1qr4QG0QfEwJdQZ83YnkXXU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7986a948187b7224a22a0223b77d8614

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4rNJe8vzxS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.235 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:05.755Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.780 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:05.900Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '7986a948187b7224a22a0223b77d8614',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7986a948187b7224a22a0223b77d8614.yFr4q5PIpTsNEy88I%2Bo%2BC%2FOxzJiLUOcNFkVxJOoJzD8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [32m201[0m 207.242 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:06.111Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.020 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:07.103Z"}
  console.log
    CSRF token generation: {
      sessionID: '251e0eb5972207e63a942e3d74152b3a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TtbKYbB6-YKTqQ6DQUos0Dy5K22YDR8GgNp8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 251e0eb5972207e63a942e3d74152b3a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EsXbCaHlKV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.394 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:07.195Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.617 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:07.355Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '251e0eb5972207e63a942e3d74152b3a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A251e0eb5972207e63a942e3d74152b3a.nNVz%2FmM6quAmWSy4kjgq4scXA%2FrbQ7ueeNeNLHV9o4s',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 62.413 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:08.289Z"}
  console.log
    CSRF token generation: {
      sessionID: '22495a21f82c6936ed1b50aedeb1b07a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wQGyqEZj-BMGTlRESjilUD6biWycofccUMV8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 22495a21f82c6936ed1b50aedeb1b07a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G2vZGbphB_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.729 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:08.398Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.649 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:08.561Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '22495a21f82c6936ed1b50aedeb1b07a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A22495a21f82c6936ed1b50aedeb1b07a.T2L17H77Ov9CkDREnwibcTr4Wyp47ssOm978sLKU9Pk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 58.251 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:09.473Z"}
  console.log
    CSRF token generation: {
      sessionID: '5149c409f35c3becda6d62f0541db6f1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rWNbX4r9-BBBIvorWQuG8w-IBVVByirYRfGQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5149c409f35c3becda6d62f0541db6f1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xlZEN9iNYo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.462 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:09.568Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.847 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:09.711Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '5149c409f35c3becda6d62f0541db6f1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5149c409f35c3becda6d62f0541db6f1.BF2YOrI5WgnYcoINx5KLjpvAcJcvpw1BgxT4WbKbxT8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 60.070 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:10.627Z"}
  console.log
    CSRF token generation: {
      sessionID: '793f466c17fd3e0c84a198de0d547601',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dnXOlYDs-OrVLLXRMyM5I5Q2ixjBXSunZpts

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 793f466c17fd3e0c84a198de0d547601

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HJwM106yFg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.099 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:10.719Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.538 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:10.864Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '793f466c17fd3e0c84a198de0d547601',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A793f466c17fd3e0c84a198de0d547601.Lhv3a1J29HhqI1WjvNFZCDcKZ2O9yDj6k%2FtwrCcjbkc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m409[0m 86.925 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:11.796Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bbc28d08ecdbd845d0d878c5622011e5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eJ566RvL-42SRm2IC2LxYPl9kAN9V1R6Jqyw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bbc28d08ecdbd845d0d878c5622011e5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W2jbtd39ds...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.199 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:11.898Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.999 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:12.138Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b35dff19b6f7c85bae4a13a66d503c1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iqCsc39P-ut0jkc73-tO61v-62oAft1T6o7M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b35dff19b6f7c85bae4a13a66d503c1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vQwEWom4Dg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.861 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:12.148Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.597 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:12.296Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'b35dff19b6f7c85bae4a13a66d503c1b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab35dff19b6f7c85bae4a13a66d503c1b.LUe9pXpSgaWFW4u8pqczIuGZBxkUJRYFRw%2Bd9dd0hxY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m403[0m 56.936 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:13.208Z"}
  console.log
    CSRF token generation: {
      sessionID: '69b0490b26ae061726fddaa26c3cbd75',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yk7N0jsL-oluReBxxpdYJAh_h6o82Ty0LbRs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 69b0490b26ae061726fddaa26c3cbd75

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AJZCapd9sR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.989 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:13.302Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.273 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebaa97feeb2efa4ab3949 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:13.566Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaa97feeb2efa4ab3949 {
      sessionID: '69b0490b26ae061726fddaa26c3cbd75',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A69b0490b26ae061726fddaa26c3cbd75.FXHWb3bml4gr9uFl2NTzteWO86CuDQEngmkOZd1Fpv4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebaa97feeb2efa4ab3949 [32m200[0m 92.318 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:14.530Z"}
  console.log
    CSRF token generation: {
      sessionID: '06563787c07d26dcd1e82355ac123555',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D99OUBBx-RYRDjx7snCao1r0r6lPXVO_BvXM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 06563787c07d26dcd1e82355ac123555

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2raIq80pEd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.050 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:14.632Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.442 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebaaa7feeb2efa4ab3974 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:14.869Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaaa7feeb2efa4ab3974 {
      sessionID: '06563787c07d26dcd1e82355ac123555',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A06563787c07d26dcd1e82355ac123555.HikA9FgTty0oG%2FZK9SWK7lzr71dguYFwR4%2F6%2By%2FH3Aw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebaaa7feeb2efa4ab3974 [32m200[0m 117.669 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:15.870Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cba4365ab56921333b10e1990a9d37ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oGYnX8At-0QKAGgWkQUUV3Y3zJvdtgwooXRM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cba4365ab56921333b10e1990a9d37ec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5jvRjFpUo2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.550 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:15.971Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.449 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebaac7feeb2efa4ab39a0 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:16.206Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaac7feeb2efa4ab39a0 {
      sessionID: 'cba4365ab56921333b10e1990a9d37ec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acba4365ab56921333b10e1990a9d37ec.0LQ0jABlZCYfk%2BtzpQRhUMQVUpzsPlEE6dTGoQ6uHZU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebaac7feeb2efa4ab39a0 [32m200[0m 138.849 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:16.348Z"}
  console.log
    CSRF token generation: {
      sessionID: '09607d08059ba8fdaa518d31ae70b1a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Dp3OEbyc-UFYc6GQgWVWdZ4vcVA4BbUqy54Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 09607d08059ba8fdaa518d31ae70b1a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FGv4SQU7iP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.483 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:16.357Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.622 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:17.368Z"}
  console.log
    CSRF token generation: {
      sessionID: '39b2bde8721ed9e82e1670aeb413661b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4dJpdEz0-bIIFp5pX8-Lkme3RVbhw5XhZ2HE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 39b2bde8721ed9e82e1670aeb413661b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HttWend53p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.004 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:17.465Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.995 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebaad7feeb2efa4ab39cf {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:17.711Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaad7feeb2efa4ab39cf {
      sessionID: '39b2bde8721ed9e82e1670aeb413661b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A39b2bde8721ed9e82e1670aeb413661b.jir66BKeHJzbkuQ0tauAWLYOpnM%2Fz0WY3KisFdaaSAI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebaad7feeb2efa4ab39cf [32m200[0m 89.362 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:17.804Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.530 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:18.709Z"}
  console.log
    CSRF token generation: {
      sessionID: '64366fd00ae277647e475d4dfa3eb992',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PQmBQHle-6PGVKxSkRtdWVOQwyzLsVuUi_p4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 64366fd00ae277647e475d4dfa3eb992

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nR1gLK03zH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.453 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:18.808Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.840 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebaaf7feeb2efa4ab39fb {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:19.047Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaaf7feeb2efa4ab39fb {
      sessionID: '64366fd00ae277647e475d4dfa3eb992',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A64366fd00ae277647e475d4dfa3eb992.6LYuu4%2FWxv6qGDR5rajFyCoFAzfK1%2BtS7RXhLXANmdY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebaaf7feeb2efa4ab39fb [32m200[0m 85.108 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:19.990Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dd6a1dfdff826de215b892e8e0660618',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1sLxDd5H-UxnPydxdqzzkl60i3CmBX0I3Clg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dd6a1dfdff826de215b892e8e0660618

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RnPsKuOab5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.431 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:20.090Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.629 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebab07feeb2efa4ab3a26 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:20.321Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab07feeb2efa4ab3a26 {
      sessionID: 'dd6a1dfdff826de215b892e8e0660618',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Add6a1dfdff826de215b892e8e0660618.CNdkyc7iYINM75cskodJsguR%2FhmlN7YAcHeUZuHXsdA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebab07feeb2efa4ab3a26 [33m409[0m 85.101 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:21.255Z"}
  console.log
    CSRF token generation: {
      sessionID: '03b219ef4666e6d98329a8db6fc9313a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5Fz8C4Ch-Nr_Uf2zHBJho8woKCWkR6UkWFM4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 03b219ef4666e6d98329a8db6fc9313a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gub_ztxuNn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.369 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:21.347Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.626 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebab17feeb2efa4ab3a4b {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:21.584Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab17feeb2efa4ab3a4b {
      sessionID: '03b219ef4666e6d98329a8db6fc9313a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A03b219ef4666e6d98329a8db6fc9313a.KVZH9u53Gf5uDLt8O8oOAPdnsZ2RysxztD%2BJ0Kg86D4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebab17feeb2efa4ab3a4b [33m400[0m 57.478 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:22.502Z"}
  console.log
    CSRF token generation: {
      sessionID: '2154edb5c705d4325ab3994b53ba2987',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZVAAlmPP-HJggjrA_yO0gOttDsMq_ICDsZjQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2154edb5c705d4325ab3994b53ba2987

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VSCrvrStQ7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.809 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:22.596Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.146 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:22.944Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c26e6b13f56edee3545fe7fb159110e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HSYbs36E-bqgl9RIISHErw7ouc2LemKaqtjA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8c26e6b13f56edee3545fe7fb159110e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: stXYoxi8TE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.375 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:22.953Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.668 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ebab27feeb2efa4ab3a7b {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:23.104Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab27feeb2efa4ab3a7b {
      sessionID: '8c26e6b13f56edee3545fe7fb159110e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8c26e6b13f56edee3545fe7fb159110e.tEwYxbN%2FXNmkIMTHqVv0cbOrLzdGz%2F6rqdyMTbX8eAY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ebab27feeb2efa4ab3a7b [33m403[0m 56.714 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:24.026Z"}
  console.log
    CSRF token generation: {
      sessionID: '3486270f9473a269e1442d6da63985c5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F8eKcAwU-i3KdPR0OpqbuL2LHlfLAm4EL98c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3486270f9473a269e1442d6da63985c5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0EHTzG4Zro...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.817 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:24.120Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.444 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ebab47feeb2efa4ab3aab {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:24.359Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab47feeb2efa4ab3aab {
      sessionID: '3486270f9473a269e1442d6da63985c5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3486270f9473a269e1442d6da63985c5.f5fxm5lGK7SwVB6UXje3NVIKgrGfRuP3HfUXijGB73M',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ebab47feeb2efa4ab3aab [32m200[0m 117.699 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:25.347Z"}
  console.log
    CSRF token generation: {
      sessionID: '84d05d870bc1eede719a9dc6e7d0792d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jmm4ZQsi-lvqkwNbah4LdYnP0ddrsxv7n4Hw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 84d05d870bc1eede719a9dc6e7d0792d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LtYXsUsiEg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.717 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:25.445Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.006 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ebab57feeb2efa4ab3ad2 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:25.675Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab57feeb2efa4ab3ad2 {
      sessionID: '84d05d870bc1eede719a9dc6e7d0792d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A84d05d870bc1eede719a9dc6e7d0792d.PJU3lNme%2BJA5DNZvqK3ZV3om5YH9Zr0gKIq%2FGtNZi2s',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ebab57feeb2efa4ab3ad2 [33m400[0m 58.700 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:26.606Z"}
  console.log
    CSRF token generation: {
      sessionID: 'afb8ed0a8368f5b387b1af7254160d08',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0CtN0edl-3c-6zi5OtFvFMOseeDpV5weehkA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: afb8ed0a8368f5b387b1af7254160d08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zIGyOgI_R2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.732 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:26.715Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.471 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ebab67feeb2efa4ab3afc {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:26.976Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab67feeb2efa4ab3afc {
      sessionID: 'afb8ed0a8368f5b387b1af7254160d08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aafb8ed0a8368f5b387b1af7254160d08.FH82P4HOo4BDTpfNrGxpb1IDyVu5vZHwg4Q5fuMrupI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ebab67feeb2efa4ab3afc [33m400[0m 57.536 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:27.909Z"}
  console.log
    CSRF token generation: {
      sessionID: '49ddd8f02ec3e8459a47a1ce475c393b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ILCEhEYw-lkuQN9kzjzSqygb_c9fPS4k7Y8U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 49ddd8f02ec3e8459a47a1ce475c393b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OtbRz8-RO_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.474 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:28.005Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.973 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:28.331Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ae27b758e4581b990cb0560727fe6dfd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pOdoqK29-Dz7zKCrVBapJ96S5l80Mzh0NjsQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ae27b758e4581b990cb0560727fe6dfd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZI2OJaqyil...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.278 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:28.341Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.540 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ebab87feeb2efa4ab3b2d {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:28.484Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab87feeb2efa4ab3b2d {
      sessionID: 'ae27b758e4581b990cb0560727fe6dfd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aae27b758e4581b990cb0560727fe6dfd.oqbQHvLZNV7jefcC2HWZkrBfa58F%2FYqDRDElVrPuuHA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ebab87feeb2efa4ab3b2d [33m403[0m 57.225 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:29.383Z"}
  console.log
    CSRF token generation: {
      sessionID: '29b27e52a83aba5234b426c3f76f274e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QSUSDU3b-QTjkGh6U3kCLqkUVYeJtJ8iKNAE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 29b27e52a83aba5234b426c3f76f274e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AqhYnzK7Bh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.865 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:29.479Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.998 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ebab97feeb2efa4ab3b5f {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:29.720Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebab97feeb2efa4ab3b5f {
      sessionID: '29b27e52a83aba5234b426c3f76f274e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A29b27e52a83aba5234b426c3f76f274e.99Edn6RZeIGU1hteC0vD01fNQwHjFvWtGFJemZHLuvI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ebab97feeb2efa4ab3b5f [33m404[0m 110.360 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:30.683Z"}
  console.log
    CSRF token generation: {
      sessionID: '85aa18ba4cd000c58afd7f833e86abed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yA2ZzSZM-9yc3pqgsPECvF9ku2w3vgXa_VMg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 85aa18ba4cd000c58afd7f833e86abed

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kamhlRDghN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.312 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:30.777Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.642 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ebaba7feeb2efa4ab3b8a/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:31.009Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebaba7feeb2efa4ab3b8a/reset-password {
      sessionID: '85aa18ba4cd000c58afd7f833e86abed',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A85aa18ba4cd000c58afd7f833e86abed.x3zUHLFRvAdNdvmKu6lBbD62CpuGThuPTwv%2BRmBUiyo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ebaba7feeb2efa4ab3b8a/reset-password [32m200[0m 166.849 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:31.179Z"}
  console.log
    CSRF token generation: {
      sessionID: '07d3866a05f8ae64ac024575808ea736',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s1gU0s25-umeQoI_BL_7wzUPm8p9rm39bmMs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 07d3866a05f8ae64ac024575808ea736

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PN0hdYrh6y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.080 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:31.189Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.772 ms - 644[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:31.334Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c1cc1bc3de05d4699555039e33f2275',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LWE4pEoH-L59XzhNFPRkMZABK7jGT_uMGW_Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c1cc1bc3de05d4699555039e33f2275

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: axhKv1PYis...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.369 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:31.344Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 109.730 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:32.304Z"}
  console.log
    CSRF token generation: {
      sessionID: '1472659c819674a4122b343225065056',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IeOLfNnJ-ZTlVQx8YvnKQGMm5HKUf_-T4UzE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1472659c819674a4122b343225065056

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VBMxwUhU7O...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.316 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:32.409Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.575 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ebabc7feeb2efa4ab3bbc/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:32.678Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebabc7feeb2efa4ab3bbc/reset-password {
      sessionID: '1472659c819674a4122b343225065056',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1472659c819674a4122b343225065056.OGfgipU65rQk4ci3pkIXeWWs9X8wlZX3sUBPqUfvklY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ebabc7feeb2efa4ab3bbc/reset-password [32m200[0m 171.263 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:33.733Z"}
  console.log
    CSRF token generation: {
      sessionID: '3df0ff9d84d85f0ea6993244406483a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BGQTduqG-wR2WzyTEppl1aMgUn68wiNy3kbQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3df0ff9d84d85f0ea6993244406483a5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C8qQWoxLir...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.510 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:33.824Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.698 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ebabe7feeb2efa4ab3bea/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:34.045Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebabe7feeb2efa4ab3bea/reset-password {
      sessionID: '3df0ff9d84d85f0ea6993244406483a5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3df0ff9d84d85f0ea6993244406483a5.Kt6%2Fl2zIMSq6A7UWWe4FFJsRv6fhFSLasNJfLQdtJUM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ebabe7feeb2efa4ab3bea/reset-password [33m400[0m 57.398 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:34.959Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fb5c55f3d26b2d53c156610cf7ae923',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: czwVn90V-XnDh1pvoEfRb_15iMnJbb_N5w7k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3fb5c55f3d26b2d53c156610cf7ae923

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AmPvg0dNwI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.188 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:35.051Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.914 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:35.392Z"}
  console.log
    CSRF token generation: {
      sessionID: '7f7c79e7b87d1737ef97b3de66924f51',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nZcaRNQU-FkMxABOk4HhPcotByJrrUUTQRZo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7f7c79e7b87d1737ef97b3de66924f51

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yXHFLnEMR4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.635 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:35.403Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.110 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/685ebabf7feeb2efa4ab3c14/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:35.547Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ebabf7feeb2efa4ab3c14/reset-password {
      sessionID: '7f7c79e7b87d1737ef97b3de66924f51',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7f7c79e7b87d1737ef97b3de66924f51.2aHavkci%2FRQMfJEdwM%2Ba2Ie%2Fz8EaJhXApXuXBTFhASw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ebabf7feeb2efa4ab3c14/reset-password [33m403[0m 60.262 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:36.453Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a034e809e283742d51b5c90c6c74df82',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wCW5L9Yv-4dwXdSAnP1nhSeueeUDwE2fSWHg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a034e809e283742d51b5c90c6c74df82

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Yr_PB2u1mi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.304 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:36.548Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.374 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:36.699Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 28.334 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:37.581Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cea02618ccb1f50ab5d8c3d2a8a7a54',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zsD9EZEs-M8RuFIZAIFI-I85tttyASOcslPo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9cea02618ccb1f50ab5d8c3d2a8a7a54

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4khtAE3zta...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.748 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:37.691Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.348 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:37.841Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 0.991 ms - 47[0m
PASS tests/integration/administrator.test.js (45.913 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (2056 ms)
      ✓ should filter by active status (1293 ms)
      ✓ should support pagination (2202 ms)
      ✓ should require admin authentication (1132 ms)
      ✓ should require administrator permissions (1381 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1262 ms)
      ✓ should return 404 for non-existent administrator (1191 ms)
      ✓ should handle invalid ObjectId (1187 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1457 ms)
      ✓ should validate required fields (1184 ms)
      ✓ should validate email format (1183 ms)
      ✓ should validate password strength (1155 ms)
      ✓ should prevent duplicate emails (1169 ms)
      ✓ should require administrators.create permission (1409 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1323 ms)
      ✓ should update email (1339 ms)
      ✓ should update password (1494 ms)
      ✓ should deactivate administrator (1335 ms)
      ✓ should not allow updating adminId (1290 ms)
      ✓ should validate email uniqueness on update (1264 ms)
      ✓ should prevent self-deactivation (1248 ms)
      ✓ should require administrators.update permission (1527 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1321 ms)
      ✓ should prevent self-deletion (1258 ms)
      ✓ should prevent deleting last administrator with all permissions (1304 ms)
      ✓ should require administrators.delete permission (1473 ms)
      ✓ should handle non-existent administrator (1300 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1620 ms)
      ✓ should clear login attempts on password reset (1424 ms)
      ✓ should validate password strength (1226 ms)
      ✓ should require administrators.update permission (1498 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (1125 ms)
      ✓ should require authentication (1108 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:39.344Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.240Z"}
  console.log
    CSRF token generation: {
      sessionID: '67938a30ea9db5878964a9540ca55925',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Eh4XfqL7-U5JWAegsmTthUI7o_PM82mFqdqc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 67938a30ea9db5878964a9540ca55925

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: D4xMFb4eQP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.891 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.255Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 8.376 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.268Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.594 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.288Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 3.180 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.295Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.642 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.302Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.377 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.308Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.206 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.320Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.709 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.324Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.528 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.328Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.488 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.332Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.356 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.337Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.367 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.340Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.227 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.345Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.494 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.349Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.461 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.353Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.794 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.358Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.627 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.366Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.320 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:40.369Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.437 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.362Z"}
  console.log
    CSRF token generation: {
      sessionID: '735053992d9579d010d060e480cb7c8f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8byNzhJp-2Ou4FQj395fDekz-yUK8ZQ16jUA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 735053992d9579d010d060e480cb7c8f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5mbl9azH73...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.032 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.375Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 115.045 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.493Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.529 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.608Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 118.246 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.728Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.541 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:41.843Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.907 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:42.795Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec466aa4906f70f6b3216a283e01e784',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RkiosP4p-3JMUNBBE9RRXGlGqYw66GjmhlmA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec466aa4906f70f6b3216a283e01e784

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NKP_ujGUPi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.297 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:42.804Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.589 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:43.636Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eba109411785c1d2e778a838f5dd5f18',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4yABdIHV-kgpEv2g3r24HJnLMEef2Pb390sE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eba109411785c1d2e778a838f5dd5f18

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lHH2vDHSXW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.126 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:43.645Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.565 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:44.467Z"}
  console.log
    CSRF token generation: {
      sessionID: '771fa001c1cd742ccc236ca4a8ef8494',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qORTp61n-Wyxu9vz4ilEC0aPc5OvvjcmqDQo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 771fa001c1cd742ccc236ca4a8ef8494

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pgOZKXIDk7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.486 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:44.476Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.888 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:44.481Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.740 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:44.485Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.588 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:44.489Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.428 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:45.319Z"}
  console.log
    CSRF token generation: {
      sessionID: '9c1579365ce8b4b019b225dc77c2cb33',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7FXYMAXy-9_Bx7Qa796gdun5uztNNlI7TA1g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9c1579365ce8b4b019b225dc77c2cb33

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CYFhXqp9Hd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.665 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:45.465Z"}
[0mPOST /api/v1/customers/register [33m400[0m 1.562 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:46.287Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e4c9469614749d0cde7618c604621cab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VOnc95w3-C4ywCLCzFhF3jaC0A_LPGMNgezg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e4c9469614749d0cde7618c604621cab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UMNZNx7qjF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.724 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:46.435Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-4ed8be38-af26-444f-8642-37f4bd019901

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 176.387 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:47.441Z"}
  console.log
    CSRF token generation: {
      sessionID: '943f86d395bcd45c21ffab47c8dca1b7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F22huyxn-JgXS-2-7zk6zV7-TWSXsthoHte0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 943f86d395bcd45c21ffab47c8dca1b7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZXzE79JVqK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.905 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:47.535Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:37:47.681Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:37:47.682Z","userId":"685ebacbd6fb7b0edf8d5ae6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.997 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:47.685Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '943f86d395bcd45c21ffab47c8dca1b7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A943f86d395bcd45c21ffab47c8dca1b7.henHUriSbuiz5HSNMr%2FUfmGXRNcw8xitqimIwnX9KZI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 65.580 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:48.617Z"}
  console.log
    CSRF token generation: {
      sessionID: '11125399d30a214f05a033b2679962b9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eGJFYc2u-ftHpenwQtyy5c9w9RSDN4UAQCXU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 11125399d30a214f05a033b2679962b9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hmHht1PBXE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.056 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:48.709Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:37:48.850Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:37:48.851Z","userId":"685ebaccd6fb7b0edf8d5b0e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.574 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:48.854Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '11125399d30a214f05a033b2679962b9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A11125399d30a214f05a033b2679962b9.7oX4ux2a94dUoJIddRaFAv3HN2KwLr94Z7NL0FVcxlc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ebacdd6fb7b0edf8d5b18","targetType":"administrator","timestamp":"2025-06-27T15:37:49.046Z","userId":"685ebaccd6fb7b0edf8d5b0e","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 192.958 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:49.885Z"}
  console.log
    CSRF token generation: {
      sessionID: '4336a68afde205edbb2e9489c19865a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: W03vSKUY-63CslfgTMqMsmUMM0VarAtQ736Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4336a68afde205edbb2e9489c19865a4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IhJgcPU4zY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.582 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:49.978Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:37:50.129Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:37:50.129Z","userId":"685ebacdd6fb7b0edf8d5b3a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.753 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:50.132Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '4336a68afde205edbb2e9489c19865a4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4336a68afde205edbb2e9489c19865a4.wgOTGQ7akMgTbkpcGjzd1Dc4eQK0MaIQdfkZSmGM5AU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 56.641 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:51.019Z"}
  console.log
    CSRF token generation: {
      sessionID: '2684fa73460d746648a524432bf7ce4f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w7Afestx-0uKnu0ImYhdTMaRatyXow6yfV3k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2684fa73460d746648a524432bf7ce4f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XFwECYmk6-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.794 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:51.117Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:37:51.264Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:37:51.265Z","userId":"685ebacfd6fb7b0edf8d5b62","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.408 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:51.268Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '2684fa73460d746648a524432bf7ce4f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2684fa73460d746648a524432bf7ce4f.fynXmTjkaBaWXJDqJuWjNNwC6ixkr5VSpt21Mjwg1mg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMCEZ7PXGE4977F"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ebacfd6fb7b0edf8d5b6b","targetType":"operator","timestamp":"2025-06-27T15:37:51.454Z","userId":"685ebacfd6fb7b0edf8d5b62","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 186.409 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:52.283Z"}
  console.log
    CSRF token generation: {
      sessionID: '2ec78e567470cc27c259ef2bd1ddfc1d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4qKrllN8-Leo-7J-zi-pYFmWqzMbV2WbQSMw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2ec78e567470cc27c259ef2bd1ddfc1d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uBkH0OHRlr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.864 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:52.392Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.918 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:52.483Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.725 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:53.318Z"}
  console.log
    CSRF token generation: {
      sessionID: '5ebcfd7783a8236cd1cc3fffb611ec5f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PL2ybvxm-fCAza5vnK3nE9_dnTPZyCehbzYo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5ebcfd7783a8236cd1cc3fffb611ec5f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: i6YmtO9Zd4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.535 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:53.417Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 58.318 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:53.504Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 125.671 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:54.483Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2a382c1ad954b8430901612be784bc9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BMr7Jvod-Gf4dw-1BlSzp6WnCTsGLXvVpOOk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2a382c1ad954b8430901612be784bc9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UdSmEKBidn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.868 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:54.587Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:37:54.730Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.762 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:55.558Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c2fad8b6c399eeb42db692b43f3e221',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VynoKUZY-Qgl8__sxhTHsr7yAe8N0FxXN4Xw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c2fad8b6c399eeb42db692b43f3e221

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7hCs5-TLzy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.296 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:55.569Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.143 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:56.401Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aedf7852d69d48bc54165681299d5477',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: O7DHs7xw-NaIOMd1cj3EQdsadN2qqrVnUtBQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aedf7852d69d48bc54165681299d5477

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Avv3tVDyrZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.420 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:56.409Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.401 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:57.228Z"}
  console.log
    CSRF token generation: {
      sessionID: '66e72465451d38fe974bcab9adc25550',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rY4zecgr-cxNnxXP2U_avwpxMYl5rMwYtzHA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66e72465451d38fe974bcab9adc25550

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BXL-oCDxxR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.725 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:57.237Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 111.604 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:58.168Z"}
  console.log
    CSRF token generation: {
      sessionID: '8083d25ebce822e1ecc7a91137d1c2ad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: URQfr7IU-HRV0cl9boiHRLgZStaBaOWQA6GI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8083d25ebce822e1ecc7a91137d1c2ad

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aqPZzsicF_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.956 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:58.181Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 120.585 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (20.482 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1529 ms)
      ✓ should accept strong passwords during affiliate registration (1431 ms)
      ✓ should reject passwords containing username (839 ms)
      ✓ should reject passwords containing email (833 ms)
      ✓ should reject passwords with sequential characters (853 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (967 ms)
      ✓ should accept strong passwords for customer registration (1155 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1174 ms)
      ✓ should accept strong passwords for administrator creation (1255 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1142 ms)
      ✓ should accept strong passwords for operator creation (1267 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1034 ms)
      ✓ should accept strong passwords during password reset (1145 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1095 ms)
      ✓ should handle case-insensitive username/email validation during registration (837 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (832 ms)
      ✓ should accept passwords with mixed character distribution (938 ms)
      ✓ should handle Unicode characters in passwords appropriately (1008 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:37:59.756Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:00.772Z"}
  console.log
    CSRF token generation: {
      sessionID: '53fe38628b68bbe0925b74215900d94d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QFtWHXrz-Pfd01opYhaNrYgCYVY1DDAYkmTE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 53fe38628b68bbe0925b74215900d94d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7-BvU5GFOv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.059 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:00.872Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:01.022Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:01.023Z","userId":"685ebad895e1dc689774ac6c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.697 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:01.027Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4777616a395efa69763d7b79a44d852',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qp5KoR8L-0DwBHiFGwz81gLDIGlCaG_z5Q7g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4777616a395efa69763d7b79a44d852

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GXyrOA94w8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.726 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:01.124Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:01.288Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:01.289Z","userId":"685ebad995e1dc689774ac7c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 165.170 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:01.292Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc5e30e20fe49606f4d31bcea345bb8e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OlAZO0wQ-CJWGSvZdG6QyMq14IG1ZGudp3N0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc5e30e20fe49606f4d31bcea345bb8e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oIzQRqNyYM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.224 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:01.443Z"}
[0mGET /api/v1/operators [32m200[0m 157.199 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:02.504Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7487fed52635f5a617a24b8c8b161a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: d6SzMZ52-QZOp4XEXnBriauHddYoCJbotOGY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7487fed52635f5a617a24b8c8b161a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hp8JpH27Nx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:02.595Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:02.736Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:02.736Z","userId":"685ebada95e1dc689774acb4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.739 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:02.739Z"}
  console.log
    CSRF token generation: {
      sessionID: '119e30e734208d81deabeabd3c0cf903',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7Zb2mCbB-FMPU7_dN_CSRUT-DLCi4aHQ5Bek

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 119e30e734208d81deabeabd3c0cf903

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JP8u462TxE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.497 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:02.834Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:02.988Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:02.988Z","userId":"685ebada95e1dc689774acba","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 154.460 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:02.991Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d01d6c976379e8a4c8c9c7114f11a9d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JJeOY3RD-HeXz-hpCBVghQ7_NiOcTcs75e7c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d01d6c976379e8a4c8c9c7114f11a9d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A80GwRHnsC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.706 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:03.084Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 144.178 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.057Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad444b15f972d5ddc43a8a32794264d2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pK4mF1N3-C_AQqOXBZ1keV7EKpFm5apb5x1s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad444b15f972d5ddc43a8a32794264d2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UES4LspCr-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.429 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.182Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:04.324Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:04.324Z","userId":"685ebadc95e1dc689774ace6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.710 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.327Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a83bfad5218f02f420d2ed0768e36fb0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lrRMZYSu-w73AEgMynpMfEh2lHjBIwWBpToc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a83bfad5218f02f420d2ed0768e36fb0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7FhlNRsrSi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.526 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.433Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:04.576Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:04.576Z","userId":"685ebadc95e1dc689774acec","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.435 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.579Z"}
  console.log
    CSRF token generation: {
      sessionID: '489a9f5085ce99a639685ea9ed63bb08',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CylwXMSS-j_tX3rto7XNTucOkWAaAdLeFXfo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 489a9f5085ce99a639685ea9ed63bb08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: T3-pZhNA_C...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.651 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:04.675Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 110.893 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:05.614Z"}
  console.log
    CSRF token generation: {
      sessionID: '973d02fb04f3757117cdd285a3f1a1d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2qvY2y2I-83Ifrd-KMPtLkW8HfEdZYpxSe8E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 973d02fb04f3757117cdd285a3f1a1d1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _uRIdHS6El...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.302 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:05.707Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:05.846Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:05.847Z","userId":"685ebadd95e1dc689774ad17","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.791 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:05.849Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e3094a86b6dd852717f69dd4d8fbddd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OKQxnPR4-YpA2LmwhQ_Zznmpe5XlUW1a-29Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e3094a86b6dd852717f69dd4d8fbddd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bd8TuGgLJs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.180 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:05.941Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:06.105Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:06.106Z","userId":"685ebadd95e1dc689774ad1d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 164.998 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:06.109Z"}
  console.log
    CSRF token generation: {
      sessionID: '8e867e335cf1dbaff309bf3ed07db960',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v0kOeDf8-u1y60CUAeh1TSkEUAcbZoVuVh98

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8e867e335cf1dbaff309bf3ed07db960

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nCQwS69LV4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.643 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:07.075Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 147.354 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.057Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd804a339dba10a490ed8f92a63039aa3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aGQv9VSN-ka6Ndsjv2TQLvu5f66ktPtXYXEk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d804a339dba10a490ed8f92a63039aa3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CLn0EzYnr6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.872 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.155Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:08.318Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:08.319Z","userId":"685ebae095e1dc689774ad66","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.516 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.322Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb3ce6484e1b000d7e8d755c616a9827',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pecI2jxE-g36eqHw2ZIUj3Gdd0ojFXHpHH48

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb3ce6484e1b000d7e8d755c616a9827

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FrACowUs7V...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.929 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.414Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:08.563Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:08.564Z","userId":"685ebae095e1dc689774ad6c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.603 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.566Z"}
  console.log
    CSRF token generation: {
      sessionID: '440cbd0173569decf3856ece341530f5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vbTkYvxh-2HUQ219FxeOvcn1ygxhA347aqPg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 440cbd0173569decf3856ece341530f5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9fj_pz6iyy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.089 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:08.575Z"}
[0mGET /api/v1/operators [33m401[0m 0.924 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:09.444Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aba2dcfb487c3540a615ed192047e883',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6nugTVwE-ahy1OBAQqK-vIJTuPtBMPZW-OwU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aba2dcfb487c3540a615ed192047e883

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fpLJO16g8s...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.629 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:09.538Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:09.686Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:09.686Z","userId":"685ebae195e1dc689774ad91","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.815 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:09.688Z"}
  console.log
    CSRF token generation: {
      sessionID: '5b934de4ef47d6d4edb64b0a2e6935fe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pnqhiMym-oDdd-1_fnb16RzPHnII-v8vE40U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5b934de4ef47d6d4edb64b0a2e6935fe

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: P5whCUFvBL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.174 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:09.777Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:09.925Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:09.926Z","userId":"685ebae195e1dc689774ad97","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.785 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:09.929Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b077fd55347c35e8baad3517e494fe2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iV4osnh1-e0JXicKNI1YWSqlACK9c_NW9jXU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0b077fd55347c35e8baad3517e494fe2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JNGBr6Sbvw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.524 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:10.018Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:10.163Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:10.163Z","userId":"685ebae195e1dc689774ad9d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.076 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:10.167Z"}
[0mGET /api/v1/operators [33m403[0m 58.046 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.077Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dd23db20c4f950bae774dff613489b85',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a2ataqzw--xSMn24rMmi80y4A7-gy37d8v7s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dd23db20c4f950bae774dff613489b85

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2qLZ9EXpR1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.295 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.170Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:11.321Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:11.321Z","userId":"685ebae395e1dc689774adc4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.025 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.324Z"}
  console.log
    CSRF token generation: {
      sessionID: '8d3a4c96613b20927bd62dce7270d7d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P9hR0OVU-BMTrVHmo4rflhNnD8DgoqrvhF30

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8d3a4c96613b20927bd62dce7270d7d9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dKDJ-fS8tb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.980 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.432Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:11.581Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:11.582Z","userId":"685ebae395e1dc689774adca","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.659 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.585Z"}
  console.log
    CSRF token generation: {
      sessionID: '93b93358e48b6ffd57878bcec9a4e063',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KyQ08V9V-c5U4ueqa2hfPFKGFdXQbRe5Y50s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 93b93358e48b6ffd57878bcec9a4e063

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FaaNtw48Bh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.545 ms - 67[0m
[34mdebug[39m: GET /api/v1/administrators/operators/685ebae395e1dc689774add0 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:11.693Z"}
[0mGET /api/v1/administrators/operators/685ebae395e1dc689774add0 [32m200[0m 115.582 ms - 761[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:12.641Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3d49bf91eb37d7179321b6b5f3871f1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XRC9OESh-fT3Jdf2Slq6Pdd_ZTn2FNCxvr7g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d3d49bf91eb37d7179321b6b5f3871f1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kZ_OhebrvB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.396 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:12.733Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:12.879Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:12.879Z","userId":"685ebae495e1dc689774adf5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.740 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:12.882Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b3d0c23f089a3839470a6319e11a0056',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fwmdYarn-3fHSzSKLnOVVzJDQd_p0bRpo3lc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b3d0c23f089a3839470a6319e11a0056

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J5uRCwnbeF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.652 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:12.977Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:13.125Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:13.126Z","userId":"685ebae495e1dc689774adfb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.868 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:13.130Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7fcf1e50c9d9c37f442ed989fc8b9e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D6t4FjFS-Y9oquaOtFHSP0UuLViNdZak4uFA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7fcf1e50c9d9c37f442ed989fc8b9e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W4_E2vdkWo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.526 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ebae495e1dc689774adfb {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:13.140Z"}
[0mGET /api/v1/operators/685ebae495e1dc689774adfb [32m200[0m 84.252 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.068Z"}
  console.log
    CSRF token generation: {
      sessionID: '11b1d588e7b8116e629a1c2afdf270f1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Bjb2XdGR-MJALc7NtHXF8L6K_38y7ji80SGI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 11b1d588e7b8116e629a1c2afdf270f1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VsWXQYZ177...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.946 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.168Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:14.318Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:14.318Z","userId":"685ebae695e1dc689774ae23","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.861 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.321Z"}
  console.log
    CSRF token generation: {
      sessionID: '2761d2bdc7039b169adcd97d46ac7f08',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nSKHmzPw-nlqxDdsGyjgVkl_70O_u6a5elj8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2761d2bdc7039b169adcd97d46ac7f08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hhLLDu-UpX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.668 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.415Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:14.577Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:14.577Z","userId":"685ebae695e1dc689774ae29","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 161.816 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.580Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb5cd3cd9b1026f60ff14e4c86f0ed33',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ptzko73a-tqKtfK1NeBB9g1hdDV5pcY1b9g4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb5cd3cd9b1026f60ff14e4c86f0ed33

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: j2tzyLdCoP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.084 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ebae695e1dc689774ae2f {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:14.674Z"}
[0mGET /api/v1/operators/685ebae695e1dc689774ae2f [33m403[0m 56.870 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:15.563Z"}
  console.log
    CSRF token generation: {
      sessionID: '28e8976f16f51a6b7e04c7418f33e2ca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YgC7em1V-PkRuTH1KccWxbKy6u4S_sNaoDcw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 28e8976f16f51a6b7e04c7418f33e2ca

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Uy5vI2KQkZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.442 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:15.655Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:15.806Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:15.806Z","userId":"685ebae795e1dc689774ae52","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.504 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:15.809Z"}
  console.log
    CSRF token generation: {
      sessionID: '343000439a6abd5098c397f7b2911929',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: p8w60gq9-S6TbshZEQ6pcFmdjoPDl9nqa-5k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 343000439a6abd5098c397f7b2911929

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dcwLXwUViz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.574 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:15.901Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:16.045Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:16.045Z","userId":"685ebae795e1dc689774ae58","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.656 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:16.048Z"}
  console.log
    CSRF token generation: {
      sessionID: '06bc41169af32a88a213066ee47391b7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E1ZVZSff-XLB5fjIVaDzhnalJXc3E_6zR9hg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 06bc41169af32a88a213066ee47391b7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e2WNAojApJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.265 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ebae895e1dc689774ae5e {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:16.056Z"}
[0mGET /api/v1/operators/685ebae895e1dc689774ae5e [33m404[0m 110.993 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.013Z"}
  console.log
    CSRF token generation: {
      sessionID: '3188edcb449d573cafb28b1417478d75',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Uw3Ehp9V--rJlaJyit9Cf8E5aKWuEZVez_C4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3188edcb449d573cafb28b1417478d75

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: H90XVcOaTK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.409 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.100Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:17.242Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:17.242Z","userId":"685ebae995e1dc689774ae82","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.221 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.246Z"}
  console.log
    CSRF token generation: {
      sessionID: '69045ca5fe0dd0c92ca201a0dbf9db67',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PLgZ2pkD-6GFLOicI6tGMyGhf-V6BQ5STsCs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 69045ca5fe0dd0c92ca201a0dbf9db67

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KQDTUQB3OG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.195 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.360Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:17.507Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:17.508Z","userId":"685ebae995e1dc689774ae88","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.459 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.511Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e24cfb791522304d5cc08fb7a40041bb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ji0y4L4X-HrQbaa8wjUDlHji8wPrw28eHZbE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e24cfb791522304d5cc08fb7a40041bb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WaNU-6URkj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.001 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.520Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '69045ca5fe0dd0c92ca201a0dbf9db67',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A69045ca5fe0dd0c92ca201a0dbf9db67.PySYk1rDwp36hyQzKyidpRB%2F%2FbWiDmUelDGLB6lGrbg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMCEZ8A6G159617"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ebae995e1dc689774ae91","targetType":"operator","timestamp":"2025-06-27T15:38:17.695Z","userId":"685ebae995e1dc689774ae82","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 175.337 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:17.698Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:17.854Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMCEZ8A6G159617","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:17.854Z","userId":"685ebae995e1dc689774ae91","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 156.728 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:18.696Z"}
  console.log
    CSRF token generation: {
      sessionID: '58286d16a8d10b8be076ce4c76a3b6cc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ow7PPEVM-izxJKCsoJfvDKix-PSfDaNF0cnA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 58286d16a8d10b8be076ce4c76a3b6cc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MhGdTFJK7g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.454 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:18.793Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:18.940Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:18.941Z","userId":"685ebaea95e1dc689774aeb6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.058 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:18.944Z"}
  console.log
    CSRF token generation: {
      sessionID: '84856a7678c2b89ab389a23fae9fc493',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aS3l5E7N-xADXvt78j5bvTrNTf_GQe6Ocv_M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 84856a7678c2b89ab389a23fae9fc493

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 93Ebf6Akmk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.275 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:19.036Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:19.180Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:19.181Z","userId":"685ebaea95e1dc689774aebc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.384 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:19.183Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e6873ea4078cb957250acd505588c44d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s1KHAkbu-_J50S528X4ANX4nNmBDjgKCzkFo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e6873ea4078cb957250acd505588c44d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AvFv7HDIx8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.675 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:19.192Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '84856a7678c2b89ab389a23fae9fc493',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A84856a7678c2b89ab389a23fae9fc493.O3KvB%2F7SFDhlwK1fK8IVToFDBkUODnG08kpUWmtq%2FTk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 59.124 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.081Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a647ba3f9436b7b636973f09157feab8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Gkfq3fbH-vM_syXlvdyTDlafP1kq8Jjf_0wA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a647ba3f9436b7b636973f09157feab8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OGjq37Y7wV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.389 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.173Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:20.326Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:20.327Z","userId":"685ebaec95e1dc689774aee3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.253 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.330Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb4f25716c973399ea7eae27a4c16959',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lrV155bo-Z7mMSkVP0dN_cEM6mbw6grgsd64

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb4f25716c973399ea7eae27a4c16959

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: o3kn383ncz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.246 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.425Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:20.572Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:20.573Z","userId":"685ebaec95e1dc689774aee9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.272 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.579Z"}
  console.log
    CSRF token generation: {
      sessionID: '3aade73bd91470762f3c75a3ad8f86f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Bd4X0umd-QG63hZYqByK874rseMFBf4kNhVw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3aade73bd91470762f3c75a3ad8f86f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BoYEd1B8sV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.087 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:20.586Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'bb4f25716c973399ea7eae27a4c16959',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abb4f25716c973399ea7eae27a4c16959.y6Jc8vVmwZ5L1RrCvbS8pMmoiHPgNXz3QFW83qdDt0M',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 61.235 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:21.513Z"}
  console.log
    CSRF token generation: {
      sessionID: '2a87e2ddac78b6291545171e44b0fddc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9ccxrR16-VyaSJByzgoKSC89ts3uil9hcRBU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2a87e2ddac78b6291545171e44b0fddc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DOEg9yAQKC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.531 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:21.616Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:21.758Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:21.758Z","userId":"685ebaed95e1dc689774af10","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.460 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:21.760Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e27a0be8a8b41a9e75cdede1aad4f9c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CrlxdFkA-p9MJJsoXWsuuGC8qEv3iAQ1dTms

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e27a0be8a8b41a9e75cdede1aad4f9c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kNhABj8M8K...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.662 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:21.850Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:21.998Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:21.998Z","userId":"685ebaed95e1dc689774af16","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.886 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:22.000Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be97e90e24805003f11df14522edc1f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vBzy3AYx-EHUV3lk3tLSK-UWp-L6xv41RX3U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: be97e90e24805003f11df14522edc1f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vVNKCwE6Y9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.188 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:22.008Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'e27a0be8a8b41a9e75cdede1aad4f9c9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae27a0be8a8b41a9e75cdede1aad4f9c9.ULOwdwz2%2B8UPMV1s04gKIp6GVnN7Pis14TrA0r4buEk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 56.511 ms - 80[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:22.456Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:22.916Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb87cfbec410db08355dd461f2bad056',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8r15v8Sh-0V851s5V2vJN0DUgOU9xSDPjChE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb87cfbec410db08355dd461f2bad056

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BiIvdYwDZx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.994 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:23.014Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:23.153Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:23.154Z","userId":"685ebaee95e1dc689774af3d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.666 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:23.157Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd2ce02b8d721e673c55b5a6b9ded628c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1F7GDJzm-n8lkqEJz1sjNStay9lwrT8wD2MQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d2ce02b8d721e673c55b5a6b9ded628c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ExJdervh0n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.895 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:23.251Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:23.395Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:23.395Z","userId":"685ebaef95e1dc689774af43","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.710 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:23.398Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ea4882967f439f7b61b11e7bcd42b44',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Pl2sxsec-x7vb6zypZ_KRlkm4jQMrIA3JCKQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ea4882967f439f7b61b11e7bcd42b44

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SJG7WTitY2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.799 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:23.406Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'd2ce02b8d721e673c55b5a6b9ded628c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad2ce02b8d721e673c55b5a6b9ded628c.wNnAGg2d2l4aVEIAEVMbcaRaIYdV3dPYplfPAMBF6no',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m409[0m 85.834 ms - 50[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:23.993Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.357Z"}
  console.log
    CSRF token generation: {
      sessionID: '72d82571d3a19ffceb3927959e3484be',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ba89IZcf-eP1A-435MqEpLIdFn87-InVYc2s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 72d82571d3a19ffceb3927959e3484be

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZICCvz09XL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.475 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.458Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:24.606Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:24.606Z","userId":"685ebaf095e1dc689774af6b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.553 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.609Z"}
  console.log
    CSRF token generation: {
      sessionID: '85e2e30d343f1054a4b7e121e3b455a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1puIsEqj-nwNoonHns2AET_qhhJIFcwHr95g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 85e2e30d343f1054a4b7e121e3b455a4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NJY4rFgFba...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.951 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.698Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:24.843Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:24.843Z","userId":"685ebaf095e1dc689774af71","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.078 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.846Z"}
  console.log
    CSRF token generation: {
      sessionID: '44307bbd7d5bce2391c3487c6f1400ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iTSfvRHJ-HswHAeF5lTDR5mp-62L_7J4EKeM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 44307bbd7d5bce2391c3487c6f1400ce

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hNdiSBFdwF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.460 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:24.957Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:25.113Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:25.113Z","userId":"685ebaf095e1dc689774af77","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.266 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:25.115Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '72d82571d3a19ffceb3927959e3484be',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A72d82571d3a19ffceb3927959e3484be.ETu3X%2FvzpFHExBQbk%2FDoikcWNocwwPhBssvNmh4FxS4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m403[0m 56.619 ms - 81[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:25.520Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.008Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f588304b9bfbb687cf11cca8b33e36e6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a4JHUHBv-tQIc06s8FbylqJ8OMrSigerrMEg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f588304b9bfbb687cf11cca8b33e36e6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3TrpxE5oQN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.900 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.105Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:26.250Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:26.250Z","userId":"685ebaf295e1dc689774af9e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.786 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.253Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ed79eae2ed32663d7bcc469df5b69c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a1aJjUrv-4YJC9f7j0O-Yd1y_rRgLRYHIq7c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ed79eae2ed32663d7bcc469df5b69c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: s4P7aJFJ2_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.301 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.349Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:26.505Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:26.505Z","userId":"685ebaf295e1dc689774afa4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 156.087 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.508Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ae46d6a6884d066b703db071fc5c5ab8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 50yq9HPh-3N5R1RoT7IJwPSIqWpI1Ezu0QJ4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ae46d6a6884d066b703db071fc5c5ab8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: t92siUOAeu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.935 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebaf295e1dc689774afaa {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:26.614Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaf295e1dc689774afaa {
      sessionID: '4ed79eae2ed32663d7bcc469df5b69c1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4ed79eae2ed32663d7bcc469df5b69c1.bpHSGEgf2SQqOnj4hDBZJfh53cSBVs5lvuiYPT86XHc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ebaf295e1dc689774afaa","targetId":"685ebaf295e1dc689774afaa","targetType":"operator","timestamp":"2025-06-27T15:38:26.757Z","userId":"685ebaf295e1dc689774af9e","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ebaf295e1dc689774afaa [32m200[0m 143.941 ms - 442[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:27.087Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:27.641Z"}
  console.log
    CSRF token generation: {
      sessionID: '266108939611e15d85ce3627d3edeb1f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QIAZioBe-TWgjQ0yWo0itUOvH-3gF5VgFidg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 266108939611e15d85ce3627d3edeb1f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xybsLzOBpA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.335 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:27.733Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:27.899Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:27.899Z","userId":"685ebaf395e1dc689774afd0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 166.119 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:27.903Z"}
  console.log
    CSRF token generation: {
      sessionID: '90c7a91a74ab3cf10eac2b7d0cc6679c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9oX0XvAE-3OKNMjhy1qndf3Q9YnxnyhFJmXg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 90c7a91a74ab3cf10eac2b7d0cc6679c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -MvCZxDeMI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.951 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:28.004Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:28.149Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:28.150Z","userId":"685ebaf395e1dc689774afd6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.959 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:28.154Z"}
  console.log
    CSRF token generation: {
      sessionID: '535754e21c0e62756fbc4afd7ed4db46',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wIOQPKbR-58lU31W6Z1pFWzDOXtAd7e9ZkoE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 535754e21c0e62756fbc4afd7ed4db46

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 65BWDs7pWy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.623 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebaf495e1dc689774afdc {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:28.251Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaf495e1dc689774afdc {
      sessionID: '90c7a91a74ab3cf10eac2b7d0cc6679c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A90c7a91a74ab3cf10eac2b7d0cc6679c.6YCDbnoIXUWHkekVS%2FLzhRR5a9wGlPcrei%2BrEJKhInI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ebaf495e1dc689774afdc","targetId":"685ebaf495e1dc689774afdc","targetType":"operator","timestamp":"2025-06-27T15:38:28.513Z","userId":"685ebaf395e1dc689774afd0","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ebaf495e1dc689774afdc [32m200[0m 262.466 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:28.516Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:28.658Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:28.658Z","userId":"685ebaf495e1dc689774afdc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.447 ms - 606[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:28.754Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:29.482Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2a9a788e07e1e392435c60f6dc3e83d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0jcZl6wQ-TiSPEuhkF24o2cvt5a8DrTOGW6o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2a9a788e07e1e392435c60f6dc3e83d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nSC_hmcTwq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.203 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:29.571Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:29.712Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:29.713Z","userId":"685ebaf595e1dc689774b008","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.412 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:29.715Z"}
  console.log
    CSRF token generation: {
      sessionID: '738696a6bdc5f1b68abf8baf329b6d18',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7nyIHhse-p6lGp6se3Ay3CEAyyefG0stKvB4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 738696a6bdc5f1b68abf8baf329b6d18

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: glHG364Zpn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.074 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:29.826Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:29.968Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:29.969Z","userId":"685ebaf595e1dc689774b00e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.494 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:29.972Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb43ec60b7dc3a2f2ba38dea57036a37',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bihyJrbR-4s1SA9Tj2kFz38_e4pmL6Ch_KD0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb43ec60b7dc3a2f2ba38dea57036a37

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2U3DubDzxk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.040 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebaf595e1dc689774b014 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:30.061Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaf595e1dc689774b014 {
      sessionID: '738696a6bdc5f1b68abf8baf329b6d18',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A738696a6bdc5f1b68abf8baf329b6d18.xKqoVtkvzXYwFXIe8lt1suK7fHk5VqCnxZtkUT%2Ft6BI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ebaf595e1dc689774b014","targetId":"685ebaf595e1dc689774b014","targetType":"operator","timestamp":"2025-06-27T15:38:30.204Z","userId":"685ebaf595e1dc689774b008","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ebaf595e1dc689774b014 [32m200[0m 143.571 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:30.207Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T15:38:30.237Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 30.955 ms - 82[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:111:18)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:121:26)","timestamp":"2025-06-27T15:38:30.366Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.074Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b0e135c03ed4b72241a450140992ca5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1rdlJ4ad-FSvoXXIaGedhchKEQNcJf21aK9U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b0e135c03ed4b72241a450140992ca5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fYU-XgmgvG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.639 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.166Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:31.316Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:31.317Z","userId":"685ebaf795e1dc689774b03b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.586 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.319Z"}
  console.log
    CSRF token generation: {
      sessionID: '02e384fc1dc956d33ce98a3915c4f3ea',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EWaNf8k0--KlAIZCQEcah0oObDRkP6LRSa3c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 02e384fc1dc956d33ce98a3915c4f3ea

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yDyQZCc0a5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.207 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.413Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:31.561Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:31.562Z","userId":"685ebaf795e1dc689774b041","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.106 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.565Z"}
  console.log
    CSRF token generation: {
      sessionID: '58c6e2ded2fc1c16ca3b6c051a8c9b96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eHoOKYa9-Slhpi9U_2EbKQ9ivumtV0qnPUEM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 58c6e2ded2fc1c16ca3b6c051a8c9b96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rDT7FBgNUw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.326 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.661Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:31.827Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:31.827Z","userId":"685ebaf795e1dc689774b047","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 166.645 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebaf795e1dc689774b047 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:31.830Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaf795e1dc689774b047 {
      sessionID: 'b0e135c03ed4b72241a450140992ca5d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab0e135c03ed4b72241a450140992ca5d.NbwYySO%2FjXAps0i9TUF0%2B%2BD3%2FpGdEtcJZYMHhvFq9k8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebaf795e1dc689774b047 [32m200[0m 171.631 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:32.832Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f4a292d7e2328c1e8f416ace99325d09',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7jEvxmzv-sghpsOR14NegUwjIi15XkiGuq1A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f4a292d7e2328c1e8f416ace99325d09

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aSJJpqaaCa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.277 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:32.937Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:33.092Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:33.092Z","userId":"685ebaf895e1dc689774b070","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.946 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:33.094Z"}
  console.log
    CSRF token generation: {
      sessionID: '21d08e7007048172e74524cb7e74cf46',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DWNddqDn-W7DhEXgNVCNnDh_r2dPpJ7Rb6Js

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 21d08e7007048172e74524cb7e74cf46

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yt3SFAcXtm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.747 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:33.186Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:33.327Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:33.327Z","userId":"685ebaf995e1dc689774b076","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.396 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:33.331Z"}
  console.log
    CSRF token generation: {
      sessionID: '924e669055cf0da41f8b01d2b73b370d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JawlByIP-NBzgvA-aFvGXm3VpmoZp9AY-ylo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 924e669055cf0da41f8b01d2b73b370d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VUVLHYg6I4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.712 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:33.428Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:33.576Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:33.576Z","userId":"685ebaf995e1dc689774b07c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.867 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebaf995e1dc689774b07c {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:33.579Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaf995e1dc689774b07c {
      sessionID: 'f4a292d7e2328c1e8f416ace99325d09',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af4a292d7e2328c1e8f416ace99325d09.bgi4aayUGdlD9QOn71gRxF0sOlxvQSArHX22rJ%2BrJxw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebaf995e1dc689774b07c [32m200[0m 116.732 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:34.521Z"}
  console.log
    CSRF token generation: {
      sessionID: '9506b13df158b3e8e06e34bed548c079',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2ofLh8Wn-F5rVwmaaKvRWcLPAjnyFOp_PTvs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9506b13df158b3e8e06e34bed548c079

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rD1Vx-HqCT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.927 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:34.617Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:34.762Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:34.762Z","userId":"685ebafa95e1dc689774b0a5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.114 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:34.765Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef54e1b97af7875aafb960e9cd05b63a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7Cqvp1i1-PhU8NEd0gfTNMRMpGbSV7OCxdGI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef54e1b97af7875aafb960e9cd05b63a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ptzQIM8B2M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.000 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:34.853Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:34.996Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:34.996Z","userId":"685ebafa95e1dc689774b0ab","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.058 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:34.999Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f18d13af665fdf81a4452256cdd10c9c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tGIQbT3n-WtYbwh-CR7wD5054Zdn5utekzGA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f18d13af665fdf81a4452256cdd10c9c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QM-qj1j3rM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.426 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebafb95e1dc689774b0b1 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:35.091Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebafb95e1dc689774b0b1 {
      sessionID: 'ef54e1b97af7875aafb960e9cd05b63a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aef54e1b97af7875aafb960e9cd05b63a.c6AfQsfVjQ%2FDYG8GKC0gX7kMhEBxms5B%2BU6VzY%2BYiLM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ebafb95e1dc689774b0b1","targetId":"685ebafb95e1dc689774b0b1","targetType":"operator","timestamp":"2025-06-27T15:38:35.237Z","userId":"685ebafa95e1dc689774b0a5","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ebafb95e1dc689774b0b1 [32m200[0m 145.776 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.088Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd22b36acbf7c36e058b74d06f99c2c87',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N3fIhl6F-W9U0SuznAHo5mTChc4LpGdXu6JA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d22b36acbf7c36e058b74d06f99c2c87

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4lgF74ERWq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.082 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.181Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:36.344Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:36.345Z","userId":"685ebafc95e1dc689774b0d7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.787 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.348Z"}
  console.log
    CSRF token generation: {
      sessionID: '91d544cd0bca0027e44a96e5bd289b85',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EsM0A16F-H_CA4WJA2Vc_ZI8adKYQ6S76Nw8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 91d544cd0bca0027e44a96e5bd289b85

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OhK0eI_gOz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.683 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.456Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:36.603Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:36.604Z","userId":"685ebafc95e1dc689774b0dd","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.200 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.606Z"}
  console.log
    CSRF token generation: {
      sessionID: '461161133c11f2fb6c3360b198e93de4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4mpGHLVp-ZhQB20Cdt12usJnMZse94tEmsCQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 461161133c11f2fb6c3360b198e93de4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sDsr_xnptX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.007 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebafc95e1dc689774b0e3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:36.693Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebafc95e1dc689774b0e3 {
      sessionID: '91d544cd0bca0027e44a96e5bd289b85',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A91d544cd0bca0027e44a96e5bd289b85.t6f6NYcZLmQOeULBz2bYLimDIxT7T1N%2BzQDm8y%2FSrpo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebafc95e1dc689774b0e3 [33m409[0m 137.088 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:37.679Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ff0b3b134837663fe74bef9cd7a9be59',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v84PwG7c-VBGXra_M6G7B7Cq-WDiyKvRNSV8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ff0b3b134837663fe74bef9cd7a9be59

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: v1qDoZzzX7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.841 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:37.768Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:37.914Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:37.914Z","userId":"685ebafd95e1dc689774b109","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.858 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:37.917Z"}
  console.log
    CSRF token generation: {
      sessionID: '6cadd3bc7b3e41e5aea6ee136b2482e0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5CRWQ7r2-R--WsNNteJTIbKGRek23HFxNZvs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6cadd3bc7b3e41e5aea6ee136b2482e0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Lgfj_88jtM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.525 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:38.011Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:38.172Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:38.173Z","userId":"685ebafd95e1dc689774b10f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 161.458 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:38.176Z"}
  console.log
    CSRF token generation: {
      sessionID: '003966cf23b652fdb9ddd5ee34bdabb6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bzvtDZNY-HhnTOg3SdclwK8-8djesKFgGlsk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 003966cf23b652fdb9ddd5ee34bdabb6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qLPWq1lwt8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.046 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ebafe95e1dc689774b115 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:38.270Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebafe95e1dc689774b115 {
      sessionID: '6cadd3bc7b3e41e5aea6ee136b2482e0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6cadd3bc7b3e41e5aea6ee136b2482e0.c2JWQg7YPy3uPnafYb%2Bl0I7zrlN6AGHUgujRcUPxA2g',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"e","11":"1","12":"d","13":"c","14":"6","15":"8","16":"9","17":"7","18":"7","19":"4","2":"5","20":"b","21":"1","22":"0","23":"9","3":"e","4":"b","5":"a","6":"f","7":"d","8":"9","9":"5","timestamp":"2025-06-27T15:38:38.413Z"}
[0mDELETE /api/v1/operators/685ebafe95e1dc689774b115 [32m200[0m 142.779 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.275Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd78ed334bde07a4dc961641938dcd00c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CsrHS6v2-F2BHutMmbcrmAKRNIS8MyS7-KTQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d78ed334bde07a4dc961641938dcd00c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gTuliW3faO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.908 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.384Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:39.556Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:39.556Z","userId":"685ebaff95e1dc689774b13c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 171.973 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.559Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9429dc318d5adb0a000eb3f510f5bf7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 69oDS05D-0xR5mR-r0fViCjWPUjWKkHXfnrQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9429dc318d5adb0a000eb3f510f5bf7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aSO1do5Pwq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.378 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.651Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:39.794Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:39.794Z","userId":"685ebaff95e1dc689774b142","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.154 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.797Z"}
  console.log
    CSRF token generation: {
      sessionID: '247790d6d671b89d041a94ee87d316d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2CShwRqH-0igNe6fiaQPZMjUJQibdyPWCq9k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 247790d6d671b89d041a94ee87d316d1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EAeHQZUPVi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.361 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ebaff95e1dc689774b148 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:39.922Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebaff95e1dc689774b148 {
      sessionID: 'd9429dc318d5adb0a000eb3f510f5bf7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad9429dc318d5adb0a000eb3f510f5bf7.F7qQZCHDwlBQkkLpw%2B8fZBDbW1nMk4tlpehQ46yH5kg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ebaff95e1dc689774b148 [33m400[0m 111.731 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:40.866Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f951583868bd4c12d12307915793bdb1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HsuAdEns-fe6jfNIa344ogCWRx7TnUNd0gVU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f951583868bd4c12d12307915793bdb1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jN25dOK_2d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.975 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:40.960Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:41.109Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:41.109Z","userId":"685ebb0095e1dc689774b16e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.377 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:41.112Z"}
  console.log
    CSRF token generation: {
      sessionID: '69f065f845978d9cd7e598471708eece',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ob3gcIjE-vaSqjo0dqjAeFe2jwWwPhLOG4cg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 69f065f845978d9cd7e598471708eece

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5Q2jUXL7HC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.684 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:41.203Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:41.345Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:41.345Z","userId":"685ebb0195e1dc689774b174","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.556 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:41.348Z"}
  console.log
    CSRF token generation: {
      sessionID: '1fc62a2fa6f99ae59ae85f193ea93850',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TREd5Ezp-0zzPZr3XItiQDJ-zCInK3RKX2dU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1fc62a2fa6f99ae59ae85f193ea93850

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0dPg1uF4Jg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.518 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:41.531Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:41.673Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:41.673Z","userId":"685ebb0195e1dc689774b17c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.666 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/685ebb0195e1dc689774b17a {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:41.675Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb0195e1dc689774b17a {
      sessionID: 'f951583868bd4c12d12307915793bdb1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af951583868bd4c12d12307915793bdb1.pQnGgjxFFjPDOQ1D5DxJ6Utkrv6YaMZ0lT3Xy%2Bxp3r4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ebb0195e1dc689774b17a [33m403[0m 56.315 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:42.593Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd866d870e45bb3a9fe6bd924c6f63b22',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BrDim0d4-_u-_MmmG7KjPyANQB98GZ1PC6FI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d866d870e45bb3a9fe6bd924c6f63b22

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eRQTMA_6dK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.505 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:42.683Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:42.828Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:42.829Z","userId":"685ebb0295e1dc689774b1a3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.757 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:42.832Z"}
  console.log
    CSRF token generation: {
      sessionID: '660d6ce02e50706630d0e3093a8b960a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iZB1FAqx-VFH3pKeN2VKnuZhtNlCzQILmP9w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 660d6ce02e50706630d0e3093a8b960a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gjE69kB7ZR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.867 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:42.949Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:43.091Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:43.091Z","userId":"685ebb0295e1dc689774b1a9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.498 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:43.094Z"}
  console.log
    CSRF token generation: {
      sessionID: '87a8b33dac8fe92d8c36c3d6566962e6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lsciWM3Y-iYYLBi4TEkPd-L4BCpZdENSW2jA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87a8b33dac8fe92d8c36c3d6566962e6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GTcnk8e2qc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.791 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ebb0395e1dc689774b1b1 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:43.180Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb0395e1dc689774b1b1 {
      sessionID: '660d6ce02e50706630d0e3093a8b960a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A660d6ce02e50706630d0e3093a8b960a.yR51PHAypFXgeorluo7%2BjvVGHhksQvX5wGiB2GRZ3EY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ebb0395e1dc689774b1b1 [33m404[0m 83.011 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.084Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ee10c25cdb73b5f1cd984951c708d9b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Eaol3NtE-bcvwGtU1YEnn_a89AjdOAY4YpRI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ee10c25cdb73b5f1cd984951c708d9b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fK0SVi7SgF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.179Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:44.322Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:44.323Z","userId":"685ebb0495e1dc689774b1d4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.512 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.326Z"}
  console.log
    CSRF token generation: {
      sessionID: '595cbac6985a80fb5ebf83c5920e508f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cvWJ5rPw-_HNMXS-nKA0MkWDc1xAflhaHW38

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 595cbac6985a80fb5ebf83c5920e508f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h5yHUb33W1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.843 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.419Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:44.564Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:44.565Z","userId":"685ebb0495e1dc689774b1da","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.512 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.567Z"}
  console.log
    CSRF token generation: {
      sessionID: '816866a99f10ea594fc19f2bda926697',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sIJWMa4v-5f7SaJMVQKk11-BkL4yvXfpNSkA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 816866a99f10ea594fc19f2bda926697

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tv3rtCjHqr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.418 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ebb0495e1dc689774b1e0/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.657Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb0495e1dc689774b1e0/reset-pin {
      sessionID: '595cbac6985a80fb5ebf83c5920e508f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A595cbac6985a80fb5ebf83c5920e508f.Z0pbJhTrSksCKVU%2BdvywzwGtQmZ6x8ZQj84Yw4ALw7I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"e","11":"1","12":"d","13":"c","14":"6","15":"8","16":"9","17":"7","18":"7","19":"4","2":"5","20":"b","21":"1","22":"d","23":"4","3":"e","4":"b","5":"b","6":"0","7":"4","8":"9","9":"5","timestamp":"2025-06-27T15:38:44.827Z"}
[0mPOST /api/v1/operators/685ebb0495e1dc689774b1e0/reset-pin [32m200[0m 170.713 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:44.831Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:44.974Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-27T15:38:44.975Z","userId":"685ebb0495e1dc689774b1e0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.293 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:45.815Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e829516dfeeffe3c69e96ec669a3f415',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: j8pKTpo8-wSyU7VICCTGttW4MrHASjIWr6zQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e829516dfeeffe3c69e96ec669a3f415

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aNY_R3aeoI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.406 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:45.918Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:46.065Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:46.066Z","userId":"685ebb0595e1dc689774b209","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.536 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:46.070Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ef4326c209042c564721237b7522749',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 03TqLwyB-IZs3pGZZNtyNxZocQhBe-BUDfVA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ef4326c209042c564721237b7522749

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: l_vyfd91cg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.749 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:46.163Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:46.305Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:46.305Z","userId":"685ebb0695e1dc689774b20f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.099 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:46.307Z"}
  console.log
    CSRF token generation: {
      sessionID: '9dca7c4df4d59152e4f112236c991b5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0mGYOMyf-epNcnRBYHOpsyfOGmIhQ3AdGIys

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9dca7c4df4d59152e4f112236c991b5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rAZcoyR4ce...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.829 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ebb0695e1dc689774b215/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:46.428Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb0695e1dc689774b215/reset-pin {
      sessionID: '1ef4326c209042c564721237b7522749',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1ef4326c209042c564721237b7522749.78QvqxvsSLwcNDjaJEV0BYOfHAXsXDXA0xxBFRR0dtc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"e","11":"1","12":"d","13":"c","14":"6","15":"8","16":"9","17":"7","18":"7","19":"4","2":"5","20":"b","21":"2","22":"0","23":"9","3":"e","4":"b","5":"b","6":"0","7":"5","8":"9","9":"5","timestamp":"2025-06-27T15:38:46.596Z"}
[0mPOST /api/v1/operators/685ebb0695e1dc689774b215/reset-pin [32m200[0m 168.056 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:47.446Z"}
  console.log
    CSRF token generation: {
      sessionID: '09338b4672e152bf81ba1c061327c42e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HRB8qBhU-FeWrFOJH5c2y0ZJiRbdx0G0QU3M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 09338b4672e152bf81ba1c061327c42e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HRFK5NcF6p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.734 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:47.535Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:47.678Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:47.679Z","userId":"685ebb0795e1dc689774b23c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.752 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:47.682Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ff0370e6f94b1cb8b0eeb2f0dec7023c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wIZ7lq7M-I-Y9juvY7SPyw0_4Wnib_EDUoTA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ff0370e6f94b1cb8b0eeb2f0dec7023c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lftON_ZGw3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.563 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:47.770Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:47.917Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:47.917Z","userId":"685ebb0795e1dc689774b242","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.403 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:47.921Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f43cd70d99b41a0fa0379914e5fd1515',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IhmIRHFk-fFkZa9kP57YQJQ_kTn47BIyMBzo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f43cd70d99b41a0fa0379914e5fd1515

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HoHY4NkuvY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.413 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:48.186Z"}
[0mGET /api/v1/operators/available [32m200[0m 84.259 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.116Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e718d1bd4f100a6068ba807f9ca74345',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fjnpiYzV-_DRNX0vxLn_WxATWVbcwFBRzVj0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e718d1bd4f100a6068ba807f9ca74345

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0yPIZuvOIL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.492 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.218Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:49.365Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:49.366Z","userId":"685ebb0995e1dc689774b272","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.820 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.368Z"}
  console.log
    CSRF token generation: {
      sessionID: '1af728e88175a6f5bc673f43a3928fe0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vbu0tClg-wgzU6p5AaBTw7UQstVnFGB8Roi4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1af728e88175a6f5bc673f43a3928fe0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tcaik220EP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.191 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.467Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:49.611Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:49.611Z","userId":"685ebb0995e1dc689774b278","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.577 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.614Z"}
  console.log
    CSRF token generation: {
      sessionID: '8680255095fb2935ed3fae1f5ba37b4b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FCa2fMnL-hgqqcCWnRTAgO9WrY1qiE06oTWQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8680255095fb2935ed3fae1f5ba37b4b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SwsPDxMYhJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.946 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:49.888Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 83.469 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:50.796Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ceda445dbb23757fd14a53b162cefd8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8TpdWXM7-rcU-yyuMu3bLNvtk4K6_2tUMGu8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ceda445dbb23757fd14a53b162cefd8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u_20Yd7HPB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.955 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:50.890Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:51.034Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:51.034Z","userId":"685ebb0a95e1dc689774b2a8","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.132 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:51.037Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fc82ea1ac5110dac30ab70f68b1bbb45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mEA1hh7E-N377_Zy3c8ltK4TAWQjy5Ejke44

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fc82ea1ac5110dac30ab70f68b1bbb45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5a2GFuTT6Z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.078 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:51.129Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:51.270Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:51.270Z","userId":"685ebb0b95e1dc689774b2ae","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.151 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:51.273Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a9fdd338873b41295a98522b6ff08758',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QdoReBVw-yKsuzNQoNS6BeRL1KwuSgthyfiY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a9fdd338873b41295a98522b6ff08758

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qnnv-YS5dP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.986 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:51.544Z"}
[0mGET /api/v1/operators/available [32m200[0m 83.200 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:52.464Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f8481e9d360db2a3e6828a0807afe5dd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vqTdKFss--16Q-o-pXZqQMNag6uojymJEAuQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f8481e9d360db2a3e6828a0807afe5dd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: v3TBzw3Cqc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.641 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:52.571Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:52.716Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:52.717Z","userId":"685ebb0c95e1dc689774b2de","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.939 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:52.719Z"}
  console.log
    CSRF token generation: {
      sessionID: '4657e959c9aed544e5b09d046f9adbe0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bCBMM5Xm-nEsGiwsGawoKuI8_bjT6XLNDXtA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4657e959c9aed544e5b09d046f9adbe0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sN99JxXGhd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.622 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:52.819Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:52.964Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:52.964Z","userId":"685ebb0c95e1dc689774b2e4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.859 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:52.967Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e2a963a8f319c766384094b453b5f7e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mVu2QJAe-VAiiZvGOOQFf3m8fb1BBXUni7iA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e2a963a8f319c766384094b453b5f7e9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VU4y6HMd7p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.057 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:53.364Z"}
[0mGET /api/v1/operators/available [33m401[0m 1.266 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.186Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd7f3eeb674812d94039a91810bf3a6f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lIHtmzyI-KW8Q_ZJGkA4hd_--W1z1gvgnUyw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d7f3eeb674812d94039a91810bf3a6f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2winOhJmY9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.698 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.278Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:54.438Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:54.438Z","userId":"685ebb0e95e1dc689774b311","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.675 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.441Z"}
  console.log
    CSRF token generation: {
      sessionID: '39291fefafb92dca24e8417b32ccca96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cQE8NXcC-P_0-IqrYpenypoPVzWFwQQi_0yQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 39291fefafb92dca24e8417b32ccca96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yMzkw1u8qd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.880 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.535Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:54.679Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:54.680Z","userId":"685ebb0e95e1dc689774b317","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.925 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.683Z"}
  console.log
    CSRF token generation: {
      sessionID: '768b001f7dbde4a610077160f5aff078',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WSPwPBqC-lT31t9zRMvOiHXViR69jJEMDSvE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 768b001f7dbde4a610077160f5aff078

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PEBCVy9pj1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.558 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebb0e95e1dc689774b31d/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:54.779Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb0e95e1dc689774b31d/stats {
      sessionID: '39291fefafb92dca24e8417b32ccca96',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A39291fefafb92dca24e8417b32ccca96.aTbEFzxlzK8ITjdxAWxm87qgC730wEEUPLoLg%2FppIXU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebb0e95e1dc689774b31d/stats [32m200[0m 117.073 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:55.736Z"}
  console.log
    CSRF token generation: {
      sessionID: '18e3350b8e28e922ba760f385dad9173',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xnQxohs0-74xn6C6GkzBN1485Nn-76AcrRqo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 18e3350b8e28e922ba760f385dad9173

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PUWwYqJWFV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.078 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:55.842Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:55.986Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:55.987Z","userId":"685ebb0f95e1dc689774b342","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.726 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:55.990Z"}
  console.log
    CSRF token generation: {
      sessionID: '04679c41a2f0ec7648811b126a5bb718',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Km8iLnRQ-JMo6ZsI9-SxikfXaseATg7WdGX8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 04679c41a2f0ec7648811b126a5bb718

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IdVmfHZV7j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:56.084Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:56.229Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:56.230Z","userId":"685ebb0f95e1dc689774b348","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.795 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:56.233Z"}
  console.log
    CSRF token generation: {
      sessionID: '3a414ec4d7f6fbf770b5ad59bc663ef2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: usV2aCha-brZ-ZEeYaVscutQWhaCfRRya7Ow

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3a414ec4d7f6fbf770b5ad59bc663ef2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rtoOU2y0Na...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.706 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebb1095e1dc689774b34e/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:56.334Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb1095e1dc689774b34e/stats {
      sessionID: '04679c41a2f0ec7648811b126a5bb718',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A04679c41a2f0ec7648811b126a5bb718.iabp1YmX4oeOQljNUC8wV6Y7E%2BG544uainqk6IBdRlU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebb1095e1dc689774b34e/stats [32m200[0m 115.964 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.287Z"}
  console.log
    CSRF token generation: {
      sessionID: '22265fca66bb861ca2d0c2af421d7390',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s7oeFAIK-7i7bMxQDzgKLd44b-gfZORydZx4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 22265fca66bb861ca2d0c2af421d7390

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zNMz45OT95...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.152 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.379Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:57.521Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:57.521Z","userId":"685ebb1195e1dc689774b373","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.435 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.524Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cb7d2fcd6518f3f3e358c58d3363b4aa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D289xNPt-aq_GYlI9bxgFWZ3zVseLgmtGu0E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cb7d2fcd6518f3f3e358c58d3363b4aa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZfjTNE3Ec8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.948 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.619Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:57.765Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:57.765Z","userId":"685ebb1195e1dc689774b379","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.019 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.768Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ecfb1b385a3be50dee0f4e333a3a6af',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IWhJRozs-x8cfBP9wo0PN07QqwgIEmb1qf6o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ecfb1b385a3be50dee0f4e333a3a6af

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yEOuEbpwXe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.064 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebb1195e1dc689774b37f/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:57.865Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb1195e1dc689774b37f/stats {
      sessionID: 'cb7d2fcd6518f3f3e358c58d3363b4aa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acb7d2fcd6518f3f3e358c58d3363b4aa.BfIb4SmTjNLmU8N8da16UfP0TlOyv2Iz7zHe8bP1BDk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebb1195e1dc689774b37f/stats [32m200[0m 115.831 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:58.807Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fbf76f9372d8dbffbb96606cc4268b3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Meb5i5Dk-CfaS9Sl0GCXIGbUlg9AYSOfEvyk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3fbf76f9372d8dbffbb96606cc4268b3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aqnxWIMCyd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.787 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:58.907Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:59.048Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:38:59.049Z","userId":"685ebb1295e1dc689774b3a4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.847 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:59.052Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bd17bffe7f74932c6dba3efcef934d52',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i2fjs7Qv-GeGIls8eOd0AZmhTzB0hKP-2XOM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bd17bffe7f74932c6dba3efcef934d52

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: j2w_N_EiGi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.018 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:59.159Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:38:59.308Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:38:59.308Z","userId":"685ebb1395e1dc689774b3aa","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.704 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:59.311Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd389f5414d67ca498f57a162bf362214',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U4LCF7FN-L7XdrpBbaAKomzqmiRhT5I04oI8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d389f5414d67ca498f57a162bf362214

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DtR73_7RTC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.218 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ebb1395e1dc689774b3b0/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:38:59.405Z"}
  console.log
    CSRF check for: /api/v1/operators/685ebb1395e1dc689774b3b0/stats {
      sessionID: 'bd17bffe7f74932c6dba3efcef934d52',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abd17bffe7f74932c6dba3efcef934d52.4cSJy%2FoZh8vY1wadsXcUsI8XHZqNPLi77lHqc3iYNJo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ebb1395e1dc689774b3b0/stats [33m400[0m 60.302 ms - 62[0m
PASS tests/integration/operator.test.js (61.245 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2237 ms)
      ✓ should filter by active status (1551 ms)
      ✓ should filter by on-shift status (1556 ms)
      ✓ should support pagination (2440 ms)
      ✓ should require authentication (1391 ms)
      ✓ should require operator management permissions (1616 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1580 ms)
      ✓ should allow operators to view their own profile (1426 ms)
      ✓ should prevent operators from viewing other operators (1494 ms)
      ✓ should return 404 for non-existent operator (1451 ms)
    POST /api/v1/operators
      ✓ should create new operator (1682 ms)
      ✓ should validate required fields (1383 ms)
      ✓ should validate email format (1433 ms)
      ✓ should validate shift time format (1398 ms)
      ✓ should prevent duplicate emails (1434 ms)
      ✓ should require operators.manage permission (1663 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1591 ms)
      ✓ should update password (1885 ms)
      ✓ should deactivate operator (1590 ms)
      ✓ should allow operators to update their own profile (limited fields) (1759 ms)
      ✓ should prevent operators from changing their own work station (1690 ms)
      ✓ should not allow updating operatorId (1566 ms)
      ✓ should validate email uniqueness on update (1586 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1597 ms)
      ✓ should prevent deleting operator with active orders (1595 ms)
      ✓ should require operators.manage permission (1724 ms)
      ✓ should handle non-existent operator (1493 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1730 ms)
      ✓ should clear login attempts on PIN reset (1630 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1668 ms)
      ✓ should respect limit parameter (1678 ms)
      ✓ should only include active operators (1665 ms)
      ✓ should require authentication (1727 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1547 ms)
      ✓ should update quality score (1551 ms)
      ✓ should update both stats in one call (1520 ms)
      ✓ should validate processingTime is positive (1485 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:01.168Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:02.026Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U4WKvHr9-smpTVzk9_JdPMUfU2Frz4ucyxo4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.712 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:03.259Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pGs55Qum-JXm8gdDAtsS_xtOT1-LRNwGdi88

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.288 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:03.297Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 33.283 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:04.205Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HCdNnwpu-6l7_CKmKaRce0Lriz0MDCYH2lgc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.617 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:04.246Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 32.843 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:05.180Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JWLyVxKu-n1RN5iLspNTpYk1ZbxxwI-jCsAE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.512 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:05.189Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 27.727 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:06.059Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XJ6h885E-fd67Hmu0JOkDv_-RPh9MO6dsIRc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.886 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:06.100Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:06.101Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:06.103Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 31.560 ms - 58[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 35.069 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 33.978 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:07.023Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D31Qtg1K-64nzFZbtP0ws2-A6wK74fZvej5w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.487 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:07.033Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-fff1ded8-ad26-4288-b37a-a40795be4bf6","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:07.234Z","userId":"685ebb1b58ec947fdb73abd0","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 201.710 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:08.114Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uD17KNDt-7SS6-UtlDkcNiIiOjnAMdfZnVk0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.448 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:08.123Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.368 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:09.013Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NURmiy5b-6b28JLX6WS_ix1Z168H-EcmPvAw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.258 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:09.025Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-8444413f-69da-43a1-99ad-67d1654840cb","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:09.256Z","userId":"685ebb1d58ec947fdb73ac1b","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 231.883 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:09.260Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 81.035 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:10.204Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aje1nACf-ygFWEH27ovy8q6pJh_p2ZNAzz8s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.482 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:10.252Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 55.408 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:11.164Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xElBZol4-auBQ5ILy7-hw0gJTEc8cwc1CU9o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.996 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:11.172Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-6bf38b9f-1616-498d-bc02-fc199954e8ba","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:11.371Z","userId":"685ebb1f58ec947fdb73ac6b","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 199.263 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:11.375Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-319caeb3-d1dc-4574-a40c-8d5b9cf3c491","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:11.598Z","userId":"685ebb1f58ec947fdb73ac73","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 223.205 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:11.602Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-65148072-b527-4dc5-8cea-8bcdbaf4f91d","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:11.857Z","userId":"685ebb1f58ec947fdb73ac7c","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 255.511 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:12.749Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jej2QWYK-64apBsKoRaqZNA7DO68nAtbu8ro

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.723 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:12.792Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-9dc0c685-c9e9-4d32-bb68-ad6de0f91f39","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-27T15:39:13.013Z","userId":"685ebb2058ec947fdb73aca8","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 221.160 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:13.928Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LrdK6I3B-tFyVNi-mj0bry7NDDhsv8ISxya8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.910 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:13.936Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 105.636 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:14.888Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zeUKHa8t-lPfU0F1oez4d1kWsBpCOc5_YR7A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.531 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:14.928Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af2c79c9a72fda53b8d9fe1f3befde08b.nakssfdrQvdZp9JS0gMhF8IT5UprzDwu8VoRmiG7asc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:39:15.029Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-27T15:39:15.030Z","userId":"685ebb2258ec947fdb73acf3","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 101.460 ms - 560[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:15.881Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zuEpXg7p-JToY0zPHgrCKzYKGvbRDxJfkYmo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.473 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:15.953Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af2c79c9a72fda53b8d9fe1f3befde08b.nakssfdrQvdZp9JS0gMhF8IT5UprzDwu8VoRmiG7asc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T15:39:16.071Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 118.551 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:16.955Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CdyKfTsY-CTh3NZifRgZI0YnZ1O9VvntPVkY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.724 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:16.964Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af2c79c9a72fda53b8d9fe1f3befde08b.nakssfdrQvdZp9JS0gMhF8IT5UprzDwu8VoRmiG7asc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 61.411 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:17.886Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lI4cJWP7-79uqPT_hVxWTPrfcHAO39J5aA7c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.389 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:17.928Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af2c79c9a72fda53b8d9fe1f3befde08b.nakssfdrQvdZp9JS0gMhF8IT5UprzDwu8VoRmiG7asc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T15:39:18.011Z","userId":"685ebb2558ec947fdb73ad67","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 83.920 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:18.859Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MnwX7EHn-sCOZnkMAj0sKyUGlUJTEkuwGyJw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.865 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:18.869Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-81e9e16e-c601-4f6c-a224-8f0b1afbc2e0","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T15:39:19.081Z","userId":"685ebb2658ec947fdb73ad90","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 212.450 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:19.942Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S6FqyDQH-63U2ELg2OZEhx_sh96eN856NM4A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.821 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:19.956Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.881 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:20.811Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: A5owxkc5-fJ2p4JwV9yzycnulalz95QPwv3s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.391 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:20.821Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.616 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:21.670Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pbxKhwp8-8Yzs6aWWvYZ5QOnzoi5SWER3vpc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.199 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:21.679Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.893 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:22.524Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: klKxlktw-fDZz5VP2icQdaLXLH7myn8dKlqA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.409 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:23.463Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ynYlyWhb-OTPTD0mIt70jUgLwDwplzXdxU6I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.166 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:24.405Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aJ8WmS6A-RjHb8gUMKLbFW8snAS5FiaD10tA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.825 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:24.472Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 29.942 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:25.384Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2c79c9a72fda53b8d9fe1f3befde08b',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: u3aICkKW-hsAJmH0GgGinLiV5MAK8I9h4pcs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2c79c9a72fda53b8d9fe1f3befde08b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GIDi3r1HkV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.936 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:25.457Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 31.963 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (26.078 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1640 ms)
      ✓ should poll for OAuth session results with complete data structure (941 ms)
      ✓ should poll for OAuth login session results (980 ms)
      ✓ should return pending status for non-existent session (880 ms)
      ✓ should handle session polling race conditions (963 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1091 ms)
      ✓ should reject registration with malicious social data (898 ms)
      ✓ should prevent duplicate social account registration (1191 ms)
      ✓ should prevent duplicate email registration (958 ms)
      ✓ should generate unique usernames for social registrations (1586 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1181 ms)
      ✓ should reject customer registration with invalid affiliate ID (959 ms)
    Social Login
      ✓ should login existing affiliate with social account (994 ms)
      ✓ should login existing customer with social account (1073 ms)
      ✓ should return error for non-existent social account (931 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (973 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (1083 ms)
      ✓ should handle expired JWT tokens gracefully (868 ms)
      ✓ should handle invalid JWT tokens (858 ms)
      ✓ should validate required fields (856 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (938 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (941 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (966 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (1032 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:27.112Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:27.412Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e5861711467404768ba4c73ff192861d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CBz40V5T-f6igMIxSmirOdf1uOIP9tCqtNzU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e5861711467404768ba4c73ff192861d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RHR0gsjqou...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.511 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:27.995Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:28.160Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 165.936 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:28.964Z"}
  console.log
    CSRF token generation: {
      sessionID: '3609211a04e1b438d2afa070063fe348',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mIprde5X-VoSWqbHIImLl3g8ONdeyow3NXc4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3609211a04e1b438d2afa070063fe348

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XyfnTT4Kxk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.326 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:29.201Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T15:39:29.286Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 85.655 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:30.032Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ab685f44673003fae6a4b2c8f33e67b5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SHMp0han-uRreenpeiMFU2ABqzHzfoEeZvy8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ab685f44673003fae6a4b2c8f33e67b5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jcbt7zWFc6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.397 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:30.172Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-27T15:39:30.200Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 29.146 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:30.945Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f1288713b6ee8e5e95f8de36fd5370c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6R5q1dxi-cI9LHdAHb7A5ZTMspDeaOuqXR5Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f1288713b6ee8e5e95f8de36fd5370c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TEv3rZXJjV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.479 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:31.208Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 142.211 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:32.095Z"}
  console.log
    CSRF token generation: {
      sessionID: '77164b1e144e9eb81911893858701887',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oixWAHcA-4P3Bt2ufnXKs_SIN_Kff6M-lAHs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 77164b1e144e9eb81911893858701887

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZXyarCxt88...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.052 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:32.356Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.486 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:33.241Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a5b73ba29704367fb1fdba48406e935a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EzPUu7LS-_8IQu8gopdoS4QDxM5EvL-Xjefk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a5b73ba29704367fb1fdba48406e935a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XqLVJSyzd_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.354 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:33.503Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 145.130 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:34.386Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef063f1e28a70b3d2c6a39872df2d54d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FK29n7Ex-xOKZMvaKZtq0i7yoT3UO1ajmwh0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef063f1e28a70b3d2c6a39872df2d54d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8rP2YjBc1O...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.292 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:34.676Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.819 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:35.569Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c196e0dbae85679186629f3e45056818',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EJhxXowg-UXlYfeSVmLASD3YgdlA7WYJZAzc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c196e0dbae85679186629f3e45056818

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aJboDRW21n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.138 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:35.714Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 28.097 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:36.475Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ffcb52294bfd9051f9d1ea8bcaa6fc0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2ayJ7AvX-vEZABtIgz1qi0Lv4ahLmIUHXjpA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ffcb52294bfd9051f9d1ea8bcaa6fc0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qWkMYC8RNv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.919 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:36.698Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:36.841Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.736 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:36.844Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.444 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:37.605Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c9db3ff853b398ead0cd2a1da9e8900b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DDk06JqJ-maVJ8lJDM1DfnaBu2l5j-Q04DZc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c9db3ff853b398ead0cd2a1da9e8900b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: c61EWT6oRM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.110 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:37.746Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.518 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:38.477Z"}
  console.log
    CSRF token generation: {
      sessionID: '46ee179f003a0789e1a95a124eb6d06d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kB0z7wuU-djdHh_I7eb9YYqj2wlLHjb66Urk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 46ee179f003a0789e1a95a124eb6d06d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Qs9CL0cIPw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.865 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:38.616Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.071 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:39.347Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd284fa9a427cc17943c12c26e609a5a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6eTlPyXU-lXuKQlYO5Q5X_Fn8usukpJYVBAE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d284fa9a427cc17943c12c26e609a5a5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: D2XIMRn3ta...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.705 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:39.574Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:39.728Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 154.927 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:39.731Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 122.109 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:40.601Z"}
  console.log
    CSRF token generation: {
      sessionID: '7954c058f3768d074d46517039806e01',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: f1tq5aJh-cl1JEnVTJ8_T3I4hcvSz4niZnkw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7954c058f3768d074d46517039806e01

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BT0o_Ddij8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.504 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:40.744Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.411 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:41.476Z"}
  console.log
    CSRF token generation: {
      sessionID: '1d4d9aabcd1e077e2efae72667e96826',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DtFh2gfn-ox4wJqWpVFfIKWCp-zGfS-RB1xw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1d4d9aabcd1e077e2efae72667e96826

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CtehaLPUx-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:41.740Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.877 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:42.511Z"}
  console.log
    CSRF token generation: {
      sessionID: '53970dd59a80946bfa6f3fd4e9dc1db6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RINXdRfw-f-NYEk1J7jj3rnAmVJ47rU776PQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 53970dd59a80946bfa6f3fd4e9dc1db6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OGHSsuG4iP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.143 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:42.743Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:42.885Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.405 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:42.888Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '53970dd59a80946bfa6f3fd4e9dc1db6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A53970dd59a80946bfa6f3fd4e9dc1db6.%2B0g%2FsAxDojD4J11VXO2vNY8iOGvT3ivRqIdMjWrgM0A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 94.573 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:42.986Z"}
[0mGET /api/v1/auth/verify [33m401[0m 32.408 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:43.022Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.621 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:43.791Z"}
  console.log
    CSRF token generation: {
      sessionID: '3c6cd8ce1131a859ea24813b340133f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PU37ft8c-11xdLsPU2EDENG9wNJ7Sj-B_w2A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3c6cd8ce1131a859ea24813b340133f4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ebd9B3nQQ2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.174 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.013Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:44.208Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 195.001 ms - 544[0m
  console.log
    Got refresh token: ea4b70fb63fe0c84d9dc8c00a371c9da591346020f987e95119648e0368b523b67a566fdb0c16530

      at Object.log (tests/integration/auth.test.js:805:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:819:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.225Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.229Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.230Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.231Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:44.233Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 31.470 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 30.671 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.698 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.569 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 122.113 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NWViYjNmYzNiZGIzMzU1ZGZjNzRmZiIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MTAzODc4NCwiZXhwIjoxNzUxMDQyMzg0LCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.bT747DjznOBl76qgeMF0YTjE7opVYJwh9XTGKlY2G8g',
          refreshToken: 'e7290799149fccc825c75f63c0bc03186aeb00f522c6f9ea91e584f3b16eda624dec39d045c68df5'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:821:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:45.094Z"}
  console.log
    CSRF token generation: {
      sessionID: '334b8fbcb5f6c3d1be7999f0a0f3ef9f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TosWmnJA-67YS_Je-fO97DCin6tGpgGoMEe0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 334b8fbcb5f6c3d1be7999f0a0f3ef9f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fGBMDdcAQ1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.251 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:45.335Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:45.480Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.324 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.583Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:46.724Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 141.717 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.727Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.929 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.761Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.812 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.792Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '334b8fbcb5f6c3d1be7999f0a0f3ef9f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A334b8fbcb5f6c3d1be7999f0a0f3ef9f.H6Qi7PDdodyuLgd0iw%2BaaiajOfc0Md4G8bWfynVALnw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.351 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.886Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.165 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.916Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.058 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:46.947Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '334b8fbcb5f6c3d1be7999f0a0f3ef9f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A334b8fbcb5f6c3d1be7999f0a0f3ef9f.H6Qi7PDdodyuLgd0iw%2BaaiajOfc0Md4G8bWfynVALnw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.679 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:47.041Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.131 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:47.815Z"}
  console.log
    CSRF token generation: {
      sessionID: '0eb7b11dcc96db62dbc2ba6a2bedd2d2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: obOP70Ds-0eY4wBPm3Gy6qJH-RsRkYBoyfAI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0eb7b11dcc96db62dbc2ba6a2bedd2d2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Y99igAu3o7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.019 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:48.041Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:48.201Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T15:39:48.202Z","userId":"685ebb44c3bdb3355dfc7567","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.547 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:48.947Z"}
  console.log
    CSRF token generation: {
      sessionID: '084fa4a54926858b5c51a82a44d0e440',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: r9E6SMqq-PZtOV4khYYqX4BE-EjVORWmkXdE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 084fa4a54926858b5c51a82a44d0e440

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PtNGDkRX_x...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.675 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:49.178Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T15:39:49.297Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 119.471 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:50.079Z"}
  console.log
    CSRF token generation: {
      sessionID: '2240d5068f528d644f9544d70950b8a6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FOyOfmBx-lGZeFFyytv9xv7au0jPgVSZ_0Vg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2240d5068f528d644f9544d70950b8a6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: blwyDfi8Dh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.426 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:50.315Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T15:39:50.344Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 29.758 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:51.081Z"}
  console.log
    CSRF token generation: {
      sessionID: '8a8f7b7ce1ef1d53e69d4890baabf75f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B3hjAf0l-_NkeWQggzCbTuuCJd7RwkifEvFE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8a8f7b7ce1ef1d53e69d4890baabf75f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sWNAdidL07...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.301 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:51.397Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T15:39:51.553Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T15:39:51.553Z","userId":"685ebb47c3bdb3355dfc75d9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 156.090 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:52.304Z"}
  console.log
    CSRF token generation: {
      sessionID: '37239aa91b55d9b917e504dd0695439b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IbM4Cl83-W58YPhlCgJB63f2KNa9ScHs8-tk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 37239aa91b55d9b917e504dd0695439b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VxiGRIHxop...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 19.502 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:52.645Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T15:39:52.776Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 130.935 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:53.522Z"}
  console.log
    CSRF token generation: {
      sessionID: '3bf598d4e4408d7a322c3381d894c620',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g8Zdmuy3-cBLWpxFk3-H_nFXFXv9exxzaciA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3bf598d4e4408d7a322c3381d894c620

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MQRo_1y4N8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.736 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:53.836Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T15:39:53.864Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 29.065 ms - 82[0m
PASS tests/integration/auth.test.js (28.191 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1569 ms)
      ✓ should fail with invalid credentials (1068 ms)
      ✓ should fail with non-existent username (913 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1149 ms)
      ✓ should login customer using emailOrUsername field with email (1146 ms)
      ✓ should login customer using emailOrUsername field with username (1145 ms)
      ✓ should prioritize emailOrUsername over username field (1183 ms)
      ✓ should return error with invalid emailOrUsername (906 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1129 ms)
      ✓ should fail with invalid token (873 ms)
      ✓ should fail with missing token (869 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1254 ms)
      ✓ should fail with invalid refresh token (875 ms)
      ✓ should fail with expired refresh token (1035 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1280 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1303 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2721 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1132 ms)
      ✓ should fail with invalid administrator credentials (1131 ms)
      ✓ should fail when administrator is inactive (1001 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1225 ms)
      ✓ should fail with invalid operator credentials (1218 ms)
      ✓ should fail when operator is inactive (1079 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:55.422Z"}
(node:1645165) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:55.773Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c7769502867d9edfefbd6b3643e0a07b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a8peVcc5-Lg2ICKkDzsQz-5Cawy1XMqmEYfg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c7769502867d9edfefbd6b3643e0a07b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sQ164pnNLS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.517 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:56.377Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c7769502867d9edfefbd6b3643e0a07b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac7769502867d9edfefbd6b3643e0a07b.b7q6bf5xAVvnzmPe0IPE%2FDarhB0ULsYWLDd0mDjUu78',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 355.141 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:57.650Z"}
  console.log
    CSRF token generation: {
      sessionID: '645c69c8c7a1ee218460c3aed3493503',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 84hWtfRB-pOTxPQqhyq_sBIHG4giyNlzs4g4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 645c69c8c7a1ee218460c3aed3493503

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: maxY4qjn6h...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.547 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:57.917Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '645c69c8c7a1ee218460c3aed3493503',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A645c69c8c7a1ee218460c3aed3493503.BNMvI8o8sadzChvmBwUtwwHcd6NBSamrQSRvieGu9X4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 254.077 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:58.928Z"}
  console.log
    CSRF token generation: {
      sessionID: '3b6030db75a4d686a5689c40f52f7dd2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zsWTQnxD-j2NWBVFVCU5RZQ_IrEzfcMK0TyQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3b6030db75a4d686a5689c40f52f7dd2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WqMJGtIaVe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.403 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:39:59.203Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3b6030db75a4d686a5689c40f52f7dd2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3b6030db75a4d686a5689c40f52f7dd2.9fm09rPmOP%2FwB334rErKztcWMkz931N2BUs%2FyGiNaRE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:130:15)

[0mPOST /api/v1/orders [33m400[0m 59.181 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:00.021Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f041c22b09a71a03c7e36a04b1d51d54',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fj6ynqI6-qTpUzMZZnK3aGmddzxn9nBfZmIw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f041c22b09a71a03c7e36a04b1d51d54

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hXVKVrs4jS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.617 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:00.309Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'f041c22b09a71a03c7e36a04b1d51d54',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af041c22b09a71a03c7e36a04b1d51d54.E4OCkvut5jA3znjSX8jjpxy1pnPXFZWff3KgIVomUvk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:159:15)

[0mPOST /api/v1/orders [33m400[0m 113.287 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:01.178Z"}
  console.log
    CSRF token generation: {
      sessionID: '59337da6268beae61c47a32b6a9c8cdd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xH3tlSa6-kJHerPxh9glkjZjFhqavGbOE0k0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 59337da6268beae61c47a32b6a9c8cdd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KDc4CexiOL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.469 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:01.486Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '59337da6268beae61c47a32b6a9c8cdd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A59337da6268beae61c47a32b6a9c8cdd.8rjPLCrPF1hSgk354pBAVLPW%2BKvL4LzXFsWx8HZ61IY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [33m403[0m 116.083 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:02.366Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a4deb76a0a5dea528381c4feb46b5e5b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 89R8U6w1-eJpZM0At4bIZKMpYlk8s8RkS1ck

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a4deb76a0a5dea528381c4feb46b5e5b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LKDcPrX2h7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.259 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:02.633Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'a4deb76a0a5dea528381c4feb46b5e5b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa4deb76a0a5dea528381c4feb46b5e5b.EOfOIAiC%2FLPJKxg3ueDzLich8wRf44I5fTaqUBeTxvc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:105:15)

[0mPOST /api/v1/orders [33m400[0m 31.087 ms - 444[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:03.414Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b0803ede4ed5efce992d23c96237e6e7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: f0YXEGmB-UNIpKpOmHl-mqYWKiCLtZKpvs0Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b0803ede4ed5efce992d23c96237e6e7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8_tqTywy9h...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.843 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:03.721Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 109.831 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:04.587Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e2a5056b3d3e85985acee06eb2cb4979',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hLu2M3lU-Y3e3czDqcaHB6fdGlCoj4HN1qnk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e2a5056b3d3e85985acee06eb2cb4979

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yOHlxriMu4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.742 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:04.886Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 110.715 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:05.780Z"}
  console.log
    CSRF token generation: {
      sessionID: '134560b84f66dd5879812c3f79996d24',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 01MXypXJ-Cw9FMX2Oqw03vUKsYVgGCQe2PjQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 134560b84f66dd5879812c3f79996d24

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kkL51CTTuT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.341 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:06.072Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 56.960 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:06.873Z"}
  console.log
    CSRF token generation: {
      sessionID: '75a774beb4dc8f1a9bafe7f6f54ab1da',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Osn4F11P-SC1OdCPUHCc881GxsP3sspk2vMY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 75a774beb4dc8f1a9bafe7f6f54ab1da

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PmzuEwNhXs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.262 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:07.168Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 55.244 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:07.967Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df1ab4574c9d09f3ee5e4128b1d03d05',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: czR63a9N-ry2WkCgDmLiXYggL_Tt07gCYV-4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: df1ab4574c9d09f3ee5e4128b1d03d05

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LP3O2NYY5d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.282 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:08.264Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'df1ab4574c9d09f3ee5e4128b1d03d05',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adf1ab4574c9d09f3ee5e4128b1d03d05.ySCKYY5gMqQuv20LLmCaCOso%2Bb6%2FU7SUpnArnIksj3s',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 146.286 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:09.189Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd20fa8e6c41cf28be2b6f27f0cfcc929',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dD6yoOgn-pGDQpxtHH1ceAfgT7JLNCNUzoFY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d20fa8e6c41cf28be2b6f27f0cfcc929

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zpPi0QmvW3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.088 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:09.524Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'd20fa8e6c41cf28be2b6f27f0cfcc929',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad20fa8e6c41cf28be2b6f27f0cfcc929.igM2qVtG9jUUrepVZ3DML2MxqmdwzwzRz3subfTLGhI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 143.890 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:10.446Z"}
  console.log
    CSRF token generation: {
      sessionID: '6d1e302cc11197d25075faf8d6b5fea7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4lDLEWA3-8Kca4HQpQofKeR4cyNIgvtXVd_s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6d1e302cc11197d25075faf8d6b5fea7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9kexLKMGjR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.520 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:10.760Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '6d1e302cc11197d25075faf8d6b5fea7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6d1e302cc11197d25075faf8d6b5fea7.l7xWcgzz010qOdsTO6fLIIKheebZvf2ijSzVvxk3hXE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 57.837 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:11.564Z"}
  console.log
    CSRF token generation: {
      sessionID: '61ce250e60c3c47b07fb51d9cc15147a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TVy68IvW-IgwGfcKREHqzdRekswQ5WLkq3IY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 61ce250e60c3c47b07fb51d9cc15147a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PxWLiS1wDN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 23.349 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:11.879Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '61ce250e60c3c47b07fb51d9cc15147a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A61ce250e60c3c47b07fb51d9cc15147a.7%2FpmEhOWv7YFf6N1ytKSxNT8V%2Bf7Me3s0kC1nO%2F6Pvs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 57.830 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:12.701Z"}
  console.log
    CSRF token generation: {
      sessionID: '47f601d7b8df523cee60d3225c666c2a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cgRQlTrG-9ITSWJwZKsbDtGthLq42Fi72VIg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 47f601d7b8df523cee60d3225c666c2a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rG2QOVxVjf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.408 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:12.993Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '47f601d7b8df523cee60d3225c666c2a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A47f601d7b8df523cee60d3225c666c2a.HCrgZuwUQFFG%2FgPj4vWA4clfoWtfkVm5w1GmrDA7R8I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 56.523 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:13.803Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f33b83bfc44a826a10e281090fa9760b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rkA6gFqL-AKP3hgGPF7FkyVrfTHq0tL_4-qs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f33b83bfc44a826a10e281090fa9760b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dTxTjyIFTA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.189 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:14.104Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'f33b83bfc44a826a10e281090fa9760b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af33b83bfc44a826a10e281090fa9760b.5FI5NkNiTRcbjHidcz0vBeQfrY8a6DCQxn%2FOxCJQHsg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 142.666 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:15.045Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c69772338a99512f9d892d9d250023f3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N2uGPeuh-kygw8aom2NGOYU1K6Q2SVGUq93g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c69772338a99512f9d892d9d250023f3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OqOWR0RbDW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 18.019 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:15.403Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'c69772338a99512f9d892d9d250023f3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac69772338a99512f9d892d9d250023f3.EREaPOdZIGzBDHnYvIUgxDRr1MgnXloHxzLLcfMMZN0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 148.057 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:16.301Z"}
  console.log
    CSRF token generation: {
      sessionID: '9be5e4f270112e9e8513a152f94e9cbf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rsXIyre0-trig9dV7mSPvcCetjWgXC1EQXZE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9be5e4f270112e9e8513a152f94e9cbf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qgxKT1oht9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.641 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:16.631Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '9be5e4f270112e9e8513a152f94e9cbf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9be5e4f270112e9e8513a152f94e9cbf.uqh3wyAPnjSm8giEye6Wn6FGd3EJ2N%2FWugQHhlfsHz8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 60.114 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:17.448Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5f2d94cd0722b22776d8f1e68c51c46',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RARtiRVU-vdCPObHzZXG9u8rL9D-GzptgKBU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5f2d94cd0722b22776d8f1e68c51c46

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: F3djnAwdZ5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.096 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:17.748Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'c5f2d94cd0722b22776d8f1e68c51c46',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac5f2d94cd0722b22776d8f1e68c51c46.tYprXpg6u3uIK2Qbegx0cxj2jEXviQFep0OFJ5KXlNQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 56.768 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:18.553Z"}
  console.log
    CSRF token generation: {
      sessionID: '5ff4af23f9f07e7f04ec321902fb69eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cEiRiXxl-_NUH7Kr_FWVIrXx_oUmbyrhzEEw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5ff4af23f9f07e7f04ec321902fb69eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tIsLVgixK0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.865 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:18.869Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '5ff4af23f9f07e7f04ec321902fb69eb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5ff4af23f9f07e7f04ec321902fb69eb.x5kflk3rohszIy%2FFQiF%2B%2FiOombE5pP%2BQfkVPSv6HnFo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 118.893 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:19.779Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd4829d93096b3f7cd507ea7a7891ed19',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PFbbLDaW-U2hxDsfPI77frkfDbkinaUuCcak

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d4829d93096b3f7cd507ea7a7891ed19

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k88GVu__R8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.123 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:20.103Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'd4829d93096b3f7cd507ea7a7891ed19',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad4829d93096b3f7cd507ea7a7891ed19.d6Biw67MyldPabOMI3A3fVzLH%2FcS6OFuAEbqbefVhsg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 124.222 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:20.978Z"}
  console.log
    CSRF token generation: {
      sessionID: '36994c7c2189f0ccb5dda59549e93b98',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: diIpBADr-kHP6oTl1J5CQbVh1miP2G-yLC_s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 36994c7c2189f0ccb5dda59549e93b98

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JdL_aqUBuv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.340 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:21.279Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '36994c7c2189f0ccb5dda59549e93b98',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A36994c7c2189f0ccb5dda59549e93b98.30yW8mZ662hPeNXE2z5uJUXT1aScfxJUNaGS0h1XKv0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 151.027 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:22.208Z"}
  console.log
    CSRF token generation: {
      sessionID: '2df459040c94206d0497eb75a132c742',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vLosFXFG-GrN0W9zkUfeHnlJKJJwXAQCObSE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2df459040c94206d0497eb75a132c742

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: chrMHvMPgh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.683 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:22.512Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 95.056 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:23.367Z"}
  console.log
    CSRF token generation: {
      sessionID: '47300b851fbd32c284eaac7594bc2256',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kLP9tDxT-JvkU2WObxmRs2oeVP9KxZXWi_YA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 47300b851fbd32c284eaac7594bc2256

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J7hoUzRum-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.759 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:23.677Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 89.483 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:24.523Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b29bc94f8cfa09f85d8da282148f5c4f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bZ3Dn0ew-g4cFJjz9KxXUAk39rOcj-FLVeMA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b29bc94f8cfa09f85d8da282148f5c4f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: batHXGWsSc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.481 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:24.828Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 84.898 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:25.694Z"}
  console.log
    CSRF token generation: {
      sessionID: '976c0fbf39d9065c3d1017b4510e004f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tMoMjjcz-Wn2JszELVfW8rf8z63Obdah86AQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 976c0fbf39d9065c3d1017b4510e004f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hBuTKB8W7_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.584 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:26.026Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 28.964 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:26.832Z"}
  console.log
    CSRF token generation: {
      sessionID: '54b7389fd76de349598d0633a5dcee14',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FIEsS233-rbJ3z-LHN3BJWxp3AQk3rEZGXdg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 54b7389fd76de349598d0633a5dcee14

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5tKuUS8oVM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 15.481 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:27.139Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '54b7389fd76de349598d0633a5dcee14',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A54b7389fd76de349598d0633a5dcee14.bXRo%2FJyHX9F7UBmlUu5VCr5oSdGg%2BtYght9bSdDtnb8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 91.554 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:28.009Z"}
  console.log
    CSRF token generation: {
      sessionID: '563c626763bf0630e01ec3a8caea047d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NFL06A0J-fxgalem1dTKWl5yG34bnQ8xhFo4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 563c626763bf0630e01ec3a8caea047d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UyeS6nlMcZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.076 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:28.339Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '563c626763bf0630e01ec3a8caea047d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A563c626763bf0630e01ec3a8caea047d.AYfQJsb6aAIuJbw9rMDId%2FPmT3VGc4%2F8EfSBZJ%2BoKow',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 87.099 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:29.174Z"}
  console.log
    CSRF token generation: {
      sessionID: '7cd88286b3d9892d2ad62dea6093df7e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tSRzYmyN-Sd4CVtYlSAfPI49TcS1mdorZonE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7cd88286b3d9892d2ad62dea6093df7e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Eyixu3PjUf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.144 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:29.516Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '7cd88286b3d9892d2ad62dea6093df7e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7cd88286b3d9892d2ad62dea6093df7e.TZ9omWRnES00G8AV9HaLMCGOk5rWYYGPZKWtV9Iol2k',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 56.949 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:30.327Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e681e01479c10521a5d9180861492592',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zK79FNh6-fezy-vncA6W57EJlFmjGEj9pTno

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e681e01479c10521a5d9180861492592

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KOr5t9XmmG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.016 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:30.651Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'e681e01479c10521a5d9180861492592',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae681e01479c10521a5d9180861492592.exUmo60gRv6jjoeJpK6Vc7oGrtoVJHZnVxPR6l5P5AY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.947 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:31.485Z"}
  console.log
    CSRF token generation: {
      sessionID: '5bed4a231ec19b6dc9000eea75530ede',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D99VGUL4-CicHxz8uK4hDXADGoDvZEwGfVzU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5bed4a231ec19b6dc9000eea75530ede

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9WJSGWcvCF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.132 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:31.840Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 140.725 ms - 552[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:32.737Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a4811908dd72202c5e355f8a03026b9e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IrG5GUB1-wInk8LQbASPsVhKO7Agxs8DMvug

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a4811908dd72202c5e355f8a03026b9e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mzk4X2LYyk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.935 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:33.067Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 111.270 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:33.934Z"}
  console.log
    CSRF token generation: {
      sessionID: '318a59b3a6248574e0dea865108a3bb7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ja2pOvx2-hDZnBwyj_3DY3dFFyZevxlH4dM8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 318a59b3a6248574e0dea865108a3bb7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pFheWcbBHb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.234 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:34.281Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 114.003 ms - 945[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:35.152Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ab08c31871a57826700193d76653a7a1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DUiLGgFR-T4NJqU7mO-7UpWFFxrVVJWUOWII

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ab08c31871a57826700193d76653a7a1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QFbFg2shAT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.039 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:35.515Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 61.612 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:36.325Z"}
  console.log
    CSRF token generation: {
      sessionID: '11c2c7304c10551d1cfc3527caa858eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hYRj2eXQ-ZgXdLKdECAzeHaPR4jZyt6jEc0Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 11c2c7304c10551d1cfc3527caa858eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cB6Z4mdAeF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.307 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:37.003Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '11c2c7304c10551d1cfc3527caa858eb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A11c2c7304c10551d1cfc3527caa858eb.ZKWEoge23AxfKvJgbv2I8tLEnfmIjpShEskzAkGjpQM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 239.253 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:38.081Z"}
  console.log
    CSRF token generation: {
      sessionID: '3c24eda99a1bd297ac877f3c13a8a183',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hrXbPO77-wt7kdIDt6y0-3jk-0Cw4vNAqU1g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3c24eda99a1bd297ac877f3c13a8a183

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2ihl-m1BTM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.729 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:38.849Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3c24eda99a1bd297ac877f3c13a8a183',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3c24eda99a1bd297ac877f3c13a8a183.sRGbNOi2HX6xZQCDmbz9Ud2G0l0L%2BONx1PR8CdkwSfM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 226.565 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1139:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:40.027Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5fda7a1b1e35f4f231ec814034415e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sTEUOwxV-WJdVPi5LhuUaf6H6aB-Azj8AuHM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5fda7a1b1e35f4f231ec814034415e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xE53IAY8D9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.387 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:40.791Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c5fda7a1b1e35f4f231ec814034415e8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac5fda7a1b1e35f4f231ec814034415e8.V7tU3%2BadInC6uG52ST34%2BX94X6sq%2BrvRWfsZDq1YNCY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-0',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-0

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test0 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 230.825 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:41.112Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c5fda7a1b1e35f4f231ec814034415e8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac5fda7a1b1e35f4f231ec814034415e8.V7tU3%2BadInC6uG52ST34%2BX94X6sq%2BrvRWfsZDq1YNCY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-1',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-1

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test1 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 227.042 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:41.432Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c5fda7a1b1e35f4f231ec814034415e8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac5fda7a1b1e35f4f231ec814034415e8.V7tU3%2BadInC6uG52ST34%2BX94X6sq%2BrvRWfsZDq1YNCY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-2',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-2

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test2 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 250.011 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:42.666Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c0f7b0a440cad3b69cfd8154ee53f8f7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: O6JuX4DH-W8tTrs6JkqhnooOsDgzSgJJLPV4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c0f7b0a440cad3b69cfd8154ee53f8f7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: idFpUuNxG4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.971 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T15:40:43.387Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c0f7b0a440cad3b69cfd8154ee53f8f7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac0f7b0a440cad3b69cfd8154ee53f8f7.UCiRiAQaOH2p2Jdo4vWeShLAlPlIll7yGSnK5aJz77U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 229.904 ms - 104[0m
PASS tests/integration/order.test.js (49.874 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1895 ms)
      ✓ should create order as affiliate for their customer (1277 ms)
      ✓ should fail with invalid customer ID (1091 ms)
      ✓ should fail with invalid affiliate ID (1159 ms)
      ✓ should fail when customer tries to create order for another customer (1188 ms)
      ✓ should validate required fields (1048 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1173 ms)
      ✓ should return order details for affiliate (1193 ms)
      ✓ should fail for unauthorized customer (1094 ms)
      ✓ should return 404 for non-existent order (1093 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1222 ms)
      ✓ should update weight when processing (1257 ms)
      ✓ should prevent invalid status transitions (1117 ms)
      ✓ should fail for unauthorized affiliate (1136 ms)
      ✓ should fail for customers (1103 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1241 ms)
      ✓ should cancel order as affiliate (1255 ms)
      ✓ should prevent cancelling non-cancellable orders (1148 ms)
      ✓ should fail for unauthorized user (1104 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1224 ms)
      ✓ should handle partial bulk update failures (1201 ms)
      ✓ should cancel multiple orders in bulk (1229 ms)
    Order export functionality
      ✓ should export orders as CSV (1158 ms)
      ✓ should export orders as JSON (1157 ms)
      ✓ should export orders as Excel (1170 ms)
      ✓ should respect export permissions (1138 ms)
    Payment status updates
      ✓ should update payment status (1176 ms)
      ✓ should handle payment failure (1164 ms)
      ✓ should prevent payment status update on non-complete orders (1153 ms)
      ✓ should record refund (1158 ms)
    Order filtering and search
      ✓ should search orders by customer name (1251 ms)
      ✓ should filter orders by multiple criteria (1197 ms)
      ✓ should filter by pickup time slots (1218 ms)
      ✓ should provide aggregated statistics with filters (1173 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1756 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1946 ms)
      ✓ should calculate commission for multiple orders (2638 ms)
      ✓ should handle high delivery fee scenarios (1805 ms)

Test Suites: 81 passed, 81 total
Tests:       2 skipped, 1906 passed, 1908 total
Snapshots:   0 total
Time:        604.352 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
