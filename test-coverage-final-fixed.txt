
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (68 ms)
    ✓ should be a winston logger instance (17 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (54 ms)
    ✓ should verify password correctly (181 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured (1 ms)
      ✓ should return false when not configured

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit
    ✓ should handle non-numeric values (1 ms)
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers
    ✓ should preserve other query parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (2 ms)
      ✓ should log email operations (1 ms)
      ✓ should handle email errors
    Email Templates
      ✓ should process email templates
      ✓ should handle missing template variables
    Email Validation
      ✓ should validate email addresses
    Email Queue
      ✓ should queue emails for sending (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (17 ms)
      ✓ should export vendors as CSV (3 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (3 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (2 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (2 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields
    ✓ should configure Facebook strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (14 ms)
    GET /api/orders/export
      ✓ should export orders (4 ms)
    GET /api/orders/search
      ✓ should search orders (3 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (2 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (2 ms)
    GET /api/orders/:orderId
      ✓ should get order details (4 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (3 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (3 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:37.055Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:37.425Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T14:38:37.457Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:38.080Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:38.197Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:39.292Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:38:39.412Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (517 ms)
      ✓ should update existing token if one exists (655 ms)
      ✓ should calculate expiration time correctly (114 ms)
    getCurrentToken
      ✓ should return the most recent token (148 ms)
      ✓ should return null if no tokens exist (338 ms)
    clearTokens
      ✓ should remove all tokens (466 ms)
    token expiration
      ✓ should identify expired tokens (146 ms)
      ✓ should handle tokens without refresh token (116 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (254 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (17 ms)
    ✓ GET /api/orders/export - should export orders (4 ms)
    ✓ GET /api/orders/search - should search orders (3 ms)
    ✓ GET /api/orders/statistics - should get statistics (2 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (13 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (3 ms)
    ✓ GET /api/orders/:orderId - should get order details (3 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (3 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (3 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (3 ms)
    ✓ Error handling - should return 404 for unknown routes (3 ms)
    ✓ Error handling - should handle controller errors (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (9 ms)
      ✓ should reject invalid credentials (4 ms)
    POST /api/auth/register
      ✓ should register new user (3 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (2 ms)
      ✓ should reject logout without token (1 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (2 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (2 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (3 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (2 ms)
      ✓ should reject without token (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (17 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values
      ✓ should parse string amounts
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts
      ✓ should round to 2 decimal places (1 ms)
    formatDate
      ✓ should format date with short format by default (5 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format
      ✓ should handle string dates (1 ms)
      ✓ should handle null and undefined dates
      ✓ should handle invalid dates (1 ms)
      ✓ should handle different format cases
    generateRandomString
      ✓ should generate a string of default length 10 (1 ms)
      ✓ should generate strings of specified length
      ✓ should generate different strings on each call
      ✓ should only use alphanumeric characters
    sanitizeForCSV
      ✓ should return empty string for null and undefined (1 ms)
      ✓ should convert non-string values to strings
      ✓ should leave simple strings unchanged
      ✓ should escape double quotes by doubling them
      ✓ should wrap strings containing commas in quotes
      ✓ should wrap strings containing newlines in quotes (1 ms)
      ✓ should handle complex strings with multiple special characters
    calculatePercentage
      ✓ should calculate percentage correctly
      ✓ should handle zero total
      ✓ should handle null or undefined total
      ✓ should respect decimal places parameter
      ✓ should round correctly (1 ms)
      ✓ should handle edge cases
      ✓ should handle negative values

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter (1 ms)
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter (1 ms)
    URL Validation
      ✓ should validate customer ID format
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs (1 ms)
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields
      ✓ should handle admin with different adminId formats (1 ms)
      ✓ should handle admin with different email formats (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (6 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (6 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (4 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (2 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (3 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (3 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (2 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (2 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle JSON parsing errors (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (806 ms)
      ✓ should authenticate valid x-auth-token header (257 ms)
      ✓ should reject request with no token (205 ms)
      ✓ should reject request with invalid token (208 ms)
      ✓ should reject request with expired token (210 ms)
      ✓ should handle malformed Authorization header (214 ms)
      ✓ should reject blacklisted token (209 ms)
    authorize
      ✓ should authorize user with correct role (212 ms)
      ✓ should authorize user with one of multiple roles (211 ms)
      ✓ should reject user with incorrect role (213 ms)
      ✓ should reject user with no role (209 ms)
      ✓ should reject when user is not set (204 ms)
    authLimiter
      ✓ should be a function (207 ms)
      ✓ should have rate limit configuration (202 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (1 ms)
      ✓ should generate next sequential ID when administrators exist (1 ms)
      ✓ should handle double-digit admin IDs correctly
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data (1 ms)
      ✓ should handle database save errors
    Email functionality
      ✓ should send welcome email after admin creation (1 ms)
      ✓ should handle email sending errors gracefully (1 ms)
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing (1 ms)
      ✓ should not warn when all required variables are present (2 ms)
    getEnvironment
      ✓ should return configured environment (1 ms)
      ✓ should default to production if not configured (1 ms)
    getMerchantId
      ✓ should return merchant ID when configured (1 ms)
      ✓ should throw error when not configured (8 ms)
    getFormId
      ✓ should return form ID when configured (2 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured
      ✓ should throw error when not configured (2 ms)
    getFormActionUrl
      ✓ should return configured form action URL (4 ms)
      ✓ should return default URL when not configured (1 ms)
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured
    isConfigured
      ✓ should return true when all required config is present
      ✓ should return false and log error when config is incomplete
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing (1 ms)
      ✓ should set testModeEnabled to false when not configured (1 ms)
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter (1 ms)
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer
      ✓ should generate correct HTML content for highlighted customer (1 ms)
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter (1 ms)
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate (1 ms)
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering
      ✓ should filter customer list by customer ID (1 ms)
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format (1 ms)
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (7 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (6 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (3 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (3 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (3 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (2 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (2 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (2 ms)
      ✓ should handle POST callback routes (2 ms)
      ✓ should handle multiple callback paths (4 ms)
    Error Handling
      ✓ should handle controller errors gracefully (6 ms)
      ✓ should handle missing routes with 404 (2 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle empty request bodies (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (18 ms)
      ✓ should allow access in test environment (4 ms)
      ✓ should deny access in production without key
      ✓ should allow access in production with valid key (4 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (2 ms)
      ✓ should deny access when X-Frame-Options is present (3 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (3 ms)
    Route Handlers
      ✓ should serve index.html at root path (3 ms)
      ✓ should serve critical-files page (4 ms)
      ✓ should serve test-templates page (3 ms)
      ✓ should serve action-plan page (3 ms)
      ✓ should return 404 for non-existent pages (4 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (2 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (2 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (3 ms)
      ✓ should return valid HTML for 404 page (2 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (2 ms)
      ✓ should handle URL-encoded keys (2 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (2 ms)
      ✓ should handle specific route handlers (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (10 ms)
      ✓ should handle custom status codes
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production
      ✓ should handle errors without message
      ✓ should handle errors with code property (1 ms)
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code (1 ms)
      ✓ should have stack trace
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (3 ms)
      ✓ should handle undefined error
      ✓ should handle non-error objects (1 ms)
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/orderWithSystemConfig.test.js (9.487 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (812 ms)
      ✓ should use default rate when SystemConfig is not available (918 ms)
      ✓ should calculate estimated total using SystemConfig rate (641 ms)
      ✓ should calculate actual total using SystemConfig rate (637 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (631 ms)
      ✓ should calculate commission for zero delivery fee (642 ms)
      ✓ should handle commission calculation for large orders (635 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (633 ms)
      ✓ should update calculations when base rate changes (786 ms)
      ✓ should validate minimum and maximum base rates (868 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1159 ms)
      ✓ should match revenue calculator with different parameters (643 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (4 ms)
      ✓ should reject invalid email addresses (1 ms)
    isValidPhone
      ✓ should validate correct US phone numbers (1 ms)
      ✓ should reject invalid phone numbers
    isValidUsername
      ✓ should validate correct usernames (1 ms)
      ✓ should reject invalid usernames (1 ms)
    isValidZipCode
      ✓ should validate correct US zip codes (1 ms)
      ✓ should reject invalid zip codes
    isValidTimeFormat
      ✓ should validate correct time formats (1 ms)
      ✓ should reject invalid time formats
    isValidName
      ✓ should validate correct names
      ✓ should reject invalid names (1 ms)
    mongooseValidators
      ✓ should provide email validator (1 ms)
      ✓ should provide phone validator (1 ms)
      ✓ should provide username validator
      ✓ should provide zipCode validator (1 ms)
      ✓ should provide timeFormat validator (1 ms)
      ✓ should provide name validator
    expressValidators
      ✓ should provide email validator function (1 ms)
      ✓ should provide phone validator function
      ✓ should provide username validator function (1 ms)
      ✓ should provide zipCode validator function
      ✓ should provide timeFormat validator function (1 ms)
      ✓ should provide name validator function
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails (1 ms)
      validatePhone
        ✓ should return validation result for phones (1 ms)
      validateUsername
        ✓ should return validation result for usernames (1 ms)
      validateZipCode
        ✓ should return validation result for zip codes (3 ms)
      validateTimeFormat
        ✓ should return validation result for time formats (1 ms)
      validateName
        ✓ should return validation result for names

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (281 ms)
      ✓ should use default values for blacklistedAt and reason (116 ms)
      ✓ should require all mandatory fields (82 ms)
      ✓ should enforce unique token constraint (244 ms)
      ✓ should validate userType enum (82 ms)
      ✓ should accept all valid userTypes (205 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (111 ms)
        ✓ should use default reason when not provided (109 ms)
        ✓ should return null when token already blacklisted (241 ms)
        ✓ should handle custom reasons (113 ms)
        ✓ should propagate non-duplicate errors (80 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (142 ms)
        ✓ should return false for non-blacklisted token (107 ms)
        ✓ should handle empty token (106 ms)
        ✓ should handle null token (108 ms)
      cleanupExpired
        ✓ should delete expired tokens (234 ms)
        ✓ should return 0 when no expired tokens (195 ms)
        ✓ should handle empty collection (107 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (11 ms)
      ✓ should throw error when encryption key is missing (1 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs (1 ms)
      ✓ should throw error with invalid encrypted object structure (2 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (4 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (53 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (163 ms)
      ✓ should return false for invalid salt format (57 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (7 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (3 ms)
      ✓ should validate encryption output structure (3 ms)
      ✓ should handle password edge cases (1269 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/models.test.js (6.424 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (574 ms)
      ✓ should require required fields (328 ms)
      ✓ should enforce unique constraints (609 ms)
      ✓ should handle payment information correctly (353 ms)
    Customer Model
      ✓ should create a valid customer (347 ms)
    Order Model
      ✓ should create a valid order (370 ms)
      ✓ should calculate estimated total correctly (372 ms)
      ✓ should calculate actual total and commission when weight is set (373 ms)
      ✓ should update timestamps for status changes (469 ms)
    Transaction Model
      ✓ should create a valid transaction (341 ms)
      ✓ should validate transaction type (308 ms)
      ✓ should validate transaction status (308 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (342 ms)
      ✓ should validate user type (309 ms)
      ✓ should check if token is expired (377 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (16 ms)
      ✓ should handle errors when fetching public configs (15 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (4 ms)
      ✓ should return 404 for non-existent public config (2 ms)
      ✓ should handle errors when fetching specific config (4 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (3 ms)
      ✓ should filter configurations by category (3 ms)
      ✓ should handle errors when fetching all configs (3 ms)
      ✓ should require authentication (2 ms)
      ✓ should require administrator role (72 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (10 ms)
      ✓ should require system_config permission (63 ms)
      ✓ should handle validation errors (4 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (3 ms)
      ✓ should handle errors during initialization (3 ms)
      ✓ should require authentication and admin role (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (299 ms)
      ✓ should generate ADM002 when ADM001 exists (224 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (294 ms)
      ✓ should handle non-sequential admin IDs correctly (284 ms)
      ✓ should handle double-digit admin IDs (229 ms)
      ✓ should handle triple-digit admin IDs (231 ms)
      ✓ should handle large admin ID numbers (238 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (107 ms)
      ✓ should handle numbers above 999 without padding issues (106 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (107 ms)
      ✓ should handle edge cases in admin ID parsing (109 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (277 ms)
      ✓ should work correctly with different creation dates (305 ms)
      ✓ should work correctly with different permissions (289 ms)
    Performance and reliability
      ✓ should handle database query efficiently (225 ms)
      ✓ should handle concurrent admin creation scenario (370 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (7 ms)
      ✓ should not have duplicate endpoints across categories (1 ms)
      ✓ should include critical security endpoints (2 ms)
      ✓ should exclude authentication endpoints from CSRF (1 ms)
      ✓ should exclude registration endpoints from CSRF (1 ms)
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests (1 ms)
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests (1 ms)
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests (1 ms)
        ✓ should consider CSRF for PATCH requests
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints (3 ms)
        ✓ should not enforce CSRF for forgot password (1 ms)
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes (1 ms)
        ✓ should enforce CSRF for data deletion
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes (1 ms)
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2 (1 ms)
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase (1 ms)
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods (1 ms)
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes
        ✓ should not match partial paths (1 ms)
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters (1 ms)
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering (1 ms)
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array
      ✓ should handle non-array inputs (1 ms)
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view (1 ms)
      ✓ should include appropriate fields for each role
    getFilteredData
      ✓ should filter data based on admin role (1 ms)
      ✓ should filter data based on public role
      ✓ should handle self context for customers
      ✓ should handle arrays of data
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method (1 ms)
      ✓ should filter response data when _filterType is provided
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated
      ✓ should extract user ID from different user types (1 ms)
      ✓ should preserve other response properties
      ✓ should handle responses without data property (1 ms)
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (3 ms)
      ✓ should handle empty store IP
      ✓ should load additional IPs from environment
      ✓ should trim whitespace from IPs (1 ms)
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment
      ✓ should handle empty IP ranges (1 ms)
    Session renewal configuration
      ✓ should use default session renewal settings (1 ms)
      ✓ should load custom session renewal settings from environment
      ✓ should handle invalid numeric values (1 ms)
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs (1 ms)
      ✓ should return false for non-whitelisted IPs (1 ms)
      ✓ should check IP ranges (1 ms)
      ✓ should return false for IPs outside ranges (1 ms)
    isInRange function
      ✓ should correctly check IPs in /24 subnet (1 ms)
      ✓ should correctly check IPs in /16 subnet
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host) (1 ms)
      ✓ should correctly check IPs in /0 subnet (all IPs) (1 ms)
      ✓ should handle invalid CIDR notation (1 ms)
      ✓ should handle invalid mask bits
      ✓ should handle invalid IP addresses (1 ms)
      ✓ should handle IP parts out of range (1 ms)
      ✓ should handle edge cases with console error (1 ms)
      ✓ should correctly handle boundary cases (1 ms)
      ✓ should handle various subnet sizes correctly (1 ms)
    Configuration export structure
      ✓ should export all required properties and functions (5 ms)
      ✓ should have correct session renewal properties (1 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization (1 ms)
    acquireCallback
      ✓ should acquire callback successfully
      ✓ should return null when no callbacks available (1 ms)
    releaseCallback
      ✓ should release callback successfully
      ✓ should handle null callback gracefully (1 ms)
    getPoolStatus
      ✓ should return pool status with all handler details (1 ms)
      ✓ should handle empty pool
    startCleanupJob
      ✓ should start cleanup interval (2 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running (7 ms)
      ✓ should handle stopping when no interval exists (1 ms)
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers
        ✓ should require special characters (1 ms)
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email
        ✓ should reject sequential characters (1 ms)
        ✓ should reject repeated characters
      Valid Passwords
        ✓ should accept strong valid passwords
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks (1 ms)
    customPasswordValidator
      ✓ should work as express-validator custom validator (17 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function (1 ms)
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (73 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (1 ms)
      ✓ should score length appropriately
      ✓ should score character variety
      ✓ should penalize common patterns (1 ms)
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/callbackPool.test.js (6.861 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (298 ms)
      ✓ should have default values (136 ms)
      ✓ should have unique constraint on callbackPath (135 ms)
      ✓ should create document with defaults (167 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (195 ms)
        ✓ should increment usage count on each lock (284 ms)
        ✓ should update lastUsedAt timestamp (204 ms)
      release()
        ✓ should release locked callback (254 ms)
        ✓ should handle releasing already unlocked callback (191 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (341 ms)
        ✓ should use least recently used callback (244 ms)
        ✓ should acquire expired locked callback (257 ms)
        ✓ should return null when no callbacks available (243 ms)
        ✓ should increment usage count atomically (207 ms)
      releaseCallback()
        ✓ should release callback by payment token (197 ms)
        ✓ should return null if no callback found with token (168 ms)
        ✓ should only release callback locked by specific token (225 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (440 ms)
        ✓ should not release recently locked callbacks (237 ms)
        ✓ should handle custom timeout values (242 ms)
        ✓ should return 0 when no expired locks (257 ms)
        ✓ should handle empty collection (234 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (308 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (765 ms)
      ✓ should handle invalid ObjectId gracefully (172 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (1 ms)
      ✓ should sanitize arrays recursively (1 ms)
      ✓ should sanitize objects recursively
      ✓ should handle null values
      ✓ should handle undefined values (1 ms)
      ✓ should handle numbers
      ✓ should handle booleans
      ✓ should handle deeply nested objects (1 ms)
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (1 ms)
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string (1 ms)
      ✓ should validate complex email formats
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters (1 ms)
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens (1 ms)
      ✓ should remove special characters
      ✓ should remove spaces
      ✓ should handle script injection attempts
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string (3 ms)
      ✓ should handle MongoDB ObjectId format (1 ms)
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain
      ✓ should handle complex nested structures (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (327 ms)
      ✓ should handle email sending failures gracefully (120 ms)
      ✓ should return error for invalid customer (54 ms)
      ✓ should return error for invalid affiliate (55 ms)
      ✓ should enforce authorization (54 ms)
    getOrderDetails
      ✓ should return order details for authorized user (51 ms)
      ✓ should return 404 for non-existent order (51 ms)
      ✓ should enforce authorization for customers (52 ms)
    updateOrderStatus
      ✓ should successfully update order status (54 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (53 ms)
      ✓ should send commission email when complete (52 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (51 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (2 ms)
      ✓ should have unique event names (1 ms)
    logAuditEvent
      ✓ should log basic audit event
      ✓ should add request context when provided (1 ms)
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses (1 ms)
      ✓ should include request context in logs
    logLoginAttempt
      ✓ should log successful login (1 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason (1 ms)
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions (1 ms)
    logPaymentActivity
      ✓ should log payment info access
      ✓ should log payment info update (1 ms)
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/createAdminScript.test.js (10.182 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (536 ms)
      ✓ should contain required functionality markers (360 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (568 ms)
      ✓ should calculate next admin ID correctly (646 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (369 ms)
      ✓ should accept strong passwords for admins (731 ms)
    Permission System Validation
      ✓ should validate all permission types (479 ms)
      ✓ should handle partial permission sets (445 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (552 ms)
      ✓ should prevent duplicate emails (536 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (450 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (455 ms)
      ✓ should normalize email addresses (455 ms)
      ✓ should validate email format (734 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (454 ms)
      ✓ should work with password hashing middleware (482 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (362 ms)
      ✓ should handle invalid input gracefully (362 ms)
    Security Considerations
      ✓ should not log or expose passwords (369 ms)
      ✓ should generate secure random passwords when needed (355 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/oAuthSession.test.js (6.885 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (405 ms)
      ✓ should require sessionId field (208 ms)
      ✓ should require result field (205 ms)
      ✓ should automatically set createdAt (241 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (244 ms)
      ✓ should enforce unique sessionId (276 ms)
      ✓ should allow complex result objects (243 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (272 ms)
        ✓ should throw error for duplicate session IDs (281 ms)
        ✓ should handle database errors (203 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (271 ms)
        ✓ should return null for non-existent session (228 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (291 ms)
        ✓ should return null when consuming non-existent session (230 ms)
        ✓ should handle race conditions safely (298 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (452 ms)
        ✓ should return zero deletions when no expired sessions exist (323 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (225 ms)
      ✓ should respect custom expiresAt when provided (259 ms)
    Data Integrity
      ✓ should preserve all data types in result field (249 ms)
      ✓ should handle empty and minimal result objects (364 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (204 ms)
      ✓ should handle very large result objects (314 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (7 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (3 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (2 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (3 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (2 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (9 ms)
      ✓ should validate required fields for social registration (2 ms)
      ✓ should validate service radius range (2 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (3 ms)
      ✓ should validate provider for account linking (1 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (2 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (2 ms)
      ✓ should validate customer registration fields (2 ms)
      ✓ should validate service frequency (2 ms)
    Error Handling
      ✓ should handle errors gracefully (13 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (220 ms)
      ✓ should return error when Paygistix is not configured (51 ms)
      ✓ should handle errors gracefully (52 ms)
    logSubmission
      ✓ should log payment submission successfully (51 ms)
      ✓ should handle logging errors (51 ms)
    createPaymentToken
      ✓ should create payment token successfully (53 ms)
      ✓ should handle no available callbacks (53 ms)
      ✓ should handle token creation errors (56 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (52 ms)
      ✓ should handle token not found (52 ms)
      ✓ should handle database errors (55 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (52 ms)
      ✓ should not cancel non-pending tokens (51 ms)
      ✓ should handle token not found (52 ms)
    updatePaymentStatus
      ✓ should update payment status to success (53 ms)
      ✓ should update payment status to failed (51 ms)
    handleFormCallback
      ✓ should process callback successfully (52 ms)
      ✓ should handle no pending payment for callback (51 ms)
      ✓ should handle callback processing errors (50 ms)
    processCallbackResult
      ✓ should process successful payment from query params (52 ms)
      ✓ should process failed payment (52 ms)
      ✓ should handle body parameters (51 ms)
      ✓ should redirect with all parameters (53 ms)
    getPoolStats
      ✓ should return pool statistics (53 ms)
      ✓ should handle stats retrieval errors (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (201 ms)
      ✓ should require orderId (66 ms)
      ✓ should require customerId (56 ms)
      ✓ should require paymentMethodId (63 ms)
      ✓ should require paygistixId (57 ms)
      ✓ should require amount (54 ms)
      ✓ should validate amount is non-negative (52 ms)
      ✓ should default currency to USD (52 ms)
      ✓ should validate currency enum (53 ms)
      ✓ should reject invalid currency (52 ms)
      ✓ should validate status enum (54 ms)
      ✓ should reject invalid status (52 ms)
      ✓ should default status to pending (52 ms)
    Default Values
      ✓ should default capturedAmount to 0 (53 ms)
      ✓ should default refundedAmount to 0 (51 ms)
      ✓ should default hasDispute to false (52 ms)
      ✓ should have empty refunds array (59 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (52 ms)
      ✓ should handle zero amounts (52 ms)
      ✓ should handle full refund (52 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (52 ms)
        ✓ should allow refund when status is partially_refunded (52 ms)
        ✓ should not allow refund when status is pending (52 ms)
        ✓ should not allow refund when fully refunded (53 ms)
        ✓ should validate refund amount (51 ms)
        ✓ should handle null amount parameter (52 ms)
      canCapture()
        ✓ should allow capture when status is authorized (51 ms)
        ✓ should not allow capture when status is captured (58 ms)
        ✓ should not allow capture when status is pending (52 ms)
      addRefund()
        ✓ should add refund to refunds array (54 ms)
        ✓ should update refundedAmount (51 ms)
        ✓ should update lastRefundAt (52 ms)
        ✓ should set status to partially_refunded for partial refund (52 ms)
        ✓ should set status to refunded for full refund (54 ms)
        ✓ should handle multiple refunds (52 ms)
        ✓ should handle refund that exceeds captured amount (55 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (52 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (51 ms)
        ✓ should accept custom limit (52 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (53 ms)
    Middleware
      ✓ should have pre-save middleware defined (51 ms)
      ○ skipped should prevent modification of paygistixId
      ○ skipped should prevent modification of orderId
    Refund Schema
      ✓ should validate refund subdocument (53 ms)
      ✓ should require refundId in refund (52 ms)
      ✓ should require amount in refund (52 ms)
      ✓ should validate refund amount is non-negative (53 ms)
      ✓ should set default createdAt for refund (52 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (54 ms)
      ✓ should allow dispute fields when hasDispute is true (60 ms)
      ✓ should validate dispute amount is non-negative (56 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (52 ms)
      ✓ should store response as mixed type (52 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (8 ms)
        ✓ should handle success status as well as approved (3 ms)
        ✓ should update existing payment if found (2 ms)
        ✓ should handle customer not found gracefully (2 ms)
        ✓ should handle email send failure gracefully (3 ms)
        ✓ should not update customer if already active (2 ms)
      Failed payment
        ✓ should handle declined payment (3 ms)
        ✓ should handle failed status (2 ms)
        ✓ should increment payment attempts on failure (2 ms)
        ✓ should use default error message when none provided (1 ms)
      Error handling
        ✓ should handle order not found (1 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle database errors gracefully (1 ms)
        ✓ should handle payment save error (1 ms)
      Edge cases
        ✓ should handle missing amount parameter (2 ms)
        ✓ should handle malformed maskedCard (2 ms)
        ✓ should log callback parameters (2 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (11 ms)
      ✓ should handle POST callback errors (3 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-27T12:39:54.868Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.186Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:39:55.187Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-27T13:39:55.187Z","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.221Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.221Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.332Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.435Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:55.436Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:39:55.516Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:39:55.574Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-27T13:39:55.822Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:56.212Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-27T12:39:56.290Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:56.370Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:56.452Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-27T12:39:56.693Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-27T12:39:56.776Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:56.937Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-27T12:39:57.019Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (223 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (80 ms)
      ✓ should delete verifier after retrieval (92 ms)
      ✓ should clean up old PKCE files (77 ms)
    Authorization URL
      ✓ should generate correct authorization URL (80 ms)
      ✓ should use provided state if given (79 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (146 ms)
      ✓ should throw error if PKCE verifier not found (102 ms)
      ✓ should handle token exchange errors (80 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (197 ms)
      ✓ should throw error if no refresh token available (108 ms)
    Access Token Management
      ✓ should return valid access token if not expired (172 ms)
      ✓ should refresh token if expired (112 ms)
      ✓ should throw error if no valid token and no refresh token (104 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (79 ms)
      ✓ should handle envelope creation errors (79 ms)
      ✓ should return mock envelope in test mode (81 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (85 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (77 ms)
      ✓ should reject invalid webhook signature (78 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (83 ms)
      ✓ should handle declined envelope (79 ms)
    Envelope Status
      ✓ should get envelope status (82 ms)
    Document Download
      ✓ should download completed W9 document (80 ms)
    Envelope Voiding
      ✓ should void an envelope (81 ms)

(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (7 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found (1 ms)
      ✓ should handle errors gracefully (5 ms)
    exportPaymentSummary
      ✓ should export payment summary as JSON (2 ms)
      ✓ should export payment summary as CSV (1 ms)
      ✓ should return 400 when dates are missing (1 ms)
      ✓ should return 404 when no payable commissions found
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (1 ms)
      ✓ should return 400 when required parameters are missing
      ✓ should return 404 when affiliate not found (1 ms)
      ✓ should return 400 when affiliate has no verified W-9
    getExportHistory
      ✓ should get export history (1 ms)
      ✓ should filter by type

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (203 ms)
      ✓ should require customerId (56 ms)
      ✓ should require paygistixId (57 ms)
      ✓ should validate type enum (57 ms)
      ✓ should reject invalid type (55 ms)
      ✓ should default type to card (52 ms)
    Card Validation
      ✓ should require card details when type is card (52 ms)
      ✓ should validate card last4 length (52 ms)
      ✓ should validate card brand enum (53 ms)
      ✓ should reject invalid card brand (53 ms)
      ✓ should validate expiry month range (52 ms)
      ✓ should validate expiry year is not in the past (52 ms)
      ✓ should require card fingerprint (52 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (53 ms)
      ✓ should require bank account details when type is bank_account (53 ms)
      ✓ should validate bank account last4 length (52 ms)
      ✓ should validate account type enum (53 ms)
      ✓ should reject invalid account type (52 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (52 ms)
      ✓ should require wallet type when type is wallet (52 ms)
      ✓ should validate wallet type enum (52 ms)
    Default Values
      ✓ should default isDefault to false (52 ms)
      ✓ should default isActive to true (52 ms)
      ✓ should default isVerified to false (52 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (51 ms)
        ✓ should format bank account display name (51 ms)
        ✓ should format wallet display name (51 ms)
        ✓ should handle google_pay formatting (52 ms)
        ✓ should return default for unknown type (52 ms)
      isExpired
        ✓ should return false for non-card types (52 ms)
        ✓ should return false for future expiry (55 ms)
        ✓ should return true for past year (52 ms)
        ✓ should return true for current year past month (53 ms)
        ✓ should return false for current year future month (55 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (59 ms)
        ✓ should not allow use of inactive payment method (52 ms)
        ✓ should not allow use of expired card (51 ms)
        ✓ should not allow use of unverified bank account (52 ms)
        ✓ should allow use of verified bank account (52 ms)
      markAsUsed()
        ✓ should update lastUsedAt (53 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (51 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (52 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (52 ms)
        ✓ should return null if no duplicate found (52 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (52 ms)
      Pre-save default handling
        ○ skipped should remove default from other payment methods when setting default
        ○ skipped should prevent modification of paygistixId
        ○ skipped should prevent modification of customerId
      Pre-save auto-default
        ○ skipped should set first payment method as default
        ○ skipped should not set as default if other active methods exist
    Metadata Field
      ✓ should store metadata as Map (52 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (2 ms)
        ✓ should accept passwords with 8 or more characters
      Character Type Requirements
        ✓ should require at least one uppercase letter
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (2 ms)
        ✓ should accept non-common passwords
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers (1 ms)
        ✓ should reject passwords with sequential letters
        ✓ should accept passwords without sequential characters (1 ms)
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters
        ✓ should accept passwords with acceptable repeated characters (1 ms)
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email (1 ms)
      Password History Check
        ✓ should reject passwords in history
        ✓ should accept passwords not in history (1 ms)
      Complete Valid Passwords
        ✓ should accept completely valid passwords
    getPasswordStrength
      ✓ should return correct strength scores (1 ms)
      ✓ should return correct strength labels (1 ms)
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history
      ✓ should handle empty history (1 ms)
    customPasswordValidator
      ✓ should return custom validator function (3 ms)
      ✓ should validate passwords correctly in express-validator context (1 ms)
      ✓ should throw for invalid passwords in express-validator context (13 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request
      ✓ should include strength assessment in response for invalid passwords (1 ms)
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully
      ✓ should handle very long passwords
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/administrator.test.js (7.854 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (323 ms)
      ✓ should require all mandatory fields (90 ms)
      ✓ should enforce email format validation (141 ms)
      ✓ should enforce unique email constraint (488 ms)
      ✓ should enforce unique adminId constraint (535 ms)
      ✓ should validate permission enum values (140 ms)
      ✓ should accept valid permissions (167 ms)
      ✓ should trim whitespace from string fields (177 ms)
      ✓ should convert email to lowercase (178 ms)
      ✓ should not allow role to be changed after creation (228 ms)
    Password Handling
      ✓ should store password as hash and salt (209 ms)
      ✓ should verify correct password (252 ms)
      ✓ should reject incorrect password (252 ms)
      ✓ should not expose password in JSON output (169 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (246 ms)
      ✓ should lock account after 5 failed attempts (246 ms)
      ✓ should reset login attempts on successful login (228 ms)
      ✓ should reset attempts if lock has expired (226 ms)
      ✓ should correctly identify locked accounts (175 ms)
    Password Reset
      ✓ should generate password reset token (163 ms)
      ✓ should set password reset expiry to 30 minutes (166 ms)
    Permissions
      ✓ should check single permission correctly (167 ms)
      ✓ should check multiple permissions with AND operation (186 ms)
      ✓ should check multiple permissions with OR operation (165 ms)
      ✓ should set default permissions if none provided (170 ms)
    Static Methods
      ✓ should find active administrators (458 ms)
      ✓ should find administrator by email with password (193 ms)
      ✓ should handle case-insensitive email search (191 ms)
      ✓ should return null for non-existent email (110 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (162 ms)
      ✓ should update updatedAt on modification (297 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (291 ms)
      ✓ should not override provided admin ID (168 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/generalPaymentCallback.test.js
  General Payment Callback Routes
    GET /
      Registration Payment
        ✓ should redirect to success page on approved registration payment (7 ms)
        ✓ should redirect to success page on success status (3 ms)
        ✓ should redirect to register page with error on failed registration payment (3 ms)
        ✓ should handle missing response message on failure (2 ms)
        ✓ should handle registration payment callback errors (9 ms)
      Order Payment
        ✓ should handle approved order payment successfully (5 ms)
        ✓ should handle success status for order payment (3 ms)
        ✓ should update existing payment record (3 ms)
        ✓ should handle declined order payment (3 ms)
        ✓ should handle failed order payment (3 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle order not found (2 ms)
        ✓ should handle missing orderId in query (2 ms)
        ✓ should handle email service failure gracefully (2 ms)
        ✓ should skip customer update if customer not found (2 ms)
        ✓ should not update already active customer (2 ms)
        ✓ should handle payment callback errors (2 ms)
        ✓ should use order amount if payment amount not provided (2 ms)
        ✓ should handle partial masked card (2 ms)
        ✓ should handle missing masked card (2 ms)
      General error handling
        ✓ should handle general callback errors (2 ms)
    POST /
      Registration Payment
        ✓ should create customer on approved registration payment with session (7 ms)
        ✓ should handle success status for registration (3 ms)
        ✓ should handle customer creation error (2 ms)
        ✓ should handle no pending registration (2 ms)
        ✓ should handle declined registration payment (2 ms)
        ✓ should handle failed registration payment without message (2 ms)
      Order Payment POST
        ✓ should acknowledge order payment callback (7 ms)
        ✓ should handle order payment with explicit type (2 ms)
      General POST error handling
        ✓ should handle POST callback errors (17 ms)
        ✓ should log POST callback data (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:822:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:365:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      843 |     });
      844 |   } catch (error) {
    > 845 |     console.error('Token verification error:', error);
          |             ^
      846 |     res.status(500).json({
      847 |       success: false,
      848 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:845:13)
      at Object.verifyToken (tests/unit/authController.test.js:365:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (2 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password
    customerLogin
      ✓ should successfully login a customer with valid credentials (20 ms)
      ✓ should return 401 for non-existent customer
      ✓ should login customer using emailOrUsername field (3 ms)
      ✓ should prioritize emailOrUsername over username field (13 ms)
      ✓ should return error when neither username nor emailOrUsername provided
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (35 ms)
      ✓ should return customer user data
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator
    operatorLogin
      ✓ should successfully login operator with PIN
      ✓ should increment login attempts on failure (1 ms)
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate
      ✓ should handle non-existent email gracefully
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy (1 ms)
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role
      ✓ should accept admin for any combination of roles (1 ms)
    checkResourceOwnership Middleware
      ✓ should reject when no user is present
      ✓ should allow admin access to any resource (1 ms)
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body (1 ms)
      ✓ should allow operator access to own resource
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID (1 ms)
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (9 ms)
      ✓ should handle array of required permissions (1 ms)
      ✓ should reject when administrator lacks any required permission (1 ms)
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found (1 ms)
      ✓ should reject when operator is not active
      ✓ should reject when operator is not on shift (1 ms)
      ✓ should accept active operator on shift
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present
      ✓ should pass through data when user has no role (1 ms)
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions (1 ms)
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields
      ✓ should handle non-object data gracefully (1 ms)
      ✓ should handle empty allowed fields

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (4 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials
      ✓ should configure LinkedIn strategy when credentials are present
    Google OAuth Strategy
      ✓ should handle database errors (1 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (2 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (6 ms)
        ✓ should link Google account to existing affiliate with email (1 ms)
        ✓ should return new affiliate user data (2 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (1 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (1 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (2 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (207 ms)
      ✓ should generate exportId automatically (58 ms)
      ✓ should require type field (53 ms)
      ✓ should validate type enum values (54 ms)
      ✓ should reject invalid type values (53 ms)
      ✓ should require generatedBy field (54 ms)
    Period Fields
      ✓ should store period dates for payment summary (53 ms)
      ✓ should store period dates for commission detail (53 ms)
    Export Data
      ✓ should store vendor export data (54 ms)
      ✓ should store payment summary data (53 ms)
      ✓ should store commission detail data (54 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (53 ms)
      ✓ should store single affiliate ID for commission detail (54 ms)
      ✓ should allow empty affiliate IDs array (55 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (53 ms)
    Indexes
      ✓ should have required indexes defined (53 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (57 ms)
      ✓ should handle payment summary export type correctly (57 ms)
      ✓ should handle commission detail export type correctly (62 ms)
    Export ID Generation
      ✓ should generate unique export IDs (54 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (54 ms)
      ✓ should accept valid ObjectId for generatedBy (53 ms)
    Instance Methods
      markDownloaded()
        ✓ should mark export as downloaded (180 ms)
        ✓ should increment download count on multiple downloads (230 ms)
        ✓ should not change status if already downloaded (183 ms)
        ✓ should update downloadedAt timestamp (183 ms)
      updateImportStatus()
        ✓ should update import status to success (174 ms)
        ✓ should update import status to failed (171 ms)
        ✓ should handle partial import status (177 ms)
    Static Methods
      findByPeriod()
        ✓ should find exports within period (336 ms)
        ✓ should filter by type when specified (168 ms)
        ✓ should return empty array when no matches (151 ms)
        ✓ should sort by generatedAt descending (184 ms)
      existsForPeriod()
        ✓ should find existing export for period (148 ms)
        ✓ should not find export for different period (148 ms)
        ✓ should exclude failed exports (180 ms)
        ✓ should find export with non-failed status (174 ms)
    Virtual Properties
      ageInDays
        ✓ should calculate age in days correctly (86 ms)
        ✓ should return 1 for exports created today (87 ms)
        ✓ should handle exports created in the past correctly (54 ms)
        ✓ should update as time passes (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/systemConfig.test.js (8.179 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (261 ms)
      ✓ should require mandatory fields (81 ms)
      ✓ should enforce unique key constraint (291 ms)
      ✓ should validate category enum (78 ms)
      ✓ should validate dataType enum (78 ms)
      ✓ should accept all valid categories (401 ms)
      ✓ should accept all valid data types (231 ms)
      ✓ should trim string fields (111 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (78 ms)
        ✓ should enforce minimum value validation (79 ms)
        ✓ should enforce maximum value validation (80 ms)
        ✓ should accept valid number within range (110 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (94 ms)
        ✓ should accept boolean values (111 ms)
      String validation
        ✓ should reject non-string values for string dataType (78 ms)
        ✓ should enforce regex validation (79 ms)
        ✓ should accept valid string matching regex (112 ms)
      Array validation
        ✓ should reject non-array values for array dataType (78 ms)
        ✓ should accept array values (118 ms)
      Object validation
        ✓ should reject non-object values for object dataType (78 ms)
        ✓ should reject arrays for object dataType (77 ms)
        ✓ should accept object values (112 ms)
      Allowed values validation
        ✓ should enforce allowed values (78 ms)
        ✓ should accept allowed values (112 ms)
    Static Methods
      getValue
        ✓ should return config value (137 ms)
        ✓ should return defaultValue when value is undefined (137 ms)
        ✓ should return provided default when config not found (117 ms)
        ✓ should return null when config not found and no default provided (103 ms)
      setValue
        ✓ should update config value (169 ms)
        ✓ should throw error for non-existent config (102 ms)
        ✓ should throw error for non-editable config (137 ms)
        ✓ should update updatedBy when provided (171 ms)
        ✓ should validate new value according to dataType (138 ms)
      getByCategory
        ✓ should return all configs for a category (288 ms)
        ✓ should return only public configs when specified (146 ms)
        ✓ should return empty array for non-existent category (145 ms)
        ✓ should sort by key (182 ms)
      getPublicConfigs
        ✓ should return only public configs (144 ms)
        ✓ should sort by category then key (148 ms)
      initializeDefaults
        ✓ should create default configurations (496 ms)
        ✓ should not overwrite existing configurations (477 ms)
        ✓ should add missing configurations (468 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (118 ms)
      ✓ should update updatedAt on modification (242 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (113 ms)
      ✓ should use defaultValue when value is undefined (109 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (111 ms)
      ✓ should handle empty validation object (109 ms)
      ✓ should skip validation when value is not modified (136 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:40:28.897Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1055 |             await OAuthSession.createSession(sessionId, message);
      1056 |           } catch (dbError) {
    > 1057 |             console.error('Error storing OAuth session:', dbError);
           |                     ^
      1058 |           }
      1059 |         }
      1060 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:1057:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1735:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1797:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T12:40:29.412Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T12:40:30.030Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-27T12:40:30.397Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:40:30.867Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-27T12:40:30.867Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:40:31.183Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-27T12:40:31.337Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1705:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1686:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1707 |
      1708 |   } catch (error) {
    > 1709 |     console.error('OAuth session polling error:', error);
           |             ^
      1710 |     res.status(500).json({
      1711 |       success: false,
      1712 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1709:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.657 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (410 ms)
      ✓ should handle customer context from state parameter (180 ms)
      ✓ should handle missing user data gracefully (157 ms)
      ✓ should handle OAuth session creation errors (176 ms)
      ✓ should extract profile data correctly for different providers (157 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (159 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (179 ms)
      ✓ should sanitize social data and reject if fields become empty (155 ms)
      ✓ should check for existing email and username (153 ms)
      ✓ should check for existing social account (153 ms)
      ✓ should generate unique username from social data (157 ms)
      ✓ should handle JWT verification errors (157 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (210 ms)
      ✓ should validate affiliate existence (156 ms)
      ✓ should sanitize customer social data (157 ms)
    socialLogin
      ✓ should login existing affiliate with social account (157 ms)
      ✓ should return error for non-existent social account (158 ms)
      ✓ should login existing customer with social account (154 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (154 ms)
      ✓ should prevent linking already existing social account (155 ms)
      ✓ should handle user not found error (154 ms)
    pollOAuthSession
      ✓ should return complete session data when available (157 ms)
      ✓ should return social-auth-login session data (155 ms)
      ✓ should return social-auth-error session data (157 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (164 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (158 ms)
      ✓ should return pending status when session not ready (156 ms)
      ✓ should handle database errors gracefully (159 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (154 ms)
      ✓ should handle database connection errors (159 ms)
      ✓ should handle missing required fields in social data (152 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/unit/operator.test.js (10.752 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (318 ms)
      ✓ should require all mandatory fields (84 ms)
      ✓ should enforce email format validation (90 ms)
      ✓ should enforce unique email constraint (664 ms)
      ✓ should enforce unique username constraint (653 ms)
      ✓ should validate username format (78 ms)
      ✓ should validate shift time format (78 ms)
      ✓ should accept valid shift times (173 ms)
      ✓ should enforce quality score range (78 ms)
      ✓ should trim whitespace from string fields (167 ms)
      ✓ should convert email and username to lowercase (164 ms)
      ✓ should not allow role to be changed after creation (221 ms)
    Password Handling
      ✓ should hash password on save (192 ms)
      ✓ should verify correct password (243 ms)
      ✓ should reject incorrect password (258 ms)
      ✓ should not expose password in JSON output (169 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (223 ms)
      ✓ should lock account after 5 failed attempts (462 ms)
      ✓ should lock for 30 minutes (447 ms)
      ✓ should reset login attempts on successful login (293 ms)
      ✓ should reset attempts if lock has expired (259 ms)
      ✓ should correctly identify locked accounts (164 ms)
    Password Reset
      ✓ should generate password reset token (78 ms)
      ✓ should set password reset expiry to 30 minutes (77 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (79 ms)
        ✓ should correctly identify operator on shift during normal hours (79 ms)
        ✓ should correctly identify operator off shift (78 ms)
        ✓ should handle overnight shifts correctly (77 ms)
    Processing Statistics
      ✓ should update processing stats correctly (224 ms)
      ✓ should handle first order processing (208 ms)
      ✓ should update quality score with passing result (193 ms)
      ✓ should update quality score with failing result (200 ms)
    Static Methods
      findActive
        ✓ should find only active operators (272 ms)
      findOnShift
        ✓ should find only operators on shift (328 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (196 ms)
        ✓ should handle case-insensitive email search (241 ms)
        ✓ should return null for non-existent email (103 ms)
      findAvailableOperators
        ✓ should find operators with low order count (276 ms)
        ✓ should sort by current order count (280 ms)
        ✓ should respect limit parameter (944 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (160 ms)
      ✓ should update updatedAt on modification (293 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (255 ms)
      ✓ should not override provided operator ID (170 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:54:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2237:70)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:926:9)

      2243 |     });
      2244 |   } catch (error) {
    > 2245 |     console.error('Error updating operator profile:', error);
           |             ^
      2246 |     res.status(500).json({
      2247 |       success: false,
      2248 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2245:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:926:9)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query
        ✓ should handle database errors (59 ms)
      getAdministratorById
        ✓ should get administrator by ID
        ✓ should return 404 for non-existent administrator (1 ms)
        ✓ should return 400 for invalid ObjectId
      createAdministrator
        ✓ should create new administrator with valid data (54 ms)
        ✓ should return validation errors (1 ms)
        ✓ should handle duplicate email error (1 ms)
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (1 ms)
        ✓ should prevent self-deletion
        ✓ should prevent deletion of last administrator (1 ms)
      resetAdministratorPassword
        ✓ should reset administrator password (66 ms)
        ✓ should handle email sending failure (53 ms)
      getPermissions
        ✓ should return all available permissions
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator
        ✓ should handle non-existent operator (1 ms)
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment (1 ms)
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields (2 ms)
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

PASS tests/unit/w9ControllerDocuSign.test.js (7.814 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (290 ms)
      ✓ should return authorization URL if no valid token (119 ms)
      ✓ should handle service errors (117 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (114 ms)
      ✓ should handle missing authorization code (115 ms)
      ✓ should handle missing state parameter (114 ms)
      ✓ should display error page on token exchange failure (117 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (197 ms)
      ✓ should return existing envelope if one is in progress (170 ms)
      ✓ should require DocuSign authorization if no valid token (140 ms)
      ✓ should handle affiliate not found (165 ms)
      ✓ should handle envelope creation errors (148 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (743 ms)
      ✓ should handle mismatched envelope ID (212 ms)
      ✓ should handle affiliate with no W9 information (230 ms)
      ✓ should return local status if DocuSign API fails (183 ms)
      ✓ should clear envelope ID if declined (229 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (238 ms)
      ✓ should reject webhook with invalid signature (115 ms)
      ✓ should handle affiliate not found (142 ms)
      ✓ should process completed W9 without downloading document (228 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (114 ms)
      ✓ should return authorized false if no valid token (114 ms)
      ✓ should handle service errors (112 ms)
    Get W9 Signing Status
      ✓ should return W9 status for affiliate (122 ms)
      ✓ should include tax info for verified W9 (116 ms)
      ✓ should check DocuSign status for in-progress envelopes (114 ms)
      ✓ should handle affiliate not found (117 ms)
      ✓ should handle errors gracefully (116 ms)
    Cancel W9 Signing
      ✓ should cancel W9 signing successfully (204 ms)
      ✓ should handle no W9 signing in progress (141 ms)
      ✓ should handle affiliate not found (122 ms)
      ✓ should handle void envelope errors (155 ms)
    Resend W9 Request
      ✓ should resend W9 request successfully (142 ms)
      ✓ should handle affiliate not found (113 ms)
      ✓ should continue if voiding existing envelope fails (178 ms)
      ✓ should handle envelope creation errors (115 ms)
    Send W9 To Affiliate
      ✓ should send W9 to affiliate successfully (143 ms)
      ✓ should handle affiliate not found (118 ms)
      ✓ should prevent sending to affiliate with verified W9 (113 ms)
      ✓ should prevent sending to affiliate with submitted W9 (114 ms)
      ✓ should handle authorization errors (115 ms)
      ✓ should handle template configuration errors (115 ms)
      ✓ should handle general errors (115 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (26 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (16 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (2 ms)
      ✓ should handle password change (11 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method
    getAffiliateEarnings
      ✓ should return earnings for specified period (2 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (2 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics
      ✓ should handle empty data gracefully (1 ms)
    getPublicAffiliateInfo
      ✓ should return only public affiliate information
      ✓ should return 404 for non-existent affiliate
    Error handling
      ✓ should handle database connection errors (1 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

  console.error
    Get customer dashboard stats error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:688:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      498 |     });
      499 |   } catch (error) {
    > 500 |     console.error('Get customer dashboard stats error:', error);
          |             ^
      501 |     res.status(500).json({
      502 |       success: false,
      503 |       message: 'An error occurred while retrieving dashboard statistics'

      at Object.error [as getCustomerDashboardStats] (server/controllers/customerController.js:500:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:690:7)

  console.error
    Update payment info error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:792:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      552 |     });
      553 |   } catch (error) {
    > 554 |     console.error('Update payment info error:', error);
          |             ^
      555 |     res.status(500).json({
      556 |       success: false,
      557 |       message: 'An error occurred while updating payment information'

      at Object.error [as updatePaymentInfo] (server/controllers/customerController.js:554:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:794:7)

  console.error
    Update customer password error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:957:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      682 |     });
      683 |   } catch (error) {
    > 684 |     console.error('Update customer password error:', error);
          |             ^
      685 |     res.status(500).json({
      686 |       success: false,
      687 |       message: 'An error occurred while updating password'

      at Object.error [as updateCustomerPassword] (server/controllers/customerController.js:684:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:959:7)

  console.error
    Get customers for admin error: TypeError: Cannot read properties of undefined (reading 'search')
        at Object.search [as getCustomersForAdmin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/customerController.js:702:19)
        at Object.getCustomersForAdmin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1192:32)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      779 |     });
      780 |   } catch (error) {
    > 781 |     console.error('Get customers for admin error:', error);
          |             ^
      782 |     res.status(500).json({
      783 |       success: false,
      784 |       message: 'Failed to retrieve customers'

      at Object.error [as getCustomersForAdmin] (server/controllers/customerController.js:781:13)
      at Object.getCustomersForAdmin (tests/unit/customerController.test.js:1192:32)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Customer registration error: Error: Database save failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1259:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |     });
      153 |   } catch (error) {
    > 154 |     console.error('Customer registration error:', error);
          |             ^
      155 |     res.status(500).json({
      156 |       success: false,
      157 |       message: 'An error occurred during registration'

      at Object.error [as registerCustomer] (server/controllers/customerController.js:154:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:1278:7)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST999

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (15 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer (1 ms)
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion (1 ms)
      ✓ should handle deletion errors (25 ms)
      ✓ should return 404 for non-existent customer (1 ms)
    getCustomerDashboardStats
      ✓ should return dashboard stats for authorized customer (1 ms)
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access (5 ms)
      ✓ should allow affiliate access to their customer dashboard (1 ms)
      ✓ should handle database errors gracefully (2 ms)
    updatePaymentInfo
      ✓ should successfully update payment information (1 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should allow admin to update customer payment info
      ✓ should handle database errors (1 ms)
    updateCustomerPassword
      ✓ should successfully update password (1 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password length
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle missing new password (1 ms)
      ✓ should handle database errors (1 ms)
    getCustomersForAdmin
      ✓ should return all customers for admin (1 ms)
      ✓ should filter customers by search query
      ✓ should filter customers by affiliate (1 ms)
      ✓ should filter customers by active status
      ✓ should filter customers by inactive status
      ✓ should filter new customers with no orders
      ✓ should handle combined filters
      ✓ should handle database errors (9 ms)
      ✓ should ignore "all" filter values (1 ms)
    validation errors
      ✓ should return validation errors for registerCustomer
    error handling for registration
      ✓ should handle database save errors during registration (2 ms)
      ✓ should handle missing payment info gracefully (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1068:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1595:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)
      at Object.<anonymous> (tests/unit/operatorController.test.js:1597:7)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getOrderQueue
      ✓ should return available orders for operator workstation (2 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed
      ✓ should fail if order not found (1 ms)
      ✓ should handle database error during claim
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation
      ✓ should set processingCompleted when status is ready (9 ms)
      ✓ should handle database error (2 ms)
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check (1 ms)
    getMyOrders
      ✓ should return orders assigned to operator (1 ms)
    updateShiftStatus
      ✓ should update operator shift status
      ✓ should handle operator not found (1 ms)
      ✓ should end shift successfully
      ✓ should handle database error (1 ms)
    getPerformanceStats
      ✓ should return operator performance statistics
    getCustomerDetails
      ✓ should return customer details for an order
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition
    Error handling in existing functions
      ✓ should handle error in getOrderQueue (1 ms)
      ✓ should handle different filters in getOrderQueue
      ✓ should handle operator at max capacity in claimOrder (1 ms)
      ✓ should handle quality check failure in performQualityCheck
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats
      ✓ should handle operator not found in getPerformanceStats (1 ms)
      ✓ should handle customer not found in getCustomerDetails
      ✓ should handle filters in getMyOrders (1 ms)
    scanCustomer
      ✓ should scan customer and return current order (1 ms)
      ✓ should handle customer not found
    scanBag
      ✓ should redirect to scanCustomer (1 ms)
      ✓ should handle error in scanBag (37 ms)
    receiveOrder
      ✓ should receive order and update status (9 ms)
      ✓ should handle order not found
    markBagProcessed
      ✓ should mark bag as processed (1 ms)
      ✓ should update order status when all bags processed (262 ms)
    confirmPickup
      ✓ should confirm pickup and complete order (1 ms)
      ✓ should handle partial pickup
    getTodayStats
      ✓ should return today's operator statistics (1 ms)
      ✓ should handle no orders for today
    getWorkstationStatus
      ✓ should return workstation status for all workstations (1 ms)
      ✓ should handle database error (1 ms)
    Additional coverage tests
      ✓ should handle error in getMyOrders
      ✓ should handle different performance stat periods
      ✓ should handle error in getPerformanceStats (1 ms)
      ✓ should handle error in getCustomerDetails
      ✓ should handle no active order in scanCustomer (1 ms)
      ✓ should handle different scan actions in scanCustomer
      ✓ should handle affiliate lookup in scanCustomer (1 ms)
      ✓ should handle error in scanCustomer (7 ms)
      ✓ should handle error in receiveOrder (1 ms)
      ✓ should handle order not found in markBagProcessed
      ✓ should handle error in markBagProcessed (1 ms)
      ✓ should handle order not found in confirmPickup
      ✓ should handle error in confirmPickup
      ✓ should handle error in getTodayStats
      ✓ should handle markOrderReady (deprecated function) (1 ms)
      ✓ should handle markOrderReady with affiliate notification
      ✓ should handle errors in markOrderReady (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:375:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:378:7)

  console.error
    Error fetching administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:809:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |
      110 |   } catch (error) {
    > 111 |     console.error('Error fetching administrator:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'Failed to fetch administrator'

      at Object.error [as getAdministratorById] (server/controllers/administratorController.js:111:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:812:7)

  console.error
    Error changing administrator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:924:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      526 |
      527 |   } catch (error) {
    > 528 |     console.error('Error changing administrator password:', error);
          |             ^
      529 |     res.status(500).json({
      530 |       success: false,
      531 |       message: 'Failed to change password'

      at Object.error [as changeAdministratorPassword] (server/controllers/administratorController.js:528:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:927:7)

  console.error
    Error fetching operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:991:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      831 |
      832 |   } catch (error) {
    > 833 |     console.error('Error fetching operator:', error);
          |             ^
      834 |     res.status(500).json({
      835 |       success: false,
      836 |       message: 'Failed to fetch operator details'

      at Object.error [as getOperatorById] (server/controllers/administratorController.js:833:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:994:7)

  console.error
    Error resetting operator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1057:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1016 |
      1017 |   } catch (error) {
    > 1018 |     console.error('Error resetting operator password:', error);
           |             ^
      1019 |     res.status(500).json({
      1020 |       success: false,
      1021 |       message: 'Failed to reset operator password'

      at Object.error [as resetOperatorPassword] (server/controllers/administratorController.js:1018:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1059:7)

  console.error
    Error fetching operator analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1112:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1492 |
      1493 |   } catch (error) {
    > 1494 |     console.error('Error fetching operator analytics:', error);
           |             ^
      1495 |     res.status(500).json({
      1496 |       success: false,
      1497 |       message: 'Failed to fetch operator analytics'

      at Object.error [as getOperatorAnalytics] (server/controllers/administratorController.js:1494:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1114:7)

  console.error
    Error fetching affiliate analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1166:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1594 |
      1595 |   } catch (error) {
    > 1596 |     console.error('Error fetching affiliate analytics:', error);
           |             ^
      1597 |     res.status(500).json({
      1598 |       success: false,
      1599 |       message: 'Failed to fetch affiliate analytics'

      at Object.error [as getAffiliateAnalytics] (server/controllers/administratorController.js:1596:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1168:7)

  console.error
    Error exporting report: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1288:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1659 |
      1660 |   } catch (error) {
    > 1661 |     console.error('Error exporting report:', error);
           |             ^
      1662 |     res.status(500).json({
      1663 |       success: false,
      1664 |       message: 'Failed to export report'

      at Object.error [as exportReport] (server/controllers/administratorController.js:1661:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1291:7)

  console.error
    Error fetching affiliates list: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1334:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1712 |     });
      1713 |   } catch (error) {
    > 1714 |     console.error('Error fetching affiliates list:', error);
           |             ^
      1715 |     res.status(500).json({
      1716 |       success: false,
      1717 |       message: 'Failed to fetch affiliates list',

      at Object.error [as getAffiliatesList] (server/controllers/administratorController.js:1714:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1337:7)

  console.error
    Error updating operator stats: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1515:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2062 |     });
      2063 |   } catch (error) {
    > 2064 |     console.error('Error updating operator stats:', error);
           |             ^
      2065 |     res.status(500).json({
      2066 |       success: false,
      2067 |       message: 'An error occurred while updating operator statistics'

      at Object.error [as updateOperatorStats] (server/controllers/administratorController.js:2064:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1517:7)

  console.error
    Error getting available operators: TypeError: Operator.find(...).sort(...).limit is not a function
        at Object.limit [as getAvailableOperators] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2085:8)
        at Object.getAvailableOperators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1565:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2091 |     });
      2092 |   } catch (error) {
    > 2093 |     console.error('Error getting available operators:', error);
           |             ^
      2094 |     res.status(500).json({
      2095 |       success: false,
      2096 |       message: 'An error occurred while fetching available operators'

      at Object.error [as getAvailableOperators] (server/controllers/administratorController.js:2093:13)
      at Object.getAvailableOperators (tests/unit/administratorController.test.js:1565:37)

  console.error
    Error deleting operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1619:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2141 |     });
      2142 |   } catch (error) {
    > 2143 |     console.error('Error deleting operator:', error);
           |             ^
      2144 |     res.status(500).json({
      2145 |       success: false,
      2146 |       message: 'An error occurred while deleting the operator'

      at Object.error [as deleteOperator] (server/controllers/administratorController.js:2143:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1621:7)

  console.error
    Error resetting operator PIN: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1679:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2189 |     });
      2190 |   } catch (error) {
    > 2191 |     console.error('Error resetting operator PIN:', error);
           |             ^
      2192 |     res.status(500).json({
      2193 |       success: false,
      2194 |       message: 'An error occurred while resetting the PIN'

      at Object.error [as resetOperatorPin] (server/controllers/administratorController.js:2191:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1681:7)

  console.error
    Error fetching environment variables: TypeError: Cannot read properties of undefined (reading 'DEFAULT_ADMIN_EMAIL')
        at Object.DEFAULT_ADMIN_EMAIL [as getEnvironmentVariables] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2384:56)
        at Object.getEnvironmentVariables (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1727:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2425 |
      2426 |   } catch (error) {
    > 2427 |     console.error('Error fetching environment variables:', error);
           |             ^
      2428 |     res.status(500).json({
      2429 |       success: false,
      2430 |       message: 'Failed to fetch environment variables'

      at Object.error [as getEnvironmentVariables] (server/controllers/administratorController.js:2427:13)
      at Object.getEnvironmentVariables (tests/unit/administratorController.test.js:1727:37)

  console.error
    Error updating administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1847:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      295 |
      296 |   } catch (error) {
    > 297 |     console.error('Error updating administrator:', error);
          |             ^
      298 |     res.status(500).json({
      299 |       success: false,
      300 |       message: 'Failed to update administrator'

      at Object.error [as updateAdministrator] (server/controllers/administratorController.js:297:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1850:7)

  console.error
    Error deleting administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1884:44)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      367 |
      368 |   } catch (error) {
    > 369 |     console.error('Error deleting administrator:', error);
          |             ^
      370 |     res.status(500).json({
      371 |       success: false,
      372 |       message: 'Failed to delete administrator'

      at Object.error [as deleteAdministrator] (server/controllers/administratorController.js:369:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1886:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (2 ms)
      ✓ should handle errors (41 ms)
    createAdministrator
      ✓ should create administrator (1 ms)
      ✓ should handle validation errors (1 ms)
    updateAdministrator
      ✓ should update administrator
      ✓ should prevent self-deactivation
    deleteAdministrator
      ✓ should delete administrator (1 ms)
      ✓ should prevent self-deletion
    resetAdministratorPassword
      ✓ should reset password (1 ms)
    Operator Management
      ✓ createOperator should create new operator (1 ms)
      ✓ getOperators should return operators list (1 ms)
      ✓ updateOperator should update operator details
      ✓ deactivateOperator should deactivate operator (1 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (1 ms)
      ✓ getOrderAnalytics should return order analytics (1 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (1 ms)
      ✓ updateSystemConfig should update configuration
    getPermissions
      ✓ should return available permissions (1 ms)
    getAdministratorById
      ✓ should get administrator by id
      ✓ should handle not found (1 ms)
      ✓ should handle errors (2 ms)
    changeAdministratorPassword
      ✓ should change password successfully (1 ms)
      ✓ should reject incorrect current password
      ✓ should validate new password strength (1 ms)
      ✓ should handle errors (1 ms)
    getOperatorById
      ✓ should get operator by id (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (2 ms)
    resetOperatorPassword
      ✓ should reset operator password
      ✓ should handle operator not found (7 ms)
      ✓ should handle errors (2 ms)
    getOperatorAnalytics
      ✓ should get operator analytics
      ✓ should handle errors (1 ms)
    getAffiliateAnalytics
      ✓ should get affiliate analytics (1 ms)
      ✓ should handle errors (1 ms)
    exportReport
      ✓ should export orders report (1 ms)
      ✓ should export operators report (1 ms)
      ✓ should handle invalid report type
      ✓ should handle errors (2 ms)
    getAffiliatesList
      ✓ should get affiliates list
      ✓ should handle errors (2 ms)
    getSystemHealth
      ✓ should get system health status (1 ms)
      ✓ should handle database connection issues
      ✓ should handle errors (1 ms)
    updateOperatorStats
      ✓ should update operator stats with processing time (1 ms)
      ✓ should handle operator not found
      ✓ should validate processing time
      ✓ should handle errors (1 ms)
    getAvailableOperators
      ✓ should get available operators
      ✓ should handle errors (26 ms)
    deleteOperator
      ✓ should delete operator (1 ms)
      ✓ should prevent deletion with active orders (1 ms)
      ✓ should handle errors (1 ms)
    resetOperatorPin
      ✓ should reset operator PIN (6 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    getEnvironmentVariables
      ✓ should get environment variables (1 ms)
      ✓ should handle errors (2 ms)
    Additional coverage for getAdministrators
      ✓ should handle search with active filter (1 ms)
    Additional coverage for createAdministrator
      ✓ should handle duplicate email
      ✓ should handle password validation failure
    Additional coverage for updateAdministrator
      ✓ should handle administrator not found
      ✓ should handle database errors (1 ms)
    Additional coverage for deleteAdministrator
      ✓ should prevent deleting last super admin (1 ms)
      ✓ should handle database errors (1 ms)
    Additional coverage for resetAdministratorPassword
      ✓ should handle admin not found
      ✓ should handle weak password (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

  console.error
    Missing customer or affiliate data for welcome email

      902 |     // Validate inputs
      903 |     if (!customer || !affiliate) {
    > 904 |       console.error('Missing customer or affiliate data for welcome email');
          |               ^
      905 |       return;
      906 |     }
      907 |

      at Object.error [as sendCustomerWelcomeEmail] (server/utils/emailService.js:904:15)
      at Object.sendCustomerWelcomeEmail (tests/integration/emailService.integration.test.js:113:26)

  console.log
    Missing template: password-reset.html

      at Object.log (tests/integration/emailService.integration.test.js:162:19)

  console.log
    Missing template: order-confirmation.html

      at Object.log (tests/integration/emailService.integration.test.js:162:19)

  console.warn
    Email template placeholder [AFFILIATE_ID] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliateWelcomeEmail] (server/utils/emailService.js:336:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:212:9)

  console.log
    === EMAIL CONSOLE LOG ===

      at Object.log [as sendMail] (server/utils/emailService.js:18:17)

  console.log
    From: test@wavemax.promo

      at Object.log [as sendMail] (server/utils/emailService.js:19:17)

  console.log
    To: undefined

      at Object.log [as sendMail] (server/utils/emailService.js:20:17)

  console.log
    Subject: Welcome to WaveMAX Laundry Affiliate Program

      at Object.log [as sendMail] (server/utils/emailService.js:21:17)

  console.log
    HTML Preview: [HTML content logged to console]

      at Object.log [as sendMail] (server/utils/emailService.js:22:17)

  console.log
    ========================

      at Object.log [as sendMail] (server/utils/emailService.js:23:17)

  console.log
    Email sent: console-1751028058440

      at log (server/utils/emailService.js:154:13)

  console.error
    Missing customer or affiliate data for welcome email

      902 |     // Validate inputs
      903 |     if (!customer || !affiliate) {
    > 904 |       console.error('Missing customer or affiliate data for welcome email');
          |               ^
      905 |       return;
      906 |     }
      907 |

      at Object.error [as sendCustomerWelcomeEmail] (server/utils/emailService.js:904:15)
      at Object.sendCustomerWelcomeEmail (tests/integration/emailService.integration.test.js:231:26)

  console.error
    Missing customer or affiliate data for welcome email

      902 |     // Validate inputs
      903 |     if (!customer || !affiliate) {
    > 904 |       console.error('Missing customer or affiliate data for welcome email');
          |               ^
      905 |       return;
      906 |     }
      907 |

      at Object.error [as sendCustomerWelcomeEmail] (server/utils/emailService.js:904:15)
      at sendCustomerWelcomeEmail (tests/integration/emailService.integration.test.js:255:50)
          at Array.map (<anonymous>)
      at Object.map (tests/integration/emailService.integration.test.js:255:20)

  console.error
    Missing customer or affiliate data for welcome email

      902 |     // Validate inputs
      903 |     if (!customer || !affiliate) {
    > 904 |       console.error('Missing customer or affiliate data for welcome email');
          |               ^
      905 |       return;
      906 |     }
      907 |

      at Object.error [as sendCustomerWelcomeEmail] (server/utils/emailService.js:904:15)
      at sendCustomerWelcomeEmail (tests/integration/emailService.integration.test.js:255:50)
          at Array.map (<anonymous>)
      at Object.map (tests/integration/emailService.integration.test.js:255:20)

  console.error
    Missing customer or affiliate data for welcome email

      902 |     // Validate inputs
      903 |     if (!customer || !affiliate) {
    > 904 |       console.error('Missing customer or affiliate data for welcome email');
          |               ^
      905 |       return;
      906 |     }
      907 |

      at Object.error [as sendCustomerWelcomeEmail] (server/utils/emailService.js:904:15)
      at sendCustomerWelcomeEmail (tests/integration/emailService.integration.test.js:255:50)
          at Array.map (<anonymous>)
      at Object.map (tests/integration/emailService.integration.test.js:255:20)

FAIL tests/integration/emailService.integration.test.js
  Email Service Integration
    Email Service Configuration
      ✕ should load and configure the email service correctly (17 ms)
      ✕ should have all required email functions (6 ms)
    Console Email Provider
      ✕ should log affiliate welcome emails to console (6 ms)
      ✕ should log customer welcome emails to console (14 ms)
      ✕ should log password reset emails to console (3 ms)
    Email Template Verification
      ✓ should verify email templates directory exists (1 ms)
      ✓ should verify essential email templates exist (2 ms)
    Mailcow SMTP Configuration
      ✓ should handle Mailcow SMTP configuration (2 ms)
      ✓ should handle secure Mailcow SMTP on port 465 (3 ms)
    Error Handling
      ✓ should handle missing required fields gracefully (14 ms)
      ✕ should handle invalid email addresses (5 ms)
    Bulk Email Operations
      ✕ should handle multiple email sends efficiently (7 ms)

  ● Email Service Integration › Email Service Configuration › should load and configure the email service correctly

    expect(received).toBeDefined()

    Received: undefined

      42 |       expect(emailService.sendAffiliateWelcomeEmail).toBeDefined();
      43 |       expect(emailService.sendCustomerWelcomeEmail).toBeDefined();
    > 44 |       expect(emailService.sendPasswordResetEmail).toBeDefined();
         |                                                   ^
      45 |     });
      46 |
      47 |     it('should have all required email functions', () => {

      at Object.toBeDefined (tests/integration/emailService.integration.test.js:44:51)

  ● Email Service Integration › Email Service Configuration › should have all required email functions

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      62 |       
      63 |       // Password reset emails
    > 64 |       expect(typeof emailService.sendPasswordResetEmail).toBe('function');
         |                                                          ^
      65 |       expect(typeof emailService.sendAffiliatePasswordResetEmail).toBe('function');
      66 |       expect(typeof emailService.sendCustomerPasswordResetEmail).toBe('function');
      67 |       

      at Object.toBe (tests/integration/emailService.integration.test.js:64:58)

  ● Email Service Integration › Console Email Provider › should log affiliate welcome emails to console

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Subject:"
    Received
           1: "=== EMAIL CONSOLE LOG ==="
           2: "From:", "test@wavemax.promo"
           3: "To:", "test@example.com"

    Number of calls: 7

      101 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
      102 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'test@example.com');
    > 103 |       expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Subject:'));
          |                          ^
      104 |     });
      105 |
      106 |     it('should log customer welcome emails to console', async () => {

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:103:26)

  ● Email Service Integration › Console Email Provider › should log customer welcome emails to console

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "=== EMAIL CONSOLE LOG ==="

    Number of calls: 0

      113 |       await emailService.sendCustomerWelcomeEmail(customer);
      114 |
    > 115 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
          |                          ^
      116 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'customer@example.com');
      117 |     });
      118 |

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:115:26)

  ● Email Service Integration › Console Email Provider › should log password reset emails to console

    TypeError: emailService.sendPasswordResetEmail is not a function

      125 |       };
      126 |
    > 127 |       await emailService.sendPasswordResetEmail(resetData);
          |                          ^
      128 |
      129 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
      130 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'user@example.com');

      at Object.sendPasswordResetEmail (tests/integration/emailService.integration.test.js:127:26)

  ● Email Service Integration › Error Handling › should handle invalid email addresses

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "To:", "not-an-email"

    Number of calls: 0

      231 |       await emailService.sendCustomerWelcomeEmail(invalidCustomer);
      232 |       
    > 233 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'not-an-email');
          |                          ^
      234 |       
      235 |       consoleSpy.mockRestore();
      236 |     });

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:233:26)

  ● Email Service Integration › Bulk Email Operations › should handle multiple email sends efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      261 |       );
      262 |       
    > 263 |       expect(emailLogCalls.length).toBe(3);
          |                                    ^
      264 |       
      265 |       consoleSpy.mockRestore();
      266 |     });

      at Object.toBe (tests/integration/emailService.integration.test.js:263:36)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:40:59.065Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:40:59.393Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6ea185d1073ceb9d2cd66dc0bcb8acc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HGXwxlt0-iVMfnYWeVXDEVP7HA4nM1jh_-pM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a6ea185d1073ceb9d2cd66dc0bcb8acc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3c3_HVIuuh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.936 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:40:59.969Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:00.326Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:00.326Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:00.415Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-4b3543f8-4ee8-47ee-bfe5-dba28165cc4a",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 157.067 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:00.636Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:00.639Z"}
[0mGET /api/v1/payments/config [32m200[0m 3.305 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:01.446Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b9f9fc90fa8a779642f9afbb0127956',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3fk7qlsJ-q90EFgk_2r5eDirBm_cTHvineT8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b9f9fc90fa8a779642f9afbb0127956

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0D3OtYwp4K...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.282 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:01.586Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:01.877Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:01.878Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:01.980Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-a0b85752-9cc2-421a-a556-3e6f81aa9fd3",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 159.156 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:02.201Z"}
[32minfo[39m: Acquired callback handler for payment token mceswbuj-ylrgxgx: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:02.235Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:02.267Z","token":"mceswbuj-ylrgxgx"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.149 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.023Z"}
  console.log
    CSRF token generation: {
      sessionID: '3504941071a89eeb673d0c26c1a9b863',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XL8fySVV-C46DChvJSfdmO7ZPPR7Gz2OzL9o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3504941071a89eeb673d0c26c1a9b863

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TVkfGChVq2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.727 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.168Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.476Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.477Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.560Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-c154d316-ca7d-429e-bd89-ed4339133b33",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 150.257 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.773Z"}
[32minfo[39m: Acquired callback handler for payment token mceswd27-b2a6gtj: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.806Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.839Z","token":"mceswd27-b2a6gtj"}
[0mPOST /api/v1/payments/create-token [32m200[0m 65.566 ms - 283[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mceswd27-b2a6gtj {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:03.841Z"}
[0mGET /api/v1/payments/check-status/mceswd27-b2a6gtj [32m200[0m 29.212 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:04.627Z"}
  console.log
    CSRF token generation: {
      sessionID: '63db0a67837bd45751be252f1878cb8a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: He2GFrtA-yR-vjm5gfC5PdILF3nX0-80_140

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 63db0a67837bd45751be252f1878cb8a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aCmaTq2Nxm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.278 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:04.767Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.071Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.071Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.155Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-6714398c-ce5f-4ef6-ab93-2e00e2659a4d",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 149.118 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.364Z"}
[32minfo[39m: Acquired callback handler for payment token mcesweae-5xgnqks: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.400Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.430Z","token":"mcesweae-5xgnqks"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.156 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcesweae-5xgnqks {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.433Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcesweae-5xgnqks {
      sessionID: '63db0a67837bd45751be252f1878cb8a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A63db0a67837bd45751be252f1878cb8a.QCP2quUoxdMpHzGWmzauL0gY6mLFMDNXm4iZXxa1ECw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcesweae-5xgnqks: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.528Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:05.529Z","token":"mcesweae-5xgnqks"}
[0mPOST /api/v1/payments/cancel-token/mcesweae-5xgnqks [32m200[0m 95.969 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:06.279Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c790a1890781e6895d519577824e8ff9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tNEt4Ieq-SHe5RzIb5YNezOCKhG0q4yexP6o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c790a1890781e6895d519577824e8ff9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TeEkHV69eh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.878 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:06.419Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:06.724Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:06.724Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:06.810Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-eed94387-d5db-44a5-b1dc-ec7cd8bf4e28",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 159.395 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.036Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.039Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.041Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.044Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.046Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.048Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.052Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.055Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.057Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.059Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfkt-u0xbxgh: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.069Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfkw-62wadoz: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.072Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfky-td40n9o: {"callbackPath":"/api/v1/payments/callback/handler-3","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-3","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.074Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfl1-s2d24fi: {"callbackPath":"/api/v1/payments/callback/handler-4","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-4","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.075Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfl3-k1x769w: {"callbackPath":"/api/v1/payments/callback/handler-5","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-5","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.077Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfl6-x8gctjc: {"callbackPath":"/api/v1/payments/callback/handler-6","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-6","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.079Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfl9-la3i7us: {"callbackPath":"/api/v1/payments/callback/handler-8","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-8","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.086Z"}
[32minfo[39m: Acquired callback handler for payment token mceswflc-wjvdohq: {"callbackPath":"/api/v1/payments/callback/handler-7","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-7","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.089Z"}
[32minfo[39m: Acquired callback handler for payment token mceswfle-sn0kt89: {"callbackPath":"/api/v1/payments/callback/handler-9","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-9","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.092Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"customer0@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.100Z","token":"mceswfkt-u0xbxgh"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.271 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-3","customerEmail":"customer2@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.105Z","token":"mceswfky-td40n9o"}
[0mPOST /api/v1/payments/create-token [32m200[0m 63.532 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-4","customerEmail":"customer3@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.106Z","token":"mceswfl1-s2d24fi"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.268 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-5","customerEmail":"customer4@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.107Z","token":"mceswfl3-k1x769w"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"customer1@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.108Z","token":"mceswfkw-62wadoz"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.540 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 68.939 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-6","customerEmail":"customer5@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.111Z","token":"mceswfl6-x8gctjc"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.568 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-8","customerEmail":"customer6@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.126Z","token":"mceswfl9-la3i7us"}
[0mPOST /api/v1/payments/create-token [32m200[0m 74.790 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-7","customerEmail":"customer7@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.128Z","token":"mceswflc-wjvdohq"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-9","customerEmail":"customer8@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.131Z","token":"mceswfle-sn0kt89"}
[0mPOST /api/v1/payments/create-token [32m200[0m 73.295 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 73.686 ms - 283[0m
[32minfo[39m: Acquired callback handler for payment token mceswflg-hodhvcm: {"callbackPath":"/api/v1/payments/callback/handler-10","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-10","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.234Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-10","customerEmail":"customer9@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.263Z","token":"mceswflg-hodhvcm"}
[0mPOST /api/v1/payments/create-token [32m200[0m 204.868 ms - 285[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.276Z"}
[33mwarn[39m: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:07.304Z"}
[0mPOST /api/v1/payments/create-token [31m503[0m 27.759 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.031Z"}
  console.log
    CSRF token generation: {
      sessionID: '859d5944c4a529277cd0bdb7d57e6c91',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sPjrbzjZ-pH7ZGFs1IMxGl_Lel9WYsEr0bbw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 859d5944c4a529277cd0bdb7d57e6c91

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AHKPfSk6Lh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.964 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.167Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.459Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.459Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.543Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-86dc074c-895b-42d2-818b-a0503af97a6f",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 144.444 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.747Z"}
[32minfo[39m: Acquired callback handler for payment token mceswgwc-9vqv2r6: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.777Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"cancel@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.807Z","token":"mceswgwc-9vqv2r6"}
[0mPOST /api/v1/payments/create-token [32m200[0m 60.203 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mceswgwc-9vqv2r6 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.810Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mceswgwc-9vqv2r6 {
      sessionID: '859d5944c4a529277cd0bdb7d57e6c91',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A859d5944c4a529277cd0bdb7d57e6c91.wDd7XAwDE6zcZlxjGLCRIWMAvkCWN8fjt26N%2Fmkta88',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mceswgwc-9vqv2r6: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.896Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.896Z","token":"mceswgwc-9vqv2r6"}
[0mPOST /api/v1/payments/cancel-token/mceswgwc-9vqv2r6 [32m200[0m 86.493 ms - 73[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.898Z"}
[32minfo[39m: Acquired callback handler for payment token mceswh0j-9frnqn0: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.929Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"new@example.com","service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:08.961Z","token":"mceswh0j-9frnqn0"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.755 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:09.702Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df1fea909b3699498c40e26c06056823',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DUcsplYV-GHZF6AmjDf0q4SneqiAIWRnaksM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: df1fea909b3699498c40e26c06056823

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: elxAQbu2WI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.744 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:09.852Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:10.160Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:10.161Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:10.246Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-7955189a-a71b-44b2-b356-7cb954913991",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 138.751 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:10.445Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 30.014 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:11.199Z"}
PASS tests/integration/payment.test.js (13.109 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2075 ms)
    Payment Token Tests
      ✓ should create payment token (1576 ms)
      ✓ should check payment status (1604 ms)
      ✓ should cancel payment token (1653 ms)
    Payment Callback Tests
      ✓ should return 503 when all callback handlers are locked (1751 ms)
      ✓ should release callback handler when payment is cancelled (1669 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1500 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:11.977Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:12.779Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:13.118Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 339.678 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:14.176Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:14.359Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 183.668 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-48f7de8c-6a79-402e-aa6c-42fe6c12b377/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:14.373Z"}
[0mGET /api/v1/affiliates/AFF-48f7de8c-6a79-402e-aa6c-42fe6c12b377/customers [32m200[0m 112.813 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:15.391Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:15.533Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.712 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-6e869cfb-32a1-499f-98a6-d84996a0c104/customers?customerId=CUST-03bc1826-9cdb-41b6-9653-a0e3715033a4 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:15.625Z"}
[0mGET /api/v1/affiliates/AFF-6e869cfb-32a1-499f-98a6-d84996a0c104/customers?customerId=CUST-03bc1826-9cdb-41b6-9653-a0e3715033a4 [32m200[0m 108.736 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:16.626Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:16.770Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.748 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-2b8f5cfe-44e6-42ad-a193-6ed421019a64/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:16.774Z"}
[0mGET /api/v1/affiliates/AFF-2b8f5cfe-44e6-42ad-a193-6ed421019a64/customers?customerId=NONEXISTENT123 [32m200[0m 107.499 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:17.771Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:17.907Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 136.449 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c9032318-261b-43b4-9a65-8b618306e7d4/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:17.910Z"}
[0mGET /api/v1/affiliates/AFF-c9032318-261b-43b4-9a65-8b618306e7d4/customers [33m401[0m 0.995 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:18.814Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:18.959Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.718 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:18.963Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:19.104Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 141.671 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-33d191e3-1642-4d82-b392-559146eef355/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:19.107Z"}
[0mGET /api/v1/affiliates/AFF-33d191e3-1642-4d82-b392-559146eef355/customers [32m200[0m 108.510 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-33d191e3-1642-4d82-b392-559146eef355/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:19.219Z"}
[0mGET /api/v1/affiliates/AFF-33d191e3-1642-4d82-b392-559146eef355/dashboard [32m200[0m 133.105 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:20.249Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:20.389Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 140.884 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:21.300Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:21.444Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.502 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-feb753ac-a460-49c0-b7af-fd2e8c770621 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:21.448Z"}
[0mGET /api/v1/affiliates/AFF-feb753ac-a460-49c0-b7af-fd2e8c770621 [32m200[0m 60.880 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:22.407Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:22.552Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.387 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-471656d3-0267-4ac9-a11b-a4dee2dac8a4/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:22.556Z"}
[0mGET /api/v1/affiliates/AFF-471656d3-0267-4ac9-a11b-a4dee2dac8a4/dashboard [32m200[0m 133.539 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:23.584Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:23.726Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 142.614 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-52739dbc-96a0-4733-af66-1354fba840cd/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:23.730Z"}
[0mGET /api/v1/affiliates/AFF-52739dbc-96a0-4733-af66-1354fba840cd/customers?customerId=INVALID_ID [32m200[0m 110.148 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:24.745Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:24.892Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.049 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:24.897Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 28.538 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:25.829Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:41:25.999Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 170.154 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-7222b1ac-bc5e-457f-b106-31115ff2431a/customers {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:26.002Z"}
[0mGET /api/v1/affiliates/AFF-7222b1ac-bc5e-457f-b106-31115ff2431a/customers [32m200[0m 107.220 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (15.537 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (1758 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1204 ms)
      ✓ should filter customers by customerId when provided (1249 ms)
      ✓ should return empty array when filtering by non-existent customerId (1143 ms)
      ✓ should require authentication to access customer list (1036 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1440 ms)
      ✓ should handle URL parameters correctly throughout the flow (1042 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1106 ms)
      ✓ should load dashboard statistics correctly (1183 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1151 ms)
      ✓ should handle invalid affiliate ID (1093 ms)
      ✓ should handle database connection issues gracefully (1178 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:41:27.627Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.error
    Failed to connect to test database: MongooseServerSelectionError: Server selection timed out after 5000 ms
        at _handleConnectionErrors (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/connection.js:1165:11)
        at NativeConnection.openUri (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/connection.js:1096:11)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/setup.js:45:5) {
      errorLabelSet: Set(0) {},
      reason: TopologyDescription {
        type: 'ReplicaSetNoPrimary',
        servers: Map(3) {
          'ac-hvmzbqy-shard-00-01.yiy75zr.mongodb.net:27017' => [ServerDescription],
          'ac-hvmzbqy-shard-00-00.yiy75zr.mongodb.net:27017' => [ServerDescription],
          'ac-hvmzbqy-shard-00-02.yiy75zr.mongodb.net:27017' => [ServerDescription]
        },
        stale: false,
        compatible: true,
        heartbeatFrequencyMS: 10000,
        localThresholdMS: 15,
        setName: 'atlas-sbk1m3-shard-0',
        maxElectionId: null,
        maxSetVersion: null,
        commonWireVersion: 0,
        logicalSessionTimeoutMinutes: 30
      },
      code: undefined,
      cause: TopologyDescription {
        type: 'ReplicaSetNoPrimary',
        servers: Map(3) {
          'ac-hvmzbqy-shard-00-01.yiy75zr.mongodb.net:27017' => [ServerDescription],
          'ac-hvmzbqy-shard-00-00.yiy75zr.mongodb.net:27017' => [ServerDescription],
          'ac-hvmzbqy-shard-00-02.yiy75zr.mongodb.net:27017' => [ServerDescription]
        },
        stale: false,
        compatible: true,
        heartbeatFrequencyMS: 10000,
        localThresholdMS: 15,
        setName: 'atlas-sbk1m3-shard-0',
        maxElectionId: null,
        maxSetVersion: null,
        commonWireVersion: 0,
        logicalSessionTimeoutMinutes: 30
      }
    }

      55 |     await fs.mkdir(uploadsDir, { recursive: true });
      56 |   } catch (error) {
    > 57 |     console.error('Failed to connect to test database:', error);
         |             ^
      58 |     throw error;
      59 |   }
      60 | });

      at Object.error (tests/setup.js:57:13)

FAIL tests/integration/affiliate.test.js (95.412 s)
  Affiliate API
    ✕ should register a new affiliate (10001 ms)
    ✕ should get affiliate profile (10001 ms)
    ✕ should update affiliate profile (10001 ms)
    ✕ should login affiliate (10001 ms)
    ✕ should get affiliate's customers list (10001 ms)
    ✕ should get affiliate's orders (10001 ms)
    ✕ should get affiliate's earnings/transactions (10001 ms)
    ✕ Delete all affiliate data (development only) (10001 ms)
    ✕ Reject delete in production environment (10001 ms)
    ○ skipped should update payment information
    ○ skipped should handle commission-related endpoints

  ● Affiliate API › should register a new affiliate

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should register a new affiliate

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate profile

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate profile

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should update affiliate profile

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should update affiliate profile

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should login affiliate

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should login affiliate

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's customers list

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's customers list

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's orders

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's orders

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's earnings/transactions

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's earnings/transactions

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should update payment information

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should handle commission-related endpoints

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Delete all affiliate data (development only)

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Delete all affiliate data (development only)

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › Reject delete in production environment

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Reject delete in production environment

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

PASS tests/integration/adminCreation.test.js (5.453 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (372 ms)
      ✓ should create admin with next sequential ID when admins exist (313 ms)
      ✓ should handle admin creation with all permissions (198 ms)
      ✓ should handle admin creation with partial permissions (198 ms)
    Admin Model Validation
      ✓ should require email field (168 ms)
      ✓ should save admins with different adminIds successfully (293 ms)
      ✓ should save admins with different emails successfully (286 ms)
    Password Handling
      ✓ should hash password before saving (200 ms)
      ✓ should validate password with verifyPassword method (326 ms)
    Admin Query Operations
      ✓ should find admin by adminId (501 ms)
      ✓ should find admin by email (356 ms)
      ✓ should find active admins only (351 ms)
      ✓ should find admins with specific permissions (405 ms)
      ✓ should get last admin for ID generation (336 ms)
    Email Integration
      ✓ should call email service after admin creation (199 ms)
      ✓ should handle email service failures gracefully (220 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:08.730Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:09.538Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 61.755 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:09.606Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:09.608Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 2.392 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:09.832Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"env_123456","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685e91dd2e26b065004efa1d","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T12:43:09.931Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 99.429 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:09.964Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 91.529 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:10.061Z"}
[32minfo[39m: W9 status updated for affiliate AFF000001: {"details":{"envelopeId":"env_123456","event":"envelope-completed","status":"completed","success":true},"docusignStatus":"completed","envelopeId":"env_123456","performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"system@docusign","userName":"DocuSign System","userType":"system"},"service":"wavemax-affiliate","status":"verified","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T12:43:10.127Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 66.750 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:11.135Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 59.903 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:12.067Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 89.088 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:13.078Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"new_env_after_refresh","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685e91e12e26b065004efaae","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-27T12:43:13.170Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 92.530 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:14.017Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T12:43:14.080Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 63.392 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:14.923Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-27T12:43:14.983Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 60.496 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:15.823Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:15.825Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.858 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:16.700Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 57.629 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:17.626Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 28.239 ms - 65[0m
PASS tests/integration/docusignW9.test.js (10.463 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (1999 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (937 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (1012 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (968 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (904 ms)
      ✓ should handle network errors during envelope creation (903 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (837 ms)
      ✓ should prevent accessing another affiliates envelope status (963 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (863 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:19.159Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:20.566Z"}
[0mGET /api/v1/system/config/public [32m200[0m 31.914 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:21.854Z"}
[0mGET /api/v1/system/config/public [32m200[0m 29.854 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:23.056Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 29.613 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:24.213Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 28.454 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:25.446Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 28.041 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:26.621Z"}
[0mGET /api/v1/system/config [32m200[0m 62.037 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:27.803Z"}
[0mGET /api/v1/system/config [33m401[0m 1.344 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:28.943Z"}
[0mGET /api/v1/system/config [33m403[0m 30.886 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:30.088Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f6c207d508482799aeae023b743b495c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8unosx7F-2v3tgoZDj-kyBansLo8JM2ic560

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f6c207d508482799aeae023b743b495c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dMWj8ikFLf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.725 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:30.228Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'f6c207d508482799aeae023b743b495c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af6c207d508482799aeae023b743b495c.JBS8X2wOY4Ob9uXUuhQh%2FcQ1zQRbLXYHEr3SrDffRls',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 124.759 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:31.591Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dab32286c774dcc20255f46728e35ee2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BhaFjXOi-eV-1EHGKXSDYgoI9pKYo-0EkmfM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dab32286c774dcc20255f46728e35ee2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Va6qpNK3eL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.969 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:31.719Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'dab32286c774dcc20255f46728e35ee2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adab32286c774dcc20255f46728e35ee2.Izr9qnmm%2BSzhXeKyYdG3eVhZoEyekcqV7b9U%2Bg9KMyA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 96.064 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:32.931Z"}
  console.log
    CSRF token generation: {
      sessionID: '1d18a473e3a72c135c9b5ede7fa32fe6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QD157HgA-4o56YYk7yQVrv6RyTu9r__K_vRk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1d18a473e3a72c135c9b5ede7fa32fe6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7VTVNGaPza...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.449 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:33.060Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '1d18a473e3a72c135c9b5ede7fa32fe6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1d18a473e3a72c135c9b5ede7fa32fe6.26z6PhP08GmkakMJ6SIX0FO4Wy8cUMH5ZdWekKBvCj0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 86.655 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:34.294Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e0c8373ebcddcbfaf30fabf215aa0fdb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dGwZMYnA-Pdwhij7DJToHlxiruaip99SSYC4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e0c8373ebcddcbfaf30fabf215aa0fdb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k614MkCy6b...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.449 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:34.455Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: 'e0c8373ebcddcbfaf30fabf215aa0fdb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae0c8373ebcddcbfaf30fabf215aa0fdb.70cslmVdixtProVSCqUlP3gS8HCAqh3w%2Fm5d46lBQ84',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 89.600 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:35.769Z"}
  console.log
    CSRF token generation: {
      sessionID: '634e2f30c2aa1d2e27552b0268aa6d59',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7iA7zQH6-QoN8BNUFIizEwgY17GeoyYkkrk8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 634e2f30c2aa1d2e27552b0268aa6d59

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Xt7bsr5Dx_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.202 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:35.981Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c04ad9595f44f1c0926ba5e224db815',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dSo967aR-86m5hi-6Eecl6zd4DfyLBhoQ5RI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c04ad9595f44f1c0926ba5e224db815

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bn3HFbFC14...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.218 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:35.995Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '5c04ad9595f44f1c0926ba5e224db815',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5c04ad9595f44f1c0926ba5e224db815.%2FymJ3YeKhElbGQRqn91V7dcO6ANzdmoUKcTIe6BWSeE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 69.579 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:37.313Z"}
  console.log
    CSRF token generation: {
      sessionID: '483f189ceff00eef2047b26ecc37934b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2gyMvmkl-8fnSE6cyRAUlp0eGNEsvnD_LZJA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 483f189ceff00eef2047b26ecc37934b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cRlCAt15fH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.141 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:37.359Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '483f189ceff00eef2047b26ecc37934b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A483f189ceff00eef2047b26ecc37934b.uuzb8dEKIUKt2P17FSqyuB3I2ddqwW4hFcHx14a8SCQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 338.335 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:38.844Z"}
  console.log
    CSRF token generation: {
      sessionID: '37cf6d79741f9a6bb37e4ee23865370f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S2RmpWT0-md7XSIt7DsRFEBhwNrpEnW52LA8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 37cf6d79741f9a6bb37e4ee23865370f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6M_UGPeYao...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.133 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:38.912Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '37cf6d79741f9a6bb37e4ee23865370f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A37cf6d79741f9a6bb37e4ee23865370f.fWIJE82ayEidQwPt0OVf2ZDp6xRXZRMvW%2BUAn4XBPG8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 337.899 ms - 48[0m
PASS tests/integration/systemConfig.test.js (23.013 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1282 ms)
        ✓ should not return private configurations (1243 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1150 ms)
        ✓ should return 404 for non-existent config (1205 ms)
        ✓ should return 404 for private config accessed via public endpoint (1213 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1178 ms)
        ✓ should return 401 without authentication (1122 ms)
        ✓ should return 403 for non-admin users (1169 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1486 ms)
        ✓ should validate value based on data type (1356 ms)
        ✓ should validate value against min/max constraints (1352 ms)
        ✓ should not allow updating non-editable configs (1408 ms)
        ✓ should require system_config permission (1589 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1561 ms)
        ✓ should not overwrite existing configurations (1621 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1338 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:42.609Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:43.150Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aaf09d7c556bcb18797cd554b67dfc5c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NTq8kYwP-L1PcyPixqAmpdVomFiCFwRpkzRc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aaf09d7c556bcb18797cd554b67dfc5c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: S4JTQZPNAw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.105 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:43.163Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.798 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:44.205Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b02b42eb6e837dadb50d1c4f721b6c32',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WR7R3iqt-rS82rvLmbJw-ZtJKVtUh6-02V_E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b02b42eb6e837dadb50d1c4f721b6c32

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2X0_5VlctV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.507 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:44.954Z"}
  console.log
    CSRF token generation: {
      sessionID: '50a15af22f94526b5bbde273057f8b40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VwcXXXDm-fwAuVlj_oeh0-MjypyXAZZEh7H8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50a15af22f94526b5bbde273057f8b40

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wSjCM2COOg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.098 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:45.699Z"}
  console.log
    CSRF token generation: {
      sessionID: '18b510a2b63e5bb9176fd543af56d82d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4TijzR9q-RAIbDFfWlf9JU7_-fHezSrqb6ac

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 18b510a2b63e5bb9176fd543af56d82d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cOF4QLPbIV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.526 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:45.716Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.817 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:46.475Z"}
  console.log
    CSRF token generation: {
      sessionID: '14b49d8c6a20372f163b68a025132df7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g4VdRcsE-OC2M7czMmXd247FVkyi0tF3Qrno

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 14b49d8c6a20372f163b68a025132df7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aO9J_bO3R-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.803 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:46.485Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-c05a57da-0f44-48bc-aed5-d00fbb3afc2f","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:43:46.692Z","userId":"685e92024295c0e6d5319298","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 207.670 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:47.477Z"}
  console.log
    CSRF token generation: {
      sessionID: '0dc8f55ecb5083cfa495005cbf08627b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i9nXuPkz-0z3UFiDwvYgty0nGHBuu66YPQjg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0dc8f55ecb5083cfa495005cbf08627b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Q28YLzUvdI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.305 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:47.485Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.152 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:48.231Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a73b7f483a2b2f3a35d6e2fe3d0ccad0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LU1PGFkN-MI5PTHLqDqLdEADl1wEmIpRjF90

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a73b7f483a2b2f3a35d6e2fe3d0ccad0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FpI4XLZUmb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.919 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:48.244Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.936 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:48.986Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f3b8f753a957c4698cd1ccc0dd882463',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6hoEchY8--3XZR0XVj6j-vqCCqs-LKl0LjFg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f3b8f753a957c4698cd1ccc0dd882463

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bRZS8IN3Pu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.921 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:49.087Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.799 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:49.834Z"}
  console.log
    CSRF token generation: {
      sessionID: '87a7314bd73e89a4106adb30c984706e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nbiUgshJ-DUk5qo-NduzFjGBkxYCaBXnL2c8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87a7314bd73e89a4106adb30c984706e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lvn1n-w_tp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.355 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:49.844Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e9c2960f5e21fe5edf6f958cdd9b9738',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VEqjr4HG-tkyQYbDXpNs2NKG-q9_3BL1suv8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e9c2960f5e21fe5edf6f958cdd9b9738

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dBz2Wo83jt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.347 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:49.954Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'e9c2960f5e21fe5edf6f958cdd9b9738',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae9c2960f5e21fe5edf6f958cdd9b9738.qiFEZ5mKeJrTYt3C2Abj2IATQIPcVAYJKzWG1m%2B3xSI',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T12:43:50.045Z","userId":"685e92054295c0e6d5319313","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 91.036 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:50.831Z"}
  console.log
    CSRF token generation: {
      sessionID: '96e863b8a7a80f5673a63d812e54e0bb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EfKgXHBS-JIDGgQaZzf8NvCsDg5U2jk808Mg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96e863b8a7a80f5673a63d812e54e0bb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DltKuD8QAQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.287 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:50.846Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5386e3b3ada5d583c297584709d635e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qYQYO3mS-0SmH1MgUNQyHBdZizIIPhkMif08

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d5386e3b3ada5d583c297584709d635e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OADEdScInr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.574 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:51.016Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'd5386e3b3ada5d583c297584709d635e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad5386e3b3ada5d583c297584709d635e.%2BfQ42eJagqlcNdwCCdXVi2OatPpYbRT5V7OAVm4%2FXpo',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 31.324 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:51.797Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d4c650b8a1bc380d33b924d25d29e61',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9pnrmEsU-SAw_X1BKqV8-BltTojxiFCiVx04

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4d4c650b8a1bc380d33b924d25d29e61

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vnycgBuf5k...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.902 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:51.806Z"}
  console.log
    CSRF token generation: {
      sessionID: '257bbd5e2ca9d8ac90cad9c16cfcad76',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: o3YgKiAv-oG1BTzVmP0EYmU3PS8fEWI9XVgs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 257bbd5e2ca9d8ac90cad9c16cfcad76

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 44sY7CSSC_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.803 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:51.898Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '257bbd5e2ca9d8ac90cad9c16cfcad76',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A257bbd5e2ca9d8ac90cad9c16cfcad76.zRFQ78YMeUT1npzZSzycPzv3NmFth3V6q94Ha2toJZ0',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:43:51.991Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-b94dcb60-9013-45ca-91c4-3c49abc3d64d","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T12:43:51.992Z","userId":"685e92074295c0e6d5319358","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 93.317 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:52.800Z"}
  console.log
    CSRF token generation: {
      sessionID: '67b9d4c1fa39162f8cb4dfd6fcc154e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g0ZTrDvu-fmJd83dKlwb-4-NAXZ9oNtX6Tos

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 67b9d4c1fa39162f8cb4dfd6fcc154e9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oMDahXpDBO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.203 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:52.811Z"}
  console.log
    CSRF token generation: {
      sessionID: '5bf0f31c086a9bc29fc891ccb53adefc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5qRyg0BX-lk_qc55y5BrbEnal5aySY38Lze0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5bf0f31c086a9bc29fc891ccb53adefc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uaj-JkNWdH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.446 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:52.904Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '5bf0f31c086a9bc29fc891ccb53adefc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5bf0f31c086a9bc29fc891ccb53adefc.A4NVcWXPoXXQgLoMbNmVPeB3eiwaA4Q9Lr%2FzFMx4Ud4',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:43:53.027Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-3e2cc73a-1cf4-4305-8748-3e1f782a7799","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-27T12:43:53.028Z","userId":"685e92084295c0e6d531937c","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 123.608 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:53.818Z"}
  console.log
    CSRF token generation: {
      sessionID: '336c26754eb0d0afdc67b2be6080a230',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 50pUX04a-7wk_QPQL8g26aDKoNFbp2xh-2Lk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 336c26754eb0d0afdc67b2be6080a230

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -LTUSLVAXi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.585 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:53.827Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.817 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:54.606Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df7788ca5a11c12a37c0852fba93a91b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3zJGSksT-v7xDlYmhaCdcYSeBeJQhg8Cklhw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: df7788ca5a11c12a37c0852fba93a91b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UZevoBX8NE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.706 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:54.617Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.587 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:55.373Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dbdf1d719f8a4c9e0f334c9e67817a71',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OzPMETOs-B0Cs_1qb1zVas216u5Yey7bA3y4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dbdf1d719f8a4c9e0f334c9e67817a71

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hTayG1lD46...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.870 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:55.385Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.934 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:56.134Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c5c8f85ae91d63280a42a198d09ef22',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DxDP7gLH-eROfDWzmzibAYFhXW8Lt2VkwhDg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c5c8f85ae91d63280a42a198d09ef22

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: t2di2VOsaw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.566 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:56.143Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1439 |
      1440 |   } catch (error) {
    > 1441 |     console.error('Social registration error:', error);
           |             ^
      1442 |     res.status(500).json({
      1443 |       success: false,
      1444 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1441:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 83.884 ms - 49[0m
PASS tests/integration/socialAuth.test.js (15.306 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (1280 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (750 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (745 ms)
      ✓ should return 404 for unconfigured OAuth providers (775 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (1003 ms)
      ✓ should reject social registration with invalid social token (753 ms)
      ✓ should reject social registration with missing required fields (756 ms)
      ✓ should prevent duplicate social registrations (847 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (997 ms)
      ✓ should reject linking if social account already exists (966 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (1001 ms)
      ✓ should update social account tokens on login (1016 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (792 ms)
      ✓ should handle expired social tokens (766 ms)
      ✓ should sanitize social profile data (760 ms)
      ✓ should handle database errors during social registration (834 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:57.855Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:43:59.400Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-53dcd80b-0945-4ca5-acea-73f51e809bb6

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 96.285 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:00.966Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-116a1d41-129e-41f3-a31f-491ce920269d

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 92.830 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:03.698Z"}
[0mGET /api/v1/quickbooks/vendors [33m404[0m 55.168 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:07.834Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 115.386 ms - 318[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:09.276Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=json [32m200[0m 114.163 ms - 955[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:10.768Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m400[0m 28.085 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:12.399Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2026-06-27&endDate=2026-06-27 [33m404[0m 328.932 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:15.309Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 475.040 ms - 169[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:18.310Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 [33m400[0m 31.359 ms - 81[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:21.102Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 [33m400[0m 306.285 ms - 76[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:24.720Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 [33m404[0m 296.905 ms - 49[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:27.649Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-a81b9803-f3fa-49cb-a385-e63ab730d32a

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 558.939 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:28.210Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 85.787 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:28.299Z"}
[0mGET /api/v1/quickbooks/history [32m200[0m 104.574 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:30.951Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-e0b7ca17-f937-45e0-b008-3aab44940334

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 90.574 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:31.044Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 82.707 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?type=vendor {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:31.134Z"}
[0mGET /api/v1/quickbooks/history?type=vendor [32m200[0m 87.362 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:32.547Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-a9d3d379-1334-4009-bcba-1aaecabf1a68

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 91.101 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:32.641Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 84.735 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:32.729Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-452f96d6-2f39-4a84-a052-3252950f4a80

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 320.183 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:33.051Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-55434803-625b-4ca1-8a90-88404d693877

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 325.813 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:33.380Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-1d25db46-392c-4ff2-aa7e-2578601998b3

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 90.304 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:33.472Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-db5d68f4-d4e5-4944-b64d-177d9b3a38c5

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 90.814 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:33.566Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-3642d843-297d-4f4c-ae4c-18f35e330b0a

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 804.730 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?limit=3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:34.373Z"}
[0mGET /api/v1/quickbooks/history?limit=3 [32m200[0m 91.418 ms - -[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:36.311Z"}
[0mGET /api/v1/quickbooks/vendors [33m401[0m 1.136 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:36.315Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m401[0m 0.779 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:36.317Z"}
[0mGET /api/v1/quickbooks/commission-detail [33m401[0m 0.717 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:36.319Z"}
[0mGET /api/v1/quickbooks/history [33m401[0m 0.706 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:37.663Z"}
  console.log
    Authorization failed for path: /vendors - User role: affiliate Allowed roles: [ 'administrator' ]

      at log (server/middleware/auth.js:184:15)

[0mGET /api/v1/quickbooks/vendors [33m403[0m 265.589 ms - 54[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:39.776Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-080edb03-ccb7-4abb-8ff9-2b377376dbc6

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 342.070 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:43.391Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-20&endDate=2025-06-27&format=csv [32m200[0m 394.844 ms - 318[0m
PASS tests/integration/quickbooks.test.js (49.423 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✓ should export verified vendors as CSV (2216 ms)
      ✓ should export vendors as JSON (2222 ms)
      ✓ should handle no verified vendors gracefully (4074 ms)
    Payment Summary Export
      ✓ should export payment summary for date range as CSV (2017 ms)
      ✓ should export payment summary as JSON with correct aggregations (1482 ms)
      ✓ should require date parameters (1380 ms)
      ✓ should handle empty date range (2913 ms)
    Commission Detail Export
      ✓ should export commission details for specific affiliate (3023 ms)
      ✓ should require all parameters (2338 ms)
      ✓ should reject unverified affiliate export (3584 ms)
      ✓ should handle non-existent affiliate (3348 ms)
    Export History
      ✓ should retrieve export history (3379 ms)
      ✓ should filter export history by type (1839 ms)
      ✓ should limit export history results (3743 ms)
    Security and Permissions
      ✓ should require admin authentication for all QuickBooks endpoints (1345 ms)
      ✓ should not allow affiliate access to QuickBooks exports (2090 ms)
    CSV Format Validation
      ✓ should generate QuickBooks-compatible vendor CSV (2927 ms)
      ✓ should generate QuickBooks-compatible payment CSV (3906 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:47.452Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:52.892Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aa803a4af8fd3340c2b1e58903387461',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lsTSBrmj-zIygCt72VlFkZIx4aqhrqKNqwJU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aa803a4af8fd3340c2b1e58903387461

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YO9SzrgGKQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.524 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:53.607Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-f3bb9aef-c423-42b2-8b2b-1a7c4ba79636

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 198.092 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:54.644Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd93fc888860dd174be29ce8c51ef666d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pG6t9LqR-uXrT9FMpSj3Fl5csZT0Kz72klUA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d93fc888860dd174be29ce8c51ef666d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W8Vw4SD7gF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.540 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:54.922Z"}
[0mPOST /api/v1/customers/register [33m400[0m 28.979 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:55.695Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e40b028202f07a4202b784d32b990911',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MSkNiNzb-tm8PI80O9mQ1bzkAjJTbjBrkuIY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e40b028202f07a4202b784d32b990911

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oRuyodFh5V...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.466 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:55.969Z"}
[0mPOST /api/v1/customers/register [33m400[0m 54.695 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:56.752Z"}
  console.log
    CSRF token generation: {
      sessionID: '2ae09ea3c5743a773dd2afdb1a7f77e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MmhOP6b2-xhvzXiMCt6_3bibPbo-LPtHHnok

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2ae09ea3c5743a773dd2afdb1a7f77e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VsX1b7g2Gl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.182 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:57.007Z"}
[0mPOST /api/v1/customers/register [33m400[0m 55.923 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:57.815Z"}
  console.log
    CSRF token generation: {
      sessionID: '332d0963b229ecb1db03f954c949a0bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MoZqKswk-8GO56x6OUJAAzqpNo_GeBA6cX-E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 332d0963b229ecb1db03f954c949a0bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rR_MlFcb1g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.909 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:58.081Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 84.346 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:58.890Z"}
  console.log
    CSRF token generation: {
      sessionID: '1287c04b1ae581320b42979d7a270a14',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aqcQfCOB-LVQIsTpsNkDL3i6pJZaaCVkoIqg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1287c04b1ae581320b42979d7a270a14

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C2HANqAfUn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.951 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:59.159Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 81.064 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:44:59.971Z"}
  console.log
    CSRF token generation: {
      sessionID: '97f134e93d66205b466c4bd655a45897',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qb8CO5tx-f3i6pQZi0wFamK8R99RlFP9N6YU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 97f134e93d66205b466c4bd655a45897

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A4VoePHEzP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.914 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:00.240Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 54.728 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:01.022Z"}
  console.log
    CSRF token generation: {
      sessionID: '57acff9259535b2e975baef630145f71',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tG1lOgAS-tWnwsjBdnOf-HDHnIo4sKgD6X4g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 57acff9259535b2e975baef630145f71

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VafLgp7m4j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.685 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:01.287Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 54.955 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:02.074Z"}
  console.log
    CSRF token generation: {
      sessionID: '807c2244e860188f57cc5d3199d35e31',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zRW80H1E-Ab6RANlAX5C0FljP3llreRwmAlc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 807c2244e860188f57cc5d3199d35e31

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xYNmbryyiB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.093 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:02.340Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 88.212 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:03.198Z"}
  console.log
    CSRF token generation: {
      sessionID: '78803914172c13bfa43e5574729f9760',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 65gWiVFD-HNwCmqD6oUKVex_5C2-5XDJ92P0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 78803914172c13bfa43e5574729f9760

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SdbDyj118w...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.374 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:03.474Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 82.974 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:04.309Z"}
  console.log
    CSRF token generation: {
      sessionID: '27fa3f449da35d83f0cc91b7ee3e8126',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GlocnRrC-aBAm_Q8YJHYHFKHuWChIze2DMPg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 27fa3f449da35d83f0cc91b7ee3e8126

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Mno-QduUnm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.510 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:04.608Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 109.654 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:05.465Z"}
  console.log
    CSRF token generation: {
      sessionID: '0c389e55d5332b87d5ee949d2450c556',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ztm8r3OG-5Ne7UlUcMZz2L_t6VPyryoSQEks

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0c389e55d5332b87d5ee949d2450c556

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2_gHplWFdx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.378 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:05.783Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 109.885 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:06.628Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f420e0ec683fcf8dbd08b60668c74735',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Opv6FJTl--VUt6q5YgBYqlpjYQe66KfjdJrU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f420e0ec683fcf8dbd08b60668c74735

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: r3ZhIedshU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.606 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:06.887Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'f420e0ec683fcf8dbd08b60668c74735',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af420e0ec683fcf8dbd08b60668c74735.b2iToGeVnGGmE5F6iNH41akw68WBUO6sXe4bdm4631o',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 193.615 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:07.083Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 148.711 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:07.956Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fa4a9e79595452f0d182ac7096416648',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9bJw16Xf-1rL0tI3UgqoPMLW6NiLZ5Q2dW_I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fa4a9e79595452f0d182ac7096416648

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: je7p4mwrBQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.945 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:08.239Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'fa4a9e79595452f0d182ac7096416648',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afa4a9e79595452f0d182ac7096416648.EqZ3jGr91%2FGED6xx0bTw6Or3so%2F662iVJJEkJwkTJ%2Fw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 109.245 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:09.067Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e61b3f9f14a0ba4e82db076e105c2322',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DalSVUTv-_WXqXgQCT8cfqmEqbnXsVY3G9ko

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e61b3f9f14a0ba4e82db076e105c2322

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AOswpRIwF1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.115 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:09.326Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'e61b3f9f14a0ba4e82db076e105c2322',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae61b3f9f14a0ba4e82db076e105c2322.efrNXgf0YPz4SqqilclUhKpLKqB3xNjl0USwZ7Yr1BI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 113.343 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:10.163Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e9641e50766e71c5af17d03809a874c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6BFHxztS-Sq9-Vo4Gxp3ST1GSY_8MrEeoDgc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0e9641e50766e71c5af17d03809a874c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kiZQKB4C9y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.535 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:10.456Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 143.305 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:11.408Z"}
  console.log
    CSRF token generation: {
      sessionID: '4a9998a9222c23a4f46f9d6a5df8ac70',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QmeTqzh0-UjrZHuqhjf7Vqz2ZT4wlWSnVNYM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4a9998a9222c23a4f46f9d6a5df8ac70

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zdBD-bMsAQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.556 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:11.719Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 157.109 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:12.605Z"}
  console.log
    CSRF token generation: {
      sessionID: '465398816ee5adb733ca9dc8325b29e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cmIuAbq6-zTUM7bZbwg1hQA5LsNZ6dnUs2VY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 465398816ee5adb733ca9dc8325b29e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rC_6ZLfkYS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.200 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:12.926Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 134.073 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:13.795Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f8795fa141c3f2b4565c8c2a01c44cd8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OaINJtcA-w2eAfowY69hymUwpfgXIVUkcwdE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f8795fa141c3f2b4565c8c2a01c44cd8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MUF1WRj-g4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.087 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:14.114Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'f8795fa141c3f2b4565c8c2a01c44cd8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af8795fa141c3f2b4565c8c2a01c44cd8.07ToqYSQE%2FCymE55niaPkk%2BBtrpPe87QobcRXlNy0tc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 115.423 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:15.019Z"}
  console.log
    CSRF token generation: {
      sessionID: '5f90921bac7a4956866884c49f8d4c55',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: y1k0MZ0S-Xt5F7zV3rms5fwFrJXIqBPaa1Fs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5f90921bac7a4956866884c49f8d4c55

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Aw-5k-odnQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.026 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:15.309Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '5f90921bac7a4956866884c49f8d4c55',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5f90921bac7a4956866884c49f8d4c55.Zb0YBIyTWm0nGT5p6ctXca8LDgvu1jBNuMGTo5JBst8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.469 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:16.064Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b83de04f26c94d0d7ee91ed96ec77561',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 75eb0mNt-rQeXJ1uIlDxF-gF2v1u8vu1-xZI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b83de04f26c94d0d7ee91ed96ec77561

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zCnz8s5tSV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.291 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:16.437Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'b83de04f26c94d0d7ee91ed96ec77561',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab83de04f26c94d0d7ee91ed96ec77561.CZ5XmlOgXavHlsnz%2F4xIPZ1hVX%2F8VaYF3352bqGEo94',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.590 ms - 63[0m
PASS tests/integration/customer.test.js (30.662 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1764 ms)
      ✓ should fail with invalid affiliate ID (1051 ms)
      ✓ should fail with duplicate email (1051 ms)
      ✓ should fail with duplicate username (1068 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1074 ms)
      ✓ should return customer profile for affiliate (1081 ms)
      ✓ should fail for unauthorized customer (1051 ms)
      ✓ should return limited data without authentication (1052 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1123 ms)
      ✓ should not update protected fields (1112 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1156 ms)
      ✓ should filter orders by status (1162 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1327 ms)
      ✓ should fail with incorrect current password (1111 ms)
      ✓ should fail with weak new password (1094 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1246 ms)
      ✓ should return monthly statistics (1197 ms)
      ✓ should allow affiliate to view customer dashboard (1189 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1225 ms)
      ✓ should reject deletion in production environment (1043 ms)
      ✓ should reject unauthorized deletion (1217 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:18.318Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:19.190Z"}
  console.log
    CSRF token generation: {
      sessionID: '82083c2bcf828fdb00344bc9c1e78c7e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LyxpWDy1-SXYENjKMXKl2CcRRFwIBpUwzrUI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 82083c2bcf828fdb00344bc9c1e78c7e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2JYVof2RLT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.251 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:19.308Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.532 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:19.599Z"}
[0mGET /api/v1/administrators [32m200[0m 115.542 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:20.655Z"}
  console.log
    CSRF token generation: {
      sessionID: '66325e3cfc071ed9159a5bef0d974d4b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ns7g7Bvi-u8hjwioonFfRH1IYfIqGpdK3pVc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66325e3cfc071ed9159a5bef0d974d4b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bZKsTVCExy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.073 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:20.747Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.017 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:20.986Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 110.378 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:21.946Z"}
  console.log
    CSRF token generation: {
      sessionID: '00ebc53a1afd89efe5055ec8bad325cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: i0AX1iEK-3s5kmm1Z7vdNv4hX3R62py8v--w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 00ebc53a1afd89efe5055ec8bad325cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rcNIu6Wl_o...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.243 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:22.047Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.917 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:23.307Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 108.593 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:24.276Z"}
  console.log
    CSRF token generation: {
      sessionID: '89d2980237fefc89ea51f4becba5d848',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wFxqzDjV-yn36Ux0o8LzI8MMRusqDW6FoMtU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 89d2980237fefc89ea51f4becba5d848

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YCfU7KwH0g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.128 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:24.389Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.070 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:24.546Z"}
[0mGET /api/v1/administrators [33m401[0m 1.236 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:25.377Z"}
  console.log
    CSRF token generation: {
      sessionID: '47f3c529c43f0588f6c48b8ad4d73d8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5NLo7Pxx-PUpTdPAamPheVp5juxmc384enGk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 47f3c529c43f0588f6c48b8ad4d73d8b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OBLyu1mI4o...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.050 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:25.470Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.245 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:25.703Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.118 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:25.847Z"}
[0mGET /api/v1/administrators [33m403[0m 28.010 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:26.714Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b9a850ab4fb2a31c36b472232db5b9cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F1cwJQzx-PlPCruHjK4Q7n5z8IxzDwAFLMMU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b9a850ab4fb2a31c36b472232db5b9cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RQJ766Cmhz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.519 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:26.807Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.260 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685e9267bedfd9bef3db0af5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:27.038Z"}
[0mGET /api/v1/administrators/685e9267bedfd9bef3db0af5 [32m200[0m 81.356 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:27.952Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a8cbaad8a2c68e6e99abb03d9d3af914',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: V0BVdJay-N_3K0cl5XxA7JGG-5XJGLZWnMLI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a8cbaad8a2c68e6e99abb03d9d3af914

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U3rsFOr9jh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.816 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:28.044Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 137.475 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685e9268bedfd9bef3db0b20 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:28.184Z"}
[0mGET /api/v1/administrators/685e9268bedfd9bef3db0b20 [33m404[0m 80.350 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:29.104Z"}
  console.log
    CSRF token generation: {
      sessionID: '165c8f97a807a6256e87c7e132aa3b10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NNbmhJWt-X9oC-2H-1MIngbmeLqrafa6lEnI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 165c8f97a807a6256e87c7e132aa3b10

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PCPcbE1Fiy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.530 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:29.198Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.654 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:29.347Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 55.219 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:30.240Z"}
  console.log
    CSRF token generation: {
      sessionID: '985304a2976301f01af129da455ef783',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h5RZsPB4-PsTAzJ2rr8I_nvjacF3ElRSeN-M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 985304a2976301f01af129da455ef783

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _Em2OjocPi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.616 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:30.332Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.994 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:30.478Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '985304a2976301f01af129da455ef783',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A985304a2976301f01af129da455ef783.u1VOU0A9wQNx3SjFqWKBB2X6ucg7GWLXr6tKOwSitMI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [32m201[0m 192.159 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:30.674Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.648 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:31.664Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c3f31ef44e1c64251e47f2a1d34290aa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eqH1d8U6--iRBnBrm_p7mnWbbHmtNgM_2SFg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c3f31ef44e1c64251e47f2a1d34290aa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lbNFR2zuJu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.960 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:31.753Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.924 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:31.895Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'c3f31ef44e1c64251e47f2a1d34290aa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac3f31ef44e1c64251e47f2a1d34290aa.V2ma53WjWDrF4n%2B0NtbK0LjQpmbzbmuDPwBGiU09wP0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 59.133 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:32.795Z"}
  console.log
    CSRF token generation: {
      sessionID: '588a460c799a50b4c3fbf7eefc0133c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kNUtDRgR-Wk-yOOc1-oeFQ-Piemd6zr3R6uQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 588a460c799a50b4c3fbf7eefc0133c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 453VK0Kfv0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.653 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:32.888Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.577 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:33.031Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '588a460c799a50b4c3fbf7eefc0133c1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A588a460c799a50b4c3fbf7eefc0133c1.KVgPF3wDIHppyGXPKQzvI5jbIo4oAIxfh3Zhh%2ByApWc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 55.999 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:33.938Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dd95fe6a4f8ad34132cfdd5fc8798683',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 932DItbo-WxO6UQByK2G6igrHq9fR9ZO2Jxo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dd95fe6a4f8ad34132cfdd5fc8798683

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: S5VQd9qvaX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.242 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:34.039Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.035 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:34.207Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'dd95fe6a4f8ad34132cfdd5fc8798683',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Add95fe6a4f8ad34132cfdd5fc8798683.P%2BqQOehOEQqRoZXdSA93yGpG86Gil04f%2F291IIo%2BrG4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 57.860 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:35.110Z"}
  console.log
    CSRF token generation: {
      sessionID: '0457c853bc0f72cb93cd887227901241',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wY36dJhU-sMKjvxK463l3L1cMM6D4h5Qid08

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0457c853bc0f72cb93cd887227901241

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lZvK9HTHsJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.299 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:35.206Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.236 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:35.356Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '0457c853bc0f72cb93cd887227901241',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0457c853bc0f72cb93cd887227901241.NbG6LJCRIGsEMcNXQIb1k2T0iBcdHLsOfoik8pw5UEs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m409[0m 83.328 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:36.274Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d6a5a08a9c57bbcd621787f9548be1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: c4wrlkaT-xw85vHyvKDmjUmoyHltf3E-NvTY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d6a5a08a9c57bbcd621787f9548be1a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GyEzCNdtqy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.908 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:36.376Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.207 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:36.616Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d53cb7e21e7bdda46113e3188226c35',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s7XJGnKV-QttxFhORTD8JjXvH5XmXoo-P3Z0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d53cb7e21e7bdda46113e3188226c35

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: opZeXFstj_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.671 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:36.624Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.225 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:36.797Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '2d53cb7e21e7bdda46113e3188226c35',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2d53cb7e21e7bdda46113e3188226c35.gCYntQD05xnKUDy99pe6VvlL0vZcROWzekVJtCe4Z7I',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m403[0m 58.377 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:37.694Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ab7a482628d0dc7d554ff79c18df7fc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LIf5jzv9-T-yzqUSPb6kBLQ3ulDRnOCxsyGU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ab7a482628d0dc7d554ff79c18df7fc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vBdY_4Jntv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.139 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:37.808Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.277 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9272bedfd9bef3db0c71 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:38.037Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9272bedfd9bef3db0c71 {
      sessionID: '4ab7a482628d0dc7d554ff79c18df7fc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4ab7a482628d0dc7d554ff79c18df7fc.qlaVOVCbocm6J4kX%2Fa78xT8ZgiLwm43RLWQfgTugST4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9272bedfd9bef3db0c71 [32m200[0m 93.076 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:38.964Z"}
  console.log
    CSRF token generation: {
      sessionID: '51e1675742b472b1e3ce4caaa3f22e60',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GH5o4nNx-I2Eiad5OA76wAZO6mG7jcCIm7KE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 51e1675742b472b1e3ce4caaa3f22e60

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9geTxkWP4g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.559 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:39.060Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.613 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9273bedfd9bef3db0c9c {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:39.304Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9273bedfd9bef3db0c9c {
      sessionID: '51e1675742b472b1e3ce4caaa3f22e60',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A51e1675742b472b1e3ce4caaa3f22e60.tpi%2FB%2BHP8fzUR1jLGc0qd1Lljnc1spTIYkEE%2BTMBYhs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9273bedfd9bef3db0c9c [32m200[0m 120.257 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:40.255Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dd774726cbbc8f26c088a928e1368fbc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BCvkj4ov-C9QRZReBrcqyQ1kCqL5YavFXfPU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dd774726cbbc8f26c088a928e1368fbc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5TBgks3Bs7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.245 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:40.346Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.606 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9274bedfd9bef3db0cc8 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:40.581Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9274bedfd9bef3db0cc8 {
      sessionID: 'dd774726cbbc8f26c088a928e1368fbc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Add774726cbbc8f26c088a928e1368fbc.wsN5giORwzjtb77vlXyJd0uKjPHEh2IiQLidKgGhczE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9274bedfd9bef3db0cc8 [32m200[0m 140.039 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:40.724Z"}
  console.log
    CSRF token generation: {
      sessionID: '6c4f5daa8e6494b6518735c51186a8b9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xvFaiMbn-i9h5a0QpUYaPWABmj6Fn9ehdqgM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6c4f5daa8e6494b6518735c51186a8b9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dcGgquf4j3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.605 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:40.734Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.646 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:41.780Z"}
  console.log
    CSRF token generation: {
      sessionID: '45efb81f3505bd0ba39f975c6d5fc231',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h8rtDiBI-69r2ad12s5rPC-4mKjYHrRUlPP4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 45efb81f3505bd0ba39f975c6d5fc231

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zDE6iNdHBm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.082 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:41.871Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 140.679 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9276bedfd9bef3db0cf7 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:42.100Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9276bedfd9bef3db0cf7 {
      sessionID: '45efb81f3505bd0ba39f975c6d5fc231',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A45efb81f3505bd0ba39f975c6d5fc231.PCRH76RhUgtY7KkmZe9Oo205WEfUNXyGeF%2BHavQ2HKw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9276bedfd9bef3db0cf7 [32m200[0m 85.789 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:42.188Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 27.756 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:43.050Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cb2bee443b269fbbe8adcc1a1f34ade',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qNdNVQvV-v14bDSdA6fyuiXNnj1B5g18UoCI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9cb2bee443b269fbbe8adcc1a1f34ade

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zd4ma2-EZr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.749 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:43.144Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.240 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9277bedfd9bef3db0d23 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:43.391Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9277bedfd9bef3db0d23 {
      sessionID: '9cb2bee443b269fbbe8adcc1a1f34ade',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9cb2bee443b269fbbe8adcc1a1f34ade.LtZWj4i0B95Zux0sr0S%2F%2FNF4EAE6cf9idZqMR%2Bt45YU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9277bedfd9bef3db0d23 [32m200[0m 82.812 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:44.300Z"}
  console.log
    CSRF token generation: {
      sessionID: '4e1a6c90e42717e28eb77f463fb62948',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NU5f0tmU-Oke7mC5KuPfajTY4vuZd_UdOsXY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4e1a6c90e42717e28eb77f463fb62948

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Lp3OaKUtqF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.647 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:44.393Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.755 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9278bedfd9bef3db0d4e {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:44.628Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9278bedfd9bef3db0d4e {
      sessionID: '4e1a6c90e42717e28eb77f463fb62948',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4e1a6c90e42717e28eb77f463fb62948.1T1RJFPX37viyRqwPmBk3LQetHJc5cveJQD7DcDa8vc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9278bedfd9bef3db0d4e [33m409[0m 83.693 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:45.538Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bd069c1f07cf6dcd1d0c808779af4f35',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RlkXSi2O-Zo0KUtefa50AkjT5_OCexE5LCoY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bd069c1f07cf6dcd1d0c808779af4f35

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hW1-9dm5ZK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.452 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:45.630Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.375 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e9279bedfd9bef3db0d73 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:45.870Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9279bedfd9bef3db0d73 {
      sessionID: 'bd069c1f07cf6dcd1d0c808779af4f35',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abd069c1f07cf6dcd1d0c808779af4f35.m2WBvs8ZGLFPsZNUKlN%2FpACh3cBMYyOWzUemDkHKsWQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e9279bedfd9bef3db0d73 [33m400[0m 56.274 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:46.761Z"}
  console.log
    CSRF token generation: {
      sessionID: '36763d60bb147de3524caf047e4effde',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Y7bseqxv-iEXlRnrBSXRRI1kUe8VWAdwHjQE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 36763d60bb147de3524caf047e4effde

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PwFtDOx1Om...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.318 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:46.858Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.913 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:47.185Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ebd54db62b90c1d1785fb6c3b71f6b56',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FEL9gwk2-3ih90TT-6MkRak5JZdwreIBRkYA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ebd54db62b90c1d1785fb6c3b71f6b56

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h_8xzuMrmj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.855 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:47.193Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 138.529 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/685e927bbedfd9bef3db0da3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:47.334Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e927bbedfd9bef3db0da3 {
      sessionID: 'ebd54db62b90c1d1785fb6c3b71f6b56',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aebd54db62b90c1d1785fb6c3b71f6b56.8czuTBghT%2B3K6F4YknZ%2FeM46R9Z5I%2B2xVehGZ%2FMGloM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685e927bbedfd9bef3db0da3 [33m403[0m 55.112 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:48.215Z"}
  console.log
    CSRF token generation: {
      sessionID: '914d6fb9bb01f3336b141bae999c86c4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pbhUEVMM-Z2aq_jCgh_7UzIGitHX17s9AoRk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 914d6fb9bb01f3336b141bae999c86c4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0dWemAlqcf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.377 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:48.311Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.951 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685e927cbedfd9bef3db0dd3 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:48.543Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e927cbedfd9bef3db0dd3 {
      sessionID: '914d6fb9bb01f3336b141bae999c86c4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A914d6fb9bb01f3336b141bae999c86c4.t58BN%2B8KEQIUd8hIF34WOVmgelk6eHr%2BILhrnntYDwU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685e927cbedfd9bef3db0dd3 [32m200[0m 113.141 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:49.511Z"}
  console.log
    CSRF token generation: {
      sessionID: '44f3d384a062cef17bcc925599a886c3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iMZLP4Fp-V1kCE1j-D7LgbFfmUhJeBU2gzVQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 44f3d384a062cef17bcc925599a886c3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: m8Xod6TM2d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.738 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:49.606Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.091 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685e927dbedfd9bef3db0dfa {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:49.843Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e927dbedfd9bef3db0dfa {
      sessionID: '44f3d384a062cef17bcc925599a886c3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A44f3d384a062cef17bcc925599a886c3.BrRNjBlb%2Bv7%2Bue%2BbefiqajTcBTb3y8wE8i9bM9DI7%2F8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685e927dbedfd9bef3db0dfa [33m400[0m 56.526 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:50.750Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a60622715085769b20e43a809d4438d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZZDyCRKg-DYKPzyf9wUbhugaqL7aue25h6AM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a60622715085769b20e43a809d4438d4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GkQBNMfc0i...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.044 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:50.846Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.265 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685e927ebedfd9bef3db0e24 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:51.108Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e927ebedfd9bef3db0e24 {
      sessionID: 'a60622715085769b20e43a809d4438d4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa60622715085769b20e43a809d4438d4.fulL%2FwgaDpGvLunM%2FMz2SPejyGT6D07XG2WjnHro%2FOM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685e927ebedfd9bef3db0e24 [33m400[0m 60.980 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:51.992Z"}
  console.log
    CSRF token generation: {
      sessionID: '63e599bc2ef343a04c41295930368070',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Jmq2YDqc-2Sloi0r_f-0K5w4yuqTmZg5Nfn8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 63e599bc2ef343a04c41295930368070

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mxuis_DVrI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.156 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:52.097Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.832 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:52.453Z"}
  console.log
    CSRF token generation: {
      sessionID: '7198501b5b9348ba3456f44f657a316e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RvUjUEyy-EV_5rh1z4e3PrruxH6cpysveq6Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7198501b5b9348ba3456f44f657a316e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HEvkgyJf0Y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.515 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:52.468Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 185.454 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/685e9280bedfd9bef3db0e55 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:52.657Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9280bedfd9bef3db0e55 {
      sessionID: '7198501b5b9348ba3456f44f657a316e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7198501b5b9348ba3456f44f657a316e.fWUPBfBph%2B4w9cnDDBFQOLjoMQNUwfsn4%2BrL9AQa6oA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685e9280bedfd9bef3db0e55 [33m403[0m 58.602 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:53.550Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ec7e0e5a27febf3dd4774efabce9f10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VhuSMB0U-AFfveLhMZ3wIAjB6CIgJ5JtU9W0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ec7e0e5a27febf3dd4774efabce9f10

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Mrwwiu0Zm9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.553 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:53.646Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.158 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685e9281bedfd9bef3db0e87 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:53.883Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9281bedfd9bef3db0e87 {
      sessionID: '7ec7e0e5a27febf3dd4774efabce9f10',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7ec7e0e5a27febf3dd4774efabce9f10.lgYYoe7gBKpRBN3s%2FvQQuxueF%2F5CApfcEIKIDC%2Fctfk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685e9281bedfd9bef3db0e87 [33m404[0m 108.016 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:54.827Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ff7e2bc4026b7ef9c6918f5fa9d4a1bd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4JMnBU8X-8HfaQTONWC-vfawoJuZCLJ3H9no

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ff7e2bc4026b7ef9c6918f5fa9d4a1bd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gLfwtq-x4G...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.093 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:54.918Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.929 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685e9283bedfd9bef3db0eb2/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:55.157Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9283bedfd9bef3db0eb2/reset-password {
      sessionID: 'ff7e2bc4026b7ef9c6918f5fa9d4a1bd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aff7e2bc4026b7ef9c6918f5fa9d4a1bd.hap7exwDXytoCNkDQpFRZ9EPRrLlWnNyKZslZ5yqYIw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685e9283bedfd9bef3db0eb2/reset-password [32m200[0m 167.296 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:55.328Z"}
  console.log
    CSRF token generation: {
      sessionID: '27586ab6f8aebae0f5738fe87068e250',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UrvHnQ4H-3xggn9I6P7xPC4IWYpqolFTKaFY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 27586ab6f8aebae0f5738fe87068e250

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0Lbb8YhB6M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.632 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:55.352Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.098 ms - 644[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:55.500Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ca5c818ab5c3cff25eb0a81888125ed0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: svZWEavO-KULu9WXgjeuxryed9pRqIjiHZdA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ca5c818ab5c3cff25eb0a81888125ed0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _sAQrH98Xr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.245 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:55.508Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 112.511 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:56.465Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cb064c08246ea4a7bd304d8bffdc4578',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: t1Y8LR3S-40RDp00fVvT4SiVcOtnvu34auog

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cb064c08246ea4a7bd304d8bffdc4578

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X56PhxUKse...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.025 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:56.562Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.484 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685e9284bedfd9bef3db0ee4/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:56.827Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9284bedfd9bef3db0ee4/reset-password {
      sessionID: 'cb064c08246ea4a7bd304d8bffdc4578',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acb064c08246ea4a7bd304d8bffdc4578.RhCaxzRU1cTxEU21COIUDtUyO77q5mYaWVD7z%2B%2BlaSU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685e9284bedfd9bef3db0ee4/reset-password [32m200[0m 171.238 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:57.880Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7ac8612d7aaef88c78cc1c69e009dd9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rCF1mG7H-eoUwIYoFx8Jnp0nWrJe8mwttO2c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7ac8612d7aaef88c78cc1c69e009dd9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7OFA-Bn7mI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.038 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:57.979Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.580 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685e9286bedfd9bef3db0f12/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:58.216Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9286bedfd9bef3db0f12/reset-password {
      sessionID: 'f7ac8612d7aaef88c78cc1c69e009dd9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af7ac8612d7aaef88c78cc1c69e009dd9.%2BPhEPBx%2FyivOzv7jAfimuaLr6PdstF%2B16wjbktudus0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685e9286bedfd9bef3db0f12/reset-password [33m400[0m 59.143 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:59.135Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb7fb5798e04bc0dab178fc047c896bb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PDqaiKuS-fGU0p8mB28339Ci9gOzZJ1s-2Q8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb7fb5798e04bc0dab178fc047c896bb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Y9APhQKSue...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.336 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:59.226Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.749 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:59.550Z"}
  console.log
    CSRF token generation: {
      sessionID: '3ccb60b7a38ac98b0a5db1663ae3ee07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1QIN8LCI-6aSzFSflLbgVIDt2lJmyB0zHsts

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3ccb60b7a38ac98b0a5db1663ae3ee07

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oZH4YLrVnv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.691 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:59.559Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.483 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/685e9287bedfd9bef3db0f3c/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:45:59.705Z"}
  console.log
    CSRF check for: /api/v1/administrators/685e9287bedfd9bef3db0f3c/reset-password {
      sessionID: '3ccb60b7a38ac98b0a5db1663ae3ee07',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3ccb60b7a38ac98b0a5db1663ae3ee07.kzlKgiC25Bj8krlIU0cNtcRhAkFTJq4YH%2F1Q1UrrLF4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685e9287bedfd9bef3db0f3c/reset-password [33m403[0m 56.775 ms - 86[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:00.342Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:00.599Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ffa58dfaa44f2f769ab7537c082a5c0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gRyDZ9YE-qCuWCk8SBO5dw8xjFgPZvYjdb9g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6ffa58dfaa44f2f769ab7537c082a5c0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qZnOn1WGlM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.315 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:00.693Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.437 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:00.839Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 28.221 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:01.689Z"}
  console.log
    CSRF token generation: {
      sessionID: '128304d65092709d0dbeacc4c99c6714',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cCp1542c-MuYsgoiYqi3dqya33pbhyPJ9yeQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 128304d65092709d0dbeacc4c99c6714

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BlVZ_usiPn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.654 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:01.785Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:01.880Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.948 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:01.932Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 1.099 ms - 47[0m
PASS tests/integration/administrator.test.js (45.329 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1919 ms)
      ✓ should filter by active status (1325 ms)
      ✓ should support pagination (2331 ms)
      ✓ should require admin authentication (1100 ms)
      ✓ should require administrator permissions (1337 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1238 ms)
      ✓ should return 404 for non-existent administrator (1143 ms)
      ✓ should handle invalid ObjectId (1143 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1415 ms)
      ✓ should validate required fields (1140 ms)
      ✓ should validate email format (1136 ms)
      ✓ should validate password strength (1175 ms)
      ✓ should prevent duplicate emails (1167 ms)
      ✓ should require administrators.create permission (1410 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1277 ms)
      ✓ should update email (1291 ms)
      ✓ should update password (1520 ms)
      ✓ should deactivate administrator (1272 ms)
      ✓ should not allow updating adminId (1250 ms)
      ✓ should validate email uniqueness on update (1240 ms)
      ✓ should prevent self-deactivation (1216 ms)
      ✓ should require administrators.update permission (1460 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1293 ms)
      ✓ should prevent self-deletion (1237 ms)
      ✓ should prevent deleting last administrator with all permissions (1245 ms)
      ✓ should require administrators.delete permission (1554 ms)
      ✓ should handle non-existent administrator (1277 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1642 ms)
      ✓ should clear login attempts on password reset (1411 ms)
      ✓ should validate password strength (1249 ms)
      ✓ should require administrators.update permission (1471 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (1089 ms)
      ✓ should require authentication (1068 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:03.854Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:03.866Z"}
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.789Z"}
  console.log
    CSRF token generation: {
      sessionID: '301f05faaee3a2eca2fe361cfbb4944f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Otl0Dmmj-BAJW_QfTOUFt3bOhGi7gw4Y6Qoo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 301f05faaee3a2eca2fe361cfbb4944f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pwGEueqe4w...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.239 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.804Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 7.221 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.815Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.308 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.826Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.146 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.832Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.707 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.842Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.128 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.846Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.601 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.852Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.369 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.858Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.897 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.863Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.780 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.867Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.663 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.872Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.607 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.875Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.560 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.880Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.927 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.884Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.545 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.890Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.358 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.893Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.417 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.897Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.410 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:04.900Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.461 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:05.073Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:05.853Z"}
  console.log
    CSRF token generation: {
      sessionID: '07c24c14561f3e746cbc7382fea31dab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fjDIbjwt-mMGeoVE27UdQan2HrmsIe4V_jKY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 07c24c14561f3e746cbc7382fea31dab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: otn1qrF4h1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.379 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:05.860Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 117.079 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:05.980Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 110.151 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:06.093Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 116.727 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:06.212Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 129.969 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:06.344Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 112.469 ms - 120[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:06.726Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:07.292Z"}
  console.log
    CSRF token generation: {
      sessionID: '9e9f6f5058bd92e63381dae28d59f28d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ww5giAXx-heip7rWUSFtAX9x1Lei-I52N63k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9e9f6f5058bd92e63381dae28d59f28d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K9DqQdYDoL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.993 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:07.300Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.775 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.124Z"}
  console.log
    CSRF token generation: {
      sessionID: '265f267bfe4208835496188540704c87',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cTSdN3Yr-q_BKpqpTsS3Ulzn51SeaWfFjqgg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 265f267bfe4208835496188540704c87

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B5nWwjjeXQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.385 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.135Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.434 ms - 167[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-27T12:46:08.461Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.957Z"}
  console.log
    CSRF token generation: {
      sessionID: '6758165d07398603d912006a66c0e498',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YKAfZXkL-RlPDEOSxdE6wv5BgOvZdbBENllU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6758165d07398603d912006a66c0e498

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fgGQhYbyii...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.430 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.967Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.867 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.971Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.714 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.975Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.421 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:08.978Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.202 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:09.809Z"}
  console.log
    CSRF token generation: {
      sessionID: '592aa86288142998d4fcc4a18a998ad7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kFFOtJBv-EABjsKx7X_vqZOT2C2riKgKIj58

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 592aa86288142998d4fcc4a18a998ad7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 98PTPKYpSQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.916 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:09.960Z"}
[0mPOST /api/v1/customers/register [33m400[0m 1.803 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:10.824Z"}
  console.log
    CSRF token generation: {
      sessionID: '96a0aad0280726573a9065563726c218',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yyayqJuF-muhW-ctO9jVhJwXj_plK9hErksw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96a0aad0280726573a9065563726c218

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C-wlPBVH5U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.921 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:10.966Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-94db6bd2-c409-442b-bca7-d6c5204616f9

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 175.633 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:11.968Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd158acaacbb0b7fd3eab59427b667707',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iCKg6vXR-00V29MihApFK1Q7-I1xzE1j0U0Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d158acaacbb0b7fd3eab59427b667707

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zlUMkWT77a...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.313 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:12.063Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:12.212Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:12.212Z","userId":"685e9294d081de6446649c12","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.592 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:12.215Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'd158acaacbb0b7fd3eab59427b667707',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad158acaacbb0b7fd3eab59427b667707.vArhC4uP76EBKnM3USxKLbFTrFXpddUoAO7%2B2CkapOI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 59.343 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:13.119Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e5e2c16954afa6b93196a2c32af67f5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IJ0e05YL-6YWUens51x6K2KJWu6UIgApU98o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7e5e2c16954afa6b93196a2c32af67f5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B5ZkI-iMzM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.729 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:13.215Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:13.369Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:13.370Z","userId":"685e9295d081de6446649c3a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.380 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:13.372Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '7e5e2c16954afa6b93196a2c32af67f5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7e5e2c16954afa6b93196a2c32af67f5.9EqGEK1k4JSmRPj5ANAlrOYJkpIDdHGmM%2FHLdF55wjY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685e9295d081de6446649c44","targetType":"administrator","timestamp":"2025-06-27T12:46:13.573Z","userId":"685e9295d081de6446649c3a","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 201.814 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:14.409Z"}
  console.log
    CSRF token generation: {
      sessionID: '80a5b167bf6cad8189c45a984de5596f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C21Kc203-H2RNcCL0NwlOfggI7EGXMtaLVeI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 80a5b167bf6cad8189c45a984de5596f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4SDrht2cDB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.523 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:14.506Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:14.646Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:14.647Z","userId":"685e9296d081de6446649c66","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.035 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:14.652Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '80a5b167bf6cad8189c45a984de5596f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A80a5b167bf6cad8189c45a984de5596f.YO%2B7FGyz%2BQB57gErmWVJphe68I7c%2BjC%2FPlmdQrLmFHw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 56.687 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:15.547Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad8006be0b51c88f84a6428b584f82aa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E844Q4VN-6kun9Ahg2GR-_BcjuHgrx_x258U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad8006be0b51c88f84a6428b584f82aa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LFrxGprGNH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.745 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:15.642Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:15.784Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:15.785Z","userId":"685e9297d081de6446649c8e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.674 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:15.788Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'ad8006be0b51c88f84a6428b584f82aa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aad8006be0b51c88f84a6428b584f82aa.ye198it1hXzv1pWtHs5uMs1YrQ%2F91wJ5A%2BblTs6hQPU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMCET31VKE620AE"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685e9297d081de6446649c97","targetType":"operator","timestamp":"2025-06-27T12:46:15.957Z","userId":"685e9297d081de6446649c8e","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 169.918 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:16.792Z"}
  console.log
    CSRF token generation: {
      sessionID: '87769a862c28e69dc16f59b6ed200e8a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: q1Mv6iCW-abiKYDstJxNw26hjFPt7UFp_Kqo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87769a862c28e69dc16f59b6ed200e8a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1KU06xcgqd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.286 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:16.894Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.563 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:16.985Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 2.106 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:17.832Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ea317718aeb0fb7bb8bc7b747e6cb8f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jL9KC6gZ-_GJCxqULcvxbUkpskqqtfxyWxJk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ea317718aeb0fb7bb8bc7b747e6cb8f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1hT_dhgEtd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.079 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:17.932Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 58.955 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:18.021Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 117.983 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:18.966Z"}
  console.log
    CSRF token generation: {
      sessionID: '914b00bcc55bdb0b423e3213d13b6596',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Olihfgkx-FVvM3tdGFB2kuPbEisTeq4Un4NQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 914b00bcc55bdb0b423e3213d13b6596

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QvPqJgt01r...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.410 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:19.066Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:19.212Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.170 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:20.045Z"}
  console.log
    CSRF token generation: {
      sessionID: '7751325622eba829514e4de0ff66da53',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FmlDwEOL-nqjVipo-jfrVmq-LRBX0BZAHa5Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7751325622eba829514e4de0ff66da53

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ryT71jGoUK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.450 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:20.058Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.520 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:20.890Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b3526a2bee22896b52b0ac65e19365a9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OLn2MROG-opAU5SZXVAfRM4woWSb9n1bfuAU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b3526a2bee22896b52b0ac65e19365a9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L2_OnmJ-oi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.234 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:20.898Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.663 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:21.740Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb6cc13c2ebe2aab274dda8353fa179e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6eu41KDK-PldAMPuqXVTCJ3cRoP8BoV2VyCc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb6cc13c2ebe2aab274dda8353fa179e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A3Auv8ikLt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.895 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:21.749Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 115.102 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:22.698Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6f27165ab798892cc7a279c9fb82686',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: elRwXXhM-R1-_VHqCMCf4KEvG-vDH8IYgaWQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6f27165ab798892cc7a279c9fb82686

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bEoA423kuw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:22.705Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 114.022 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (20.578 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1584 ms)
      ✓ should accept strong passwords during affiliate registration (1440 ms)
      ✓ should reject passwords containing username (833 ms)
      ✓ should reject passwords containing email (833 ms)
      ✓ should reject passwords with sequential characters (850 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (1014 ms)
      ✓ should accept strong passwords for customer registration (1146 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1151 ms)
      ✓ should accept strong passwords for administrator creation (1289 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1136 ms)
      ✓ should accept strong passwords for operator creation (1247 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1042 ms)
      ✓ should accept strong passwords during password reset (1132 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1078 ms)
      ✓ should handle case-insensitive username/email validation during registration (846 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (844 ms)
      ✓ should accept passwords with mixed character distribution (961 ms)
      ✓ should handle Unicode characters in passwords appropriately (947 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:24.442Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:25.387Z"}
  console.log
    CSRF token generation: {
      sessionID: '96a5404900ff5c232ed1fa3a0b1038d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Eh8dG80A-1i_DpeHK1rb_FgAzR7MltptDJjc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96a5404900ff5c232ed1fa3a0b1038d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5okzWk5uT6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.598 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:25.493Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:25.647Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:25.647Z","userId":"685e92a11017f7ec8a41007f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.006 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:25.651Z"}
  console.log
    CSRF token generation: {
      sessionID: '27f471b016d50b674d876bce7a93c8c7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SYlqeRoo-hYWdgSahg1hlAL-DzmXfI-zhHlY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 27f471b016d50b674d876bce7a93c8c7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zte9o5Nye3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.910 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:25.745Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:25.889Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:25.890Z","userId":"685e92a11017f7ec8a41008f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.415 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:25.893Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e075635e8a28b86d745667ed46ddea57',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VDpsMj3W-9PPeR1TZkMKBHrFljC_k8G1gJTA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e075635e8a28b86d745667ed46ddea57

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rjfvF_6ui1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.138 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:26.040Z"}
[0mGET /api/v1/operators [32m200[0m 170.583 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.110Z"}
  console.log
    CSRF token generation: {
      sessionID: '875f7b804fb2fe505418aabcd6cc2e06',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: O5dWGDSu-cjtfGaufEyKMFoFhe-Br1Uo0J_w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 875f7b804fb2fe505418aabcd6cc2e06

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W_abLc7_UI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.265 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.204Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:27.355Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:27.355Z","userId":"685e92a31017f7ec8a4100c1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.349 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.359Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c846f66f88685e36e1508af4114c2bbc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Na8sGVEB-EJs6U-zK7a2vwijK46O-cwoUzyE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c846f66f88685e36e1508af4114c2bbc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: R1npDyJRIY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.203 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.454Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:27.596Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:27.596Z","userId":"685e92a31017f7ec8a4100c7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.909 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.599Z"}
  console.log
    CSRF token generation: {
      sessionID: '0d34f389d40dc442a9ead43a7439d324',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C760WXzm-Xa4o41xW_qHP0nTMv5a77vYPgM0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0d34f389d40dc442a9ead43a7439d324

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9hx57sE-FD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.139 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:27.696Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 136.145 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:28.638Z"}
  console.log
    CSRF token generation: {
      sessionID: '820ef4f69363b832a3ac396b6e56e3d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DxycyPsS-1_89frSehXADbCqD2iyWG1Af3iU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 820ef4f69363b832a3ac396b6e56e3d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zdf-N1mCwl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.210 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:28.746Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:28.905Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:28.906Z","userId":"685e92a41017f7ec8a4100f3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.078 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:28.910Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dfab9e5ab2082ba06ec62fbdc3d097bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fM12KVvV-RFJarfo__D4n41WbPX172SsX06E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dfab9e5ab2082ba06ec62fbdc3d097bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X0xfidBgw8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.757 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:29.000Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:29.141Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:29.142Z","userId":"685e92a41017f7ec8a4100f9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.281 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:29.145Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1914dd31084d1d2c7246231e0bb9a83',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tN6BbEz6-LrPvgocTS97fNPeeiiXkZ3chAT0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d1914dd31084d1d2c7246231e0bb9a83

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DAm1HammF2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.254 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:29.240Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 109.476 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:30.159Z"}
  console.log
    CSRF token generation: {
      sessionID: '080473809947b905e0d1c20968b2ab5b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 33SEELau-MX7aMHbyT-kBhytpPnhSVtST2rw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 080473809947b905e0d1c20968b2ab5b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: P9eS9cR0mm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.640 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:30.250Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:30.400Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:30.401Z","userId":"685e92a61017f7ec8a410124","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.095 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:30.405Z"}
  console.log
    CSRF token generation: {
      sessionID: '2a8fff360b789ad39d0f71b1f3d6d62a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oqhK9RMz-QRC2QsNL-i9kdrwvj6Bu3Xgz_FI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2a8fff360b789ad39d0f71b1f3d6d62a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pJVpYJf6yk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.502 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:30.500Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:30.645Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:30.645Z","userId":"685e92a61017f7ec8a41012a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.237 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:30.648Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6016114748561c0ebfb0bd165edf26e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oGr9BSbv-eImvK6HHCz0LJeC9uU2Kefh7lzs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a6016114748561c0ebfb0bd165edf26e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0_rFFMv31W...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.330 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:31.690Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 144.761 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:32.680Z"}
  console.log
    CSRF token generation: {
      sessionID: '440ea40e78a825ac6015c44521b83209',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hsHElPgI-2u_wmKLaHmLgk-SWtVb-lX5dWUA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 440ea40e78a825ac6015c44521b83209

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sO50tATAej...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.373 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:32.776Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:32.922Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:32.922Z","userId":"685e92a81017f7ec8a410173","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.646 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:32.925Z"}
  console.log
    CSRF token generation: {
      sessionID: '96a05d58c39d00d2fdcf25f5a04ee64d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eDhO4CHX-cbOcI7s7_MqlOtTSvQEZmK_OZQk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96a05d58c39d00d2fdcf25f5a04ee64d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HUhJdBonWb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.682 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:33.017Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:33.163Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:33.163Z","userId":"685e92a81017f7ec8a410179","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.503 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:33.166Z"}
  console.log
    CSRF token generation: {
      sessionID: '4e621f62633760e7e084269c665756d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rs0C7UMn-SamnrEB_kTj0LFgn-3-ewwEjfgU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4e621f62633760e7e084269c665756d1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: t5MJDYbE3Z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.159 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:33.178Z"}
[0mGET /api/v1/operators [33m401[0m 1.047 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.022Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e8b95d7383825e38907ce6fa3fa013f3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iMU2EIgP-ltabrzn7qpA67WJ_YHoRZ7mOE0c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e8b95d7383825e38907ce6fa3fa013f3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UUiVBwyQXa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.347 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.113Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:34.254Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:34.255Z","userId":"685e92aa1017f7ec8a41019e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.187 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.258Z"}
  console.log
    CSRF token generation: {
      sessionID: '7fc1151fdcab34bc9770ff83e79410a0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UwK0gP4S-PKofHkIUi3aW7c128fEJsPYD2DU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7fc1151fdcab34bc9770ff83e79410a0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: M0orAg_Ebp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.808 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.383Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:34.534Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:34.534Z","userId":"685e92aa1017f7ec8a4101a4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.430 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.537Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e9bb99370a7c5df8de53f4d737e9d59c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L5xjd3At-PcY7oRI8s7ANh6E_em9GYUgPw34

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e9bb99370a7c5df8de53f4d737e9d59c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xAaCr_WK9r...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.078 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.629Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:34.772Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:34.772Z","userId":"685e92aa1017f7ec8a4101aa","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.455 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:34.775Z"}
[0mGET /api/v1/operators [33m403[0m 56.358 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:35.680Z"}
  console.log
    CSRF token generation: {
      sessionID: '6685e34d1e79192a0c0e844dc8492ecb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yTZBEGL5-MtBoDjrlLAJufpyaLp4Bed61wdQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6685e34d1e79192a0c0e844dc8492ecb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yPZ0GmB4y5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.917 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:35.780Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:35.924Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:35.924Z","userId":"685e92ab1017f7ec8a4101d1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.586 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:35.927Z"}
  console.log
    CSRF token generation: {
      sessionID: '7bdbdb575c1a8ff8b4371e067f372817',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rByua4mT-p3Sylg4G8k57hRis0eUfXAYYGRo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7bdbdb575c1a8ff8b4371e067f372817

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oC8DekSUss...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.110 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:36.023Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:36.165Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:36.166Z","userId":"685e92ab1017f7ec8a4101d7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.961 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:36.169Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7b7aa0ab403ee2cd9005d86584b9bf9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iwfQf3bE-YajyYsg4EHTlunxKwXiLt1uX1c4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7b7aa0ab403ee2cd9005d86584b9bf9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7vVdf9dtNq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.490 ms - 67[0m
[34mdebug[39m: GET /api/v1/administrators/operators/685e92ac1017f7ec8a4101dd {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:36.274Z"}
[0mGET /api/v1/administrators/operators/685e92ac1017f7ec8a4101dd [32m200[0m 117.915 ms - 761[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.231Z"}
  console.log
    CSRF token generation: {
      sessionID: '01379afed000141f91774ace1fa42d1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uTjzEv1w-EfMn6Hjecv3HTBMKiziMmJYoN9o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 01379afed000141f91774ace1fa42d1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3l4qPTdYNB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.404 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.323Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:37.470Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:37.470Z","userId":"685e92ad1017f7ec8a410202","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.107 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.473Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd0984df7bfa455e1109b9bcbf6766bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZjjbpqrD-hA5PRKq93Cf0Qd5Tpp9X_PVKCHA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cd0984df7bfa455e1109b9bcbf6766bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PjSoGausyZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.316 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.575Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:37.733Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:37.733Z","userId":"685e92ad1017f7ec8a410208","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 157.708 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.736Z"}
  console.log
    CSRF token generation: {
      sessionID: '5b9d12bcb0e195c659473246e23d0ce4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4nF2AC6f-fof3APfFWFzx2-tae9h4wNnl9lY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5b9d12bcb0e195c659473246e23d0ce4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jGERDdOSbO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.438 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685e92ad1017f7ec8a410208 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:37.750Z"}
[0mGET /api/v1/operators/685e92ad1017f7ec8a410208 [32m200[0m 88.367 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:38.668Z"}
  console.log
    CSRF token generation: {
      sessionID: '6f983dc0cd79d0047c861b308350df55',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HFiLdo4B--AtP937OaeH32Q6g7xELUmZ2GjI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6f983dc0cd79d0047c861b308350df55

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W3qfUgZfso...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.770 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:38.763Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:38.910Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:38.910Z","userId":"685e92ae1017f7ec8a410230","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.757 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:38.913Z"}
  console.log
    CSRF token generation: {
      sessionID: '20b295edbce7953c352c8f64097144de',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: y9AinN23-k7gSsRN8OE-Vz6ZkpreUMguSc2o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 20b295edbce7953c352c8f64097144de

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cuodn5FQ4X...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.389 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:39.027Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:39.177Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:39.177Z","userId":"685e92ae1017f7ec8a410236","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.895 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:39.180Z"}
  console.log
    CSRF token generation: {
      sessionID: '087c095d25003099d57631378cb5b73b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cIMZ9k08-jV-WLOEpLLFxKPmBKa01ekQLNeI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 087c095d25003099d57631378cb5b73b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mBRsPXtUha...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.864 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685e92af1017f7ec8a41023c {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:39.280Z"}
[0mGET /api/v1/operators/685e92af1017f7ec8a41023c [33m403[0m 57.095 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.170Z"}
  console.log
    CSRF token generation: {
      sessionID: '377fc0263e5241b30a62aea34a1bb328',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tEZz6NSx-tHTkOsCw0tHK4sKCQPvOsnvqDvs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 377fc0263e5241b30a62aea34a1bb328

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: E8C8kFthTz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.831 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.281Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:40.453Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:40.454Z","userId":"685e92b01017f7ec8a41025f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 172.792 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.457Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c131bf6f51f6464f1d9eaf1141aa7645',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KpvwlJki-dD7A7NSrmeavt2qxazMcKhpRNcc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c131bf6f51f6464f1d9eaf1141aa7645

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 22bQ_6MmTA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.181 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.548Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:40.700Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:40.700Z","userId":"685e92b01017f7ec8a410265","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.515 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.703Z"}
  console.log
    CSRF token generation: {
      sessionID: '5aed1e55b876a8abb2505179ce7ab315',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XIPtCXcJ-w33V4qWtUEtjjgo7gWpUgrBHPuE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5aed1e55b876a8abb2505179ce7ab315

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _ufMPloX0U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.860 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685e92b01017f7ec8a41026b {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:40.712Z"}
[0mGET /api/v1/operators/685e92b01017f7ec8a41026b [33m404[0m 112.010 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:41.651Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f88b3f77e4ba158291e575952d37ce2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 55QiAgdc-37ZwfGmQ6A3tkVtJuNcS0ykcEB8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8f88b3f77e4ba158291e575952d37ce2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3kWjIbd_2S...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.192 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:41.748Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:41.892Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:41.892Z","userId":"685e92b11017f7ec8a41028f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.003 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:41.895Z"}
  console.log
    CSRF token generation: {
      sessionID: '57ed6a9eb62d1064cbb291e0a520a9d0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jqhLo7gQ-hInpQniXwS-32yr413CQtzKKrtw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 57ed6a9eb62d1064cbb291e0a520a9d0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LnGa1zbVb1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.208 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:41.987Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:42.132Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:42.133Z","userId":"685e92b11017f7ec8a410295","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.221 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:42.135Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b44b6858b745a477887609904c61ec81',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1C3E8YZh-4cU4uLH2Sw0V-h2NfoEqE9dFrF0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b44b6858b745a477887609904c61ec81

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vaBGs-MgNE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.710 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:42.150Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '57ed6a9eb62d1064cbb291e0a520a9d0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A57ed6a9eb62d1064cbb291e0a520a9d0.qfC3X1XXTdeYlqSYUvg2W5AvEYz8tVR9oydorN1fUNk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMCET3M7YE053C4"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685e92b21017f7ec8a41029e","targetType":"operator","timestamp":"2025-06-27T12:46:42.320Z","userId":"685e92b11017f7ec8a41028f","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 170.320 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:42.323Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:42.467Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMCET3M7YE053C4","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:42.467Z","userId":"685e92b21017f7ec8a41029e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.706 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.308Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec83b348e75584329f98f03802fc1cdc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ykvmgmku-3YJBtQ0Rj763WLpqQlYGefHeD0I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec83b348e75584329f98f03802fc1cdc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bWE2a2zWWw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.117 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.403Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:43.545Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:43.545Z","userId":"685e92b31017f7ec8a4102c3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.205 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.548Z"}
  console.log
    CSRF token generation: {
      sessionID: '238af2249b3df1e4f1864fd980fae85f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0R5q4Dbo-vaFdhgNa_bobsZkfCBHRNZaq9P0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 238af2249b3df1e4f1864fd980fae85f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IWcxwsjqo5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.560 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.642Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:43.781Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:43.781Z","userId":"685e92b31017f7ec8a4102c9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.049 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.784Z"}
  console.log
    CSRF token generation: {
      sessionID: '3539f8208e28682dc31c93c57250d326',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B5sFqbE8-h38o1fdCBqNTFV_iUF2v5JJ-gEQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3539f8208e28682dc31c93c57250d326

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kRIdApTDyp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.600 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:43.792Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '238af2249b3df1e4f1864fd980fae85f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A238af2249b3df1e4f1864fd980fae85f.XMAxunpMi9r0viv1RPJ0lIiOdf%2BEqv4QX%2F96g9zt1YA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 58.395 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:44.680Z"}
  console.log
    CSRF token generation: {
      sessionID: '1134b95b2b6bf4c8990e0d23d7296a78',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Hsr78eZQ-dbkTnHZTIANIjA2EMGDElwo5TII

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1134b95b2b6bf4c8990e0d23d7296a78

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5PH26mT74F...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.747 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:44.778Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:44.922Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:44.922Z","userId":"685e92b41017f7ec8a4102f0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.613 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:44.926Z"}
  console.log
    CSRF token generation: {
      sessionID: '87a0fd180852222a5579c9dd071e3169',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jOiDw9hZ-sPPhQvI5YIOuzcK0NUaMB062890

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87a0fd180852222a5579c9dd071e3169

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EF49Run8Tr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.662 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:45.022Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:45.168Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:45.169Z","userId":"685e92b41017f7ec8a4102f6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.073 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:45.173Z"}
  console.log
    CSRF token generation: {
      sessionID: '84a33060b5a53f710df8a9d8d381994b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xf2K41vy-FgsisaZRsek6XgYtXbV1240SbJo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 84a33060b5a53f710df8a9d8d381994b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8FnWeYSX9I...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.333 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:45.181Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '87a0fd180852222a5579c9dd071e3169',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A87a0fd180852222a5579c9dd071e3169.Xe6sZl%2FspQ%2B8go15MdzwRX2CDkHf9AFKgL8oWz8MIJo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 57.478 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.074Z"}
  console.log
    CSRF token generation: {
      sessionID: '92c353ef4ded5a16b61b7acdc42e494e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JlVUGCti-w0xlHZX40RWl3ZDJ0r9ns7A6rYY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 92c353ef4ded5a16b61b7acdc42e494e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IA_QqBxdqD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.083 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.168Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:46.315Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:46.315Z","userId":"685e92b61017f7ec8a41031d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.890 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.318Z"}
  console.log
    CSRF token generation: {
      sessionID: '22aa55fcb8603b35a701c081d35a70c7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rfmsBM0U-1GBDsNM2z6NnrMWMafdUqfwFNpg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 22aa55fcb8603b35a701c081d35a70c7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TjRq3xHcrX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.077 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.443Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:46.608Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:46.608Z","userId":"685e92b61017f7ec8a410323","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 165.646 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.611Z"}
  console.log
    CSRF token generation: {
      sessionID: '27021668e4d909ad6bb044d62eb8d5c3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3gJbRepE-7x5NP4yvfEHSbb1-DbMe7IhkdKs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 27021668e4d909ad6bb044d62eb8d5c3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k4ki2D8hLO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.920 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:46.622Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '22aa55fcb8603b35a701c081d35a70c7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A22aa55fcb8603b35a701c081d35a70c7.MJCxb4txGnZJsjZlgTyZDcMbscUSe3K9cnsy3fgXH88',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 57.879 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:47.519Z"}
  console.log
    CSRF token generation: {
      sessionID: '0161cb7f50e4c6303e28477327348f77',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ugUnbNy0-rY9LRXr9QX59FecXCM_9UZ6wtYw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0161cb7f50e4c6303e28477327348f77

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uu3MPoWbWZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.021 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:47.614Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:47.768Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:47.769Z","userId":"685e92b71017f7ec8a41034a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.344 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:47.772Z"}
  console.log
    CSRF token generation: {
      sessionID: '2beef1d9accf6cc17ab0840ee5238d14',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: n87WRGgs-Mn9tGJDrM7aUe_KlcEoZIppdG-4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2beef1d9accf6cc17ab0840ee5238d14

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C_wMMjUen7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.315 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:47.863Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:48.009Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:48.009Z","userId":"685e92b71017f7ec8a410350","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.666 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:48.013Z"}
  console.log
    CSRF token generation: {
      sessionID: '3826ac68b7c7999e6d4b25a1de0b6501',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mmcmnSNU-bbJRz3iQXwaCdF0GPEdhWc6a4ho

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3826ac68b7c7999e6d4b25a1de0b6501

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HugnGbO39J...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.423 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:48.022Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '2beef1d9accf6cc17ab0840ee5238d14',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2beef1d9accf6cc17ab0840ee5238d14.zR60YjWeogyJd1vz971zyhRussWMBT0rAlSlErQclHc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m409[0m 88.856 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:48.941Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9f5a09d01d6ce4e484325d0992641c5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gILGYtFl-i10FgdjDycUc9plojo5IxMZWSdQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9f5a09d01d6ce4e484325d0992641c5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Jw8eweOmLM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.747 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.039Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:49.213Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:49.213Z","userId":"685e92b91017f7ec8a410378","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 174.196 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.216Z"}
  console.log
    CSRF token generation: {
      sessionID: '2b370727afb8547f6c7bb97d020bcbc6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rAvNQ9Xg-AHQixNwfpiM9GFJCb4g6aKSyCJw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2b370727afb8547f6c7bb97d020bcbc6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Tw-77ERTcl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.857 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.305Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:49.455Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:49.456Z","userId":"685e92b91017f7ec8a41037e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.834 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.459Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d84b36f645b615e084915e265e69e25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: urj5udlP-etsY29zVt4bP6EZiG7s4DZ3-xHI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d84b36f645b615e084915e265e69e25

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WHs7wTDtH9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.312 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.556Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:49.733Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:49.733Z","userId":"685e92b91017f7ec8a410384","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 177.131 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:49.736Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'd9f5a09d01d6ce4e484325d0992641c5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad9f5a09d01d6ce4e484325d0992641c5.53ARRgqdkbT4Qj1dcjKN%2BQ9atlNReSrfUOKk2zO1MdI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m403[0m 57.649 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:50.626Z"}
  console.log
    CSRF token generation: {
      sessionID: '6fa583c51e7b7741fa49aab11bf8b9ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rpPNxfr6-_1T-P621NNkugH3vOUctEP_M8Fo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6fa583c51e7b7741fa49aab11bf8b9ef

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0Elws7kRM2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.100 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:50.718Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:50.873Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:50.874Z","userId":"685e92ba1017f7ec8a4103ab","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.277 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:50.876Z"}
  console.log
    CSRF token generation: {
      sessionID: '44124075bd640ad98d03454ce14c840f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4kg0vLtc-RIWgt_7pUmS6NKxz44QKOTdQHHg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 44124075bd640ad98d03454ce14c840f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XIfnPmIXDp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.858 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:50.972Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:51.114Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:51.114Z","userId":"685e92ba1017f7ec8a4103b1","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.893 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:51.117Z"}
  console.log
    CSRF token generation: {
      sessionID: '2482d008d88f82b77b209aed4c961c55',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VmI7PRiv-gg97CyGwp25olz2Y73TiZOuA0Aw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2482d008d88f82b77b209aed4c961c55

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: c4OQVIwckj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.407 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92bb1017f7ec8a4103b7 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:51.220Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92bb1017f7ec8a4103b7 {
      sessionID: '44124075bd640ad98d03454ce14c840f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A44124075bd640ad98d03454ce14c840f.k9srFILOZwVY6%2FMu3JW3SbLSlmRDlpIslorIobROEug',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685e92bb1017f7ec8a4103b7","targetId":"685e92bb1017f7ec8a4103b7","targetType":"operator","timestamp":"2025-06-27T12:46:51.369Z","userId":"685e92ba1017f7ec8a4103ab","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685e92bb1017f7ec8a4103b7 [32m200[0m 149.439 ms - 442[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.213Z"}
  console.log
    CSRF token generation: {
      sessionID: '622387441edf99624e44e073a4c1488f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lcOj3iU0-TS-gkjr5wsAq05v5OVIOiGGG8R8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 622387441edf99624e44e073a4c1488f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DliL1Z-UI8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.832 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.331Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:52.495Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:52.496Z","userId":"685e92bc1017f7ec8a4103dd","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 167.962 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.501Z"}
  console.log
    CSRF token generation: {
      sessionID: '7910c0b6dcfb6c88513e5d52bc71cac5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: R4V25fMw-8oUvcy8ByrsbDVFaLvimJbZ23Ds

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7910c0b6dcfb6c88513e5d52bc71cac5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DIwoWLF-5M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.728 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.613Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:52.755Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:52.755Z","userId":"685e92bc1017f7ec8a4103e3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.334 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.758Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e8dde3643bdd2eee0f09ccfdbdd4093f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ieOdEIdK-XVkclJOOWuBDI1Ox12auux8PEys

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e8dde3643bdd2eee0f09ccfdbdd4093f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QeNR7LWO0W...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.176 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92bc1017f7ec8a4103e9 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:52.851Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92bc1017f7ec8a4103e9 {
      sessionID: '7910c0b6dcfb6c88513e5d52bc71cac5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7910c0b6dcfb6c88513e5d52bc71cac5.KlhATNk6zyjUJvYg6damyLehyllT%2F6QGy%2BRhcJz7qd0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685e92bc1017f7ec8a4103e9","targetId":"685e92bc1017f7ec8a4103e9","targetType":"operator","timestamp":"2025-06-27T12:46:53.137Z","userId":"685e92bc1017f7ec8a4103dd","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685e92bc1017f7ec8a4103e9 [32m200[0m 286.328 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:53.140Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:53.283Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:53.284Z","userId":"685e92bc1017f7ec8a4103e9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.227 ms - 606[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.111Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f141dcc3af4d9328ce4d2b09aa31a6f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Vdk1H9df-vSpBO_6uenfRj92SLAVD0t8GCBU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f141dcc3af4d9328ce4d2b09aa31a6f9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XIY2q-j8ZY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.342 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.213Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:54.358Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:54.358Z","userId":"685e92be1017f7ec8a410415","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.314 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.361Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b43c7f130959ad6afd695dc1dc7b6344',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cJOIVQQr-4P9aYZLbkjN5u9LPpSwYt2b8yho

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b43c7f130959ad6afd695dc1dc7b6344

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1uzmqeaKEY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.096 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.453Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:54.640Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:54.640Z","userId":"685e92be1017f7ec8a41041b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 187.346 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.643Z"}
  console.log
    CSRF token generation: {
      sessionID: '78634c83619528b337b613754c3403a3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g8e9c0cl-lq13s2-5_lP0kTcFZDSAlSBx6dE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 78634c83619528b337b613754c3403a3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dngYCntEcC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.519 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92be1017f7ec8a410421 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.766Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92be1017f7ec8a410421 {
      sessionID: 'b43c7f130959ad6afd695dc1dc7b6344',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab43c7f130959ad6afd695dc1dc7b6344.SMaqPTP5%2BqN5fn0ixWA57VZIE%2FnUu0VX0irZ7Loth5o',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685e92be1017f7ec8a410421","targetId":"685e92be1017f7ec8a410421","targetType":"operator","timestamp":"2025-06-27T12:46:54.910Z","userId":"685e92be1017f7ec8a410415","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685e92be1017f7ec8a410421 [32m200[0m 144.881 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:54.914Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T12:46:54.942Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.794 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:55.777Z"}
  console.log
    CSRF token generation: {
      sessionID: '699dfbeed6a3459755af8b817245f226',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yqd5IMeq-NQFDCl8Wx0RqlrSLXeMljlj5ZPE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 699dfbeed6a3459755af8b817245f226

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 746ghT-gOt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.397 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:55.877Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:56.023Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:56.023Z","userId":"685e92bf1017f7ec8a410448","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.918 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:56.030Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3f315d881c38fb04f39e798447c092d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SxZKzuRH-efRj56GKa7rpeg6yCWnzCS_moMU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d3f315d881c38fb04f39e798447c092d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e0BU6AktsZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.061 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:56.124Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:56.268Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:56.268Z","userId":"685e92c01017f7ec8a41044e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.256 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:56.271Z"}
  console.log
    CSRF token generation: {
      sessionID: '00c9348f128364db6a2b3d530257c73f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ER5YarxX-l3ua2NRUnMLmDQS6usFRB3jP8-c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 00c9348f128364db6a2b3d530257c73f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zpCyVhG4L5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.596 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:56.365Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:56.514Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:56.515Z","userId":"685e92c01017f7ec8a410454","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.823 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92c01017f7ec8a410454 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:56.517Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c01017f7ec8a410454 {
      sessionID: '699dfbeed6a3459755af8b817245f226',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A699dfbeed6a3459755af8b817245f226.Qz8pxVXV58pf1XEBq%2FBdxUcJClcR0VseDz0w6OOrgJU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92c01017f7ec8a410454 [32m200[0m 173.065 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:57.514Z"}
  console.log
    CSRF token generation: {
      sessionID: '74dceee35748a1b1a5bc4591ee6dd6b1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: K0UFxwo2-G4kv5AzyubkvgldSPWljvRQBpTM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 74dceee35748a1b1a5bc4591ee6dd6b1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qtZJFFXPQa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.630 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:57.608Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:57.754Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:57.755Z","userId":"685e92c11017f7ec8a41047d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.670 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:57.757Z"}
  console.log
    CSRF token generation: {
      sessionID: '95b4592b0113c7e637f7e1ef4857548a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pMKcquNn-rsOMIVsdGzJYNKkyqSJgNS5foT0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 95b4592b0113c7e637f7e1ef4857548a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NZlRvgMS4f...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.569 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:57.853Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:58.008Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:58.008Z","userId":"685e92c11017f7ec8a410483","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.755 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:58.012Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3634920b8cbde9ba0e8ecbab790b68f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UitUfjnh-f_7S5G0Rs9b_ye2yVEkThL28TS4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d3634920b8cbde9ba0e8ecbab790b68f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1atP6FtDxh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.454 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:58.111Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:58.254Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:58.254Z","userId":"685e92c21017f7ec8a410489","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.988 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92c21017f7ec8a410489 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:58.257Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c21017f7ec8a410489 {
      sessionID: '74dceee35748a1b1a5bc4591ee6dd6b1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A74dceee35748a1b1a5bc4591ee6dd6b1.xk1lUxtIq5rZimIYtMlcVbzI1vXBjEGvFuNvujuV6WU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92c21017f7ec8a410489 [32m200[0m 118.368 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.215Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ebb1965e1084f3a8bf4da997bc23028f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ncyNKbZF-Sxs2K_LtnRpgjaCPJDGavRO58rA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ebb1965e1084f3a8bf4da997bc23028f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 34ZEyg8nZE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.943 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.310Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:59.472Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:46:59.473Z","userId":"685e92c31017f7ec8a4104b2","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.139 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.476Z"}
  console.log
    CSRF token generation: {
      sessionID: '89c99fa6cb7047ebb28840e888400d5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IkmzMtKF-UELHhTSS6fuAyvQyL4lmc4VI6N0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 89c99fa6cb7047ebb28840e888400d5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3joEKGU972...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.148 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.577Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:46:59.743Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:46:59.743Z","userId":"685e92c31017f7ec8a4104b8","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 166.178 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.746Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd297b9c567fd04ba141b544c7e5a3c7b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zZARBXhr-It1CbfOsSXbWb8_YC7x8EnNFyCY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d297b9c567fd04ba141b544c7e5a3c7b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zlGJIP6ud2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.127 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92c31017f7ec8a4104be {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:46:59.837Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c31017f7ec8a4104be {
      sessionID: '89c99fa6cb7047ebb28840e888400d5d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A89c99fa6cb7047ebb28840e888400d5d.PXvM%2BwUbM%2FJDuEM9sB26x1IH6ejEEWgWGZ0xv9bgOSM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685e92c31017f7ec8a4104be","targetId":"685e92c31017f7ec8a4104be","targetType":"operator","timestamp":"2025-06-27T12:46:59.976Z","userId":"685e92c31017f7ec8a4104b2","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685e92c31017f7ec8a4104be [32m200[0m 139.687 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:00.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '0123264b195e61acec1153de84c7f44e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XGFUGTbq-AbSoP9dmlMSriOvZdjgv9jXvsB0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0123264b195e61acec1153de84c7f44e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nFEj6Ghkij...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.957 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:00.906Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:01.069Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:01.069Z","userId":"685e92c41017f7ec8a4104e4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.064 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:01.072Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e26c23218d2e88fa8d1b5bd558ded450',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AbY7VEzN-nghmJrm6ZVCiDOOh-Ka6Y1NXeEU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e26c23218d2e88fa8d1b5bd558ded450

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: H5QZuMxjGv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.555 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:01.168Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:01.315Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:01.315Z","userId":"685e92c51017f7ec8a4104ea","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.662 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:01.318Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e1f3e8009cfd6ec7909de97aab719d29',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lQvYbDLP-X0ZTyDCshGTPJHQJrQt8Czl3Alg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e1f3e8009cfd6ec7909de97aab719d29

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AarC30TM-U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.204 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92c51017f7ec8a4104f0 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:01.408Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c51017f7ec8a4104f0 {
      sessionID: 'e26c23218d2e88fa8d1b5bd558ded450',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae26c23218d2e88fa8d1b5bd558ded450.lA%2BwmeCnf7zdFJ%2BOtbiZg6yz%2F8p9d0qStpYstdgu39E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92c51017f7ec8a4104f0 [33m409[0m 138.853 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:02.387Z"}
  console.log
    CSRF token generation: {
      sessionID: '21191392116636ddb282324c7d33ea20',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: X64nPYCQ-evXgfpKEUQm8PyOJ9RDFh5vMQNE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 21191392116636ddb282324c7d33ea20

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aCFd-iA67e...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.305 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:02.486Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:02.633Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:02.633Z","userId":"685e92c61017f7ec8a410516","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.547 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:02.636Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b80b2c275b73100ecad71602aaf0be15',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: q8gEUGzY-C2dmfoExIMN_oCsc5cYqMqte7Es

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b80b2c275b73100ecad71602aaf0be15

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A2eIC049cG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.909 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:02.763Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:02.939Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:02.939Z","userId":"685e92c61017f7ec8a41051c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 176.201 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:02.942Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd874f170ea1b4a7935ce4e5294d71faa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tiXmPSE9-byDj_8V6kcDHWsYdz6ZZlMhKeSI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d874f170ea1b4a7935ce4e5294d71faa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1faXAd5UOr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.534 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685e92c61017f7ec8a410522 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:03.036Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c61017f7ec8a410522 {
      sessionID: 'b80b2c275b73100ecad71602aaf0be15',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab80b2c275b73100ecad71602aaf0be15.dmoe4C1bdEmpCDgaNNaG7Mtoy9QIVpUyzKRhwVM6lYY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"1","11":"7","12":"f","13":"7","14":"e","15":"c","16":"8","17":"a","18":"4","19":"1","2":"5","20":"0","21":"5","22":"1","23":"6","3":"e","4":"9","5":"2","6":"c","7":"6","8":"1","9":"0","timestamp":"2025-06-27T12:47:03.179Z"}
[0mDELETE /api/v1/operators/685e92c61017f7ec8a410522 [32m200[0m 143.206 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.038Z"}
  console.log
    CSRF token generation: {
      sessionID: '165f7ce5d966500176120c272fac6b1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZedJ3ZJz-rFKlbwXNl_8jw5vgg6d1bqGI7Yo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 165f7ce5d966500176120c272fac6b1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 19RJQH9oyG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.810 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.134Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:04.281Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:04.281Z","userId":"685e92c81017f7ec8a410549","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.678 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.284Z"}
  console.log
    CSRF token generation: {
      sessionID: '85120e5b73f70bb52e7d7eda23ec7055',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gkgW2Hfx-EzXqsrfiiZSMnqwk9AUTAj1SE94

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 85120e5b73f70bb52e7d7eda23ec7055

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ey_8A2erB9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.334 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.377Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:04.537Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:04.538Z","userId":"685e92c81017f7ec8a41054f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 161.222 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.541Z"}
  console.log
    CSRF token generation: {
      sessionID: '9a630fa7d1bf18a04d65eed4b99a78dc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6xuGOKNq-tc6tt67ABWpBg0wCfiI-AoYhhI8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9a630fa7d1bf18a04d65eed4b99a78dc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lvoSsx-Hhd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.086 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685e92c81017f7ec8a410555 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:04.669Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92c81017f7ec8a410555 {
      sessionID: '85120e5b73f70bb52e7d7eda23ec7055',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A85120e5b73f70bb52e7d7eda23ec7055.zQ6x0gPgUArOcqdulBMbo0RtxezSU7ir88juR2rssK4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685e92c81017f7ec8a410555 [33m400[0m 111.857 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:05.613Z"}
  console.log
    CSRF token generation: {
      sessionID: '58b55f6a19553e715e7751002420b1e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YR414vIg-cEMpl0S_3-oUQqrrrlqpNlo08Hw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 58b55f6a19553e715e7751002420b1e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NWZtlwQ32N...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.495 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:05.710Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:05.863Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:05.863Z","userId":"685e92c91017f7ec8a41057b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.666 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:05.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '3a41bdf51ae0b20adfb06a3acd61b3a4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RrZUaMDi--PDEBFu8iIlpIPbhD7o_fHOmRqU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3a41bdf51ae0b20adfb06a3acd61b3a4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k017WWTa8g...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.717 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:05.965Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:06.109Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:06.109Z","userId":"685e92c91017f7ec8a410581","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.416 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:06.112Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c0c230fc9d58bacde57fc3ee3ca510c8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HzVwkfGV-O3wJMweUdVCjvd6GA8v2MXK2-Rk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c0c230fc9d58bacde57fc3ee3ca510c8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: a1k52zvAk9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.582 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:06.295Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:06.434Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:06.434Z","userId":"685e92ca1017f7ec8a410589","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 139.670 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/685e92ca1017f7ec8a410587 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:06.436Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92ca1017f7ec8a410587 {
      sessionID: '58b55f6a19553e715e7751002420b1e4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A58b55f6a19553e715e7751002420b1e4.ImeV0cG6TbFrhJB5gJDC8Ski3TyHMLf2y1mzXPMcMU0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685e92ca1017f7ec8a410587 [33m403[0m 57.086 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.324Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e0c921f4715a9237ee070dfb96d0ffd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0ZHeGfBm-gjkATGSeUSIf-2SVzsTjK5jC8wk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e0c921f4715a9237ee070dfb96d0ffd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zhbwFKi7ku...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.127 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.423Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:07.567Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:07.567Z","userId":"685e92cb1017f7ec8a4105b0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.940 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.570Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2e1a89dacf2903add74be4a4f253afe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GApwGM53-1QyC5Lcy0xonCuM3Fu5HR1CS714

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2e1a89dacf2903add74be4a4f253afe

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FggMUV_rzP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.459 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.663Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:07.810Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:07.810Z","userId":"685e92cb1017f7ec8a4105b6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.860 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '327fe40166cfba96229e756d1d92d221',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: adh6vklK-G62P3B7ZuM0Q7H04DeiGQwO2Ez0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 327fe40166cfba96229e756d1d92d221

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WsmFmoOdKx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.272 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685e92cb1017f7ec8a4105be {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:07.905Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92cb1017f7ec8a4105be {
      sessionID: 'c2e1a89dacf2903add74be4a4f253afe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac2e1a89dacf2903add74be4a4f253afe.tfXHWaqA2BLeqXuNXws22yfNxM%2FLrHuvmmm6QW74Mpw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685e92cb1017f7ec8a4105be [33m404[0m 85.051 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:08.830Z"}
  console.log
    CSRF token generation: {
      sessionID: '64107ce65d74565a4d5f4f24cc5f3410',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BVN91GyZ-S_CcucWgoSrNM41i-Nqv5Z480kE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 64107ce65d74565a4d5f4f24cc5f3410

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: P9lmZwFB3L...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.226 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:08.923Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:09.067Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:09.068Z","userId":"685e92cc1017f7ec8a4105e1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.398 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:09.071Z"}
  console.log
    CSRF token generation: {
      sessionID: '75d6cdd2e56aedfb7007057f22daa93b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hExuh2nb-gLeJrs-Z6n-_3gl7e3QKPz_z3_4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 75d6cdd2e56aedfb7007057f22daa93b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3NhQy46HZK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.183 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:09.173Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:09.314Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:09.315Z","userId":"685e92cd1017f7ec8a4105e7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.112 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:09.321Z"}
  console.log
    CSRF token generation: {
      sessionID: '953c7f9e6815a6fe4ebee7675cdc2623',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: e0KeBzAB-Ii3LbqJbAYsGpme8ZvDPtD_e3wQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 953c7f9e6815a6fe4ebee7675cdc2623

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4hbwDhP081...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.463 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685e92cd1017f7ec8a4105ed/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:09.414Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92cd1017f7ec8a4105ed/reset-pin {
      sessionID: '75d6cdd2e56aedfb7007057f22daa93b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A75d6cdd2e56aedfb7007057f22daa93b.eJ0xJEW0se6oOnQQ4lyBALE%2BS0OZDl6%2BO5UqNNP43fo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"1","11":"7","12":"f","13":"7","14":"e","15":"c","16":"8","17":"a","18":"4","19":"1","2":"5","20":"0","21":"5","22":"e","23":"1","3":"e","4":"9","5":"2","6":"c","7":"c","8":"1","9":"0","timestamp":"2025-06-27T12:47:09.585Z"}
[0mPOST /api/v1/operators/685e92cd1017f7ec8a4105ed/reset-pin [32m200[0m 170.459 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:09.588Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:09.734Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-27T12:47:09.735Z","userId":"685e92cd1017f7ec8a4105ed","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.858 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:10.570Z"}
  console.log
    CSRF token generation: {
      sessionID: '209f1fe0e4af40253a2aa681dc371e60',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a3rDfDNU-68q5fPWI0pT8hSGCnHUV2DwbY-0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 209f1fe0e4af40253a2aa681dc371e60

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CmEwaIMxQv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.845 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:10.670Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:10.824Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:10.825Z","userId":"685e92ce1017f7ec8a410616","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.717 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:10.828Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a42d8f8d781608597e4a613b9d8be737',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: doe5fqPD-T8Mav9pVSca_qljCSYjGPYW5e84

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a42d8f8d781608597e4a613b9d8be737

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DgdqJxurr0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.542 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:10.940Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:11.081Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:11.081Z","userId":"685e92ce1017f7ec8a41061c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.061 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:11.083Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f29639f17acff2039a143f692183c48',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LxoXF4Ly-qFBcyEBmIwadq6G3lr3crBvZtV4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8f29639f17acff2039a143f692183c48

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qdIm_1P5dr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.471 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685e92cf1017f7ec8a410622/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:11.200Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92cf1017f7ec8a410622/reset-pin {
      sessionID: 'a42d8f8d781608597e4a613b9d8be737',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa42d8f8d781608597e4a613b9d8be737.bRysTJ%2BIQEy%2BCRVXFbBDZl2j%2B7%2B5RRJ3wyQigKQHaKk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"1","11":"7","12":"f","13":"7","14":"e","15":"c","16":"8","17":"a","18":"4","19":"1","2":"5","20":"0","21":"6","22":"1","23":"6","3":"e","4":"9","5":"2","6":"c","7":"e","8":"1","9":"0","timestamp":"2025-06-27T12:47:11.369Z"}
[0mPOST /api/v1/operators/685e92cf1017f7ec8a410622/reset-pin [32m200[0m 169.402 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.241Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dbd22d6a3756daa662ccddb0010ce05b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GaRmlyoS-MpRpgOYfsXVJ5oa5JUK4ZIFsplE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dbd22d6a3756daa662ccddb0010ce05b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aubzpG6MhZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.755 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.342Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:12.485Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:12.485Z","userId":"685e92d01017f7ec8a410649","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.264 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.487Z"}
  console.log
    CSRF token generation: {
      sessionID: '9378fc25842b399cce9c0090b902e6bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bvxkhSNN-XJ04E3CazeXAgK_wFfCzgwAeYYA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9378fc25842b399cce9c0090b902e6bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 49eW_jNk9u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.270 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.578Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:12.717Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:12.718Z","userId":"685e92d01017f7ec8a41064f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.770 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.720Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2870cd3c710040ab4c80a84a0031d7a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: stxwJoZC-xLvaaMRRvnDv1H5ikTckqJIoReo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2870cd3c710040ab4c80a84a0031d7a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WbgtfnwQnv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.505 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:12.974Z"}
[0mGET /api/v1/operators/available [32m200[0m 85.381 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:13.892Z"}
  console.log
    CSRF token generation: {
      sessionID: '4980b2b19116418ab02ed0038b1dc62d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5R5yzsHs-p4izkFk7v89KAeW-0CRSNGZnQh4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4980b2b19116418ab02ed0038b1dc62d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VdnCTK6pl3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.027 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:13.986Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:14.132Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:14.132Z","userId":"685e92d11017f7ec8a41067f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.309 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:14.135Z"}
  console.log
    CSRF token generation: {
      sessionID: '6fbb91a413855dfeaea0ed5dc1d0439b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7bPItwDy-hIxXHSIDvUntZJu2QvGEtWLFWpw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6fbb91a413855dfeaea0ed5dc1d0439b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: azSPu50mJi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.065 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:14.230Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:14.374Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:14.374Z","userId":"685e92d21017f7ec8a410685","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 144.423 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:14.377Z"}
  console.log
    CSRF token generation: {
      sessionID: '66fd0a86023b2ea2c2068faeb88ad691',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WZSTwTLp-mXDht4Qk7Z5tbbDrxszTx4CsLBs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66fd0a86023b2ea2c2068faeb88ad691

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FgQ2Y7Osi3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.910 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:14.701Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 83.326 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:15.611Z"}
  console.log
    CSRF token generation: {
      sessionID: '6768edd05d38a520787b7b9998285859',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 61h6vOnk-lsVZhAjnK8hBN4xaKT-L71HbaOk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6768edd05d38a520787b7b9998285859

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1n4XBlRmko...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.701 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:15.705Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:15.856Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:15.857Z","userId":"685e92d31017f7ec8a4106b5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.344 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:15.860Z"}
  console.log
    CSRF token generation: {
      sessionID: '00ef68e548aadeef01de07521fb76736',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: haWRhRAa-NrlBAGiQytG7DlLwtarOocjflkM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 00ef68e548aadeef01de07521fb76736

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: E2UjljNUFd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.674 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:15.956Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:16.102Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:16.102Z","userId":"685e92d31017f7ec8a4106bb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.687 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:16.105Z"}
  console.log
    CSRF token generation: {
      sessionID: '10ec2453d6021718632748d2ce463100',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wnjF0yUY-UQMARKYbHkLsyezXA3iBoqnaLcI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 10ec2453d6021718632748d2ce463100

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Aucbqpy1vQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.483 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:16.371Z"}
[0mGET /api/v1/operators/available [32m200[0m 82.539 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:17.257Z"}
  console.log
    CSRF token generation: {
      sessionID: '37b21f7ac784be1e810a2f86f5df10da',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yoAlHSQa-iKzDaDVzG9mjGdORaXyFhqZLSSw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 37b21f7ac784be1e810a2f86f5df10da

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3Flu1eGAkG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.468 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:17.356Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:17.506Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:17.507Z","userId":"685e92d51017f7ec8a4106eb","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.915 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:17.509Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af729804d077cea2b3b21f07303667f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NzePTOd1-oOzuxEnt_FrtWeaCEgpliawuHp4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: af729804d077cea2b3b21f07303667f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Au0o7WcMKR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.312 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:17.606Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:17.747Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:17.747Z","userId":"685e92d51017f7ec8a4106f1","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.403 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:17.750Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a9c72cbd6b57572019df50f0b7a50cc2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lzw9GnFc-lWAkAlLQXfAk_xJAQHC_Ev6nje8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a9c72cbd6b57572019df50f0b7a50cc2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bUPIWmOLnp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.245 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:18.005Z"}
[0mGET /api/v1/operators/available [33m401[0m 1.021 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:18.818Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a42779ae9be23af634ccd869297dee7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rOAFWrEo-e5x8JlO9W3YgKG2PwQIOxLf_K4M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a42779ae9be23af634ccd869297dee7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nbvy1jy4lv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.530 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:18.920Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:19.063Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:19.063Z","userId":"685e92d61017f7ec8a41071e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.739 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:19.067Z"}
  console.log
    CSRF token generation: {
      sessionID: '1dd55beb6caf0f6b17a28ad4e9964b86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BuM7fI5J-WZ7qy85lN7kJ6KkvND3UMYGTMVY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1dd55beb6caf0f6b17a28ad4e9964b86

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CtsDI7V2DR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.768 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:19.163Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:19.312Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:19.312Z","userId":"685e92d71017f7ec8a410724","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.246 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:19.315Z"}
  console.log
    CSRF token generation: {
      sessionID: '603c6d4a5deb0e5dd0683aece9717dbb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: G8b1dow4-CS42RLydjDs6fZQK95oA6JeZpDg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 603c6d4a5deb0e5dd0683aece9717dbb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7b453yn0dQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.664 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92d71017f7ec8a41072a/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:19.408Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92d71017f7ec8a41072a/stats {
      sessionID: '1dd55beb6caf0f6b17a28ad4e9964b86',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1dd55beb6caf0f6b17a28ad4e9964b86.7%2BiLIGaDCXwacwQ1yblVdPgFnhZrTpBlN%2FEUEtOP0%2Fk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92d71017f7ec8a41072a/stats [32m200[0m 118.479 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.353Z"}
  console.log
    CSRF token generation: {
      sessionID: '4f3372a25f3a1d1a673203962de6d497',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HQ3LNNrC-CwBZyZ4KQpNKT9DPF_fRnTO4uDs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4f3372a25f3a1d1a673203962de6d497

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DLGbSK-GpQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.876 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.445Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:20.586Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:20.586Z","userId":"685e92d81017f7ec8a41074f","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 141.455 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.589Z"}
  console.log
    CSRF token generation: {
      sessionID: 'adf976023db62f0c778fd488e60ba632',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6VavTVZQ-6TxKqCRyYI1vNACsdx9sFfxU9xg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: adf976023db62f0c778fd488e60ba632

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cMZJd3D4td...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.883 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.679Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:20.821Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:20.821Z","userId":"685e92d81017f7ec8a410755","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.234 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.824Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e91a543c4070338ecbbec991c038eef5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Qlz29Ojt-Ul28o3dkR9r1dEK4fCOaBvPZ-pE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e91a543c4070338ecbbec991c038eef5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qixHHLuhkU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.967 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92d81017f7ec8a41075b/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:20.930Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92d81017f7ec8a41075b/stats {
      sessionID: 'adf976023db62f0c778fd488e60ba632',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aadf976023db62f0c778fd488e60ba632.di%2F2Q2kCIUTnwS0T3eakLhtKgmqPMaBg%2BJlAzUgEN0s',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92d81017f7ec8a41075b/stats [32m200[0m 112.148 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:21.845Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd41ef9bd1e0ef5022db9ad825514c630',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0KbJ8lR6-WQV9Qmg3izr6WlCcMmnqiMTrPR0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d41ef9bd1e0ef5022db9ad825514c630

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6wVOV3wRRE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.772 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:21.934Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:22.076Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:22.076Z","userId":"685e92d91017f7ec8a410780","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.267 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:22.079Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d841c329b75c4689badf0b96cc25340',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kONRi4CR-OC5nEmPC6Sby1OQg_So6nSXND2I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d841c329b75c4689badf0b96cc25340

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0G7Wc-2lN7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.636 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:22.171Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:22.311Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:22.312Z","userId":"685e92da1017f7ec8a410786","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 141.086 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:22.314Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6407cef13de7a4e63a893db633dbe66',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1ZjDLQQH-ZHul0cPjd_oZaEmeZLbG7e9_TKw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6407cef13de7a4e63a893db633dbe66

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8vpYzJoLAt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.976 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92da1017f7ec8a41078c/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:22.405Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92da1017f7ec8a41078c/stats {
      sessionID: '2d841c329b75c4689badf0b96cc25340',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2d841c329b75c4689badf0b96cc25340.LdU%2BqN%2BHyDVzajlcfK4P4%2F6KkS9%2BLqXU2k8UZznR7sQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92da1017f7ec8a41078c/stats [32m200[0m 111.890 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.327Z"}
  console.log
    CSRF token generation: {
      sessionID: '53fbad9161d0761d4c660bc667cae605',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ioH7Kiyd-jp3AVmY6FddvItAsnEFn1a_9o1I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 53fbad9161d0761d4c660bc667cae605

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8LUaEq_8gv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.218 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.423Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:23.565Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:47:23.566Z","userId":"685e92db1017f7ec8a4107b1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 142.484 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.568Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c165a367da2116a7df745f1faf56275',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h683C7w8-_Ocyc4Y2S94e08O33Ieb_zU9pV0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2c165a367da2116a7df745f1faf56275

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bJN94PQ5DM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.661 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.694Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:23.833Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:47:23.834Z","userId":"685e92db1017f7ec8a4107b7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 139.753 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.837Z"}
  console.log
    CSRF token generation: {
      sessionID: '01cc4d1a766849f1080e0a136ab53470',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dJXkEt8s-7KKIs5hxa-KME2YD2jlrXWZbn3A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 01cc4d1a766849f1080e0a136ab53470

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: okcXwu8qNJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.982 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685e92db1017f7ec8a4107bd/stats {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:23.930Z"}
  console.log
    CSRF check for: /api/v1/operators/685e92db1017f7ec8a4107bd/stats {
      sessionID: '2c165a367da2116a7df745f1faf56275',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2c165a367da2116a7df745f1faf56275.aYn27nxqX%2FjZoOS5cDoqkv4UzYERYbOmKpKs53GV0pk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685e92db1017f7ec8a4107bd/stats [33m400[0m 55.747 ms - 62[0m
PASS tests/integration/operator.test.js (61.191 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2303 ms)
      ✓ should filter by active status (1530 ms)
      ✓ should filter by on-shift status (1522 ms)
      ✓ should support pagination (2517 ms)
      ✓ should require authentication (1343 ms)
      ✓ should require operator management permissions (1650 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1558 ms)
      ✓ should allow operators to view their own profile (1436 ms)
      ✓ should prevent operators from viewing other operators (1503 ms)
      ✓ should return 404 for non-existent operator (1482 ms)
    POST /api/v1/operators
      ✓ should create new operator (1656 ms)
      ✓ should validate required fields (1371 ms)
      ✓ should validate email format (1394 ms)
      ✓ should validate shift time format (1446 ms)
      ✓ should prevent duplicate emails (1421 ms)
      ✓ should require operators.manage permission (1681 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1590 ms)
      ✓ should update password (1898 ms)
      ✓ should deactivate operator (1665 ms)
      ✓ should allow operators to update their own profile (limited fields) (1738 ms)
      ✓ should prevent operators from changing their own work station (1702 ms)
      ✓ should not allow updating operatorId (1597 ms)
      ✓ should validate email uniqueness on update (1569 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1654 ms)
      ✓ should prevent deleting operator with active orders (1576 ms)
      ✓ should require operators.manage permission (1711 ms)
      ✓ should handle non-existent operator (1502 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1743 ms)
      ✓ should clear login attempts on PIN reset (1670 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1650 ms)
      ✓ should respect limit parameter (1720 ms)
      ✓ should only include active operators (1646 ms)
      ✓ should require authentication (1562 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1534 ms)
      ✓ should update quality score (1495 ms)
      ✓ should update both stats in one call (1480 ms)
      ✓ should validate processingTime is positive (1467 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:25.727Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:26.596Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yc3HW480-ar0tB3WiEbXm0JDxNjGYy0j1cNk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.542 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:27.784Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gCbcvz6E-Bjivqz2LksghF-wGltL9oRdafZo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.119 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:27.823Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 30.822 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:28.720Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v9dwvbjg-6HwFHdxFBsTJctsmiZ5kPxMtZ3I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.183 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:28.760Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 32.838 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:29.658Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UEGKx8wy-RLauj6vFIRgQp2GK0OstED1Jr0k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.843 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:29.667Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 27.463 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:30.542Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lg2VcmXx-Ag3yGfE3n2gybneyZKvt5GBFBVo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.662 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:30.584Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:30.585Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:30.587Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 31.318 ms - 58[0m
[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 34.759 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1686:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 33.037 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:31.542Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nOgDGywN-63S1EZyT9Yh8JPv_p4O9y0aqAkY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.067 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:31.552Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-88b3a17a-a699-4929-89e2-90918c619094","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:31.764Z","userId":"685e92e33324b015e2ee39fb","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 213.287 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:32.670Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wHdvA6Qt-0Jxcd9y1sZ-JgRZ1TEgn-HbkuTk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.644 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:32.677Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.450 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:33.580Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eVaKrHFY-HSEEhbG1Y40BVXmUPX8X_WiOrR8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.424 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:33.594Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-7445bec6-3919-4ef1-9c3a-3dd9e6c60bd4","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:33.807Z","userId":"685e92e53324b015e2ee3a46","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 213.793 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:33.811Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 85.061 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:34.785Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mDFvwzXG-HX34P8xtaLIFKl4ZGWfUHVkybUQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.862 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:34.825Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 56.764 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:35.764Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g9Zabq0C-Y4pHqmpzF-DMWBakbc0mIUDYM7s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.894 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:35.774Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-aadde72c-d027-4786-9f1c-0e2e88c1d6f4","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:35.973Z","userId":"685e92e73324b015e2ee3a96","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 198.946 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:35.977Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-7f063199-81f8-476c-af3d-3338a0eb7bee","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:36.245Z","userId":"685e92e83324b015e2ee3a9e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 268.614 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:36.249Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-2166f3ca-a369-4f85-a46c-7964b79692a5","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:36.515Z","userId":"685e92e83324b015e2ee3aa7","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 266.515 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:37.428Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mBUg2Zrv-2SjVsHNYeqtDPnjVH5zMv-R_Lc4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.534 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:37.469Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-f367600c-3b49-43e8-b238-5e623767048a","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-27T12:47:37.697Z","userId":"685e92e93324b015e2ee3ad3","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 228.015 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:38.636Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FXPAfLs1-1qtvWwdGENwouM7OMl4ABjfBKLc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.803 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:38.644Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 109.589 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:39.638Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uMLDvF6j-LDUWKypG1Xutx_ecuJ8JPTtqsOw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.637 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:39.678Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8efa31784e05576d1e161e7243122b08.GPhtLvO3zD9pN0PjzZ26fnpg2RoKOiSoS7uLToJn220',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:47:39.773Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-27T12:47:39.773Z","userId":"685e92eb3324b015e2ee3b1e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 95.505 ms - 560[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:40.650Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ezGaVza5-pPBS4OMaEP2UoTiYVdjj6KbbSCs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.084 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:40.721Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8efa31784e05576d1e161e7243122b08.GPhtLvO3zD9pN0PjzZ26fnpg2RoKOiSoS7uLToJn220',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-27T12:47:40.842Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 121.317 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:41.740Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 62guZtdF-FTkgXFnUtDjg80C9m-zOvLZ_OlY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.729 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:41.752Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8efa31784e05576d1e161e7243122b08.GPhtLvO3zD9pN0PjzZ26fnpg2RoKOiSoS7uLToJn220',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 57.205 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:42.694Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pPWws4mG-4LQ4iY5bRLr2OVssHJm-0NlGpe4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.213 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:42.737Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8efa31784e05576d1e161e7243122b08.GPhtLvO3zD9pN0PjzZ26fnpg2RoKOiSoS7uLToJn220',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-27T12:47:42.823Z","userId":"685e92ee3324b015e2ee3b92","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 85.854 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:43.703Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: k485hgOT-hhKvB4dnv1eiqfTNe50BWArqYlk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.785 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:43.712Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-be360ac5-5187-47e8-adad-b2f5e71270b2","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-27T12:47:43.914Z","userId":"685e92ef3324b015e2ee3bbb","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 202.505 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:44.796Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P5v3TnQ2-cKDjzTv42cJKAERgYCuLrD1JDnw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.053 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:44.811Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.410 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:45.691Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ycax3x2w-A6veMsbmfvlBx_B1WuWbPVJ-uqQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.579 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:45.699Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.784 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:46.580Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 26TWdyJ1-kz8vcYOHRsailfbviYPIuPN3vZw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.321 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:46.588Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.401 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:47.477Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0QBRwkxe-TGRGpbSEivaLgRz5wA2PEiRK_j0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.260 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:48.453Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pkqP0vjn-6oHTV10RyRfzO_f4tYjUyNTgugQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.368 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:49.427Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WxXjgcnL-2lnrr7qp_5wHVJ7rPd4GyyN-63o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.786 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:49.498Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 32.570 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:50.434Z"}
  console.log
    CSRF token generation: {
      sessionID: '8efa31784e05576d1e161e7243122b08',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Q44KsRi3-3wdSa-pcx9ixbSDXnhEEJalmelk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8efa31784e05576d1e161e7243122b08

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XMJnNoIrPA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.073 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:50.504Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1686:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1705:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 32.948 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (26.557 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1632 ms)
      ✓ should poll for OAuth session results with complete data structure (937 ms)
      ✓ should poll for OAuth login session results (937 ms)
      ✓ should return pending status for non-existent session (876 ms)
      ✓ should handle session polling race conditions (1002 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1131 ms)
      ✓ should reject registration with malicious social data (909 ms)
      ✓ should prevent duplicate social account registration (1202 ms)
      ✓ should prevent duplicate email registration (979 ms)
      ✓ should generate unique usernames for social registrations (1664 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1210 ms)
      ✓ should reject customer registration with invalid affiliate ID (1003 ms)
    Social Login
      ✓ should login existing affiliate with social account (1012 ms)
      ✓ should login existing customer with social account (1090 ms)
      ✓ should return error for non-existent social account (954 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (1007 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (1093 ms)
      ✓ should handle expired JWT tokens gracefully (893 ms)
      ✓ should handle invalid JWT tokens (892 ms)
      ✓ should validate required fields (891 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (981 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (975 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (1006 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (1036 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:52.408Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:52.738Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ed8bd5bc6d6102fca2cf01006de949f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GWyGrKEp-mFrrYidj6tNVLFjREc7B8kloiqw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ed8bd5bc6d6102fca2cf01006de949f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: opTcYveG7B...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.919 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:53.423Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:47:53.582Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 159.485 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:54.389Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4c29101271d18e90ae6032a19e985e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: I7uOkzdG-LvJDDaZurzcRpSEzTtrWexEQo28

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4c29101271d18e90ae6032a19e985e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QiewBjFKKI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.660 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:54.624Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T12:47:54.707Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 83.221 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:55.428Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be10bd5b72771297c15e60a63113b24a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jAcTSClj-sLLDrrlcEwS_gGuLsf2zo_L5b20

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: be10bd5b72771297c15e60a63113b24a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: F6mQEyn1p9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.735 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:55.565Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-27T12:47:55.593Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 28.394 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:56.310Z"}
  console.log
    CSRF token generation: {
      sessionID: '04e54ded622145d038b3ccabebce710d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mKONGwwc-CgLmpGs5_phThOHQa7C8G7Ocd4U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 04e54ded622145d038b3ccabebce710d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MiEcx3YGen...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.939 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:56.563Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 145.135 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:57.442Z"}
  console.log
    CSRF token generation: {
      sessionID: '5cf05c0e77f374fcffdfef5d643ff610',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WfJEqOY6-wcHaXjB_3ZVGEeYoOXktzHeFldU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5cf05c0e77f374fcffdfef5d643ff610

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gyl3THbmF4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.163 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:57.703Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 157.479 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:58.612Z"}
  console.log
    CSRF token generation: {
      sessionID: '4549ca46055a583bbcde589d8b71b8cd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VTDNckqE-nUazP8ARsCI9kH_raO-0MpkX1yw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4549ca46055a583bbcde589d8b71b8cd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: D5-H_eiPv8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.407 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:58.872Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.250 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:47:59.768Z"}
  console.log
    CSRF token generation: {
      sessionID: '50b9463a37282b6392fa24649c2aa3c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Y4qzy20Z-pOl69gONd7SmXic-_lawrZZYD-Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50b9463a37282b6392fa24649c2aa3c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kg67zNHd_X...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.674 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:00.017Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 151.231 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:00.916Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a897a36148ba532882421a7c5d9af465',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h8AzsLGQ-oe_Qrv-hBgCfhAlNIcPqUvivvEE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a897a36148ba532882421a7c5d9af465

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W9G43MCHrF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.101 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:01.056Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 28.415 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:01.807Z"}
  console.log
    CSRF token generation: {
      sessionID: '19adb694f16df8598266b90d56930dc6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: afLNcNou-NdrTdSR47Q6AUYS7y4vgy-tsT2A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 19adb694f16df8598266b90d56930dc6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XzLRjerVuE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.048 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:02.049Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:02.206Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 157.491 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:02.209Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.106 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:02.975Z"}
  console.log
    CSRF token generation: {
      sessionID: '6c21e6364eced6f017663d3d9a3c01bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MkSWNgyh-cE4UACYcwuNBO-wimxVTRdd-LSA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6c21e6364eced6f017663d3d9a3c01bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2bs_yAiggQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.862 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:03.116Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.643 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:03.856Z"}
  console.log
    CSRF token generation: {
      sessionID: '2a39da0914a158c47ca433bd2c432016',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: d8Q0wXCV-c17W8yNaiULhD5uis6Hj6X_F2VQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2a39da0914a158c47ca433bd2c432016

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kpvcqC4UQd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.909 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:03.994Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.101 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:04.708Z"}
  console.log
    CSRF token generation: {
      sessionID: '50a9530edf040ea8304603a3267fb1db',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YUOF3xh9-oIrWBlOgLQtpX0Hdg5dzmrw7SBI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50a9530edf040ea8304603a3267fb1db

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KfGJjXhbpx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.654 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:04.931Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:05.078Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.226 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:05.082Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 126.025 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:05.937Z"}
  console.log
    CSRF token generation: {
      sessionID: '214e4336f761b6510a8bfb629f8bdccc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wkzqPeKl-ktyI_x3u0GtlU1v8kQbeDxpFoLY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 214e4336f761b6510a8bfb629f8bdccc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ub2ygd-KY3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.013 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:06.076Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.318 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:06.809Z"}
  console.log
    CSRF token generation: {
      sessionID: '01c3f2c7a3288a66071c5f7d17e497a8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3DFyF8NH-uqJMlMDRSzy9-H9Ja_05mSQ0rAo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 01c3f2c7a3288a66071c5f7d17e497a8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4eZjygLuUX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.423 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:07.062Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.495 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:07.816Z"}
  console.log
    CSRF token generation: {
      sessionID: '87d710746bf8e6257c9033bb1fe03a6a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bR7cr6i8-aabUz3Dz058yaDTFFuwxaB1Y4TM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87d710746bf8e6257c9033bb1fe03a6a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -e_yPnRqDl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.148 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:08.044Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:08.191Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.072 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:08.193Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '87d710746bf8e6257c9033bb1fe03a6a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A87d710746bf8e6257c9033bb1fe03a6a.ZCNNb%2B9%2F26AGEsaF7UFJfW2SQJJ5KEk%2Ftp6c7FhZqCY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 90.692 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:08.287Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.548 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:08.318Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.186 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.080Z"}
  console.log
    CSRF token generation: {
      sessionID: '73e67b9a125f75228f274e941db35610',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lO4X3NsG-Wh7NepxVWByoFNkzIvJP1D2JfMM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 73e67b9a125f75228f274e941db35610

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k9aOpTh93F...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.600 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.312Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:09.452Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 140.037 ms - 544[0m
  console.log
    Got refresh token: 5f23d9d07ce4d8882528ff1f5849ab5a862507788ae5771ff8df93d3fb8dacb380557fb7dc738140

      at Object.log (tests/integration/auth.test.js:804:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:818:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.480Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.483Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.485Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.487Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:09.488Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 30.102 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.856 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.540 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.532 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 118.655 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NWU5MzA5NzRiMDY3ODhlNjNiZmQzNSIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MTAyODQ4OSwiZXhwIjoxNzUxMDMyMDg5LCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.TbnvKLi3eEQzQ7c2tv0UrnwsZtfTXa0RYsvNy8kW-rc',
          refreshToken: '96c4b462f622dd2611f8bea6b8d76bac291af617ac55443d13c0d70b4d9389376829bd3c2c0a80af'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:820:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:10.322Z"}
  console.log
    CSRF token generation: {
      sessionID: '0191e2e0429d622577604e5ce2b6d984',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3MExak9D-wZZ60jxQlc-hvWuaKJiYZ2b5X1A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0191e2e0429d622577604e5ce2b6d984

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0XbjssLV_n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.001 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:10.549Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:10.711Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 162.355 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:11.816Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:11.964Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.345 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:11.967Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.186 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:11.998Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.304 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:12.027Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '0191e2e0429d622577604e5ce2b6d984',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0191e2e0429d622577604e5ce2b6d984.qADlub8HbE5YZqRbvmrs1i2KCLmc5gso1UZGdZyXtiY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.175 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:12.121Z"}
[0mGET /api/v1/auth/verify [33m401[0m 27.959 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:12.152Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.264 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:12.183Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '0191e2e0429d622577604e5ce2b6d984',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0191e2e0429d622577604e5ce2b6d984.qADlub8HbE5YZqRbvmrs1i2KCLmc5gso1UZGdZyXtiY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.234 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:12.277Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.308 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:13.037Z"}
  console.log
    CSRF token generation: {
      sessionID: '8547d4d09a37c1126709e06e2621b759',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MFr3upp3-B3n4UuAx1sa8m80PmyjmhnoEWzI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8547d4d09a37c1126709e06e2621b759

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W02FKJJo6u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.247 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:13.277Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:13.437Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-27T12:48:13.437Z","userId":"685e930d74b06788e63bfd9d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.739 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:14.161Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c92930355741cb005dd494b2ed57bf40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ijgCTqK5-EX2MPoYfnq7lKUjo2Ue_ntj1k8o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c92930355741cb005dd494b2ed57bf40

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VIEHeMLh7H...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.424 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:14.379Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T12:48:14.495Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 116.553 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:15.224Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cc044e84323fa1386da68461650697df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UxT02QTJ-_WfnpfqKsB-okm543l7hDxfcunk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cc044e84323fa1386da68461650697df

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Z3ytFTTuYt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.473 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:15.447Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T12:48:15.475Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 27.663 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:16.200Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cb5c980927a562f4ad337b09fa0fcb2c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9aSpWW9s-q4geGmiJhuJ2k9RFHiT3oUXpyuA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cb5c980927a562f4ad337b09fa0fcb2c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rq8KH18YEl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.652 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:16.506Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-27T12:48:16.667Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-27T12:48:16.667Z","userId":"685e931074b06788e63bfe0f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 161.121 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:17.402Z"}
  console.log
    CSRF token generation: {
      sessionID: '4f5e81c8b58b9dd4aee253606c76aaa1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZYNj6rim-pZkma7VrpL9XTekSzMrMwao7fpM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4f5e81c8b58b9dd4aee253606c76aaa1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GaxDcORGTM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.827 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:17.696Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-27T12:48:17.807Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 110.583 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:18.531Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e47b95c67f362e6ee00472c5f884974',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2y3zChBg-fnHFik5aGLOCHejsV7iWaPp50m4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0e47b95c67f362e6ee00472c5f884974

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: T7eUz3yS3D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.768 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:18.832Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-27T12:48:18.861Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.832 ms - 82[0m
PASS tests/integration/auth.test.js (28.017 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1668 ms)
      ✓ should fail with invalid credentials (1038 ms)
      ✓ should fail with non-existent username (882 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1131 ms)
      ✓ should login customer using emailOrUsername field with email (1170 ms)
      ✓ should login customer using emailOrUsername field with username (1156 ms)
      ✓ should prioritize emailOrUsername over username field (1148 ms)
      ✓ should return error with invalid emailOrUsername (891 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1168 ms)
      ✓ should fail with invalid token (881 ms)
      ✓ should fail with missing token (851 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1228 ms)
      ✓ should fail with invalid refresh token (871 ms)
      ✓ should fail with expired refresh token (1007 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1264 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1241 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2714 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1125 ms)
      ✓ should fail with invalid administrator credentials (1063 ms)
      ✓ should fail when administrator is inactive (976 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1202 ms)
      ✓ should fail with invalid operator credentials (1130 ms)
      ✓ should fail when operator is inactive (1083 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:20.424Z"}
(node:1595247) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:49:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:20.718Z"}
  console.log
    CSRF token generation: {
      sessionID: '4376c6b2e617de57bf5eb17d770cf7d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NPXLRHZV-PQKUh2CcZgYnIbIedDVLxZqFkU8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4376c6b2e617de57bf5eb17d770cf7d9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8_P_d_EXpB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.029 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:21.385Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '4376c6b2e617de57bf5eb17d770cf7d9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4376c6b2e617de57bf5eb17d770cf7d9.ROoTevIC6OyjdRgMeZtcYbEHw197ajmT3ShOA90lWqM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 235.386 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:22.468Z"}
  console.log
    CSRF token generation: {
      sessionID: 'afca62062a39780b2e13992fa4ee86f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mjSklAyw-aH8160PzbcXISPVQi05KpBWUMoI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: afca62062a39780b2e13992fa4ee86f9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2oDhoaqJEe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.441 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:22.717Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'afca62062a39780b2e13992fa4ee86f9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aafca62062a39780b2e13992fa4ee86f9.tlPJql%2BDGNyYu7k4LMnbhyqHttIl6EStj72iWbgeOPI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 222.648 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:23.680Z"}
  console.log
    CSRF token generation: {
      sessionID: '8369389bdff65846f8cdd7531ee09006',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iYCIdM3L-lL2AwFcwhvLgi1SA7r5JeanjZBk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8369389bdff65846f8cdd7531ee09006

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ioBVZXUTb3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.607 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:23.975Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '8369389bdff65846f8cdd7531ee09006',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8369389bdff65846f8cdd7531ee09006.oEQjVYkRnfScgOPGVBlrnbvcs9T2azm3URr0X4mC%2B7c',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:130:15)

[0mPOST /api/v1/orders [33m400[0m 61.384 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:24.770Z"}
  console.log
    CSRF token generation: {
      sessionID: '032aa1dfd4a2345b082d5281f9565119',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iLHUh3ZY-lesHukBeQGiZeyEWr5anGTzU8Os

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 032aa1dfd4a2345b082d5281f9565119

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kFmHS1jUkv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.232 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:25.030Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '032aa1dfd4a2345b082d5281f9565119',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A032aa1dfd4a2345b082d5281f9565119.17uDzU%2FqdGsxtJyzwcw8xz3NB36jMBKJW26PVT3JXx4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:159:15)

[0mPOST /api/v1/orders [33m400[0m 109.488 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:25.862Z"}
  console.log
    CSRF token generation: {
      sessionID: '2943f1b3a759a3842d5d15b25dd43832',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mTxUoJbs-wj7wyvWJSDhBmcb0Co9BdcQjcls

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2943f1b3a759a3842d5d15b25dd43832

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YJHEIVsnzv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.140 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:26.156Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '2943f1b3a759a3842d5d15b25dd43832',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2943f1b3a759a3842d5d15b25dd43832.AYzxbXkXW3UmnFQfR%2BtXEwWCm%2F05%2FI5%2FEPE5ypGLnCI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [33m403[0m 110.725 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:26.999Z"}
  console.log
    CSRF token generation: {
      sessionID: '10a2be001c0ef080f096cd76b062d231',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bGqDO3Ml-M2P-B-hpLYJ8-8KCyQO9MAcoL4M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 10a2be001c0ef080f096cd76b062d231

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: r6BnP3F8Wm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.545 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:27.274Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '10a2be001c0ef080f096cd76b062d231',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A10a2be001c0ef080f096cd76b062d231.roiz8DgFv6NhSdMxM4loDp%2F9RLotA2hcg%2BYC0dfibaw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:105:15)

[0mPOST /api/v1/orders [33m400[0m 30.482 ms - 444[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:28.028Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cee31dee5580bc944771f4847cb4c264',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bRAX0tiI-7E2YuutdtbvG8Qm6PCQ14uIDi_0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cee31dee5580bc944771f4847cb4c264

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rTmuoOVHRM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.394 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:28.318Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 108.589 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:29.155Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ff0277576ba993a611f183fc9f7fc1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SKBrNJN5-aJ_H-DLgHRDpklBwLzmMqpQsJwY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6ff0277576ba993a611f183fc9f7fc1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aDCHXVwVYE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.628 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:29.447Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 108.785 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:30.289Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bdeef299c95a37d16553a039579f1204',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5Qb9DIXK-z1dz-YcHqzW8yaHVW-LF2oHJdAo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bdeef299c95a37d16553a039579f1204

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2flPaRl79p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.164 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:30.599Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 55.395 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:31.384Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb69da8a931994c6365ce8633a5bcf65',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VfglBHbb-3tp6fizRH81iopWbliC49HbnC5w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb69da8a931994c6365ce8633a5bcf65

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wjbhnBDeDS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.959 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:31.682Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 53.790 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:32.470Z"}
  console.log
    CSRF token generation: {
      sessionID: '2dbf0210352513b467156ea3ff20c791',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HUhx67Fv-X1LeuF-bDPuOheO5m8UnOoyEyDc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2dbf0210352513b467156ea3ff20c791

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aobHEsQIJF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.713 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:32.753Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '2dbf0210352513b467156ea3ff20c791',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2dbf0210352513b467156ea3ff20c791.KE8BlGB0%2FIQlvziTKJKcXueQRcFdJ%2FX79XNPrm2NAVA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 140.457 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:33.654Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b0a3551508c79b94955f5eb04911b65',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KvrvfWma-iDEsKfwjuLKSCDEOl3GrfIXllKk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b0a3551508c79b94955f5eb04911b65

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0Gj6vtYhga...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.465 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:33.975Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '8b0a3551508c79b94955f5eb04911b65',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8b0a3551508c79b94955f5eb04911b65.Z3cbh8aKTHn5nXJTIoUX%2F3%2FQmBxlvRuFyUE8pPtrd68',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 141.590 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:34.869Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f8f81f4cf4163aadde3501c00ab80c88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xtMh69eG-9F2LLPLmoSxy4th3fFN6OdGqZwg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f8f81f4cf4163aadde3501c00ab80c88

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Z6mX1c3gJy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.858 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:35.248Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'f8f81f4cf4163aadde3501c00ab80c88',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af8f81f4cf4163aadde3501c00ab80c88.%2BRANrMfMizv%2Bdyxr%2F5rI93hV2iskpNHyFe%2FOIrr8aDI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 56.886 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:36.040Z"}
  console.log
    CSRF token generation: {
      sessionID: '129e0f2073ba7af8e749e8f4baaf05cd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wTjyF9zZ-Um1a7L3KF6PgCdfUcfvXvxrhhSU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 129e0f2073ba7af8e749e8f4baaf05cd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Xjmwzls2Mb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.708 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:36.336Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '129e0f2073ba7af8e749e8f4baaf05cd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A129e0f2073ba7af8e749e8f4baaf05cd.O9vrCVCXkgZ4%2BUsglMY8mz2%2Brv%2FvdUd%2BFwK3k7TSjFs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 55.298 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:37.123Z"}
  console.log
    CSRF token generation: {
      sessionID: '10aafe90854bd6f53e28a059c851eded',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4akBeL8Q-7r1DqtGavAEyOkY-9ANCUXGYI2U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 10aafe90854bd6f53e28a059c851eded

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AEx0-XSFHK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.923 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:37.423Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '10aafe90854bd6f53e28a059c851eded',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A10aafe90854bd6f53e28a059c851eded.CwF9%2BXK30VzgZu%2F7LArn4myS30gy9R2g0iL01Rd9XOY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 56.071 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:38.212Z"}
  console.log
    CSRF token generation: {
      sessionID: '34fd283b75779d96625cd396767663d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WggcQlod-z5XO9v3jOQLdb619rwT-48-gc-8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 34fd283b75779d96625cd396767663d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ja8_XiZcDZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.938 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:38.502Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '34fd283b75779d96625cd396767663d6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A34fd283b75779d96625cd396767663d6.Rx6S7kbCWr8dXLyMKOccTJbsNRy3ztHNQuBBwJs02DQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 143.979 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:39.401Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a135863b2eaef9c29fe9a9d8f5980e8d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: u4yfIYqP-A1E4vpIfe9J4OV4fQe3TT4TWn_E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a135863b2eaef9c29fe9a9d8f5980e8d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oxK7snfRd-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.631 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:39.687Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'a135863b2eaef9c29fe9a9d8f5980e8d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa135863b2eaef9c29fe9a9d8f5980e8d.b2MKiVVZsvQjL2ySe8G3vB3fd0tciarrbOEN88OMpto',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 137.588 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:40.555Z"}
  console.log
    CSRF token generation: {
      sessionID: '703bdd753a0153476c06960edcec9c50',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7x6L5spE-ol-yxBhqy3Wr2zHFFo9_MeYyURU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 703bdd753a0153476c06960edcec9c50

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: z8e7bTJ4kx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.294 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:40.867Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '703bdd753a0153476c06960edcec9c50',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A703bdd753a0153476c06960edcec9c50.Av6%2FJ1HI8qtLIZHEy9iVTEFw7Ya3Uh%2Bo2xgZidyWAvs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 55.442 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:41.656Z"}
  console.log
    CSRF token generation: {
      sessionID: '38dee9b5d86fe1ac304615c720cd7dc0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2C9u6us0-oN1k2NpsMV8ASpj09RPlhgCDmPI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 38dee9b5d86fe1ac304615c720cd7dc0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8WXy2UORin...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.973 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:41.943Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '38dee9b5d86fe1ac304615c720cd7dc0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A38dee9b5d86fe1ac304615c720cd7dc0.jYXSnCvA4nfI3E1tUpA636pqoaVvzfn82Z%2Fza%2BWyAhs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 55.648 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:42.735Z"}
  console.log
    CSRF token generation: {
      sessionID: '5eef1d77f5aefa8a1d40a10ebd67577b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: feb6uNVu-PKGxcOKIuqcn7ShV7m6Wg7JrK7I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5eef1d77f5aefa8a1d40a10ebd67577b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5k7vS3hjMo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.372 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:43.023Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '5eef1d77f5aefa8a1d40a10ebd67577b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5eef1d77f5aefa8a1d40a10ebd67577b.uhNvWZsu2ZV714XUO7tqpSOK1k8gb2HaCUEjrlzVvKA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 117.440 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:43.896Z"}
  console.log
    CSRF token generation: {
      sessionID: '79e674a0af7ca53487d356670686f714',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v3SLMUxE-uvjk7_VrDIG2FTRb4PPKwpkL6D8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 79e674a0af7ca53487d356670686f714

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: V_DrC_F_af...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.132 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:44.215Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '79e674a0af7ca53487d356670686f714',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A79e674a0af7ca53487d356670686f714.ivpIIytFpoEnhOTPJs7b5nls1moXf9cU73Va1vwjFn8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 117.372 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:45.058Z"}
  console.log
    CSRF token generation: {
      sessionID: '16328fe31f3da23e2795f274ec2dc259',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5KxDDbsl-ePi16H3yPKy0-0KwhwhQgriGe4U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 16328fe31f3da23e2795f274ec2dc259

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tXVHSaIL6s...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.449 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:45.345Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '16328fe31f3da23e2795f274ec2dc259',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A16328fe31f3da23e2795f274ec2dc259.WooszHtLYmlNoTQKrglSxzyq7xJCQ6ucSob%2FfWZ5rTM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 144.702 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:46.242Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d23c26839e72caccac62e1b706aef8f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SS6PrO39-voSRzTolB-Nnhby4pzn_9Nj2sRs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4d23c26839e72caccac62e1b706aef8f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u23r4azl9q...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.434 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:46.529Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 84.109 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:47.352Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e3233b68068be27c914967e9dbadde94',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uObLaf38-aS9ApqJIebIqPoyum4wa8_W5Kx0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e3233b68068be27c914967e9dbadde94

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hFSM6Sv2oz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.083 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:47.645Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 83.298 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:48.476Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ded4223b791bad8873d269134c81f0d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: c9ngBspR-u3Lk8mzzs4DVjm0D7v8sRRLAlRU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ded4223b791bad8873d269134c81f0d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 33B25Zuoyc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.641 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:48.766Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 84.810 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:49.585Z"}
  console.log
    CSRF token generation: {
      sessionID: '2dfdb8a6c979952ca5de70e48b11f201',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tpyzOYk2-LHfK_0VeE2JyXhjJutJGNCOttUE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2dfdb8a6c979952ca5de70e48b11f201

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hZsv36pjZR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.588 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:49.908Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 29.126 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:50.676Z"}
  console.log
    CSRF token generation: {
      sessionID: '97a46bd4132a0adebea6c257e2b523db',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uFU6umXi-DBayPy7qbrV0avRCtPgUlxLjTcg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 97a46bd4132a0adebea6c257e2b523db

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ORbQgfgblv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.036 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:50.976Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '97a46bd4132a0adebea6c257e2b523db',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A97a46bd4132a0adebea6c257e2b523db.HCO8kHBAEz5GVtRAoYdkD6MOGFpPnNItKDoAdBfQ8bw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 86.330 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:51.819Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fdbfd2a5edab0be4f249e1a3c999343c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jmWpCHMs-R6nQ3Ds10f1dSE7g6z4xgCb_Ehs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fdbfd2a5edab0be4f249e1a3c999343c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: etzRlEsGxv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.688 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:52.113Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'fdbfd2a5edab0be4f249e1a3c999343c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afdbfd2a5edab0be4f249e1a3c999343c.c64rKVYapBswX9pO4omu0%2FVKr2SE4xOO2FoQMEw4LBs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 83.620 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:52.955Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f20f1fe08fd9a68135e76702e3eb0972',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1vQPiZ0I-zb4elh-CghG5gDShYNOGSpQd-sk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f20f1fe08fd9a68135e76702e3eb0972

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MP_DTgquaF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.767 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:53.265Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'f20f1fe08fd9a68135e76702e3eb0972',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af20f1fe08fd9a68135e76702e3eb0972.b6PqZ0E3EVZmwLctqXK%2F%2FgizmSrAOueJDfNPF2TFnVw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 56.190 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:54.052Z"}
  console.log
    CSRF token generation: {
      sessionID: '26ccf4ff28e4aaa188aca3962777c074',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1djdDq5e-JPjeJH4bM7-OAbaMCOSasFzcA3k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26ccf4ff28e4aaa188aca3962777c074

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1ur3UFzlip...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.513 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:54.371Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '26ccf4ff28e4aaa188aca3962777c074',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26ccf4ff28e4aaa188aca3962777c074.82Pc1ndaRnGvrC9zqR0jAT2jUJMo5ZhGJk0vlWExiR8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 83.959 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:55.190Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a146622379bf548e4a4bdf12120ccf77',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CA9MCEWT-lB3r3dKSOn8ZanURjssu6iUWnOQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a146622379bf548e4a4bdf12120ccf77

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: iHbS1XO3_d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.000 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:55.517Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 140.133 ms - 552[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:56.383Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9aca072d3c2ee2ce5f2eb6ae6fa7f1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: b4ZOIZlt-LsjhqrTeOpgQmfdUTlJSUVsNDNc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9aca072d3c2ee2ce5f2eb6ae6fa7f1a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZhGem5O8cY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.475 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:56.722Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 107.532 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:57.561Z"}
  console.log
    CSRF token generation: {
      sessionID: '5d6b85874ff6c3ba16467abeccd6b415',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OhjfILWy-YrejJoEW-tqetJw-E4U0gaJ3RpM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5d6b85874ff6c3ba16467abeccd6b415

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UsnZR-CiY1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.492 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:57.899Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 108.120 ms - 945[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:58.739Z"}
  console.log
    CSRF token generation: {
      sessionID: '894088c41a73fb57cf47ed85f3eca832',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bjHhN36V-jnzQdylwtW3s-A11QMzAFVArDnk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 894088c41a73fb57cf47ed85f3eca832

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Mg4tTh1ikM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.385 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:59.065Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 55.634 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:48:59.846Z"}
  console.log
    CSRF token generation: {
      sessionID: '3f44b70bdc0a01b99d2bb674a55898a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eIrL6qvs-Dbw8HzvyAI7aU9sDJhPb20i60Xs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3f44b70bdc0a01b99d2bb674a55898a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _a_ZboWsBx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.622 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:00.495Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '3f44b70bdc0a01b99d2bb674a55898a2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3f44b70bdc0a01b99d2bb674a55898a2.z5TOl149zchzCJJE94KlDMr93G%2BDYzu%2FajpdKLTcSoQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 221.797 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:01.541Z"}
  console.log
    CSRF token generation: {
      sessionID: '4287daab0e1746b83d73340051140e42',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P9NLYYi7-Bh9fTpUNJ_rN7DesDdlIVznbc1g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4287daab0e1746b83d73340051140e42

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cF49xZFdIh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 21.558 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:02.297Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '4287daab0e1746b83d73340051140e42',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4287daab0e1746b83d73340051140e42.vRpaKqF4X0uUdsBArMcedA1fWvapWTj1OEeavh6P5O8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 221.572 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1139:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:03.449Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd33def88b9a1252383f2e1d2eba6d56d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XJpMX6be-80ic10BrR8mPom5em2JP9gUNxyw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d33def88b9a1252383f2e1d2eba6d56d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qN2Bv-7lb9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.670 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:04.233Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'd33def88b9a1252383f2e1d2eba6d56d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad33def88b9a1252383f2e1d2eba6d56d.ArqN8c%2BldhdQ48s1KMpJqUv6aw9mSD7Pn6B%2Fe5EwwNU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-0',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-0

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test0 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 227.414 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:04.553Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'd33def88b9a1252383f2e1d2eba6d56d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad33def88b9a1252383f2e1d2eba6d56d.ArqN8c%2BldhdQ48s1KMpJqUv6aw9mSD7Pn6B%2Fe5EwwNU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-1',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-1

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test1 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 222.322 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:04.865Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'd33def88b9a1252383f2e1d2eba6d56d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad33def88b9a1252383f2e1d2eba6d56d.ArqN8c%2BldhdQ48s1KMpJqUv6aw9mSD7Pn6B%2Fe5EwwNU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-2',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-2

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test2 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 232.587 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:06.044Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f1e1b21d84b7bfc2a3558b67275a7325',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZvqEl5Qa-uvfC2Bmor-SZeOyERYl9XkOX2Ow

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f1e1b21d84b7bfc2a3558b67275a7325

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZgsJjLpKeG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.431 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-27T12:49:06.790Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'f1e1b21d84b7bfc2a3558b67275a7325',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af1e1b21d84b7bfc2a3558b67275a7325.B2C8OHk%2FwBi5SfoiyB%2BLg%2BcBvgHc0aFzO6%2B5OYeMIog',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 235.397 ms - 104[0m
PASS tests/integration/order.test.js (48.157 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1765 ms)
      ✓ should create order as affiliate for their customer (1212 ms)
      ✓ should fail with invalid customer ID (1090 ms)
      ✓ should fail with invalid affiliate ID (1092 ms)
      ✓ should fail when customer tries to create order for another customer (1137 ms)
      ✓ should validate required fields (1029 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1128 ms)
      ✓ should return order details for affiliate (1133 ms)
      ✓ should fail for unauthorized customer (1095 ms)
      ✓ should return 404 for non-existent order (1086 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1183 ms)
      ✓ should update weight when processing (1215 ms)
      ✓ should prevent invalid status transitions (1171 ms)
      ✓ should fail for unauthorized affiliate (1083 ms)
      ✓ should fail for customers (1088 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1189 ms)
      ✓ should cancel order as affiliate (1155 ms)
      ✓ should prevent cancelling non-cancellable orders (1100 ms)
      ✓ should fail for unauthorized user (1079 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1161 ms)
      ✓ should handle partial bulk update failures (1162 ms)
      ✓ should cancel multiple orders in bulk (1184 ms)
    Order export functionality
      ✓ should export orders as CSV (1109 ms)
      ✓ should export orders as JSON (1124 ms)
      ✓ should export orders as Excel (1109 ms)
      ✓ should respect export permissions (1091 ms)
    Payment status updates
      ✓ should update payment status (1142 ms)
      ✓ should handle payment failure (1136 ms)
      ✓ should prevent payment status update on non-complete orders (1096 ms)
      ✓ should record refund (1137 ms)
    Order filtering and search
      ✓ should search orders by customer name (1193 ms)
      ✓ should filter orders by multiple criteria (1178 ms)
      ✓ should filter by pickup time slots (1177 ms)
      ✓ should provide aggregated statistics with filters (1106 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1694 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1907 ms)
      ✓ should calculate commission for multiple orders (2594 ms)
      ✓ should handle high delivery fee scenarios (1822 ms)

-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                                                          
-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   84.37 |    71.41 |   89.49 |   84.27 |                                                                                                                                                                                                                                                                                                                                                                                                            
 config                      |   96.68 |    87.17 |     100 |   96.53 |                                                                                                                                                                                                                                                                                                                                                                                                            
  csrf-config.js             |    86.2 |    72.72 |     100 |    86.2 | 240-264,274-275,290,305-306                                                                                                                                                                                                                                                                                                                                                                                
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                                                             
  paygistix.config.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  storeIPs.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 controllers                 |   84.44 |    71.89 |   92.82 |   84.39 |                                                                                                                                                                                                                                                                                                                                                                                                            
  administratorController.js |   85.34 |    70.83 |   84.21 |   85.71 | 190-208,225,314,387,435-436,453,463,488,568-569,656-674,708,768-769,852,910-911,971-972,1194-1203,1233-1234,1365-1366,1629-1633,1680,1690,1692,1734,1745-1746,1777-1778,1818-1819,1828-1829,1915-1977,2002,2040,2045,2209,2262,2277-2278,2401-2402                                                                                                                                                         
  affiliateController.js     |   85.52 |    74.69 |   96.96 |   85.23 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-563,578,631,667,704-705,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                                                    
  authController.js          |   66.78 |    53.86 |   85.71 |   66.78 | 130-131,143,176-181,185,215-216,234-235,279-288,340-341,355-436,451-452,460-461,490-491,541-542,589-590,640-641,656,668-673,702-710,718-719,734,752-763,779,782,804-805,830,871,895,905,915-916,959-974,1087,1092-1137,1165,1207-1248,1394,1461,1472,1535-1536,1551,1661-1662,1677,1730-1731,1743-1787,1808-1871,1876-1922,1950,1986-2024,2036,2072,2086-2087,2100,2113,2170,2219-2220,2234-2273,2287-2326 
  customerController.js      |   91.52 |    83.64 |     100 |    91.3 | 135,214-215,234,247,270-286,296-297,316,329,341,343,345,379-380                                                                                                                                                                                                                                                                                                                                            
  operatorController.js      |   98.31 |    86.28 |     100 |   98.57 | 560,632,695-696,860                                                                                                                                                                                                                                                                                                                                                                                        
  orderController.js         |   79.88 |    68.64 |   88.46 |   79.71 | 52-89,145-146,228-229,240-293,381-382,401,469-470,488,538-539,555,564,574,585,627-632,643-644,659,669,682,695-700,723-724,863-870,897,909,926,968-969,989-991,996,1008-1009,1076-1077,1103-1104,1166-1167                                                                                                                                                                                                  
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                                                        
  quickbooksController.js    |   94.73 |    81.81 |     100 |   94.35 | 269-270,332,408-409,438-439                                                                                                                                                                                                                                                                                                                                                                                
  w9ControllerDocuSign.js    |   93.96 |    84.78 |     100 |   93.96 | 207,222,280,285-286,334-336,421-422,475,676                                                                                                                                                                                                                                                                                                                                                                
 middleware                  |   88.07 |    83.91 |   94.73 |    87.5 |                                                                                                                                                                                                                                                                                                                                                                                                            
  auth.js                    |    72.3 |    74.57 |   66.66 |    72.3 | 67-93,121,134,157-159,200-210                                                                                                                                                                                                                                                                                                                                                                              
  errorHandler.js            |    72.3 |    63.26 |     100 |    72.3 | 10,81-96,102-103                                                                                                                                                                                                                                                                                                                                                                                           
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                                                            
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 models                      |   90.18 |    79.25 |   92.66 |   90.65 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Administrator.js           |   80.76 |    61.11 |   82.35 |   82.19 | 137-159,169-174                                                                                                                                                                                                                                                                                                                                                                                            
  Affiliate.js               |   86.04 |    79.54 |   84.61 |   86.04 | 89,213,217,232,237-244                                                                                                                                                                                                                                                                                                                                                                                     
  CallbackPool.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                                                    
  DocuSignToken.js           |   86.36 |    81.81 |     100 |   86.36 | 101,126-127                                                                                                                                                                                                                                                                                                                                                                                                
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Order.js                   |      70 |    71.11 |     100 |   71.11 | 113,139-140,158-174                                                                                                                                                                                                                                                                                                                                                                                        
  Payment.js                 |   88.09 |    55.55 |   88.88 |   88.09 | 237-245                                                                                                                                                                                                                                                                                                                                                                                                    
  PaymentExport.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  PaymentMethod.js           |   81.81 |    60.86 |   85.71 |   81.53 | 215-236,241-252                                                                                                                                                                                                                                                                                                                                                                                            
  PaymentToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                                                         
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 routes                      |   90.94 |    77.39 |    73.8 |   90.92 |                                                                                                                                                                                                                                                                                                                                                                                                            
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  authRoutes.js              |   96.87 |    83.33 |     100 |   96.87 | 65                                                                                                                                                                                                                                                                                                                                                                                                         
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                                                         
  customerRoutes.js          |   95.83 |    83.33 |     100 |   95.83 | 42                                                                                                                                                                                                                                                                                                                                                                                                         
  generalPaymentCallback.js  |   93.02 |    95.83 |     100 |   93.02 | 45-46,82-83,303-304                                                                                                                                                                                                                                                                                                                                                                                        
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  paymentCallbackRoute.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  paymentRoutes.js           |   46.15 |       50 |       0 |   46.15 | 23-46                                                                                                                                                                                                                                                                                                                                                                                                      
  quickbooksRoutes.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                                                          
  socialAuthRoutes.js        |   56.25 |    17.64 |   14.28 |   56.25 | 50-57,79-86,150-163,176-177,187-196,219-228                                                                                                                                                                                                                                                                                                                                                                
  systemConfigRoutes.js      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  w9Routes.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 services                    |   84.82 |    68.18 |    92.1 |   85.13 |                                                                                                                                                                                                                                                                                                                                                                                                            
  callbackPoolManager.js     |   94.44 |    61.11 |     100 |   94.44 | 13-17                                                                                                                                                                                                                                                                                                                                                                                                      
  docusignService.js         |   81.76 |    69.56 |      85 |   82.14 | 67-75,172,231-244,265,276-280,360,453-454,509-510,527-531,572-573,595-596,625-626                                                                                                                                                                                                                                                                                                                          
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
 utils                       |   66.92 |    52.48 |   77.01 |   65.62 |                                                                                                                                                                                                                                                                                                                                                                                                            
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 101                                                                                                                                                                                                                                                                                                                                                                                                        
  emailService.js            |   29.77 |     7.76 |   28.57 |   29.77 | 29-48,71-79,125,127,157-158,353,361-501,509-636,644-746,755-862,870-889,908-1123,1131-1268,1276-1428,1436-1542,1550-1569,1581-1691,1699-1718,1730-1841,1849-1957,1965-2078,2088,2099-2107,2115-2123,2131-2190,2195-2232,2237-2272                                                                                                                                                                          
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  fieldFilter.js             |   85.71 |    72.41 |     100 |   87.71 | 140,201-206                                                                                                                                                                                                                                                                                                                                                                                                
  helpers.js                 |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                                                      
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                                                        
  validators.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                            
-----------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for branches (80%) not met: 71.41%
Summary of all failing tests
FAIL tests/integration/emailService.integration.test.js
  ● Email Service Integration › Email Service Configuration › should load and configure the email service correctly

    expect(received).toBeDefined()

    Received: undefined

      42 |       expect(emailService.sendAffiliateWelcomeEmail).toBeDefined();
      43 |       expect(emailService.sendCustomerWelcomeEmail).toBeDefined();
    > 44 |       expect(emailService.sendPasswordResetEmail).toBeDefined();
         |                                                   ^
      45 |     });
      46 |
      47 |     it('should have all required email functions', () => {

      at Object.toBeDefined (tests/integration/emailService.integration.test.js:44:51)

  ● Email Service Integration › Email Service Configuration › should have all required email functions

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      62 |       
      63 |       // Password reset emails
    > 64 |       expect(typeof emailService.sendPasswordResetEmail).toBe('function');
         |                                                          ^
      65 |       expect(typeof emailService.sendAffiliatePasswordResetEmail).toBe('function');
      66 |       expect(typeof emailService.sendCustomerPasswordResetEmail).toBe('function');
      67 |       

      at Object.toBe (tests/integration/emailService.integration.test.js:64:58)

  ● Email Service Integration › Console Email Provider › should log affiliate welcome emails to console

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Subject:"
    Received
           1: "=== EMAIL CONSOLE LOG ==="
           2: "From:", "test@wavemax.promo"
           3: "To:", "test@example.com"

    Number of calls: 7

      101 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
      102 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'test@example.com');
    > 103 |       expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Subject:'));
          |                          ^
      104 |     });
      105 |
      106 |     it('should log customer welcome emails to console', async () => {

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:103:26)

  ● Email Service Integration › Console Email Provider › should log customer welcome emails to console

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "=== EMAIL CONSOLE LOG ==="

    Number of calls: 0

      113 |       await emailService.sendCustomerWelcomeEmail(customer);
      114 |
    > 115 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
          |                          ^
      116 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'customer@example.com');
      117 |     });
      118 |

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:115:26)

  ● Email Service Integration › Console Email Provider › should log password reset emails to console

    TypeError: emailService.sendPasswordResetEmail is not a function

      125 |       };
      126 |
    > 127 |       await emailService.sendPasswordResetEmail(resetData);
          |                          ^
      128 |
      129 |       expect(consoleSpy).toHaveBeenCalledWith('=== EMAIL CONSOLE LOG ===');
      130 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'user@example.com');

      at Object.sendPasswordResetEmail (tests/integration/emailService.integration.test.js:127:26)

  ● Email Service Integration › Error Handling › should handle invalid email addresses

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "To:", "not-an-email"

    Number of calls: 0

      231 |       await emailService.sendCustomerWelcomeEmail(invalidCustomer);
      232 |       
    > 233 |       expect(consoleSpy).toHaveBeenCalledWith('To:', 'not-an-email');
          |                          ^
      234 |       
      235 |       consoleSpy.mockRestore();
      236 |     });

      at Object.toHaveBeenCalledWith (tests/integration/emailService.integration.test.js:233:26)

  ● Email Service Integration › Bulk Email Operations › should handle multiple email sends efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      261 |       );
      262 |       
    > 263 |       expect(emailLogCalls.length).toBe(3);
          |                                    ^
      264 |       
      265 |       consoleSpy.mockRestore();
      266 |     });

      at Object.toBe (tests/integration/emailService.integration.test.js:263:36)

FAIL tests/integration/affiliate.test.js (95.412 s)
  ● Affiliate API › should register a new affiliate

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should register a new affiliate

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate profile

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate profile

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should update affiliate profile

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should update affiliate profile

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should login affiliate

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should login affiliate

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's customers list

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's customers list

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's orders

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's orders

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should get affiliate's earnings/transactions

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should get affiliate's earnings/transactions

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › should update payment information

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › should handle commission-related endpoints

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Delete all affiliate data (development only)

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Delete all affiliate data (development only)

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)

  ● Affiliate API › Reject delete in production environment

    MongooseServerSelectionError: Server selection timed out after 5000 ms

      43 | beforeAll(async () => {
      44 |   try {
    > 45 |     await mongoose.connect(testUri, {
         |     ^
      46 |       serverSelectionTimeoutMS: 5000, // 5 second timeout
      47 |       socketTimeoutMS: 5000
      48 |     });

      at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:1165:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1096:11)
      at Object.<anonymous> (tests/setup.js:45:5)

  ● Affiliate API › Reject delete in production environment

    MongooseError: Operation `refreshtokens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:187:23)


Test Suites: 2 failed, 2 skipped, 79 passed, 81 of 83 total
Tests:       16 failed, 31 skipped, 1874 passed, 1921 total
Snapshots:   0 total
Time:        638.713 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
