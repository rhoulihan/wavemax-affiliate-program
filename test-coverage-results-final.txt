
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (152 ms)
    ✓ should be a winston logger instance (35 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (64 ms)
    ✓ should verify password correctly (164 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured (1 ms)
      ✓ should return false when not configured

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/emailService.test.js
  Email Service
    Brevo Provider Integration
      ✓ should use Brevo provider when configured (324 ms)
      ✓ should handle Brevo API errors gracefully (3 ms)
    Provider Selection
      ✓ should support multiple email providers (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params (1 ms)
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit
    ✓ should handle non-numeric values (1 ms)
    ✓ should calculate skip correctly for different pages
    ✓ should handle floating point numbers (1 ms)
    ✓ should preserve other query parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (19 ms)
      ✓ should export vendors as CSV (4 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (3 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (3 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (4 ms)
      ✓ should filter export history by type (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportFacebookOnly.test.js (5.405 s)
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields
    ✓ should configure Facebook strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (16 ms)
    GET /api/orders/export
      ✓ should export orders (4 ms)
    GET /api/orders/search
      ✓ should search orders (4 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (4 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (3 ms)
    GET /api/orders/:orderId
      ✓ should get order details (3 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (3 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (4 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:04.890Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:05.025Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T19:03:05.056Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:05.216Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:05.332Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:05.957Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:03:06.069Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (337 ms)
      ✓ should update existing token if one exists (187 ms)
      ✓ should calculate expiration time correctly (121 ms)
    getCurrentToken
      ✓ should return the most recent token (146 ms)
      ✓ should return null if no tokens exist (104 ms)
    clearTokens
      ✓ should remove all tokens (236 ms)
    token expiration
      ✓ should identify expired tokens (138 ms)
      ✓ should handle tokens without refresh token (112 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (242 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (16 ms)
    ✓ GET /api/orders/export - should export orders (3 ms)
    ✓ GET /api/orders/search - should search orders (3 ms)
    ✓ GET /api/orders/statistics - should get statistics (3 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (3 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (3 ms)
    ✓ GET /api/orders/:orderId - should get order details (3 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (3 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (12 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (3 ms)
    ✓ Error handling - should return 404 for unknown routes (4 ms)
    ✓ Error handling - should handle controller errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (9 ms)
      ✓ should reject invalid credentials (3 ms)
    POST /api/auth/register
      ✓ should register new user (3 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (2 ms)
      ✓ should reject logout without token (3 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (3 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (2 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (4 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (2 ms)
      ✓ should reject without token (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (5 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets (1 ms)
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly (1 ms)
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string (1 ms)
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats (1 ms)
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (7 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (7 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (12 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (4 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (4 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (4 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (3 ms)
    Error Handling
      ✓ should handle controller errors gracefully (3 ms)
      ✓ should handle missing routes with 404 (3 ms)
    Request Validation
      ✓ should pass through request headers (3 ms)
      ✓ should handle JSON parsing errors (5 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:140:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:140:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:132:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (329 ms)
      ✓ should authenticate valid x-auth-token header (224 ms)
      ✓ should reject request with no token (220 ms)
      ✓ should reject request with invalid token (204 ms)
      ✓ should reject request with expired token (208 ms)
      ✓ should handle malformed Authorization header (204 ms)
      ✓ should reject blacklisted token (208 ms)
    authorize
      ✓ should authorize user with correct role (224 ms)
      ✓ should authorize user with one of multiple roles (207 ms)
      ✓ should reject user with incorrect role (222 ms)
      ✓ should reject user with no role (210 ms)
      ✓ should reject when user is not set (214 ms)
    authLimiter
      ✓ should be a function (208 ms)
      ✓ should have rate limit configuration (203 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/w9Document.test.js
  W9Document Model Unit Tests
    Schema Validation
      ✓ should create a valid W9Document with required fields (57 ms)
      ✓ should generate documentId automatically (57 ms)
      ✓ should set default values correctly (55 ms)
      ✓ should set expiry date to 3 years from now (53 ms)
      ✓ should reject invalid mime type (65 ms)
      ✓ should reject file size over 5MB (59 ms)
    Instance Methods
      isValid()
        ✓ should return true for valid document (66 ms)
        ✓ should return false for inactive document (61 ms)
        ✓ should return false for unverified document (53 ms)
        ✓ should return false for expired document (54 ms)
        ✓ should return false for deleted document (54 ms)
      softDelete()
        ✓ should soft delete document with metadata (55 ms)
    Static Methods
      findActiveForAffiliate()
        ✓ should find active document for affiliate (54 ms)
      findPendingReview()
        ✓ should find all documents pending review (54 ms)
    Indexes
      ✓ should have required indexes defined (54 ms)
    Verification Status Workflow
      ✓ should allow transition from pending to verified (54 ms)
      ✓ should allow transition from pending to rejected (56 ms)
    Legal Hold
      ✓ should set legal hold with reason and date (54 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (1 ms)
      ✓ should generate next sequential ID when administrators exist (1 ms)
      ✓ should handle double-digit admin IDs correctly
    Permission selection
      ✓ should handle "all" permission selection (1 ms)
      ✓ should handle specific permission selection
      ✓ should filter out invalid permission numbers (1 ms)
    Database operations
      ✓ should connect to MongoDB successfully
      ✓ should create administrator with correct data (1 ms)
      ✓ should handle database save errors
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields (1 ms)
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors (1 ms)
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/w9AuditLog.test.js
  W9AuditLog Model Unit Tests
    Schema Validation
      ✓ should create a valid audit log entry (61 ms)
      ✓ should require action field (54 ms)
      ✓ should validate action enum values (53 ms)
      ✓ should accept all valid action types (56 ms)
      ✓ should set default timestamp (59 ms)
      ✓ should set archived to false by default (56 ms)
    User Info Validation
      ✓ should validate userType enum (56 ms)
      ✓ should reject invalid userType (62 ms)
    Static Methods
      logAction()
        ✓ should create audit log entry with all parameters (61 ms)
        ✓ should handle logging errors gracefully (56 ms)
    Indexes
      ✓ should have required indexes defined (57 ms)
    Archive Flag
      ✓ should track archived status (53 ms)
    Different Action Types
      ✓ should handle upload action details (53 ms)
      ✓ should handle verification action details (53 ms)
      ✓ should handle rejection action details (53 ms)
      ✓ should handle QuickBooks export action details (53 ms)
    System Actions
      ✓ should allow system user type for automated actions (55 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter (1 ms)
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly (1 ms)
      ✓ should generate correct CSS classes for highlighted customer
      ✓ should generate correct HTML content for highlighted customer (1 ms)
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter (1 ms)
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list (1 ms)
      ✓ should process customer list without filtering
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly (1 ms)
      ✓ should validate customer ID format
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (15 ms)
      ✓ should allow access in test environment (4 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (4 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (2 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (3 ms)
    Route Handlers
      ✓ should serve index.html at root path (6 ms)
      ✓ should serve critical-files page (5 ms)
      ✓ should serve test-templates page (4 ms)
      ✓ should serve action-plan page (3 ms)
      ✓ should return 404 for non-existent pages (3 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (7 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (3 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (2 ms)
      ✓ should return valid HTML for 404 page (3 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (4 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (3 ms)
      ✓ should handle specific route handlers (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (9 ms)
      ✓ should handle custom status codes
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message
      ✓ should handle errors with code property (1 ms)
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code (1 ms)
      ✓ should have stack trace
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (2 ms)
      ✓ should handle undefined error
      ✓ should handle non-error objects (1 ms)
      ✓ should handle errors thrown from within error handler

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/orderWithSystemConfig.test.js (9.744 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (833 ms)
      ✓ should use default rate when SystemConfig is not available (956 ms)
      ✓ should calculate estimated total using SystemConfig rate (664 ms)
      ✓ should calculate actual total using SystemConfig rate (666 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (658 ms)
      ✓ should calculate commission for zero delivery fee (633 ms)
      ✓ should handle commission calculation for large orders (651 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (634 ms)
      ✓ should update calculations when base rate changes (764 ms)
      ✓ should validate minimum and maximum base rates (877 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1195 ms)
      ✓ should match revenue calculator with different parameters (659 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/w9AuditService.test.js
  W9AuditService Unit Tests
    getUserInfo()
      ✓ should extract user info from request (1 ms)
      ✓ should handle missing user
      ✓ should handle administrator user type (1 ms)
    getSecurityInfo()
      ✓ should extract security info from request
      ✓ should handle missing connection encryption
      ✓ should handle missing optional fields (1 ms)
    logUploadAttempt()
      ✓ should log successful upload attempt
      ✓ should log failed upload attempt
    logDownload()
      ✓ should log admin download
      ✓ should log affiliate download (1 ms)
    logVerification()
      ✓ should log successful verification
    logRejection()
      ✓ should log document rejection
    logQuickBooksExport()
      ✓ should log QuickBooks export
    archiveOldLogs()
      ✓ should archive logs older than 90 days (1 ms)
      ✓ should use custom days parameter
    generateComplianceReport()
      ✓ should generate compliance report for date range (1 ms)
    Error Handling
      ✓ should handle W9AuditLog.logAction errors gracefully (10 ms)
      ✓ should handle missing request object (4 ms)
    System User Actions
      ✓ should handle system-initiated actions (1 ms)

(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (58 ms)
      ✓ should generate exportId automatically (59 ms)
      ✓ should require type field (53 ms)
      ✓ should validate type enum values (54 ms)
      ✓ should reject invalid type values (58 ms)
      ✓ should require generatedBy field (57 ms)
    Period Fields
      ✓ should store period dates for payment summary (59 ms)
      ✓ should store period dates for commission detail (53 ms)
    Export Data
      ✓ should store vendor export data (70 ms)
      ✓ should store payment summary data (54 ms)
      ✓ should store commission detail data (54 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (52 ms)
      ✓ should store single affiliate ID for commission detail (53 ms)
      ✓ should allow empty affiliate IDs array (52 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (52 ms)
    Indexes
      ✓ should have required indexes defined (74 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (59 ms)
      ✓ should handle payment summary export type correctly (58 ms)
      ✓ should handle commission detail export type correctly (61 ms)
    Export ID Generation
      ✓ should generate unique export IDs (56 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (56 ms)
      ✓ should accept valid ObjectId for generatedBy (68 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (295 ms)
      ✓ should use default values for blacklistedAt and reason (114 ms)
      ✓ should require all mandatory fields (81 ms)
      ✓ should enforce unique token constraint (244 ms)
      ✓ should validate userType enum (80 ms)
      ✓ should accept all valid userTypes (209 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (115 ms)
        ✓ should use default reason when not provided (113 ms)
        ✓ should return null when token already blacklisted (243 ms)
        ✓ should handle custom reasons (117 ms)
        ✓ should propagate non-duplicate errors (79 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (143 ms)
        ✓ should return false for non-blacklisted token (106 ms)
        ✓ should handle empty token (105 ms)
        ✓ should handle null token (105 ms)
      cleanupExpired
        ✓ should delete expired tokens (234 ms)
        ✓ should return 0 when no expired tokens (201 ms)
        ✓ should handle empty collection (105 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (2 ms)
      ✓ should throw error with invalid encryption key length (14 ms)
      ✓ should throw error when encryption key is missing (2 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs (1 ms)
      ✓ should throw error with invalid encrypted object structure (2 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (56 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (156 ms)
      ✓ should return false for invalid salt format (58 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length
      ✓ should generate unique tokens
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (16 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (2 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1271 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/models.test.js (6.413 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (575 ms)
      ✓ should require required fields (312 ms)
      ✓ should enforce unique constraints (587 ms)
      ✓ should handle payment information correctly (342 ms)
    Customer Model
      ✓ should create a valid customer (340 ms)
    Order Model
      ✓ should create a valid order (374 ms)
      ✓ should calculate estimated total correctly (367 ms)
      ✓ should calculate actual total and commission when weight is set (366 ms)
      ✓ should update timestamps for status changes (461 ms)
    Transaction Model
      ✓ should create a valid transaction (355 ms)
      ✓ should validate transaction type (311 ms)
      ✓ should validate transaction status (311 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (345 ms)
      ✓ should validate user type (312 ms)
      ✓ should check if token is expired (382 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (302 ms)
      ✓ should generate ADM002 when ADM001 exists (224 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (278 ms)
      ✓ should handle non-sequential admin IDs correctly (284 ms)
      ✓ should handle double-digit admin IDs (220 ms)
      ✓ should handle triple-digit admin IDs (219 ms)
      ✓ should handle large admin ID numbers (224 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (106 ms)
      ✓ should handle numbers above 999 without padding issues (104 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (102 ms)
      ✓ should handle edge cases in admin ID parsing (106 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (283 ms)
      ✓ should work correctly with different creation dates (290 ms)
      ✓ should work correctly with different permissions (287 ms)
    Performance and reliability
      ✓ should handle database query efficiently (217 ms)
      ✓ should handle concurrent admin creation scenario (386 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (5 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints (1 ms)
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests (1 ms)
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests (1 ms)
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation (1 ms)
        ✓ should enforce CSRF for order cancellation
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates (1 ms)
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2 (1 ms)
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints (1 ms)
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable (1 ms)
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error uploading W-9: Error: Storage failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Controller.test.js:137:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      90 |
      91 |   } catch (error) {
    > 92 |     console.error('Error uploading W-9:', error);
         |             ^
      93 |
      94 |     // Log failed upload
      95 |     await W9AuditService.logUploadAttempt(req, req.user?.affiliateId, false, {

      at Object.error [as uploadW9Document] (server/controllers/w9Controller.js:92:13)
      at Object.<anonymous> (tests/unit/w9Controller.test.js:140:7)

PASS tests/unit/w9Controller.test.js
  W9Controller Unit Tests
    uploadW9Document
      ✓ should successfully upload W-9 document for affiliate (4 ms)
      ✓ should handle upload failure (20 ms)
    verifyW9Document
      ✓ should successfully verify W-9 document (1 ms)
    getAuditLogs
      ✓ should retrieve audit logs with filters (2 ms)
    exportAuditLogs
      ✓ should export audit logs as CSV (6 ms)
    getPendingW9Documents
      ✓ should retrieve all pending W-9 documents (1 ms)
    rejectW9Document
      ✓ should successfully reject W-9 document (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array (1 ms)
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully (1 ms)
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types (1 ms)
    fieldDefinitions
      ✓ should have definitions for all data types
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role (1 ms)
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (1 ms)
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method (1 ms)
      ✓ should filter response data when _filterType is provided
      ✓ should not filter when _filterType is not provided (1 ms)
      ✓ should handle public role when user is not authenticated
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties (1 ms)
      ✓ should handle responses without data property
      ✓ should maintain this context in json method (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (2 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully (1 ms)
      ✓ should throw error when no callbacks available (10 ms)
    releaseCallback
      ✓ should release callback successfully
      ✓ should handle null callback gracefully (1 ms)
    getPoolStatus
      ✓ should return pool status with all handler details (1 ms)
      ✓ should handle empty pool
    startCleanupJob
      ✓ should start cleanup interval (2 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (1 ms)
      ✓ should not log when no locks are released
    stopCleanupJob
      ✓ should stop cleanup interval when running (1 ms)
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (1 ms)
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should reject sequential characters (1 ms)
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords
      Edge Cases
        ✓ should handle empty password (1 ms)
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks
    customPasswordValidator
      ✓ should work as express-validator custom validator (15 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function (1 ms)
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history
      ✓ should return false for password not in history (55 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (1 ms)
      ✓ should score length appropriately
      ✓ should score character variety (1 ms)
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively
      ✓ should sanitize objects recursively
      ✓ should handle null values
      ✓ should handle undefined values (1 ms)
      ✓ should handle numbers
      ✓ should handle booleans
      ✓ should handle deeply nested objects (1 ms)
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should validate complex email formats (1 ms)
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters
      ✓ should remove spaces (1 ms)
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts (1 ms)
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain (1 ms)
      ✓ should handle complex nested structures

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:78:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:88:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:91:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:101:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:145:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:78:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:88:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:91:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:101:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:145:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      151 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      152 |     } catch (emailError) {
    > 153 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      154 |       // Continue with the response even if emails fail
      155 |     }
      156 |

      at Object.error [as createOrder] (server/controllers/orderController.js:153:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:78:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:82:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:78:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:88:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:91:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:95:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:65:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:78:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:88:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:91:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:101:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (308 ms)
      ✓ should handle email sending failures gracefully (120 ms)
      ✓ should return error for invalid customer (54 ms)
      ✓ should return error for invalid affiliate (59 ms)
      ✓ should enforce authorization (54 ms)
    getOrderDetails
      ✓ should return order details for authorized user (52 ms)
      ✓ should return 404 for non-existent order (52 ms)
      ✓ should enforce authorization for customers (52 ms)
    updateOrderStatus
      ✓ should successfully update order status (52 ms)
      ✓ should update actual weight when processing (54 ms)
      ✓ should validate status transitions (55 ms)
      ✓ should send commission email when complete (51 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (51 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:93:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching administrators:', error);
         |             ^
      73 |     res.status(500).json({
      74 |       success: false,
      75 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:72:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:96:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (54 ms)
      ✓ should handle errors (79 ms)
    createAdministrator
      ✓ should create administrator (53 ms)
      ✓ should handle validation errors (56 ms)
    updateAdministrator
      ✓ should update administrator (74 ms)
      ✓ should prevent self-deactivation (52 ms)
    deleteAdministrator
      ✓ should delete administrator (52 ms)
      ✓ should prevent self-deletion (53 ms)
    resetAdministratorPassword
      ✓ should reset password (55 ms)
    Operator Management
      ✓ createOperator should create new operator (52 ms)
      ✓ getOperators should return operators list (53 ms)
      ✓ updateOperator should update operator details (52 ms)
      ✓ deactivateOperator should deactivate operator (51 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (52 ms)
      ✓ getOrderAnalytics should return order analytics (52 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (51 ms)
      ✓ updateSystemConfig should update configuration (52 ms)
    getPermissions
      ✓ should return available permissions (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.error
    Error storing W-9 document: Error: Permission denied
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:97:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      139 |
      140 |     } catch (error) {
    > 141 |       console.error('Error storing W-9 document:', error);
          |               ^
      142 |       throw error;
      143 |     }
      144 |   }

      at W9Storage.error (server/utils/w9Storage.js:141:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:99:7)

  console.error
    Error storing W-9 document: Error: Disk full
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:110:50)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      139 |
      140 |     } catch (error) {
    > 141 |       console.error('Error storing W-9 document:', error);
          |               ^
      142 |       throw error;
      143 |     }
      144 |   }

      at W9Storage.error (server/utils/w9Storage.js:141:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:113:7)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.log
    W-9 document W9DOC-123 accessed by user123

      at W9Storage.log [as retrieve] (server/utils/w9Storage.js:170:15)

  console.error
    Error retrieving W-9 document: Error: W-9 document not found
        at W9Storage.retrieve (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:153:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:201:7)

      179 |
      180 |     } catch (error) {
    > 181 |       console.error('Error retrieving W-9 document:', error);
          |               ^
      182 |       throw error;
      183 |     }
      184 |   }

      at W9Storage.error [as retrieve] (server/utils/w9Storage.js:181:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:201:7)

  console.error
    Error retrieving W-9 document: Error: W-9 document is no longer active
        at W9Storage.retrieve (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:157:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:212:7)

      179 |
      180 |     } catch (error) {
    > 181 |       console.error('Error retrieving W-9 document:', error);
          |               ^
      182 |       throw error;
      183 |     }
      184 |   }

      at W9Storage.error [as retrieve] (server/utils/w9Storage.js:181:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:212:7)

  console.error
    Error retrieving W-9 document: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:231:17)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as final] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at W9Storage.final [as _decrypt] (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:57:16)
        at W9Storage._decrypt (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:167:34)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:243:7)

      179 |
      180 |     } catch (error) {
    > 181 |       console.error('Error retrieving W-9 document:', error);
          |               ^
      182 |       throw error;
      183 |     }
      184 |   }

      at W9Storage.error [as retrieve] (server/utils/w9Storage.js:181:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:243:7)

  console.log
    W-9 document W9DOC-123 marked for deletion by user123

      at W9Storage.log [as delete] (server/utils/w9Storage.js:202:15)

  console.error
    Error deleting W-9 document: Error: W-9 document not found
        at W9Storage.delete (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:193:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:274:7)

      205 |
      206 |     } catch (error) {
    > 207 |       console.error('Error deleting W-9 document:', error);
          |               ^
      208 |       throw error;
      209 |     }
      210 |   }

      at W9Storage.error [as delete] (server/utils/w9Storage.js:207:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:274:7)

  console.error
    Error deleting W-9 document: Error: Permission denied
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:283:49)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      205 |
      206 |     } catch (error) {
    > 207 |       console.error('Error deleting W-9 document:', error);
          |               ^
      208 |       throw error;
      209 |     }
      210 |   }

      at W9Storage.error [as delete] (server/utils/w9Storage.js:207:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:286:7)

  console.log
    Cleaned up 2 expired W-9 documents

      at W9Storage.log [as cleanupExpired] (server/utils/w9Storage.js:270:15)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.log
    W-9 document stored for affiliate AFF-123: undefined

      at W9Storage.log [as store] (server/utils/w9Storage.js:132:15)

  console.error
    Error retrieving W-9 document: Error: W-9 document not found
        at W9Storage.retrieve (/var/www/wavemax/wavemax-affiliate-program/server/utils/w9Storage.js:153:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:425:7)

      179 |
      180 |     } catch (error) {
    > 181 |       console.error('Error retrieving W-9 document:', error);
          |               ^
      182 |       throw error;
      183 |     }
      184 |   }

      at W9Storage.error [as retrieve] (server/utils/w9Storage.js:181:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:425:7)

  console.error
    Error storing W-9 document: Error: EACCES: permission denied
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      139 |
      140 |     } catch (error) {
    > 141 |       console.error('Error storing W-9 document:', error);
          |               ^
      142 |       throw error;
      143 |     }
      144 |   }

      at W9Storage.error (server/utils/w9Storage.js:141:15)
      at Object.<anonymous> (tests/unit/w9Storage.test.js:433:7)

PASS tests/unit/w9Storage.test.js
  W9Storage Utility Unit Tests
    store()
      ✓ should successfully store encrypted W-9 document (8 ms)
      ✓ should handle storage directory creation error (11 ms)
      ✓ should handle file write error (2 ms)
      ✓ should reject if document already exists (1 ms)
    retrieve()
      ✓ should successfully retrieve and decrypt W-9 document (2 ms)
      ✓ should handle missing document (5 ms)
      ✓ should handle corrupted metadata (1 ms)
      ✓ should handle decryption failure (2 ms)
    delete()
      ✓ should successfully delete W-9 document and metadata (1 ms)
      ✓ should handle missing document gracefully (1 ms)
      ✓ should handle deletion error (1 ms)
    verifyIntegrity()
      ✓ should return true if document exists and is valid (1 ms)
      ✓ should return false if document does not exist
    cleanupExpired()
      ✓ should cleanup expired documents (1 ms)
    Security Features
      ✓ should use AES-256-GCM encryption (1 ms)
      ✓ should generate unique encryption keys for each document (1 ms)
      ✓ should store authentication tag for integrity verification
    Error Handling
      ✓ should provide clear error messages (2 ms)
      ✓ should handle storage path creation errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (2 ms)
      ✓ should have unique event names (1 ms)
    logAuditEvent
      ✓ should log basic audit event
      ✓ should add request context when provided (1 ms)
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events
      ✓ should handle missing user context (1 ms)
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses (1 ms)
      ✓ should not log failed responses
      ✓ should include request context in logs
    logLoginAttempt
      ✓ should log successful login (1 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access
      ✓ should log payment info update (1 ms)
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (11 ms)
      ✓ should return error for invalid affiliate (1 ms)
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (24 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/unit/createAdminScript.test.js (7.65 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (494 ms)
      ✓ should contain required functionality markers (349 ms)
    Admin ID Generation Logic
      ✕ should generate sequential admin IDs starting from ADM001 (341 ms)
      ✕ should calculate next admin ID correctly (342 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (352 ms)
      ✕ should accept strong passwords for admins (335 ms)
    Permission System Validation
      ✕ should validate all permission types (347 ms)
      ✕ should handle partial permission sets (338 ms)
    Unique Constraint Validation
      ✕ should prevent duplicate administrator IDs (360 ms)
      ✕ should prevent duplicate emails (363 ms)
    Email Integration
      ✕ should handle admin creation with welcome email sending (358 ms)
    Data Validation and Sanitization
      ✕ should handle special characters in names correctly (340 ms)
      ✕ should normalize email addresses (362 ms)
      ✓ should validate email format (363 ms)
    Administrator Model Integration
      ✕ should integrate with existing administrator model schema (338 ms)
      ✕ should work with password hashing middleware (332 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (351 ms)
      ✓ should handle invalid input gracefully (347 ms)
    Security Considerations
      ✓ should not log or expose passwords (361 ms)
      ✓ should generate secure random passwords when needed (343 ms)

  ● Create Admin Script Tests › Admin ID Generation Logic › should generate sequential admin IDs starting from ADM001

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Admin ID Generation Logic › should calculate next admin ID correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Password Security Requirements › should accept strong passwords for admins

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Permission System Validation › should validate all permission types

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Permission System Validation › should handle partial permission sets

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Unique Constraint Validation › should prevent duplicate administrator IDs

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Unique Constraint Validation › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Email Integration › should handle admin creation with welcome email sending

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Data Validation and Sanitization › should handle special characters in names correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Data Validation and Sanitization › should normalize email addresses

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Administrator Model Integration › should integrate with existing administrator model schema

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Administrator Model Integration › should work with password hashing middleware

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[31merror[39m: Failed to check DocuSign auth: Service error {"service":"wavemax-affiliate","stack":"Error: Service error\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:100:55)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:06.101Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:06.352Z"}
[31merror[39m: OAuth callback error: Exchange failed {"service":"wavemax-affiliate","stack":"Error: Exchange failed\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:149:62)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:07.102Z"}
  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      260 |     });
      261 |   } catch (error) {
    > 262 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      263 |     logger.error('Failed to initiate W9 signing:', error);
      264 |     res.status(500).json({
      265 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:262:13)

[31merror[39m: Failed to initiate W9 signing: Template not found {"service":"wavemax-affiliate","stack":"Error: Template not found\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:08.681Z"}
  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:293:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:293:15)

[33mwarn[39m: Failed to get envelope status from DocuSign: API error {"service":"wavemax-affiliate","stack":"Error: API error\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:315:59)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:10.523Z"}
[31merror[39m: Failed to download completed W9: Cannot read properties of undefined (reading 'filename') {"service":"wavemax-affiliate","stack":"TypeError: Cannot read properties of undefined (reading 'filename')\n    at filename (/var/www/wavemax/wavemax-affiliate-program/server/controllers/w9ControllerDocuSign.js:394:28)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-06-21T17:04:11.214Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:11.556Z"}
[33mwarn[39m: No affiliate found for envelope: {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:11.829Z"}
[31merror[39m: Failed to download completed W9: W9Document validation failed: uploadedBy: Path `uploadedBy` is required., storageKey: Path `storageKey` is required., size: Path `size` is required., mimeType: Path `mimeType` is required., originalName: Path `originalName` is required. {"_message":"W9Document validation failed","errors":{"mimeType":{"kind":"required","message":"Path `mimeType` is required.","name":"ValidatorError","path":"mimeType","properties":{"message":"Path `mimeType` is required.","path":"mimeType","type":"required"}},"originalName":{"kind":"required","message":"Path `originalName` is required.","name":"ValidatorError","path":"originalName","properties":{"message":"Path `originalName` is required.","path":"originalName","type":"required"}},"size":{"kind":"required","message":"Path `size` is required.","name":"ValidatorError","path":"size","properties":{"message":"Path `size` is required.","path":"size","type":"required"}},"storageKey":{"kind":"required","message":"Path `storageKey` is required.","name":"ValidatorError","path":"storageKey","properties":{"message":"Path `storageKey` is required.","path":"storageKey","type":"required"}},"uploadedBy":{"kind":"required","message":"Path `uploadedBy` is required.","name":"ValidatorError","path":"uploadedBy","properties":{"message":"Path `uploadedBy` is required.","path":"uploadedBy","type":"required"}}},"service":"wavemax-affiliate","stack":"ValidationError: W9Document validation failed: uploadedBy: Path `uploadedBy` is required., storageKey: Path `storageKey` is required., size: Path `size` is required., mimeType: Path `mimeType` is required., originalName: Path `originalName` is required.\n    at model.Object.<anonymous>.Document.invalidate (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/document.js:3343:32)\n    at /var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/document.js:3104:17\n    at /var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/schemaType.js:1407:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-06-21T17:04:12.136Z"}
[31merror[39m: Failed to check authorization status: Service error {"service":"wavemax-affiliate","stack":"Error: Service error\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:474:55)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:12.931Z"}
PASS tests/unit/w9ControllerDocuSign.test.js (8.758 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (551 ms)
      ✓ should return authorization URL if no valid token (245 ms)
      ✓ should handle service errors (254 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (260 ms)
      ✓ should handle missing authorization code (249 ms)
      ✓ should handle missing state parameter (242 ms)
      ✓ should display error page on token exchange failure (242 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (403 ms)
      ✓ should return existing envelope if one is in progress (301 ms)
      ✓ should require DocuSign authorization if no valid token (273 ms)
      ✓ should handle affiliate not found (317 ms)
      ✓ should handle envelope creation errors (290 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (870 ms)
      ✓ should handle mismatched envelope ID (316 ms)
      ✓ should handle affiliate with no W9 information (343 ms)
      ✓ should return local status if DocuSign API fails (307 ms)
      ✓ should clear envelope ID if declined (368 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (412 ms)
      ✓ should reject webhook with invalid signature (248 ms)
      ✓ should handle affiliate not found (272 ms)
      ✓ should download and store completed W9 document (369 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (249 ms)
      ✓ should return authorized false if no valid token (241 ms)
      ✓ should handle service errors (240 ms)

(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✕ should export vendors as JSON (6 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully
    exportPaymentSummary
      ✕ should export payment summary as JSON (3 ms)
      ✓ should export payment summary as CSV (16 ms)
      ✓ should return 400 when dates are missing
      ✓ should return 404 when no payable commissions found (1 ms)
      ✓ should filter out orders without verified W-9
    exportCommissionDetail
      ✓ should export commission detail as JSON (2 ms)
      ✓ should return 400 when required parameters are missing
      ✓ should return 404 when affiliate not found
      ✓ should return 400 when affiliate has no verified W-9
    getExportHistory
      ✓ should get export history (1 ms)
      ✓ should filter by type

  ● QuickBooks Controller › exportVendors › should export vendors as JSON

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -21,8 +21,11 @@
              "quickbooksVendorId": null,
              "taxIdLast4": "5678",
            },
          ],
        },
    -   "exportedBy": "admin123",
    +   "filename": "wavemax-vendors-EXP-1750525454385.json",
    +   "format": "json",
    +   "generatedBy": "admin123",
    +   "recordCount": 2,
        "type": "vendor",
      },

    Number of calls: 1

       95 |       });
       96 |
    >  97 |       expect(PaymentExport.create).toHaveBeenCalledWith({
          |                                    ^
       98 |         type: 'vendor',
       99 |         exportedBy: 'admin123',
      100 |         affiliateIds: ['AFF-001', 'AFF-002'],

      at Object.toHaveBeenCalledWith (tests/unit/quickbooksController.test.js:97:36)

  ● QuickBooks Controller › exportPaymentSummary › should export payment summary as JSON

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -24,10 +24,18 @@
              ],
              "totalCommission": 30,
            },
          ],
        },
    -   "exportedBy": "admin123",
    -   "periodEnd": Any<Date>,
    +   "filename": "wavemax-payment-summary-EXP-1750525454405.json",
    +   "format": "json",
    +   "generatedBy": "admin123",
    +   "orderIds": Array [
    +     "ORD-001",
    +     "ORD-002",
    +   ],
    +   "periodEnd": 2025-01-31T23:59:59.999Z,
        "periodStart": 2025-01-01T00:00:00.000Z,
    +   "recordCount": 1,
    +   "totalAmount": 30,
        "type": "payment_summary",
      },

    Number of calls: 1

      287 |       });
      288 |
    > 289 |       expect(PaymentExport.create).toHaveBeenCalledWith({
          |                                    ^
      290 |         type: 'payment_summary',
      291 |         periodStart: new Date('2025-01-01'),
      292 |         periodEnd: expect.any(Date),

      at Object.toHaveBeenCalledWith (tests/unit/quickbooksController.test.js:289:36)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/oAuthSession.test.js (6.864 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (429 ms)
      ✓ should require sessionId field (206 ms)
      ✓ should require result field (205 ms)
      ✓ should automatically set createdAt (241 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (240 ms)
      ✓ should enforce unique sessionId (280 ms)
      ✓ should allow complex result objects (247 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (269 ms)
        ✓ should throw error for duplicate session IDs (272 ms)
        ✓ should handle database errors (215 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (266 ms)
        ✓ should return null for non-existent session (232 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (295 ms)
        ✓ should return null when consuming non-existent session (238 ms)
        ✓ should handle race conditions safely (303 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (454 ms)
        ✓ should return zero deletions when no expired sessions exist (295 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (251 ms)
      ✓ should respect custom expiresAt when provided (241 ms)
    Data Integrity
      ✓ should preserve all data types in result field (237 ms)
      ✓ should handle empty and minimal result objects (387 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (217 ms)
      ✓ should handle very large result objects (316 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[31merror[39m: Failed to store PKCE verifier: EACCES: permission denied {"service":"wavemax-affiliate","stack":"Error: EACCES: permission denied\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:22.275Z"}
[31merror[39m: Failed to retrieve PKCE verifier: "undefined" is not valid JSON {"service":"wavemax-affiliate","stack":"SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at DocuSignService.parse [as getPkceVerifier] (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:86:25)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:73:25)","timestamp":"2025-06-21T17:04:22.293Z"}
[31merror[39m: Failed to store PKCE verifier: EACCES: permission denied {"service":"wavemax-affiliate","stack":"Error: EACCES: permission denied\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:22.372Z"}
[31merror[39m: Failed to retrieve PKCE verifier: "undefined" is not valid JSON {"service":"wavemax-affiliate","stack":"SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at DocuSignService.parse [as getPkceVerifier] (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:86:25)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:83:30)","timestamp":"2025-06-21T17:04:22.372Z"}
[31merror[39m: Failed to retrieve PKCE verifier: "undefined" is not valid JSON {"service":"wavemax-affiliate","stack":"SyntaxError: \"undefined\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at DocuSignService.parse [as getPkceVerifier] (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:86:25)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:84:31)","timestamp":"2025-06-21T17:04:22.373Z"}
[31merror[39m: Failed to store PKCE verifier: EACCES: permission denied {"service":"wavemax-affiliate","stack":"Error: EACCES: permission denied\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:22.528Z"}
[31merror[39m: Failed to store PKCE verifier: EACCES: permission denied {"service":"wavemax-affiliate","stack":"Error: EACCES: permission denied\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:04:22.609Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.689Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:04:22.690Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-21T18:04:22.690Z","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.732Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.732Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.839Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.918Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:22.918Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:04:22.996Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:04:23.055Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-21T18:04:23.299Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:23.698Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-21T17:04:23.777Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:23.858Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:23.936Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-21T17:04:24.167Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-21T17:04:24.245Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:24.400Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-21T17:04:24.478Z"}
FAIL tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (275 ms)
    PKCE Storage
      ✕ should store and retrieve PKCE verifier (97 ms)
      ✕ should delete verifier after retrieval (78 ms)
      ✓ should clean up old PKCE files (76 ms)
    Authorization URL
      ✓ should generate correct authorization URL (81 ms)
      ✓ should use provided state if given (80 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (149 ms)
      ✓ should throw error if PKCE verifier not found (79 ms)
      ✓ should handle token exchange errors (77 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (195 ms)
      ✓ should throw error if no refresh token available (107 ms)
    Access Token Management
      ✓ should return valid access token if not expired (176 ms)
      ✓ should refresh token if expired (121 ms)
      ✓ should throw error if no valid token and no refresh token (102 ms)
    Envelope Creation
      ✕ should create W9 envelope for affiliate (78 ms)
      ✓ should handle envelope creation errors (81 ms)
      ✓ should return mock envelope in test mode (79 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (77 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (77 ms)
      ✓ should reject invalid webhook signature (77 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (78 ms)
      ✓ should handle declined envelope (77 ms)
    Envelope Status
      ✓ should get envelope status (78 ms)
    Document Download
      ✓ should download completed W9 document (78 ms)
    Envelope Voiding
      ✓ should void an envelope (79 ms)

  ● DocuSign Service › PKCE Storage › should store and retrieve PKCE verifier

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_verifier_456"
    Received: null

      73 |       const retrieved = await docusignService.getPkceVerifier(state);
      74 |
    > 75 |       expect(retrieved).toBe(verifier);
         |                         ^
      76 |     });
      77 |
      78 |     it('should delete verifier after retrieval', async () => {

      at Object.toBe (tests/unit/docusignService.test.js:75:25)

  ● DocuSign Service › PKCE Storage › should delete verifier after retrieval

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_verifier_012"
    Received: null

      84 |       const secondRetrieval = await docusignService.getPkceVerifier(state);
      85 |
    > 86 |       expect(firstRetrieval).toBe(verifier);
         |                              ^
      87 |       expect(secondRetrieval).toBeNull();
      88 |     });
      89 |

      at Object.toBe (tests/unit/docusignService.test.js:86:30)

  ● DocuSign Service › Envelope Creation › should create W9 envelope for affiliate

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes", ObjectContaining {"status": "sent", "templateId": "test_template_id", "templateRoles": ArrayContaining [ObjectContaining {"clientUserId": "123456789", "email": "test@example.com", "name": "John Doe", "roleName": "Signer 1"}]}, ObjectContaining {"headers": {"Authorization": "Bearer valid_token", "Content-Type": "application/json"}}
    Received: "https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes", {"eventNotification": {"deliveryMode": "SIM", "eventData": {"format": "json", "version": "restv2.1"}, "events": ["envelope-completed", "envelope-declined", "envelope-voided"], "loggingEnabled": true, "requireAcknowledgment": true, "url": "https://test.com/api/v1/w9/docusign-webhook"}, "status": "sent", "templateId": "test_template_id", "templateRoles": [{"email": "test@example.com", "name": "John Doe", "roleName": "Signer 1", "tabs": {"textTabs": [{"tabLabel": "Owner's First Name", "value": "John"}, {"tabLabel": "Owner's Last Name", "value": "Doe"}, {"tabLabel": "Owner's Middle Initial", "value": ""}, {"tabLabel": "Street Address", "value": "123 Main St"}, {"tabLabel": "City", "value": "Testville"}, {"tabLabel": "State 1", "value": "TX"}, {"tabLabel": "5-Digit Zip Code", "value": "12345"}, {"tabLabel": "Business name", "value": "Test Business"}, {"tabLabel": "Business Name", "value": "Test Business"}, {"tabLabel": "DBA", "value": "Test Business"}]}}]}, {"headers": {"Authorization": "Bearer valid_token", "Content-Type": "application/json"}}

    Number of calls: 1

      290 |
      291 |       expect(result).toEqual(mockEnvelopeResponse.data);
    > 292 |       expect(axios.post).toHaveBeenCalledWith(
          |                          ^
      293 |         'https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes',
      294 |         expect.objectContaining({
      295 |           templateId: 'test_template_id',

      at Object.toHaveBeenCalledWith (tests/unit/docusignService.test.js:292:26)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (6 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (2 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (2 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (2 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (1 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (6 ms)
      ✓ should validate required fields for social registration (2 ms)
      ✓ should validate service radius range (3 ms)
      ✓ should validate payment method (2 ms)
    Social Account Linking Route
      ✓ should handle social account linking (2 ms)
      ✓ should validate provider for account linking (3 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (3 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (3 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (10 ms)
      ✓ should validate customer registration fields (3 ms)
      ✓ should validate service frequency (3 ms)
    Error Handling
      ✓ should handle errors gracefully (15 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (56 ms)
      ✓ should return error when Paygistix is not configured (59 ms)
      ✓ should handle errors gracefully (51 ms)
    logSubmission
      ✓ should log payment submission successfully (52 ms)
      ✓ should handle logging errors (57 ms)
    createPaymentToken
      ✓ should create payment token successfully (57 ms)
      ✓ should handle no available callbacks (54 ms)
      ✓ should handle token creation errors (53 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (52 ms)
      ✓ should handle token not found (52 ms)
      ✓ should handle database errors (52 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (52 ms)
      ✓ should not cancel non-pending tokens (52 ms)
      ✓ should handle token not found (56 ms)
    updatePaymentStatus
      ✓ should update payment status to success (51 ms)
      ✓ should update payment status to failed (52 ms)
    handleFormCallback
      ✓ should process callback successfully (52 ms)
      ✓ should handle no pending payment for callback (51 ms)
      ✓ should handle callback processing errors (52 ms)
    processCallbackResult
      ✓ should process successful payment from query params (52 ms)
      ✓ should process failed payment (51 ms)
      ✓ should handle body parameters (51 ms)
      ✓ should redirect with all parameters (52 ms)
    getPoolStats
      ✓ should return pool statistics (57 ms)
      ✓ should handle stats retrieval errors (55 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (55 ms)
      ✓ should require orderId (52 ms)
      ✓ should require customerId (53 ms)
      ✓ should require paymentMethodId (53 ms)
      ✓ should require paygistixId (58 ms)
      ✓ should require amount (60 ms)
      ✓ should validate amount is non-negative (57 ms)
      ✓ should default currency to USD (61 ms)
      ✓ should validate currency enum (60 ms)
      ✓ should reject invalid currency (56 ms)
      ✓ should validate status enum (61 ms)
      ✓ should reject invalid status (52 ms)
      ✓ should default status to pending (52 ms)
    Default Values
      ✓ should default capturedAmount to 0 (54 ms)
      ✓ should default refundedAmount to 0 (51 ms)
      ✓ should default hasDispute to false (52 ms)
      ✓ should have empty refunds array (52 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (52 ms)
      ✓ should handle zero amounts (51 ms)
      ✓ should handle full refund (52 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (51 ms)
        ✓ should allow refund when status is partially_refunded (52 ms)
        ✓ should not allow refund when status is pending (53 ms)
        ✓ should not allow refund when fully refunded (52 ms)
        ✓ should validate refund amount (52 ms)
        ✓ should handle null amount parameter (52 ms)
      canCapture()
        ✓ should allow capture when status is authorized (52 ms)
        ✓ should not allow capture when status is captured (51 ms)
        ✓ should not allow capture when status is pending (51 ms)
      addRefund()
        ✓ should add refund to refunds array (52 ms)
        ✓ should update refundedAmount (52 ms)
        ✓ should update lastRefundAt (51 ms)
        ✓ should set status to partially_refunded for partial refund (51 ms)
        ✓ should set status to refunded for full refund (52 ms)
        ✓ should handle multiple refunds (53 ms)
        ✓ should handle refund that exceeds captured amount (52 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (53 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (52 ms)
        ✓ should accept custom limit (53 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (52 ms)
    Middleware
      ✓ should have pre-save middleware defined (52 ms)
      ○ skipped should prevent modification of paygistixId
      ○ skipped should prevent modification of orderId
    Refund Schema
      ✓ should validate refund subdocument (57 ms)
      ✓ should require refundId in refund (52 ms)
      ✓ should require amount in refund (53 ms)
      ✓ should validate refund amount is non-negative (52 ms)
      ✓ should set default createdAt for refund (52 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (57 ms)
      ✓ should allow dispute fields when hasDispute is true (52 ms)
      ✓ should validate dispute amount is non-negative (54 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (53 ms)
      ✓ should store response as mixed type (54 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    W9 Status Request - User: { _id: 'user123', affiliateId: 'AFF-123' }

      at Object.log [as getW9Status] (server/controllers/w9Controller.js:109:13)

  console.log
    W9 Status Request - User: { _id: 'user123', affiliateId: 'AFF-123' }

      at Object.log [as getW9Status] (server/controllers/w9Controller.js:109:13)

PASS tests/unit/w9ControllerComprehensive.test.js
  W9 Controller - Comprehensive Tests
    uploadW9Document
      ✓ should upload W9 document successfully (2 ms)
      ✓ should reject upload when validation fails (1 ms)
      ✓ should reject upload when no file provided
      ✓ should reject upload when affiliate not found (1 ms)
      ✓ should reject upload when pending W9 exists
      ✓ should handle storage errors gracefully
    getW9Status
      ✓ should get W9 status for affiliate (6 ms)
      ✓ should return not_submitted status when no W9 (2 ms)
    downloadOwnW9
      ✓ should download own W9 document (1 ms)
      ✓ should return 404 when no active W9 found
    getPendingW9Documents
      ✓ should get pending W9 documents for admin (1 ms)
    verifyW9Document
      ✓ should verify W9 document (1 ms)
      ✓ should return 404 when affiliate not found
      ✓ should return 404 when no W9 document found
    rejectW9Document
      ✓ should reject W9 document
      ✓ should return 404 when affiliate not found
    getW9History
      ✓ should get W9 history for affiliate (1 ms)
    getAuditLogs
      ✓ should get audit logs with filters (1 ms)
    exportAuditLogs
      ✓ should export audit logs as CSV (5 ms)
      ✓ should export audit logs as JSON (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (56 ms)
      ✓ should require customerId (61 ms)
      ✓ should require paygistixId (60 ms)
      ✓ should validate type enum (61 ms)
      ✓ should reject invalid type (56 ms)
      ✓ should default type to card (57 ms)
    Card Validation
      ✓ should require card details when type is card (64 ms)
      ✓ should validate card last4 length (58 ms)
      ✓ should validate card brand enum (60 ms)
      ✓ should reject invalid card brand (57 ms)
      ✓ should validate expiry month range (53 ms)
      ✓ should validate expiry year is not in the past (53 ms)
      ✓ should require card fingerprint (54 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (54 ms)
      ✓ should require bank account details when type is bank_account (53 ms)
      ✓ should validate bank account last4 length (59 ms)
      ✓ should validate account type enum (54 ms)
      ✓ should reject invalid account type (54 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (53 ms)
      ✓ should require wallet type when type is wallet (54 ms)
      ✓ should validate wallet type enum (53 ms)
    Default Values
      ✓ should default isDefault to false (53 ms)
      ✓ should default isActive to true (53 ms)
      ✓ should default isVerified to false (53 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (54 ms)
        ✓ should format bank account display name (55 ms)
        ✓ should format wallet display name (56 ms)
        ✓ should handle google_pay formatting (52 ms)
        ✓ should return default for unknown type (52 ms)
      isExpired
        ✓ should return false for non-card types (53 ms)
        ✓ should return false for future expiry (52 ms)
        ✓ should return true for past year (52 ms)
        ✓ should return true for current year past month (54 ms)
        ✓ should return false for current year future month (52 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (54 ms)
        ✓ should not allow use of inactive payment method (53 ms)
        ✓ should not allow use of expired card (53 ms)
        ✓ should not allow use of unverified bank account (53 ms)
        ✓ should allow use of verified bank account (57 ms)
      markAsUsed()
        ✓ should update lastUsedAt (53 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (53 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (53 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (53 ms)
        ✓ should return null if no duplicate found (53 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (54 ms)
      Pre-save default handling
        ○ skipped should remove default from other payment methods when setting default
        ○ skipped should prevent modification of paygistixId
        ○ skipped should prevent modification of customerId
      Pre-save auto-default
        ○ skipped should set first payment method as default
        ○ skipped should not set as default if other active methods exist
    Metadata Field
      ✓ should store metadata as Map (57 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (56 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/unit/administrator.test.js
  Administrator Model
    Schema Validation
      ✕ should create a valid administrator (253 ms)
      ✕ should require all mandatory fields (82 ms)
      ✓ should enforce email format validation (77 ms)
      ✕ should enforce unique email constraint (316 ms)
      ✕ should enforce unique adminId constraint (311 ms)
      ✓ should validate permission enum values (79 ms)
      ✕ should accept valid permissions (78 ms)
      ✕ should trim whitespace from string fields (77 ms)
      ✕ should convert email to lowercase (88 ms)
      ✕ should not allow role to be changed after creation (78 ms)
    Password Handling
      ✕ should hash password on save (77 ms)
      ✕ should verify correct password (77 ms)
      ✕ should reject incorrect password (77 ms)
      ✕ should not expose password in JSON output (81 ms)
    Login Attempts and Account Locking
      ✕ should increment login attempts (78 ms)
      ✕ should lock account after 5 failed attempts (79 ms)
      ✕ should reset login attempts on successful login (77 ms)
      ✕ should reset attempts if lock has expired (81 ms)
      ✕ should correctly identify locked accounts (81 ms)
    Password Reset
      ✕ should generate password reset token (78 ms)
      ✕ should set password reset expiry to 30 minutes (78 ms)
    Permissions
      ✕ should check single permission correctly (78 ms)
      ✕ should check multiple permissions with AND operation (78 ms)
      ✕ should check multiple permissions with OR operation (77 ms)
      ✕ should set default permissions if none provided (77 ms)
    Static Methods
      ✕ should find active administrators (78 ms)
      ✕ should find administrator by email with password (78 ms)
      ✕ should handle case-insensitive email search (78 ms)
      ✓ should return null for non-existent email (106 ms)
    Timestamps
      ✕ should auto-generate timestamps on creation (79 ms)
      ✕ should update updatedAt on modification (78 ms)
    Admin ID Generation
      ✕ should auto-generate unique admin ID (79 ms)
      ✕ should not override provided admin ID (78 ms)

  ● Administrator Model › Schema Validation › should create a valid administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should require all mandatory fields

    expect(received).toBeDefined()

    Received: undefined

      49 |       expect(error.errors.lastName).toBeDefined();
      50 |       expect(error.errors.email).toBeDefined();
    > 51 |       expect(error.errors.password).toBeDefined();
         |                                     ^
      52 |     });
      53 |
      54 |     it('should enforce email format validation', async () => {

      at Object.toBeDefined (tests/unit/administrator.test.js:51:37)

  ● Administrator Model › Schema Validation › should enforce unique email constraint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should enforce unique adminId constraint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should accept valid permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should trim whitespace from string fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should convert email to lowercase

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should not allow role to be changed after creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should hash password on save

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should verify correct password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should reject incorrect password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should not expose password in JSON output

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should increment login attempts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should lock account after 5 failed attempts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should reset login attempts on successful login

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should reset attempts if lock has expired

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should correctly identify locked accounts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Reset › should generate password reset token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Reset › should set password reset expiry to 30 minutes

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check single permission correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check multiple permissions with AND operation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check multiple permissions with OR operation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should set default permissions if none provided

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should find active administrators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should find administrator by email with password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should handle case-insensitive email search

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Timestamps › should auto-generate timestamps on creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Timestamps › should update updatedAt on modification

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Admin ID Generation › should auto-generate unique admin ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Admin ID Generation › should not override provided admin ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (2 ms)
        ✓ should accept passwords with 8 or more characters
      Character Type Requirements
        ✓ should require at least one uppercase letter (1 ms)
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character (1 ms)
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (1 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers
        ✓ should reject passwords with sequential letters (1 ms)
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters (1 ms)
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history (1 ms)
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores (1 ms)
      ✓ should return correct strength labels
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history (1 ms)
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function
      ✓ should validate passwords correctly in express-validator context
      ✓ should throw for invalid passwords in express-validator context (13 ms)
      ✓ should include admin-specific validation when userType is admin (4 ms)
      ✓ should include admin-specific validation when userType is operator (1 ms)
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords
      ✓ should skip validation if no password in request (1 ms)
      ✓ should include strength assessment in response for invalid passwords
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully
      ✓ should handle very long passwords (1 ms)
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:545:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:545:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:545:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:730:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:363:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      751 |     });
      752 |   } catch (error) {
    > 753 |     console.error('Token verification error:', error);
          |             ^
      754 |     res.status(500).json({
      755 |       success: false,
      756 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:753:13)
      at Object.verifyToken (tests/unit/authController.test.js:363:28)

FAIL tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✕ should successfully login an affiliate with valid credentials (7 ms)
      ✓ should return 401 for non-existent affiliate (1 ms)
      ✓ should return 401 for incorrect password
    customerLogin
      ✕ should successfully login a customer with valid credentials (18 ms)
      ✓ should return 401 for non-existent customer
      ✕ should login customer using emailOrUsername field (2 ms)
      ✕ should prioritize emailOrUsername over username field (2 ms)
      ✓ should return error when neither username nor emailOrUsername provided
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (19 ms)
      ✓ should return customer user data (1 ms)
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token (1 ms)
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✕ should successfully login administrator (1 ms)
      ✕ should handle locked account (1 ms)
      ✓ should handle inactive administrator (1 ms)
    operatorLogin
      ✓ should successfully login operator with PIN (1 ms)
      ✓ should increment login attempts on failure (1 ms)
    logout
      ✓ should logout user and blacklist token (6 ms)
    forgotPassword
      ✓ should send password reset email for affiliate (1 ms)
      ✓ should handle non-existent email gracefully
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token (1 ms)

  ● Auth Controller › affiliateLogin › should successfully login an affiliate with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "username": "testaffiliate",
    +   "username": Object {
    +     "$regex": /^testaffiliate$/i,
    +   },
      },

    Number of calls: 1

      86 |       await authController.affiliateLogin(req, res);
      87 |
    > 88 |       expect(Affiliate.findOne).toHaveBeenCalledWith({ username: 'testaffiliate' });
         |                                 ^
      89 |       expect(encryptionUtil.verifyPassword).toHaveBeenCalledWith(
      90 |         'password123',
      91 |         'salt',

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:88:33)

  ● Auth Controller › customerLogin › should successfully login a customer with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "testcustomer",
    +       "username": Object {
    +         "$regex": /^testcustomer$/i,
    +       },
          },
          Object {
            "email": "testcustomer",
          },
        ],,

    Number of calls: 1

      184 |       await authController.customerLogin(req, res);
      185 |
    > 186 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      187 |         $or: [
      188 |           { username: 'testcustomer' },
      189 |           { email: 'testcustomer' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:186:32)

  ● Auth Controller › customerLogin › should login customer using emailOrUsername field

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "jane@example.com",
    +       "username": Object {
    +         "$regex": /^jane@example.com$/i,
    +       },
          },
          Object {
            "email": "jane@example.com",
          },
        ],,

    Number of calls: 1

      263 |       await authController.customerLogin(req, res);
      264 |
    > 265 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      266 |         $or: [
      267 |           { username: 'jane@example.com' },
      268 |           { email: 'jane@example.com' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:265:32)

  ● Auth Controller › customerLogin › should prioritize emailOrUsername over username field

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "testcustomer",
    +       "username": Object {
    +         "$regex": /^testcustomer$/i,
    +       },
          },
          Object {
            "email": "testcustomer",
          },
        ],,

    Number of calls: 1

      312 |
      313 |       // Should use emailOrUsername value, not username
    > 314 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      315 |         $or: [
      316 |           { username: 'testcustomer' },
      317 |           { email: 'testcustomer' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:314:32)

  ● Auth Controller › administratorLogin › should successfully login administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "AdminPass123!"

    Number of calls: 0

      505 |
      506 |       expect(Administrator.findOne).toHaveBeenCalledWith({ email: 'admin@example.com' });
    > 507 |       expect(mockAdmin.verifyPassword).toHaveBeenCalledWith('AdminPass123!');
          |                                        ^
      508 |       expect(mockAdmin.resetLoginAttempts).toHaveBeenCalled();
      509 |       expect(res.json).toHaveBeenCalledWith({
      510 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:507:40)

  ● Auth Controller › administratorLogin › should handle locked account

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403
    Received: 401

    Number of calls: 1

      533 |       await authController.administratorLogin(req, res);
      534 |
    > 535 |       expect(res.status).toHaveBeenCalledWith(403);
          |                          ^
      536 |       expect(res.json).toHaveBeenCalledWith({
      537 |         success: false,
      538 |         message: 'Account is locked due to multiple failed login attempts.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:535:26)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy (1 ms)
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources (1 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role (1 ms)
      ✓ should accept admin for any combination of roles
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params (1 ms)
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource
      ✓ should reject affiliate access to another affiliate resource (1 ms)
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator (1 ms)
      ✓ should reject when administrator not found
      ✓ should reject when administrator is not active (1 ms)
      ✓ should accept when administrator has required permission
      ✓ should handle array of required permissions (1 ms)
      ✓ should reject when administrator lacks any required permission
      ✓ should handle database errors (1 ms)
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators
      ✓ should reject when operator not found (1 ms)
      ✓ should reject when operator is not active
      ✓ should reject when operator is not on shift (1 ms)
      ✓ should accept active operator on shift
      ✓ should handle database errors (11 ms)
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions (1 ms)
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified (1 ms)
      ✓ should handle deeply nested fields
      ✓ should handle non-object data gracefully (1 ms)
      ✓ should handle empty allowed fields

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (5 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials
      ✓ should configure LinkedIn strategy when credentials are present (2 ms)
    Google OAuth Strategy
      ✓ should handle database errors (2 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (2 ms)
        ✓ should handle existing affiliate conflict (4 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (2 ms)
        ✓ should return new affiliate user data (2 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (2 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (2 ms)
      ✓ should link LinkedIn account to existing affiliate (1 ms)
      ✓ should return new LinkedIn user data (2 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (1 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/systemConfig.test.js (8.257 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (291 ms)
      ✓ should require mandatory fields (80 ms)
      ✓ should enforce unique key constraint (285 ms)
      ✓ should validate category enum (86 ms)
      ✓ should validate dataType enum (79 ms)
      ✓ should accept all valid categories (393 ms)
      ✓ should accept all valid data types (240 ms)
      ✓ should trim string fields (110 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (80 ms)
        ✓ should enforce minimum value validation (80 ms)
        ✓ should enforce maximum value validation (79 ms)
        ✓ should accept valid number within range (114 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (82 ms)
        ✓ should accept boolean values (114 ms)
      String validation
        ✓ should reject non-string values for string dataType (79 ms)
        ✓ should enforce regex validation (83 ms)
        ✓ should accept valid string matching regex (119 ms)
      Array validation
        ✓ should reject non-array values for array dataType (80 ms)
        ✓ should accept array values (114 ms)
      Object validation
        ✓ should reject non-object values for object dataType (79 ms)
        ✓ should reject arrays for object dataType (81 ms)
        ✓ should accept object values (113 ms)
      Allowed values validation
        ✓ should enforce allowed values (84 ms)
        ✓ should accept allowed values (115 ms)
    Static Methods
      getValue
        ✓ should return config value (142 ms)
        ✓ should return defaultValue when value is undefined (139 ms)
        ✓ should return provided default when config not found (106 ms)
        ✓ should return null when config not found and no default provided (105 ms)
      setValue
        ✓ should update config value (177 ms)
        ✓ should throw error for non-existent config (105 ms)
        ✓ should throw error for non-editable config (144 ms)
        ✓ should update updatedBy when provided (167 ms)
        ✓ should validate new value according to dataType (146 ms)
      getByCategory
        ✓ should return all configs for a category (318 ms)
        ✓ should return only public configs when specified (148 ms)
        ✓ should return empty array for non-existent category (144 ms)
        ✓ should sort by key (188 ms)
      getPublicConfigs
        ✓ should return only public configs (139 ms)
        ✓ should sort by category then key (142 ms)
      initializeDefaults
        ✓ should create default configurations (506 ms)
        ✓ should not overwrite existing configurations (465 ms)
        ✓ should add missing configurations (467 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (112 ms)
      ✓ should update updatedAt on modification (242 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (112 ms)
      ✓ should use defaultValue when value is undefined (111 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (114 ms)
      ✓ should handle empty validation object (114 ms)
      ✓ should skip validation when value is not modified (139 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:852:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:917:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:852:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:852:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:917:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:04:53.197Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      963 |             await OAuthSession.createSession(sessionId, message);
      964 |           } catch (dbError) {
    > 965 |             console.error('Error storing OAuth session:', dbError);
          |                     ^
      966 |           }
      967 |         }
      968 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:965:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:852:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:917:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1643:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1705:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-21T17:04:53.759Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-21T17:04:54.406Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-21T17:04:54.781Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:04:55.257Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-21T17:04:55.257Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:04:55.575Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-21T17:04:55.757Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1613:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1613:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1613:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1613:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1613:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1594:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1615 |
      1616 |   } catch (error) {
    > 1617 |     console.error('OAuth session polling error:', error);
           |             ^
      1618 |     res.status(500).json({
      1619 |       success: false,
      1620 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1617:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

PASS tests/unit/authControllerEnhanced.test.js (6.707 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (253 ms)
      ✓ should handle customer context from state parameter (174 ms)
      ✓ should handle missing user data gracefully (167 ms)
      ✓ should handle OAuth session creation errors (185 ms)
      ✓ should extract profile data correctly for different providers (160 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (162 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (222 ms)
      ✓ should sanitize social data and reject if fields become empty (162 ms)
      ✓ should check for existing email and username (162 ms)
      ✓ should check for existing social account (158 ms)
      ✓ should generate unique username from social data (161 ms)
      ✓ should handle JWT verification errors (158 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (213 ms)
      ✓ should validate affiliate existence (158 ms)
      ✓ should sanitize customer social data (160 ms)
    socialLogin
      ✓ should login existing affiliate with social account (160 ms)
      ✓ should return error for non-existent social account (158 ms)
      ✓ should login existing customer with social account (182 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (159 ms)
      ✓ should prevent linking already existing social account (158 ms)
      ✓ should handle user not found error (159 ms)
    pollOAuthSession
      ✓ should return complete session data when available (160 ms)
      ✓ should return social-auth-login session data (160 ms)
      ✓ should return social-auth-error session data (159 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (159 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (161 ms)
      ✓ should return pending status when session not ready (160 ms)
      ✓ should handle database errors gracefully (160 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (159 ms)
      ✓ should handle database connection errors (159 ms)
      ✓ should handle missing required fields in social data (163 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operator.test.js (11.049 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (347 ms)
      ✓ should require all mandatory fields (84 ms)
      ✓ should enforce email format validation (91 ms)
      ✓ should enforce unique email constraint (625 ms)
      ✓ should enforce unique username constraint (642 ms)
      ✓ should validate username format (77 ms)
      ✓ should validate shift time format (78 ms)
      ✓ should accept valid shift times (170 ms)
      ✓ should enforce quality score range (92 ms)
      ✓ should trim whitespace from string fields (178 ms)
      ✓ should convert email and username to lowercase (175 ms)
      ✓ should not allow role to be changed after creation (240 ms)
    Password Handling
      ✓ should hash password on save (200 ms)
      ✓ should verify correct password (263 ms)
      ✓ should reject incorrect password (258 ms)
      ✓ should not expose password in JSON output (192 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (277 ms)
      ✓ should lock account after 5 failed attempts (457 ms)
      ✓ should lock for 30 minutes (452 ms)
      ✓ should reset login attempts on successful login (291 ms)
      ✓ should reset attempts if lock has expired (263 ms)
      ✓ should correctly identify locked accounts (173 ms)
    Password Reset
      ✓ should generate password reset token (83 ms)
      ✓ should set password reset expiry to 30 minutes (78 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (77 ms)
        ✓ should correctly identify operator on shift during normal hours (77 ms)
        ✓ should correctly identify operator off shift (77 ms)
        ✓ should handle overnight shifts correctly (80 ms)
    Processing Statistics
      ✓ should update processing stats correctly (202 ms)
      ✓ should handle first order processing (196 ms)
      ✓ should update quality score with passing result (196 ms)
      ✓ should update quality score with failing result (207 ms)
    Static Methods
      findActive
        ✓ should find only active operators (277 ms)
      findOnShift
        ✓ should find only operators on shift (293 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (193 ms)
        ✓ should handle case-insensitive email search (194 ms)
        ✓ should return null for non-existent email (103 ms)
      findAvailableOperators
        ✓ should find operators with low order count (289 ms)
        ✓ should sort by current order count (290 ms)
        ✓ should respect limit parameter (998 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (181 ms)
      ✓ should update updatedAt on modification (304 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (258 ms)
      ✓ should not override provided operator ID (164 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:53:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching administrators:', error);
         |             ^
      73 |     res.status(500).json({
      74 |       success: false,
      75 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:72:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2232:70)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:925:9)

      2238 |     });
      2239 |   } catch (error) {
    > 2240 |     console.error('Error updating operator profile:', error);
           |             ^
      2241 |     res.status(500).json({
      2242 |       success: false,
      2243 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2240:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:925:9)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (1 ms)
        ✓ should filter administrators by search query (1 ms)
        ✓ should handle database errors (46 ms)
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator (11 ms)
        ✓ should return 400 for invalid ObjectId (1 ms)
      createAdministrator
        ✓ should create new administrator with valid data (1 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error (1 ms)
      updateAdministrator
        ✓ should update administrator successfully
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully
        ✓ should prevent self-deletion (3 ms)
        ✓ should prevent deletion of last administrator
      resetAdministratorPassword
        ✓ should reset administrator password
        ✓ should handle email sending failure (1 ms)
      getPermissions
        ✓ should return all available permissions
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format (1 ms)
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields (2 ms)
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors
      ✓ should handle duplicate email or username (1 ms)
      ✓ should handle email service failure gracefully (27 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should handle decryption errors gracefully (11 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (1 ms)
      ✓ should handle password change (1 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method (5 ms)
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (2 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
    Error handling
      ✓ should handle database connection errors (1 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (2 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion (1 ms)
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getDashboard
      ✓ should return operator dashboard data (2 ms)
    getOrderQueue
      ✓ should return available orders for operator workstation (1 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed
      ✓ should fail if order not found (1 ms)
      ✓ should handle database error during claim
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found (1 ms)
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation
      ✓ should set processingCompleted when status is ready (1 ms)
      ✓ should handle database error
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check
    getMyOrders
      ✓ should return orders assigned to operator (1 ms)
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found
      ✓ should end shift successfully
      ✓ should handle database error (1 ms)
    getPerformanceStats
      ✓ should return operator performance statistics (5 ms)
    getCustomerDetails
      ✓ should return customer details for an order (1 ms)
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getDashboard when operator not found
      ✓ should handle database error in getDashboard (1 ms)
      ✓ should handle error in getOrderQueue
      ✓ should handle different filters in getOrderQueue (1 ms)
      ✓ should handle operator at max capacity in claimOrder
      ✓ should handle quality check failure in performQualityCheck (1 ms)
      ✓ should handle workstation conflict in updateShiftStatus
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats (1 ms)
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails
      ✓ should handle filters in getMyOrders (1 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:14.679Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:15.035Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e309c0d28a54def311d2e596fcd7d41',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Y4losClk-9oqcKji_tCHrF0rkdaDHmO0eYjY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 3e309c0d28a54def311d2e596fcd7d41

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: _j3rKMdyDK...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 14.411 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:15.727Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:15.727Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:15.728Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:15.828Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-b26bd248-03f0-4b5a-95f6-a5915650ecd1",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 327.549 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:16.220Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:16.223Z"}
[0mGET /api/v1/payments/config [32m200[0m 2.793 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.113Z"}
  console.log
    CSRF token generation: {
      sessionID: '618d892a0d4bfb521b1ca4ad64b92579',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: oeDhp6v0-CfVJTxBXJalCjU3MOjR_86MD3h4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 618d892a0d4bfb521b1ca4ad64b92579

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: sN0Wga2FhZ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.584 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.262Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.262Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.263Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.352Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-e8a115fa-9fd8-4497-aa5e-74b401598b47",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 139.182 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:17.552Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: '618d892a0d4bfb521b1ca4ad64b92579',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A618d892a0d4bfb521b1ca4ad64b92579.%2F7cb4P0UJvp7Vib4aK6PRe1fpaQeT4AzT4DUKMmZ22E',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[31merror[39m: Error creating payment token: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","stack":"Error: No callback handlers available. All handlers are currently in use.\n    at CallbackPoolManager.acquireCallback (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:78:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at createPaymentToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/paymentController.js:78:30)","timestamp":"2025-06-21T17:05:17.598Z"}
[0mPOST /api/v1/payments/create-token [31m500[0m 46.223 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.419Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e69f8181d0dd76f36cbbc81de1b2c1d3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: fvPHRN1f-09FEr9PAaHVYueecsDxAVNS37l8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: e69f8181d0dd76f36cbbc81de1b2c1d3

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 3WzWrhqpN7...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.434 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.555Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.556Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.556Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.661Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-6f3e84da-e813-4431-a506-717d15e1369a",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.848 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.862Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: 'e69f8181d0dd76f36cbbc81de1b2c1d3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae69f8181d0dd76f36cbbc81de1b2c1d3.QxFmv0FutqYnOy5SIO04MfDfNzZfXhW4FTqDgGI%2ByKc',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[31merror[39m: Error creating payment token: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","stack":"Error: No callback handlers available. All handlers are currently in use.\n    at CallbackPoolManager.acquireCallback (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:78:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at createPaymentToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/paymentController.js:78:30)","timestamp":"2025-06-21T17:05:18.892Z"}
[0mPOST /api/v1/payments/create-token [31m500[0m 30.269 ms - 60[0m
[34mdebug[39m: GET /api/v1/payments/check-status/undefined {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:18.895Z"}
[0mGET /api/v1/payments/check-status/undefined [33m404[0m 27.862 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:19.745Z"}
  console.log
    CSRF token generation: {
      sessionID: '00225295bb2d653eaf3d30c16ee27948',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: VLeyULmO-dVayn9t-gzJaH330h-_8dfvFUuU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 00225295bb2d653eaf3d30c16ee27948

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: TTxRiKfwHZ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.943 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:19.891Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:19.892Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:19.892Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:19.977Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-b60329c1-397d-49d2-8f59-099b4c9acbea",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.499 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:20.175Z"}
  console.log
    CSRF check for: /api/v1/payments/create-token {
      sessionID: '00225295bb2d653eaf3d30c16ee27948',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A00225295bb2d653eaf3d30c16ee27948.ra%2FX7CriHzDEIYEZ06MFa4hKRefWnohI4%2BG5JGjhNkA',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[31merror[39m: Error creating payment token: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","stack":"Error: No callback handlers available. All handlers are currently in use.\n    at CallbackPoolManager.acquireCallback (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:78:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at createPaymentToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/paymentController.js:78:30)","timestamp":"2025-06-21T17:05:20.204Z"}
[0mPOST /api/v1/payments/create-token [31m500[0m 29.325 ms - 60[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/undefined {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:20.207Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/undefined {
      sessionID: '00225295bb2d653eaf3d30c16ee27948',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A00225295bb2d653eaf3d30c16ee27948.ra%2FX7CriHzDEIYEZ06MFa4hKRefWnohI4%2BG5JGjhNkA',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/payments/cancel-token/undefined [33m404[0m 29.775 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.057Z"}
  console.log
    CSRF token generation: {
      sessionID: '1256b53c7b23e9b692e167daefcbe79b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 1e5TpEsL-A1WJDPN1RHoZsZzni_PvXcRaygc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 1256b53c7b23e9b692e167daefcbe79b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: VKlPlAYHJo...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.114 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.194Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.195Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.195Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.287Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-e0b4a808-0362-45bc-be66-7b8b013ed9d7",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 142.726 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/callback/handler-1?token=test-token&status=success {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:21.492Z"}
[0mGET /api/v1/payments/callback/handler-1?token=test-token&status=success [33m404[0m 2.626 ms - 128[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.325Z"}
  console.log
    CSRF token generation: {
      sessionID: '96abee26bfed8c59180c5e99620d2418',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3XZSogOU-273IsuydRRhiiiBWlLRJyZPD7Xg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 96abee26bfed8c59180c5e99620d2418

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: IRJ80FidaO...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.252 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.473Z"}
[32minfo[39m: Initialized 0 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.473Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.473Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.566Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-ed7b167f-07ef-4e71-8319-5c71b62b8198",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 140.532 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:22.767Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 27.746 ms - 75[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:23.623Z"}
FAIL tests/integration/payment.test.js (9.862 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2106 ms)
    Payment Token Tests
      ✕ should create payment token (1306 ms)
      ✕ should check payment status (1325 ms)
      ✕ should cancel payment token (1312 ms)
    Payment Callback Tests
      ✕ should handle form callback (1268 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1298 ms)

  ● Payment Integration Tests › Payment Token Tests › should create payment token

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      117 |         });
      118 |
    > 119 |       expect(response.status).toBe(200);
          |                               ^
      120 |       expect(response.body).toHaveProperty('success', true);
      121 |       expect(response.body).toHaveProperty('token');
      122 |       expect(response.body).toHaveProperty('formConfig');

      at Object.toBe (tests/integration/payment.test.js:119:31)

  ● Payment Integration Tests › Payment Token Tests › should check payment status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      145 |         .get(`/api/v1/payments/check-status/${token}`);
      146 |
    > 147 |       expect(response.status).toBe(200);
          |                               ^
      148 |       expect(response.body).toHaveProperty('success');
      149 |       expect(response.body).toHaveProperty('status');
      150 |     });

      at Object.toBe (tests/integration/payment.test.js:147:31)

  ● Payment Integration Tests › Payment Token Tests › should cancel payment token

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      174 |         .send({});
      175 |
    > 176 |       expect(response.status).toBe(200);
          |                               ^
      177 |       expect(response.body).toHaveProperty('success');
      178 |     });
      179 |   });

      at Object.toBe (tests/integration/payment.test.js:176:31)

  ● Payment Integration Tests › Payment Callback Tests › should handle form callback

    expect(received).toBe(expected) // Object.is equality

    Expected: 302
    Received: 404

      189 |         });
      190 |
    > 191 |       expect(response.status).toBe(302); // Expect redirect
          |                               ^
      192 |     });
      193 |   });
      194 |

      at Object.toBe (tests/integration/payment.test.js:191:31)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:24.593Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:25.491Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:25.820Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 329.201 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:27.088Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:27.232Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.746 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-89ad8f0c-42dc-40f0-909c-2798fa767e42/customers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:27.244Z"}
[0mGET /api/v1/affiliates/AFF-89ad8f0c-42dc-40f0-909c-2798fa767e42/customers [32m200[0m 114.710 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:28.422Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:28.572Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.377 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-05eb3494-11d7-4620-be0c-67be8a719735/customers?customerId=CUST-3256b85b-c797-4aab-95fc-a227f0f6223d {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:28.662Z"}
[0mGET /api/v1/affiliates/AFF-05eb3494-11d7-4620-be0c-67be8a719735/customers?customerId=CUST-3256b85b-c797-4aab-95fc-a227f0f6223d [32m200[0m 110.804 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:29.834Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:29.985Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.223 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-f681e263-8ca6-415f-87e7-a0aaa8b6f17c/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:29.988Z"}
[0mGET /api/v1/affiliates/AFF-f681e263-8ca6-415f-87e7-a0aaa8b6f17c/customers?customerId=NONEXISTENT123 [32m200[0m 109.421 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:31.132Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:31.278Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.453 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-2dd27c40-7401-4bc9-ac35-594338bdb924/customers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:31.281Z"}
[0mGET /api/v1/affiliates/AFF-2dd27c40-7401-4bc9-ac35-594338bdb924/customers [33m401[0m 1.020 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:32.321Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:32.478Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 157.311 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:32.482Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:32.642Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 160.167 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-bd014a0b-8268-4133-93de-c23f7a9798e4/customers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:32.645Z"}
[0mGET /api/v1/affiliates/AFF-bd014a0b-8268-4133-93de-c23f7a9798e4/customers [32m200[0m 151.694 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-bd014a0b-8268-4133-93de-c23f7a9798e4/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:32.800Z"}
[0mGET /api/v1/affiliates/AFF-bd014a0b-8268-4133-93de-c23f7a9798e4/dashboard [32m200[0m 138.857 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:34.008Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:34.164Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 156.151 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:35.213Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:35.368Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 155.321 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d4efd280-3642-4128-8e48-d1846391caee {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:35.375Z"}
[0mGET /api/v1/affiliates/AFF-d4efd280-3642-4128-8e48-d1846391caee [32m200[0m 57.337 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:36.458Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:36.615Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 156.688 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d203efe4-0a9d-4e58-9e39-f9afdf2e4892/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:36.619Z"}
[0mGET /api/v1/affiliates/AFF-d203efe4-0a9d-4e58-9e39-f9afdf2e4892/dashboard [32m200[0m 137.013 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:37.800Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:37.962Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 163.012 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-7b04c3fe-afd6-4594-8705-849ef60b0529/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:37.967Z"}
[0mGET /api/v1/affiliates/AFF-7b04c3fe-afd6-4594-8705-849ef60b0529/customers?customerId=INVALID_ID [32m200[0m 114.805 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:39.142Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:39.295Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 152.758 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:39.298Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 28.984 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:40.383Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:05:40.548Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 165.333 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-0419d4b9-1754-4d06-9f32-7f148a9fcf06/customers {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:40.551Z"}
[0mGET /api/v1/affiliates/AFF-0419d4b9-1754-4d06-9f32-7f148a9fcf06/customers [32m200[0m 115.228 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (17.906 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (2013 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1298 ms)
      ✓ should filter customers by customerId when provided (1408 ms)
      ✓ should return empty array when filtering by non-existent customerId (1325 ms)
      ✓ should require authentication to access customer list (1193 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1666 ms)
      ✓ should handle URL parameters correctly throughout the flow (1219 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1254 ms)
      ✓ should load dashboard statistics correctly (1325 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1345 ms)
      ✓ should handle invalid affiliate ID (1241 ms)
      ✓ should handle database connection issues gracefully (1406 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/integration/adminCreation.test.js
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✕ should create admin with sequential ID when no admins exist (279 ms)
      ✕ should create admin with next sequential ID when admins exist (109 ms)
      ✕ should handle admin creation with all permissions (102 ms)
      ✕ should handle admin creation with partial permissions (111 ms)
    Admin Model Validation
      ✓ should require email field (104 ms)
      ✕ should save admins with different adminIds successfully (104 ms)
      ✕ should save admins with different emails successfully (103 ms)
    Password Handling
      ✕ should hash password before saving (104 ms)
      ✕ should validate password with verifyPassword method (109 ms)
    Admin Query Operations
      ✕ should find admin by adminId (104 ms)
      ✕ should find admin by email (105 ms)
      ✕ should find active admins only (104 ms)
      ✕ should find admins with specific permissions (104 ms)
      ✕ should get last admin for ID generation (104 ms)
    Email Integration
      ✕ should call email service after admin creation (104 ms)
      ✕ should handle email service failures gracefully (103 ms)

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should create admin with sequential ID when no admins exist

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should create admin with next sequential ID when admins exist

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should handle admin creation with all permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should handle admin creation with partial permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Model Validation › should save admins with different adminIds successfully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Model Validation › should save admins with different emails successfully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Password Handling › should hash password before saving

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Password Handling › should validate password with verifyPassword method

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admin by adminId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admin by email

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find active admins only

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admins with specific permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should get last admin for ID generation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Email Integration › should call email service after admin creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Email Integration › should handle email service failures gracefully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:05:45.860Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

  console.warn
    Could not find any valid Release File, using fallback information

      19 |   beforeAll(async () => {
      20 |     // Start in-memory MongoDB
    > 21 |     mongoServer = await MongoMemoryServer.create();
         |                   ^
      22 |     const mongoUri = mongoServer.getUri();
      23 |
      24 |     // Connect to in-memory database

      at getLinuxInformation (node_modules/mongodb-memory-server-core/src/util/getos/index.ts:110:11)
      at getOS (node_modules/mongodb-memory-server-core/src/util/getos/index.ts:61:18)
      at Function.generateOptions (node_modules/mongodb-memory-server-core/src/util/DryMongoBinary.ts:159:30)
      at MongoMemoryServer.getStartOptions (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:426:18)
      at MongoMemoryServer._startUpInstance (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:527:49)
      at MongoMemoryServer.start (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:350:5)
      at Function.create (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:317:5)
      at Object.<anonymous> (tests/integration/w9.test.js:21:19)

  console.warn
    Starting the MongoMemoryServer Instance failed, enable debug log for more information. Error:
     Error: EACCES: permission denied
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9Storage.test.js:430:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      19 |   beforeAll(async () => {
      20 |     // Start in-memory MongoDB
    > 21 |     mongoServer = await MongoMemoryServer.create();
         |                   ^
      22 |     const mongoUri = mongoServer.getUri();
      23 |
      24 |     // Connect to in-memory database

      at node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:359:17
      at MongoMemoryServer.start (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:350:5)
      at Function.create (node_modules/mongodb-memory-server-core/src/MongoMemoryServer.ts:317:5)
      at Object.<anonymous> (tests/integration/w9.test.js:21:19)

FAIL tests/integration/w9.test.js (15.265 s)
  ● W-9 Integration Tests › W-9 Upload Flow › should allow affiliate to upload W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Upload Flow › should reject non-PDF files

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Upload Flow › should reject files over 5MB

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Status Check › should return current W-9 status for affiliate

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Status Check › should show pending status after upload

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should list pending W-9 documents for admin

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should allow admin to verify W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should allow admin to reject W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Download › should allow affiliate to download their own W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Download › should allow admin to download any W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Audit Log Functionality › should retrieve audit logs with filters

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Audit Log Functionality › should export audit logs as CSV

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Expiry and Retention › should set expiry date 3 years from upload

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow non-admin to access admin endpoints

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow unauthenticated access

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow affiliate to download other affiliates W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)


  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'stop')

      32 |   afterAll(async () => {
      33 |     await mongoose.disconnect();
    > 34 |     await mongoServer.stop();
         |                       ^
      35 |   });
      36 |
      37 |   beforeEach(async () => {

      at Object.stop (tests/integration/w9.test.js:34:23)

  ● Test suite failed to run

    MongoNotConnectedError: Client must be connected before running operations

      57 |     const collections = mongoose.connection.collections;
      58 |     for (const key in collections) {
    > 59 |       await collections[key].deleteMany({});
         |                              ^
      60 |     }
      61 |   }
      62 |   await mongoose.disconnect();

      at autoConnect (node_modules/mongodb/src/operations/execute_operation.ts:135:13)
      at executeOperation (node_modules/mongodb/src/operations/execute_operation.ts:69:25)
      at Collection.deleteMany (node_modules/mongodb/src/collection.ts:457:34)
      at NativeCollection.<computed> [as deleteMany] (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)
      at Object.deleteMany (tests/setup.js:59:30)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:01.103Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:01.511Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b0d26149781681f0cbf372e23138a4dd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ItsmGCkW-Brus8ea2GxtskC_cIFPh8ww1-kw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b0d26149781681f0cbf372e23138a4dd

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: RsT6zLVV3g...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.373 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:01.792Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 346.803 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:03.422Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bc85bd02a12bd224c7c9db00a84b8f3f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ZY2zFTHR-5aGpfXZ6Oh6T-xaMhF-IaZNrquA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: bc85bd02a12bd224c7c9db00a84b8f3f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 9KdUn8JXgu...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.949 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-845b8f6c-3172-4613-82b4-200c765f4fe7 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:03.465Z"}
[0mGET /api/v1/affiliates/AFF-845b8f6c-3172-4613-82b4-200c765f4fe7 [32m200[0m 56.942 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:04.351Z"}
  console.log
    CSRF token generation: {
      sessionID: '92e83676e43a240555febb5e62116a77',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: nTi0zALh-cI2P99ukKRfS981oCGhzO-40HXk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 92e83676e43a240555febb5e62116a77

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: g3Lp_HqKzD...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.534 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-73e6be34-cc02-4224-a195-1f853e1b9486 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:04.394Z"}
[0mPUT /api/v1/affiliates/AFF-73e6be34-cc02-4224-a195-1f853e1b9486 [32m200[0m 87.603 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:05.372Z"}
  console.log
    CSRF token generation: {
      sessionID: '120cb2ab0eff96113b5f4327a87ae932',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ZtOYoyIx-Rn7NKuLtBI_gdf32X_6vmQRS8Y0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 120cb2ab0eff96113b5f4327a87ae932

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: qB43kTK47N...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.813 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:05.499Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:06:05.650Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 151.980 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:06.493Z"}
  console.log
    CSRF token generation: {
      sessionID: '97e0631fa2cfbdd09cdba170c34cfbb9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 5IUy9utC-oIb10xQBToZ5DXhNxq3JT7hYGKU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 97e0631fa2cfbdd09cdba170c34cfbb9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: yWa4hUNBbM...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.695 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-b829565f-2a5b-472f-bde4-ef7220d646a0/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:06.572Z"}
[0mGET /api/v1/affiliates/AFF-b829565f-2a5b-472f-bde4-ef7220d646a0/customers?page=1&limit=10 [32m200[0m 113.611 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:07.532Z"}
  console.log
    CSRF token generation: {
      sessionID: '3ce6d80a080b179fb8ff8cfa395251c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: GMsLqJUH-8MXwIPfZsU_iUSQ-UwZLAtJ16cQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 3ce6d80a080b179fb8ff8cfa395251c1

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: JqDqIgB4fI...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.672 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-e306cd8a-216d-4f28-b57c-70f19718095c/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:07.639Z"}
[0mGET /api/v1/affiliates/AFF-e306cd8a-216d-4f28-b57c-70f19718095c/orders?page=1&limit=10 [32m200[0m 109.160 ms - 576[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:08.603Z"}
  console.log
    CSRF token generation: {
      sessionID: '7c298ea4b3b4864a8d410de28ecfd6b0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: CNjakVab-IkDk76RT9cnroY85DmKhIgxXNPk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 7c298ea4b3b4864a8d410de28ecfd6b0

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PlMiKClSnR...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.347 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-2153905a-9803-460c-a8e9-ed64a9235d3f/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:08.684Z"}
[0mGET /api/v1/affiliates/AFF-2153905a-9803-460c-a8e9-ed64a9235d3f/transactions?page=1&limit=10 [32m200[0m 109.706 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:09.675Z"}
  console.log
    CSRF token generation: {
      sessionID: '92b4350af15b6783d1dcc74b0a9177e1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: qvjUBcsY-pH2Two5LMhOIUepbejGtQi9mOpY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 92b4350af15b6783d1dcc74b0a9177e1

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: -RqEUsNACc...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.686 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-57a3ee08-2aab-4d32-ba24-d8e41798740f/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:09.809Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-57a3ee08-2aab-4d32-ba24-d8e41798740f/delete-all-data {
      sessionID: '92b4350af15b6783d1dcc74b0a9177e1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A92b4350af15b6783d1dcc74b0a9177e1.wScu%2BlUJT6w6lI9nfXKrgOBERe%2BRWknozbwtKJpi4%2Bk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mDELETE /api/v1/affiliates/AFF-57a3ee08-2aab-4d32-ba24-d8e41798740f/delete-all-data [32m200[0m 201.971 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:10.923Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e6848a917c922d8501ae46bcd3db9e6f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: SEbpdltJ-5a6aSSE0KWtMrUKcK1mWI10Nen0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: e6848a917c922d8501ae46bcd3db9e6f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: AllYqBGfU4...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.281 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-dd442844-0354-432a-a2cf-fcf8405ab594/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:10.974Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-dd442844-0354-432a-a2cf-fcf8405ab594/delete-all-data {
      sessionID: 'e6848a917c922d8501ae46bcd3db9e6f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae6848a917c922d8501ae46bcd3db9e6f.IJ1uq7sq%2BjBsDaKC3rPjGcGXFB5YKheS3RJqEAmL1zY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mDELETE /api/v1/affiliates/AFF-dd442844-0354-432a-a2cf-fcf8405ab594/delete-all-data [33m403[0m 30.217 ms - 59[0m
PASS tests/integration/affiliate.test.js (11.493 s)
  Affiliate API
    ✓ should register a new affiliate (1924 ms)
    ✓ should get affiliate profile (929 ms)
    ✓ should update affiliate profile (1021 ms)
    ✓ should login affiliate (1119 ms)
    ✓ should get affiliate's customers list (1040 ms)
    ✓ should get affiliate's orders (1071 ms)
    ✓ should get affiliate's earnings/transactions (1072 ms)
    ✓ Delete all affiliate data (development only) (1248 ms)
    ✓ Reject delete in production environment (917 ms)
    ○ skipped should update payment information
    ○ skipped should handle commission-related endpoints

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:13.324Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.305Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 59.385 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.371Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.373Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 3.157 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.458Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:216:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 131.418 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.623Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 95.888 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:14.723Z"}
[31merror[39m: Failed to download completed W9: W9Document validation failed: uploadedBy: Path `uploadedBy` is required., storageKey: Path `storageKey` is required., size: Path `size` is required., mimeType: Path `mimeType` is required., originalName: Path `originalName` is required. {"_message":"W9Document validation failed","errors":{"mimeType":{"kind":"required","message":"Path `mimeType` is required.","name":"ValidatorError","path":"mimeType","properties":{"message":"Path `mimeType` is required.","path":"mimeType","type":"required"}},"originalName":{"kind":"required","message":"Path `originalName` is required.","name":"ValidatorError","path":"originalName","properties":{"message":"Path `originalName` is required.","path":"originalName","type":"required"}},"size":{"kind":"required","message":"Path `size` is required.","name":"ValidatorError","path":"size","properties":{"message":"Path `size` is required.","path":"size","type":"required"}},"storageKey":{"kind":"required","message":"Path `storageKey` is required.","name":"ValidatorError","path":"storageKey","properties":{"message":"Path `storageKey` is required.","path":"storageKey","type":"required"}},"uploadedBy":{"kind":"required","message":"Path `uploadedBy` is required.","name":"ValidatorError","path":"uploadedBy","properties":{"message":"Path `uploadedBy` is required.","path":"uploadedBy","type":"required"}}},"service":"wavemax-affiliate","stack":"ValidationError: W9Document validation failed: uploadedBy: Path `uploadedBy` is required., storageKey: Path `storageKey` is required., size: Path `size` is required., mimeType: Path `mimeType` is required., originalName: Path `originalName` is required.\n    at model.Object.<anonymous>.Document.invalidate (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/document.js:3343:32)\n    at /var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/document.js:3104:17\n    at /var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/schemaType.js:1407:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-06-21T17:06:14.758Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 107.065 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:15.923Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:216:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 58.218 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:16.942Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 83.811 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:18.021Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:216:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 118.837 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:19.076Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:216:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:295:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      260 |     });
      261 |   } catch (error) {
    > 262 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      263 |     logger.error('Failed to initiate W9 signing:', error);
      264 |     res.status(500).json({
      265 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:262:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:295:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:06:19.139Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 62.977 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:20.097Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:216:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:312:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      260 |     });
      261 |   } catch (error) {
    > 262 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      263 |     logger.error('Failed to initiate W9 signing:', error);
      264 |     res.status(500).json({
      265 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:262:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:312:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-21T17:06:20.156Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 59.468 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:21.099Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:21.101Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.705 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:22.061Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:293:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 55.767 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:23.055Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 28.924 ms - 65[0m
PASS tests/integration/docusignW9.test.js (11.957 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (2151 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (1017 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (1080 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (1086 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (1016 ms)
      ✓ should handle network errors during envelope creation (1006 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (931 ms)
      ✓ should prevent accessing another affiliates envelope status (1022 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (973 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:24.859Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/integration/systemConfig.test.js (15.192 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✕ should return all public configurations (1069 ms)
        ✕ should not return private configurations (836 ms)
      GET /api/v1/system/config/public/:key
        ✕ should return a specific public configuration (825 ms)
        ✕ should return 404 for non-existent config (820 ms)
        ✕ should return 404 for private config accessed via public endpoint (811 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✕ should return all configurations for admin (850 ms)
        ✕ should return 401 without authentication (835 ms)
        ✕ should return 403 for non-admin users (825 ms)
      PUT /api/v1/system/config/:key
        ✕ should update a configuration value (812 ms)
        ✕ should validate value based on data type (818 ms)
        ✕ should validate value against min/max constraints (859 ms)
        ✕ should not allow updating non-editable configs (815 ms)
        ✕ should require system_config permission (810 ms)
      POST /api/v1/system/config/initialize
        ✕ should initialize default configurations (823 ms)
        ✕ should not overwrite existing configurations (818 ms)
    Integration with Order Model
      ✕ should use SystemConfig WDF rate in new orders (826 ms)

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public › should return all public configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public › should not return private configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return a specific public configuration

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return 404 for non-existent config

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return 404 for private config accessed via public endpoint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return all configurations for admin

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return 401 without authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return 403 for non-admin users

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should update a configuration value

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should validate value based on data type

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should validate value against min/max constraints

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should not allow updating non-editable configs

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should require system_config permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › POST /api/v1/system/config/initialize › should initialize default configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › POST /api/v1/system/config/initialize › should not overwrite existing configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Integration with Order Model › should use SystemConfig WDF rate in new orders

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:40.989Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:41.724Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dcecfbec787c9d5f0a3be3db0c198637',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 1aBSiIV2-Hq3QBtCRnyJHRjJsWYHBNuCEwGY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: dcecfbec787c9d5f0a3be3db0c198637

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: FKpY6Y_wRG...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.684 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:41.739Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.105 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:43.056Z"}
  console.log
    CSRF token generation: {
      sessionID: '9bcdaf7d3917815a6e4ce09bcaaa0fb9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: phV42qL8-XytRO-b_Syof-4GRsZZ09cRHMT4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 9bcdaf7d3917815a6e4ce09bcaaa0fb9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: NjIMjuWDdR...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.809 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:43.905Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e3c3fd54ef67208d00ee64f851596ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NOOJ6aTv-JWJ5XprE3oJ3TFqKoPCGYTgfMh8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0e3c3fd54ef67208d00ee64f851596ab

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: d--RMjGYMo...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.120 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:44.749Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eaf48f8afd512f3b997c95348c036a2e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: YniBvZJT-PJmg6M00zKCaD7i8GqKwcunnPsg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: eaf48f8afd512f3b997c95348c036a2e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: LoHOdk3LNp...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.842 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:44.757Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.339 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:45.607Z"}
  console.log
    CSRF token generation: {
      sessionID: '34919e4a2f0b4d91e82f0b7f2d324c2f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: qyrO6vFy-iCufi4V55zu1x6vJMCM62i9Oo6w

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 34919e4a2f0b4d91e82f0b7f2d324c2f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: vPGntJORv8...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.066 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:45.619Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-6ea73f48-17ba-4479-856f-a074be72cdb1","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:06:45.839Z","userId":"6856e6a5f0a56549e42088d7","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 221.191 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:46.744Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c3012edde042ca1677e4b5872a5d7eab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 8eXwb4Ml-N0qupCZ-BQfHHPUWLGINZ5LyciU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: c3012edde042ca1677e4b5872a5d7eab

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 1h9cV3l4Bo...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.531 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:46.755Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.266 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:47.595Z"}
  console.log
    CSRF token generation: {
      sessionID: '97b7d2a881b4430a95cfbbc7ad79bad4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: yB2G6VUl-o-kEapGXHVa_On7UH8bydq-PTKc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 97b7d2a881b4430a95cfbbc7ad79bad4

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: DttCXQP3-P...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.969 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:47.605Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.170 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:48.448Z"}
  console.log
    CSRF token generation: {
      sessionID: '986acf7e032e3bde8dbd8cf0d38da32c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gFrwyX8N-U1YevusOs0FvKHcrsjTIBBjdj9k

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 986acf7e032e3bde8dbd8cf0d38da32c

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: sW6BYZlM8O...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.717 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:48.548Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.921 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:49.412Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f91bce3276321918bfa3da670b2156dc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: oKZcHif0-9mC2m6XyK-9EH5y8d16mOtfx1fg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f91bce3276321918bfa3da670b2156dc

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: oKN72RBmor...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 10.226 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:49.425Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b190e3f31d439f6f8c97155affe94502',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: I7RLoyLB-P20jmNUKtcfHSe6KQq1mrFwh62U

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b190e3f31d439f6f8c97155affe94502

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 5Z2kLg2aqH...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.865 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:49.523Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'b190e3f31d439f6f8c97155affe94502',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab190e3f31d439f6f8c97155affe94502.RgBhwQYWoj8wu7rFyM9O8n7aGaskDUrPcUAgsq6v2ok',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"facebook","socialAccountId":"facebook456"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-21T17:06:49.617Z","userId":"6856e6a9f0a56549e4208962","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 94.431 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:50.505Z"}
  console.log
    CSRF token generation: {
      sessionID: '181c7a610a4d6df2cb9af1df4102dc40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: rE00WEuX-31plJmMmiWlCtwrdP9-C0lVSjkw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 181c7a610a4d6df2cb9af1df4102dc40

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 1N9vTPse2t...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.690 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:50.513Z"}
  console.log
    CSRF token generation: {
      sessionID: '4faafaae7878efc080d314759ff7760f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3mWnBQAM-FeLKHWsSH0CVRWjGvJ8PuJqH5aA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4faafaae7878efc080d314759ff7760f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: oB65nIfZM6...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.420 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:50.668Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '4faafaae7878efc080d314759ff7760f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4faafaae7878efc080d314759ff7760f.0t7n9J5SZFjIgT79IzCqBbERu8t%2FEk5%2FrVeP7AqqLNg',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/auth/social/link [33m400[0m 30.174 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:51.550Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b8e133ed104a48dfe28ed79dce472aff',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3uy0xR4l-eQEHlbxQY9S8S5W5TKNSlTW0Lug

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b8e133ed104a48dfe28ed79dce472aff

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: _tdNfwYs0X...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.593 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:51.566Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a51eac7be10e5ec27fc8e1cb9b03ee12',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: j3fo2H9g-RFPO5VdJToLGNiJAcS4Zi1MOeHQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: a51eac7be10e5ec27fc8e1cb9b03ee12

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Y7XtvLVO87...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.072 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:51.660Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'a51eac7be10e5ec27fc8e1cb9b03ee12',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa51eac7be10e5ec27fc8e1cb9b03ee12.hpHdn64yq7ZGhDCm0Ps0sNiWi%2BJzkxJCMdJwSUgAsrw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:06:51.753Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-9aae8e8a-28f0-4d16-a9cc-c4beb9b4bcba","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-21T17:06:51.753Z","userId":"6856e6abf0a56549e42089af","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 93.027 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:52.649Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2cad78d36268f94f2e3531ce9b8c946',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 71fYAbq0-yP7HaapYOI1xJ-qZkP5ASdpoONg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f2cad78d36268f94f2e3531ce9b8c946

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: j8E5XwKI7L...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.793 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:52.658Z"}
  console.log
    CSRF token generation: {
      sessionID: '001731671d9137478462b40c31393740',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 0sj8uSWi-_FvGU2E3DxsF-Tw76WwYgwSkcC0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 001731671d9137478462b40c31393740

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: _xvY6YUwAU...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.812 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:52.766Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '001731671d9137478462b40c31393740',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A001731671d9137478462b40c31393740.fI7fZ7RiZq7K47%2BBnHdPu4Z7qeTJQNwFoK60%2BKgaQrk',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:06:52.887Z","userType":"affiliate","username":"socialuser"}
info: undefined {"affiliateId":"AFF-e7b19eca-505e-4923-9f80-14d6c6d94ef6","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"linkedin","timestamp":"2025-06-21T17:06:52.888Z","userId":"6856e6acf0a56549e42089d7","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 121.557 ms - 622[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:53.755Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b92ab15e1aa44442e6a661b65c543006',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: PxJH4AMt-tnrDsrTLsBMM89kA70hl7BMX_So

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b92ab15e1aa44442e6a661b65c543006

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 7AWqhb8s9_...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.156 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:53.764Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.747 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:54.609Z"}
  console.log
    CSRF token generation: {
      sessionID: '15c63d79d7eb934e943f6eff4f25c4bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: JQ6aR2qZ-lY98VWBMliSWuuNCnH1WOGPyeqQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 15c63d79d7eb934e943f6eff4f25c4bf

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: -2I0jRH3p5...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.616 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:54.618Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.089 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:55.467Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cdc66e73bbc48bc2cfebce631b19e90e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: UQPLkmvs-KtnWPEDT_UfDfWyc_4TtTSc4fm4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: cdc66e73bbc48bc2cfebce631b19e90e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: F1MtQr7snh...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.588 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:55.476Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.012 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:56.323Z"}
  console.log
    CSRF token generation: {
      sessionID: '5b407e9598b2ba9812b6c19c9db10c19',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: KfOTi3YZ-a0y_K0DkS9OKQsWsMi3ZfWt60sk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5b407e9598b2ba9812b6c19c9db10c19

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: AiEUntkBMq...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.818 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:56.339Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1347 |
      1348 |   } catch (error) {
    > 1349 |     console.error('Social registration error:', error);
           |             ^
      1350 |     res.status(500).json({
      1351 |       success: false,
      1352 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1349:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 82.419 ms - 49[0m
PASS tests/integration/socialAuth.test.js (17.811 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (1607 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (850 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (844 ms)
      ✓ should return 404 for unconfigured OAuth providers (854 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (1118 ms)
      ✓ should reject social registration with invalid social token (872 ms)
      ✓ should reject social registration with missing required fields (850 ms)
      ✓ should prevent duplicate social registrations (966 ms)
    Account Linking Flow
      ✓ should link social account to existing affiliate by email (1092 ms)
      ✓ should reject linking if social account already exists (1046 ms)
    Social Login Flow
      ✓ should successfully login with existing social account (1099 ms)
      ✓ should update social account tokens on login (1105 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (853 ms)
      ✓ should handle expired social tokens (854 ms)
      ✓ should sanitize social profile data (856 ms)
      ✓ should handle database errors during social registration (938 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:58.083Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:58.998Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a5b9210dbbf00db2276ad2d4942f0e0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: flKvUDTX-UJwkfgmMZTJDzRvh2lwtSY8okpo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6a5b9210dbbf00db2276ad2d4942f0e0

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: mzSp7FZivl...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.468 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:06:59.788Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-b09ae070-5ae4-4ffb-b0c7-bc459d264edb

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 197.125 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:00.949Z"}
  console.log
    CSRF token generation: {
      sessionID: '5de249aedb59b30025d7e098858ce71d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: yNG70WRX-Lr-jUtl8WNsnAmlmvCzF0EElOTg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5de249aedb59b30025d7e098858ce71d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: NK_8vgls0z...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.421 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:01.221Z"}
[0mPOST /api/v1/customers/register [33m400[0m 29.187 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:02.108Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b9885732f4cc1be7095c139cab90801c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: l8XLYzy4-xmEfxufWoecZBP_sUKE4CbM6qaE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b9885732f4cc1be7095c139cab90801c

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: mNdipj2UQf...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.327 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:02.398Z"}
[0mPOST /api/v1/customers/register [33m400[0m 57.308 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:03.308Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a3a424eb89ea42084bfcafdf2d65d637',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: qqaPMBLN-nf7EYnW808BA5IEp7MaM_EUX6vg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: a3a424eb89ea42084bfcafdf2d65d637

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: zfBXCbLo0x...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.917 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:03.621Z"}
[0mPOST /api/v1/customers/register [33m400[0m 57.140 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:04.551Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f1ac590699873ab6f40e11c9e31e7878',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: YbQzE7IP-bkFnnfZVlruin2utLk7btRrO-pY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f1ac590699873ab6f40e11c9e31e7878

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 8HpsHEuYc_...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.303 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:04.835Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 86.747 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:05.784Z"}
  console.log
    CSRF token generation: {
      sessionID: '61be0a65420320b0fcf2cb397b7732db',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: TIP41cmD--O9XRoVn18sEF4u_JukoCBnxCpU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 61be0a65420320b0fcf2cb397b7732db

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: jBVFojy3cS...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.087 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:06.054Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 84.234 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:07.042Z"}
  console.log
    CSRF token generation: {
      sessionID: '9a1df8aff359a57cf5c7857a7fe1905a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 8l8MpJoc-qW6T2utosjk3l4yX9JhslJses80

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 9a1df8aff359a57cf5c7857a7fe1905a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 0WOqS8y3eY...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.450 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:07.314Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 56.794 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:08.228Z"}
  console.log
    CSRF token generation: {
      sessionID: '369e09de55171c30da0629403c3db494',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: aCwHfS5h-XUuYnC9kOzD05kywCSlJhNVpUlc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 369e09de55171c30da0629403c3db494

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: t3F36MXZhY...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 8.941 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:08.507Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 56.273 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:09.427Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd01c0d82e56a0019688d6dd7c486438',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 6DoExjF3-p2LD-7RHx8RPsrvjIEyOPtQsMT4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: cd01c0d82e56a0019688d6dd7c486438

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OU2wj-Q4pm...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.751 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:09.705Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 90.456 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:10.681Z"}
  console.log
    CSRF token generation: {
      sessionID: '602b233976f3f90f4e719e9f85cd3537',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ZhP6XxN3-y5tKwI1mu8HufV7Ih4lS0xpzOCo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 602b233976f3f90f4e719e9f85cd3537

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: mmUWz_MQhw...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.738 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:10.941Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 84.140 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:11.917Z"}
  console.log
    CSRF token generation: {
      sessionID: '4f627db2964c96cfc2856b8e5b965ae5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: quwxrhS6-i9cuDTJgdbqVJ_-KKjDw1iJuQD4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4f627db2964c96cfc2856b8e5b965ae5

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: XmM_qvASwQ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.693 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:12.216Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 114.905 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:13.204Z"}
  console.log
    CSRF token generation: {
      sessionID: '29f7d55bdba8291d8c716a0707712b1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: EXyOI7Vx-Ezblq6xfIOy3u39ZCOEl98Gi8wc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 29f7d55bdba8291d8c716a0707712b1a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: J89bbJsMIb...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.802 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:13.529Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 114.092 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:14.496Z"}
  console.log
    CSRF token generation: {
      sessionID: '4454cbcbcd7508608fdeac326901406c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: kRJpUAEa-q7lpkqZbMWxJRpMKcys3fGkjjWw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4454cbcbcd7508608fdeac326901406c

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: XXxrIWvZpQ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.074 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:14.760Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '4454cbcbcd7508608fdeac326901406c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4454cbcbcd7508608fdeac326901406c.l8GGDa9FOv1f3SSFQtoch8Egd%2BiRv3JhQ%2FUx7TSbxiU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 203.139 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:14.966Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 143.849 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:15.964Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec5b1d211d3d9f3a94b1dffbf24e1904',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: VoM8Y1NS-38SWKL55NRjyheHMzFGl6RcAARs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: ec5b1d211d3d9f3a94b1dffbf24e1904

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: pTm0thjWIA...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.084 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:16.227Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'ec5b1d211d3d9f3a94b1dffbf24e1904',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aec5b1d211d3d9f3a94b1dffbf24e1904.KzbMdRbPwuCLnnQl6wzuT3f5rbo2yPSEx06ZJBOPpBw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 109.210 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:17.209Z"}
  console.log
    CSRF token generation: {
      sessionID: '98bc5abf6670470ac7139bd075e4e3ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: DA4mGQoV-vELo2PN-ruE8NB9fbusOERTF0yA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 98bc5abf6670470ac7139bd075e4e3ab

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: SOH3Ro7Vto...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.691 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:17.478Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '98bc5abf6670470ac7139bd075e4e3ab',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A98bc5abf6670470ac7139bd075e4e3ab.EnqE1v9bj4Qjkv8%2BluflcR2qJ87d5ydyuZBfBkRUawA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 118.434 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:18.446Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dff6ae16e4bf270884c45ce966197d6e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gu8Qihmx-Lqb_EM34vn3kIeXxHpKi9fbKO8A

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: dff6ae16e4bf270884c45ce966197d6e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: hoWDSw575z...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.216 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:18.754Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 139.076 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:19.760Z"}
  console.log
    CSRF token generation: {
      sessionID: '1d1b3d3a9f35086385cd866de7545763',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: f8t2DJHS-NWoJsbGjYs68PUZyaV__IMccMgg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 1d1b3d3a9f35086385cd866de7545763

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: t6OzbP0pyV...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.247 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:20.055Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 138.768 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:21.061Z"}
  console.log
    CSRF token generation: {
      sessionID: '0eeeed79bf16a0c1b70f0e5363b3805d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 9RAnfzOv-h-OKsZpyZxhJWl7H19YQmJ9cQeA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0eeeed79bf16a0c1b70f0e5363b3805d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Sw74dm-Lpw...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.205 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:21.360Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 138.170 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:22.357Z"}
  console.log
    CSRF token generation: {
      sessionID: '690cdb937cd45d6b980dc3721dbd5e60',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: vjZeyZpa--7JQzjqgAPJr2cgG9sMSXHYxDO4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 690cdb937cd45d6b980dc3721dbd5e60

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PJ-CJYFx5b...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.314 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:22.674Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '690cdb937cd45d6b980dc3721dbd5e60',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A690cdb937cd45d6b980dc3721dbd5e60.khht9dB0YImFOy5RII%2BypmPYWhnafvZkIvG3CGdZlWo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 119.901 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:23.701Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aa6db5af2fc8a9bea203da1224f16347',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: T0BSbIQY-7_x0kvYRN_2q0T8vPVVt9nyloUg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: aa6db5af2fc8a9bea203da1224f16347

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: mEpaJxYp3B...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.492 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:23.966Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'aa6db5af2fc8a9bea203da1224f16347',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaa6db5af2fc8a9bea203da1224f16347.m5BSHEDBPZDtWs10YgrYIauysc8r73Sgcrj1zwWj4u4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.614 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:24.861Z"}
  console.log
    CSRF token generation: {
      sessionID: '3c462076e93260174d7d41eaccd53ca6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: uICvspnz-gLp61Gl42Q1TfdcaLBFi_bFlzi8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 3c462076e93260174d7d41eaccd53ca6

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Tmlj57LiJK...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.131 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:25.208Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '3c462076e93260174d7d41eaccd53ca6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3c462076e93260174d7d41eaccd53ca6.xf8SrIKocQAhcjds1tKlL7jyqrLKuVv0BVn2NT%2BSRfg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 29.535 ms - 63[0m
PASS tests/integration/customer.test.js (28.834 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1968 ms)
      ✓ should fail with invalid affiliate ID (1160 ms)
      ✓ should fail with duplicate email (1199 ms)
      ✓ should fail with duplicate username (1243 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1234 ms)
      ✓ should return customer profile for affiliate (1256 ms)
      ✓ should fail for unauthorized customer (1186 ms)
      ✓ should return limited data without authentication (1199 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1253 ms)
      ✓ should not update protected fields (1230 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1293 ms)
      ✓ should filter orders by status (1292 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1467 ms)
      ✓ should fail with incorrect current password (1244 ms)
      ✓ should fail with weak new password (1235 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1314 ms)
      ✓ should return monthly statistics (1301 ms)
      ✓ should allow affiliate to view customer dashboard (1296 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1344 ms)
      ✓ should reject deletion in production environment (1161 ms)
      ✓ should reject unauthorized deletion (1300 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:27.087Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

FAIL tests/integration/quickbooks.test.js (19.789 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✕ should export verified vendors as CSV (1811 ms)
      ✕ should export vendors as JSON (994 ms)
      ✕ should handle no verified vendors gracefully (995 ms)
    Payment Summary Export
      ✕ should export payment summary for date range as CSV (989 ms)
      ✕ should export payment summary as JSON with correct aggregations (980 ms)
      ✕ should require date parameters (987 ms)
      ✕ should handle empty date range (977 ms)
    Commission Detail Export
      ✕ should export commission details for specific affiliate (992 ms)
      ✕ should require all parameters (985 ms)
      ✕ should reject unverified affiliate export (1003 ms)
      ✕ should handle non-existent affiliate (976 ms)
    Export History
      ✕ should retrieve export history (983 ms)
      ✕ should filter export history by type (981 ms)
      ✕ should limit export history results (982 ms)
    Security and Permissions
      ✕ should require admin authentication for all QuickBooks endpoints (979 ms)
      ✕ should not allow affiliate access to QuickBooks exports (980 ms)
    CSV Format Validation
      ✕ should generate QuickBooks-compatible vendor CSV (971 ms)
      ✕ should generate QuickBooks-compatible payment CSV (974 ms)

  ● QuickBooks Export Integration Tests › Vendor Export › should export verified vendors as CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Vendor Export › should export vendors as JSON

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Vendor Export › should handle no verified vendors gracefully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should export payment summary for date range as CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should export payment summary as JSON with correct aggregations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should require date parameters

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should handle empty date range

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should export commission details for specific affiliate

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should require all parameters

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should reject unverified affiliate export

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should handle non-existent affiliate

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should retrieve export history

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should filter export history by type

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should limit export history results

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Security and Permissions › should require admin authentication for all QuickBooks endpoints

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Security and Permissions › should not allow affiliate access to QuickBooks exports

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › CSV Format Validation › should generate QuickBooks-compatible vendor CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › CSV Format Validation › should generate QuickBooks-compatible payment CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:47.508Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:48.457Z"}
  console.log
    CSRF token generation: {
      sessionID: '257c5e9442175bc3528cd7291a282219',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gRBYjGFO-3_0Px0355aE5k7zh_BqsWj_637c

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 257c5e9442175bc3528cd7291a282219

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: fZFzvXZZok...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.404 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:49.704Z"}
  console.log
    CSRF token generation: {
      sessionID: '8a0da40b495b34591d179b9a18871f3a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: XC9CBf2C-Jg0xoZ8B5F6w5fnYHh_rnuY6frE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 8a0da40b495b34591d179b9a18871f3a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: vh2EZiKo_B...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.650 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:50.642Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aa732b3bdd8135ef0c774f0c42d3fd54',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 2gS12Bpj-ZWc_aof_jE_JAkEu3pIQsGev2r8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: aa732b3bdd8135ef0c774f0c42d3fd54

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: FXd_K9AnQv...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.487 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:51.574Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ebf21a3ba0603ccc8f86541bb77d181',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 5PP3dIRJ-t2Chwb4hxd-NkT-fcNhi1_ONjuw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0ebf21a3ba0603ccc8f86541bb77d181

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: wcXwJZktut...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.373 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:52.498Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bd79ee1493d2bcaac3b3c2bb6b7258e5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ZSiAyief-CBtYhyVdr8f_th1CTX6x9KnzGmU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: bd79ee1493d2bcaac3b3c2bb6b7258e5

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: v_MdqnDQIj...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.300 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:53.424Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bfcebbb6f648e391f1567f403138c035',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gkNBgfOx-UwQo_M-mGRkKyLvfq-n5NbTkxNw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: bfcebbb6f648e391f1567f403138c035

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: yo07IPX0wy...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.542 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:54.348Z"}
  console.log
    CSRF token generation: {
      sessionID: '5d34ca560839ca888901adbceebe109b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: p0Ig1lLX-AbSdPJhynb764LFIolR7RWrHlsc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5d34ca560839ca888901adbceebe109b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 6X2uH284QW...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.665 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:55.290Z"}
  console.log
    CSRF token generation: {
      sessionID: '979ccabd8aaea82824b0250f09ce7f7b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Um6x01oL-0ro1oskQP9VQe0_xMWI7GXyzQkE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 979ccabd8aaea82824b0250f09ce7f7b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: aN-RKTCMTk...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.527 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:56.208Z"}
  console.log
    CSRF token generation: {
      sessionID: '896a5aba9322beef65e1573624729879',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: iSeIl82U-9_ert0dpiUnkO9yKwVHk86INGRk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 896a5aba9322beef65e1573624729879

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: e-A8XaQTu7...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.504 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:57.140Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a8ff62c38986472eb0c60cb38672493e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: yqFekEQP-yuGkZHZmwcNPddAa00Zli2WZeTk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: a8ff62c38986472eb0c60cb38672493e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: TT7Dia5dJr...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.930 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:58.085Z"}
  console.log
    CSRF token generation: {
      sessionID: '2263a03341a3f09ae7f04716944d69fe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ibMXd7YQ-pLn2SnRF38GhEDDspbq8I59mifM

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 2263a03341a3f09ae7f04716944d69fe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PvU8aCbqvV...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.272 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:59.021Z"}
  console.log
    CSRF token generation: {
      sessionID: '339957861265c6e07a2231c241b2c6f3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: IpXYMN85-hqwMGNU3RnKV0Vmjrl1j_Wq-hBk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 339957861265c6e07a2231c241b2c6f3

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 5r_IUvIV19...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.727 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:07:59.945Z"}
  console.log
    CSRF token generation: {
      sessionID: '2ca70c0e7e11d6b30dce1cccf2e7d4ac',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3hlNnb2c-rd1KMUv0Q-_dxmKzX3HJDgQ2Zn0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 2ca70c0e7e11d6b30dce1cccf2e7d4ac

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: J7hDy1xzr9...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.468 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:00.878Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd300481542f593b4a7440910c54bb22f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 1kPF2OhD-ckBbnM6WMo2m6vojnfU2EE2m3uY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d300481542f593b4a7440910c54bb22f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: XsL7ghMF_-...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.279 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:01.809Z"}
  console.log
    CSRF token generation: {
      sessionID: '0524530de2eb7695fd47dea2e580d159',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: z9HdxMCy-FJ71sxDkKncUxBIoU2-Id-2kZx8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0524530de2eb7695fd47dea2e580d159

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: e0YU--G5D3...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.809 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:02.729Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d51c994555d34d5740e74b46eb4f179',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ipJPjWsz-2apOAyy2T7cvCbJ7ZDmc29Ni_pE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4d51c994555d34d5740e74b46eb4f179

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: AIsXAgBJQy...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.175 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:03.648Z"}
  console.log
    CSRF token generation: {
      sessionID: '995a1ee88cb663de20a743a7907634cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: jeV2A2sY--TMz9rfULU_FawspgzKwIHkzUUo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 995a1ee88cb663de20a743a7907634cf

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: bZHJYXTDfC...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.858 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:04.583Z"}
  console.log
    CSRF token generation: {
      sessionID: '50298d637ba57ccf73c0e9b421c0bfe2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: PK4GNW3f-pSJn7zCNpDSamMxvjyGep0G8yfI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 50298d637ba57ccf73c0e9b421c0bfe2

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: xSp5u3ZuqC...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.441 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:05.505Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bba967780086d12d485131b80b8b65f6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: BFBTmwJr-5r84WAYDTaLe6nSMLlJMcjyBBck

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: bba967780086d12d485131b80b8b65f6

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: SGa_77yGJk...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.919 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:06.425Z"}
  console.log
    CSRF token generation: {
      sessionID: '237b6dce35acb43238cf86bab7ce9c76',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 8USV0AtU-_gZYsk51Mnxo6Z7hjIisJiMq3-A

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 237b6dce35acb43238cf86bab7ce9c76

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 3ISKk1faPt...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.597 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:07.343Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1b1e7a9005716078456038c53131f88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: uQWBFyKk-rt_IlI0vP9xA2yELfNsxMmqjW1w

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1b1e7a9005716078456038c53131f88

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PzTULU9ij7...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.503 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:08.275Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b13812dfc53f73de589ccbcde46ed096',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: FIkmCu1Y-vj1FYWFw3epJZb8D4m_LH6Xerds

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b13812dfc53f73de589ccbcde46ed096

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 7gn1Y7dpwF...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.274 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:09.216Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f218f08511c6070b7dfa581372f64014',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: qdDET7Io-3-1DiaDUm86oD5N3MMWIs7eGzdI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f218f08511c6070b7dfa581372f64014

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: h_AJuIfAF4...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.600 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:10.134Z"}
  console.log
    CSRF token generation: {
      sessionID: '7c8664fd5a2a24ce3162c5c08db77e41',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Ahk10snK-o4-lB0WqKUUut_HkbG_St5JN5yo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 7c8664fd5a2a24ce3162c5c08db77e41

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 2R66wGyWZP...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.964 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:11.062Z"}
  console.log
    CSRF token generation: {
      sessionID: '279e849342ba33811b76234c8763bdee',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: FnExEjRj-6RBlNoPg5dVZi2PjQAalrwqjEXo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 279e849342ba33811b76234c8763bdee

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: g1IWs-Fp2g...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.276 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:11.976Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1d428586f9ade00ce46d48c4ad77495',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: twQ2JBGX-IASUSPFX7btQ5BC3enUpG6nGFn8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1d428586f9ade00ce46d48c4ad77495

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: A4fwKOZfKT...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.904 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:12.896Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a89640c6efaf261520f469dc542fa6e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: kcgUOUmL-7ttpi_Tt_hy3ASrMFtd2sDHPbvw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6a89640c6efaf261520f469dc542fa6e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: e-cGN8Ys1_...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.290 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:13.815Z"}
  console.log
    CSRF token generation: {
      sessionID: '5b897ec586b1bb3d546474c33c6f8285',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: FBOdf9uY-T6OeBbe8O2RBSKBvaBvsyfWHLv0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5b897ec586b1bb3d546474c33c6f8285

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: bJb3CYPdA_...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.282 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:14.736Z"}
  console.log
    CSRF token generation: {
      sessionID: '9d99840853acc71a6f772db583ad0b93',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: RO3bOq2E-ZRiL8fOPIA_iRvtKf0DjPWmtyZk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 9d99840853acc71a6f772db583ad0b93

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: -990lKM7yH...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.445 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:15.662Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ae385ea527dc8ca6ebd977176ff225e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: wtKq4X54-Xvn4uRHowSkXnGJnGDbz_Eyh-2Q

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0ae385ea527dc8ca6ebd977176ff225e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: VBEYG-yL_h...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.256 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:16.587Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5a29964a490ae5310cc9b87307b1d48',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: X8rxaEYR-hkiEdIAJFJTtgenK_RBfGf4VoBA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d5a29964a490ae5310cc9b87307b1d48

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: V5DiX_PE69...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.804 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:17.504Z"}
  console.log
    CSRF token generation: {
      sessionID: '5be84a5593638cbc9ec91b34d91d26b8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: XzLaP15x-id9b2XHarYRNJfufJmzk65-ZrhU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5be84a5593638cbc9ec91b34d91d26b8

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: WRWnmyPY2Y...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.196 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:18.425Z"}
  console.log
    CSRF token generation: {
      sessionID: '4a50de70e834d7eec6fd4d8f8c22d14b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Ei79ampU-6be5E-wBsuX0BzmEGnsqVwwK-fc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4a50de70e834d7eec6fd4d8f8c22d14b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: XXJlieaISB...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.682 ms - 67[0m
FAIL tests/integration/administrator.test.js (33.045 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✕ should get all administrators with admin token (1763 ms)
      ✕ should filter by active status (937 ms)
      ✕ should support pagination (933 ms)
      ✕ should require admin authentication (923 ms)
      ✕ should require administrator permissions (926 ms)
    GET /api/v1/administrators/:id
      ✕ should get administrator by ID (922 ms)
      ✕ should return 404 for non-existent administrator (942 ms)
      ✕ should handle invalid ObjectId (917 ms)
    POST /api/v1/administrators
      ✕ should create new administrator (932 ms)
      ✕ should validate required fields (945 ms)
      ✕ should validate email format (936 ms)
      ✕ should validate password strength (924 ms)
      ✕ should prevent duplicate emails (924 ms)
      ✕ should require administrators.create permission (937 ms)
    PATCH /api/v1/administrators/:id
      ✕ should update administrator details (921 ms)
      ✕ should update email (919 ms)
      ✕ should update password (934 ms)
      ✕ should deactivate administrator (921 ms)
      ✕ should not allow updating adminId (915 ms)
      ✕ should validate email uniqueness on update (922 ms)
      ✕ should prevent self-deactivation (928 ms)
      ✕ should require administrators.update permission (942 ms)
    DELETE /api/v1/administrators/:id
      ✕ should delete administrator (918 ms)
      ✕ should prevent self-deletion (925 ms)
      ✕ should prevent deleting last administrator with all permissions (916 ms)
      ✕ should require administrators.delete permission (920 ms)
      ✕ should handle non-existent administrator (916 ms)
    POST /api/v1/administrators/:id/reset-password
      ✕ should reset administrator password (923 ms)
      ✕ should clear login attempts on password reset (926 ms)
      ✕ should validate password strength (924 ms)
      ✕ should require administrators.update permission (916 ms)
    GET /api/v1/administrators/permissions
      ✕ should get available permissions list (920 ms)
      ✕ should require authentication (932 ms)

  ● Administrator Integration Tests › GET /api/v1/administrators › should get all administrators with admin token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should filter by active status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should support pagination

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should require admin authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should require administrator permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should get administrator by ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should return 404 for non-existent administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should handle invalid ObjectId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should create new administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate required fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate email format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate password strength

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should require administrators.create permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update administrator details

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update email

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should deactivate administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should not allow updating adminId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should validate email uniqueness on update

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should prevent self-deactivation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should require administrators.update permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should delete administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should prevent self-deletion

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should prevent deleting last administrator with all permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should require administrators.delete permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should handle non-existent administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should reset administrator password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should clear login attempts on password reset

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should validate password strength

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should require administrators.update permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/permissions › should get available permissions list

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/permissions › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:20.165Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.173Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fdae0d65590cd2c3bc51fa239acc43f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NAvDtkFV-MWXLxCIjEib5Tbt-rKVIAHiJYYQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: fdae0d65590cd2c3bc51fa239acc43f4

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: CtWiJ5Nr25...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.627 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.186Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 5.425 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.193Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.529 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.202Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.107 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.206Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.442 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.211Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.821 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.214Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.392 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.219Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.628 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.223Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.628 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.227Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.587 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.231Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.522 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.243Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.891 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.247Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.391 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.251Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.365 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.255Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.432 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.258Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.315 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.261Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.232 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.265Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.199 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:21.267Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.270 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.303Z"}
  console.log
    CSRF token generation: {
      sessionID: '058a3014e65934383446513b6e39334a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 19NNluPf-r5mn4sX04lTlyK9OeKy0AWfMAMs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 058a3014e65934383446513b6e39334a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: NDmqiWbeKd...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.063 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.311Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 129.004 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.443Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 126.165 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.572Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 125.437 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.700Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 111.930 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:22.814Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 124.286 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:23.900Z"}
  console.log
    CSRF token generation: {
      sessionID: '8e5b9dbce313dc63f0973104d84fb72b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: U26ak30C-pCFwsBnjokvEnPF3RCAZ6NpcQ_g

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 8e5b9dbce313dc63f0973104d84fb72b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: D3OTw6wOZ5...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.377 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:23.907Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.512 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:24.853Z"}
  console.log
    CSRF token generation: {
      sessionID: '6600aae735a4cd75d8f960cea204ea31',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: FIueRRBr-ymILAQwiHcwuzM8aqSEhu2kOr1M

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6600aae735a4cd75d8f960cea204ea31

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: dOn8JjiAfV...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.031 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:24.860Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.620 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:25.817Z"}
  console.log
    CSRF token generation: {
      sessionID: '80480122fc83b7a18a2ee5c272e63150',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NgkM4FaQ-FUuUD0GIjsQWoN5QFeEQVpypcqQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 80480122fc83b7a18a2ee5c272e63150

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: GorMSrUjVJ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.023 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:25.826Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.017 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:25.830Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.469 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:25.833Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.612 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:25.837Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.594 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:26.779Z"}
  console.log
    CSRF token generation: {
      sessionID: '4a88dbe3453fef7909a50697a8d3b5f4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: IIp5kZ02-IpvcIaOjYaDkTljR9d8ea1XdExA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4a88dbe3453fef7909a50697a8d3b5f4

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: tOb7Wrr-jT...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.585 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:26.930Z"}
[0mPOST /api/v1/customers/register [33m400[0m 2.089 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:27.888Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bbba549f3451f2ec97c5ff7b3a0b237d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: zcBdhGfH-2LNZSAjMKCrEG5tUB1xaCsqVAL0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: bbba549f3451f2ec97c5ff7b3a0b237d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: imlwPHNmI6...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.126 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:28.040Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-28c6e477-7d05-456c-9a9d-59b4bab48209

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 175.931 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:29.183Z"}
  console.log
    CSRF token generation: {
      sessionID: '1db271f909025a368cd02f144f9c8b5f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: WbnBxv4l-BX_EK6-f_bWZokvDlq9ByMRmh8M

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 1db271f909025a368cd02f144f9c8b5f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 9S8DLR74QM...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.297 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:30.148Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aad0079bff5741a039d74c77810cf67f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: cL5dDe4w-3G0lPTcZA0UGjUi9su_AF9atwYE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: aad0079bff5741a039d74c77810cf67f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: S1GQhfN0l6...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.163 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:31.099Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea03d7bdbf65979d447f01dd1d9ddd3f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: PvfQ3WCx-HEL6epWB7KEzjhq9NBNJq69BGe0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: ea03d7bdbf65979d447f01dd1d9ddd3f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: KTzPENlzuX...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.912 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:32.067Z"}
  console.log
    CSRF token generation: {
      sessionID: '495a9f7be817a596ba2a0bb6c580279e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: xKcp57sl-darSKX2luJLNLxjpV7Lp1kf4ioY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 495a9f7be817a596ba2a0bb6c580279e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 02oiV7HovN...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.161 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:33.029Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a44228b96f01ec011aadddb3de2b3813',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 5tyYEcnc-pc4iSPBsoVRXzrCE_yX2QlxdFJw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: a44228b96f01ec011aadddb3de2b3813

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: nbsq7pmYAn...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.665 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:33.125Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 63.053 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:33.220Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.708 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:34.164Z"}
  console.log
    CSRF token generation: {
      sessionID: '129d565e0b13f1f052906d842521ec3b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: pV0Hd8ME-MPQu3tbh0k0TslyfwEPvPExxM5A

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 129d565e0b13f1f052906d842521ec3b

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: oxhp_JIcj4...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.836 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:34.264Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.391 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:34.354Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 114.769 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:35.431Z"}
  console.log
    CSRF token generation: {
      sessionID: '312fadb5cdbdebdf8246876749adfbd9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 7XyHubfK-efz0FKpDaC57CN0N3UVg9MJv2-8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 312fadb5cdbdebdf8246876749adfbd9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: QoyR7QVk-S...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.340 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:35.529Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:08:35.683Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 154.127 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:36.654Z"}
  console.log
    CSRF token generation: {
      sessionID: '34084ae974387bfa41350d5c6428d1ed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: fuXBPcH2-pXBNSmKqbQfXw__yRnsZTUfmvUI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 34084ae974387bfa41350d5c6428d1ed

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: DPqxw2EwKr...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.355 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:36.664Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.441 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:37.607Z"}
  console.log
    CSRF token generation: {
      sessionID: '64e4eaee5a2d94f37e0f6065ad68f649',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: skrotwwH-c-84cbhfTXHCZxS5VMN7mEEZHUs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 64e4eaee5a2d94f37e0f6065ad68f649

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: _hGFvfBDcc...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.775 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:37.632Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.597 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:38.579Z"}
  console.log
    CSRF token generation: {
      sessionID: '5aae6958689c0c1cecc5b92fbe0f65ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: WJ8uIi4C-NJN_HqBH1lkBXI8JHwwYBau2yeE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5aae6958689c0c1cecc5b92fbe0f65ec

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: pJ5Iv5wL_h...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.482 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:38.587Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 114.895 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:39.650Z"}
  console.log
    CSRF token generation: {
      sessionID: '1fbb6c3c0d4e02c709732c0f098dc960',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3TvWTMqy-ag9XyhBwMIcFnkTM_TXjEzQILvo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 1fbb6c3c0d4e02c709732c0f098dc960

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: jdR1bQmkN8...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.792 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:39.658Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 122.955 ms - 120[0m
FAIL tests/integration/passwordValidation.test.js (21.287 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1694 ms)
      ✓ should accept strong passwords during affiliate registration (1596 ms)
      ✓ should reject passwords containing username (956 ms)
      ✓ should reject passwords containing email (964 ms)
      ✓ should reject passwords with sequential characters (962 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (1100 ms)
      ✓ should accept strong passwords for customer registration (1302 ms)
    Administrator Password Validation
      ✕ should enforce strong passwords for administrator creation (951 ms)
      ✕ should accept strong passwords for administrator creation (961 ms)
    Operator Password Validation
      ✕ should enforce strong passwords for operator creation (969 ms)
      ✕ should accept strong passwords for operator creation (955 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1140 ms)
      ✓ should accept strong passwords during password reset (1261 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1227 ms)
      ✓ should handle case-insensitive username/email validation during registration (952 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (975 ms)
      ✓ should accept passwords with mixed character distribution (1071 ms)
      ✓ should handle Unicode characters in passwords appropriately (1079 ms)

  ● Password Validation Integration Tests › Administrator Password Validation › should enforce strong passwords for administrator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Administrator Password Validation › should accept strong passwords for administrator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Operator Password Validation › should enforce strong passwords for operator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Operator Password Validation › should accept strong passwords for operator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:41.629Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:43.407Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c634a6a0931812c501ddb8ccb4214c43',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3nVjvwfT-CT6KvUs6896s8FzPS5Ez0a-t0q4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: c634a6a0931812c501ddb8ccb4214c43

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: iEX0SHJVBE...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.052 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:44.713Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5bd62cc45e48e26c247fc23b0f10640',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: jnhL3OBg-FjWm5HTLs9zI3UqL3_Txu0K5gDA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d5bd62cc45e48e26c247fc23b0f10640

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: AtDHePiF7C...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.749 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:45.651Z"}
  console.log
    CSRF token generation: {
      sessionID: '65ae4fb763a33efdb24a3c57cddf9c57',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: f4nQviCg-Pwc06ZOYLFhkDA8JQCUcCqOQJZ4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 65ae4fb763a33efdb24a3c57cddf9c57

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: d6b-2xIxEp...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.093 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:46.581Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af44fe949331add5b3f61c95d4a33d62',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 6wM75XZT-YFFvTkMDhQhhXlRwjBWiC2x7f14

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: af44fe949331add5b3f61c95d4a33d62

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: q_J3xII03v...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.917 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:47.535Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f0af1eed5e1dd6961ac6d0ee635f6b76',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: rObBJTGB-9kVvRaPJHnTbMLSdNdhQx0V7VuI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f0af1eed5e1dd6961ac6d0ee635f6b76

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: _bZjxiu0PY...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 8.299 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:48.466Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ab0c373976db356a695caed1b35f382',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: kHg3ivfT-fYREWYWXYTpu-f7_fLLX6BvMSq4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6ab0c373976db356a695caed1b35f382

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: QRBDIGd65u...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.604 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:49.398Z"}
  console.log
    CSRF token generation: {
      sessionID: '28c1f483e7532824c1e87a7cf73a3343',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 8ZxmmQSp-u-YN1hPG57d7k6iUMWrsGopOtec

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 28c1f483e7532824c1e87a7cf73a3343

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 5C4RQM17B9...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.716 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:50.335Z"}
  console.log
    CSRF token generation: {
      sessionID: '3584f90297a5c63dc255609243eb3f73',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NLnFsY8i-x6vFuCMxKSIgo6iLf7CEs71wXBU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 3584f90297a5c63dc255609243eb3f73

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 9wgiyeca1G...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.778 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:51.268Z"}
  console.log
    CSRF token generation: {
      sessionID: '4fbda98cab30a841c0572580c161c729',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: J3UbZxJC-0YuY1rRf-VNADcw0MsChFFCi33o

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4fbda98cab30a841c0572580c161c729

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: gHxmnQ_YHt...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.988 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:52.210Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a0be22c94ec6fbfdb2b51a32750f3436',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: QlSHj23h-nWRUoa-rm-Wnl3GT7CUqKgApwZU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: a0be22c94ec6fbfdb2b51a32750f3436

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: HRoOY9JA16...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.410 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:53.145Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd89b9a301c7768705aa11e77480787ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: sqqABbMP-yy5rgfZZoRWTK0OLE-DergRrsSs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d89b9a301c7768705aa11e77480787ef

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: cgSWSJ20BN...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.422 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:54.088Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fc41c6a293417b8b0b324b2f557ae4f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: YViwW6tx-iatTVUMYn7OyASKHcPaGrADhpQ4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: fc41c6a293417b8b0b324b2f557ae4f9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: bazbFgaNcM...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.027 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:55.044Z"}
  console.log
    CSRF token generation: {
      sessionID: 'def734ebffc0397d889ea1d0bcb1df6a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ke8tZl1V-WFMHUvKgdlXKVnaGYHP9DWrlnrs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: def734ebffc0397d889ea1d0bcb1df6a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: DomxmJMYil...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.848 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:55.977Z"}
  console.log
    CSRF token generation: {
      sessionID: '6323484de7bd5ef8b317370ba9ddc978',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Som7zt1M-3obLWw7hqlg8XX9fUTyct3c0MtU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6323484de7bd5ef8b317370ba9ddc978

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: tbxfLnHveL...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.369 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:56.911Z"}
  console.log
    CSRF token generation: {
      sessionID: '24c71ea6a40ed6bd3f711b4602ea7d97',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: i4eYnN1L-39LI-o3pyBmQL4lX5SnCPBl5S6g

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 24c71ea6a40ed6bd3f711b4602ea7d97

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: ZG5ApQedqt...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.013 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:57.845Z"}
  console.log
    CSRF token generation: {
      sessionID: '13d5f1c37dfba9d3c07c9cb5e4b4f914',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3tAEHrG6-5WOXJPi6vzRkm4jCT54C1F4gJRM

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 13d5f1c37dfba9d3c07c9cb5e4b4f914

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: KXt1OeActH...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.272 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:58.803Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cb00a079cee0bd9f4fcd8b985bdbcdc9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 4JhhMhcV-sh_o5J1hTtU6K8yeB9c4r6HMaxA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: cb00a079cee0bd9f4fcd8b985bdbcdc9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 2b2Zuu1Dh7...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.937 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:08:59.754Z"}
  console.log
    CSRF token generation: {
      sessionID: '73714855191728c7307ec63fc5099032',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: k6vpIzbD-6CQx7OOAMzKC9t34Lu_07i_TbR4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 73714855191728c7307ec63fc5099032

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Y2xCSaIxJm...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.675 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:00.687Z"}
  console.log
    CSRF token generation: {
      sessionID: '037eeda9d76b55912879d96e3f334528',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: L6EJ5qIO-pMHOu1tYf1o9iIRWJaS7ctWSCOk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 037eeda9d76b55912879d96e3f334528

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: iu9ZvCKO3Q...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.653 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:01.622Z"}
  console.log
    CSRF token generation: {
      sessionID: '82df1a2564b41b7a767a638d1794a7a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NA3SGG2k-1BjnGhi0XyjW8KKX7WoW5lfLKVI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 82df1a2564b41b7a767a638d1794a7a5

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PqyRKBlmJX...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.517 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:02.558Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c8cac4a876466cec3e18822db6637b26',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: QFjNV6QU-1eAz6pB3zydBl6J6Kmxz2vL01Mo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: c8cac4a876466cec3e18822db6637b26

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: z5PLz_QVDb...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.131 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:03.503Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd6ec57555e812ed2f8e803f7b714537c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: kQC95cWc-wdAvHL87HC0WP74qrCVBFlntoNs

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d6ec57555e812ed2f8e803f7b714537c

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Qz0lTIYKZw...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.445 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:04.445Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b493d21aefff757534663ad56c0a214f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: kkBSLiH9-BiTgJfk9p9FVNTZ2XNLo5LHjDqQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: b493d21aefff757534663ad56c0a214f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: w6Es9edMDD...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.285 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:05.369Z"}
  console.log
    CSRF token generation: {
      sessionID: '6d0d981c47448712865b72c1091bffa3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: iktwBstL-LhS4zc_w9Xx5705yJrx962PogxY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6d0d981c47448712865b72c1091bffa3

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: PA8-6b98xR...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.189 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:06.296Z"}
  console.log
    CSRF token generation: {
      sessionID: '26dde6d3ba066348badf3f72909ce52a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: EVKCnQDa-brQWDothdZLdRbafV6P0oFJk60E

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 26dde6d3ba066348badf3f72909ce52a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 4sqTBMklF0...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.763 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:07.222Z"}
  console.log
    CSRF token generation: {
      sessionID: '8103dd64242333b29733d75c948a1dfa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ZB8bDTPE-8484-9X9T0FmjWAefRwcIeFgOYc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 8103dd64242333b29733d75c948a1dfa

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Y8FoK5Ms1E...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.467 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:08.149Z"}
  console.log
    CSRF token generation: {
      sessionID: '18ffb84df9c32524d5bf4902af15ab17',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: t5VBrISl-RNQvWi8WjP1B5bNhCR_ST4Dpb50

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 18ffb84df9c32524d5bf4902af15ab17

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: WtJ-KewijK...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.989 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:09.082Z"}
  console.log
    CSRF token generation: {
      sessionID: '3340799051a758448393207bcd4fa5bc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: KJzOs1y2-I7DbmkeH9TP1Z99KzBcpifrPVAY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 3340799051a758448393207bcd4fa5bc

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: tsW8jTTeQN...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.719 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:10.025Z"}
  console.log
    CSRF token generation: {
      sessionID: '0f46bb7fc3f391805361e4098a9a9a0a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 7Kc0dNSm-tGVEv1XNbquhMlPdjgd3p4cPbsU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0f46bb7fc3f391805361e4098a9a9a0a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: XH9EjCA5Xt...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.653 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:10.955Z"}
  console.log
    CSRF token generation: {
      sessionID: '66ebc7d01f197fd0296931d2729611df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: XSdZQoVx-KjFOegyYf_Zk40r492EDKJXwulU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 66ebc7d01f197fd0296931d2729611df

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: kbNFyNS2SJ...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.254 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:11.881Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b4f975dbbb267351e353ab64a625931',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: IGLgkhvF-refOVA6ogNDt6oV6A-p0Q3EMoZw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 0b4f975dbbb267351e353ab64a625931

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: d3rU-5w4_1...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.157 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:12.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '4301b8d5beb9c2222023922d7ac59966',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: MPeveJ5T-WPeqrKpErEPyS10v1DW7gvMkeZE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4301b8d5beb9c2222023922d7ac59966

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: xbJwEzQaTp...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.370 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:13.754Z"}
  console.log
    CSRF token generation: {
      sessionID: '441ee8203ec32cb5808f66269afaca1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: SsphGxV4-8UCcGL7ewbjcQ3I0w9AXNAbPMqA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 441ee8203ec32cb5808f66269afaca1a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: ofwHo7hXfl...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.316 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:14.692Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fcef61464d08a7c9a6eb0649667f254a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: niKvmfr9-ib9zaiEpqN1pZufRcgDUnLLmuhc

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: fcef61464d08a7c9a6eb0649667f254a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: -_LPqYZbM3...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.080 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:15.614Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e2b20cadbc44848c4e4167e362e3322d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: YLPQSfQm-9_iYC14kDLZoA9ZzCuE5iPTCums

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: e2b20cadbc44848c4e4167e362e3322d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: vJ1ObdWTFB...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.947 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:16.548Z"}
  console.log
    CSRF token generation: {
      sessionID: 'db205ee3dfe3507d7ba020b9b094cd09',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: BtZQusfk-le5Xmh80CqKAZ8ALfjEoIQyP7SY

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: db205ee3dfe3507d7ba020b9b094cd09

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: mFn9qYnNt0...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.972 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:17.468Z"}
  console.log
    CSRF token generation: {
      sessionID: '5343246e8e8fbb27afac823178123f65',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: yXUoDjab-pPwB07NTf6R3YiKVjWBIqm11dh0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5343246e8e8fbb27afac823178123f65

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: UdkSfk_rh_...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.474 ms - 67[0m
FAIL tests/integration/operator.test.js (37.674 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✕ should get all operators with admin token (1855 ms)
      ✕ should filter by active status (941 ms)
      ✕ should filter by on-shift status (930 ms)
      ✕ should support pagination (935 ms)
      ✕ should require authentication (947 ms)
      ✕ should require operator management permissions (931 ms)
    GET /api/v1/operators/:id
      ✕ should get operator by ID (936 ms)
      ✕ should allow operators to view their own profile (931 ms)
      ✕ should prevent operators from viewing other operators (944 ms)
      ✕ should return 404 for non-existent operator (932 ms)
    POST /api/v1/operators
      ✕ should create new operator (939 ms)
      ✕ should validate required fields (954 ms)
      ✕ should validate email format (938 ms)
      ✕ should validate shift time format (933 ms)
      ✕ should prevent duplicate emails (931 ms)
      ✕ should require operators.manage permission (960 ms)
    PATCH /api/v1/operators/:id
      ✕ should update operator details (950 ms)
      ✕ should update password (932 ms)
      ✕ should deactivate operator (935 ms)
      ✕ should allow operators to update their own profile (limited fields) (935 ms)
      ✕ should prevent operators from changing their own work station (944 ms)
      ✕ should not allow updating operatorId (937 ms)
      ✕ should validate email uniqueness on update (928 ms)
    DELETE /api/v1/operators/:id
      ✕ should delete operator (924 ms)
      ✕ should prevent deleting operator with active orders (928 ms)
      ✕ should require operators.manage permission (927 ms)
      ✕ should handle non-existent operator (933 ms)
    POST /api/v1/operators/:id/reset-pin
      ✕ should reset operator PIN/password (941 ms)
      ✕ should clear login attempts on PIN reset (929 ms)
    GET /api/v1/operators/available
      ✕ should get available operators sorted by order count (925 ms)
      ✕ should respect limit parameter (925 ms)
      ✕ should only include active operators (933 ms)
      ✕ should require authentication (949 ms)
    PATCH /api/v1/operators/:id/stats
      ✕ should update processing statistics (921 ms)
      ✕ should update quality score (936 ms)
      ✕ should update both stats in one call (920 ms)
      ✕ should validate processingTime is positive (927 ms)

  ● Operator Integration Tests › GET /api/v1/operators › should get all operators with admin token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should filter by active status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should filter by on-shift status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should support pagination

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should require operator management permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should get operator by ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should allow operators to view their own profile

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should prevent operators from viewing other operators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should return 404 for non-existent operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should create new operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate required fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate email format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate shift time format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should require operators.manage permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should update operator details

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should update password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should deactivate operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should allow operators to update their own profile (limited fields)

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should prevent operators from changing their own work station

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should not allow updating operatorId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should validate email uniqueness on update

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should delete operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should prevent deleting operator with active orders

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should require operators.manage permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should handle non-existent operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators/:id/reset-pin › should reset operator PIN/password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators/:id/reset-pin › should clear login attempts on PIN reset

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should get available operators sorted by order count

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should respect limit parameter

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should only include active operators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update processing statistics

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update quality score

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update both stats in one call

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should validate processingTime is positive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:20.264Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:21.341Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: OvMkABOC-PIeBf9IBcLNiqa6ZAXWPQuaoPHk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.847 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:22.708Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 7xRY6JQI-EOzP15hkp2iKYc-6FO5O35UhzhU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 13.135 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:22.754Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1613:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 34.472 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:23.757Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 1DOrfP2L-tN_vlgjX1LZkjXtZJnAl2xUXmuE

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 8.007 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:23.800Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1613:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 33.624 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:24.820Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: lkzJv1Pi-7J5WzX610L6zMs5D7E5gdoXttmA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 10.253 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:24.835Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1594:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 29.263 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:25.823Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 8hwaVrM0-Xgdo56mhD2yVvSP3QkgQfjG-OH4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 15.999 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:25.879Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:25.899Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:25.901Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1613:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 49.808 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1594:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 31.075 ms - 58[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1594:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 30.600 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:26.912Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: Nm8M39vE-mN0klE0rPvV7AAfeMeLKMVQ-q9M

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.222 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:26.923Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-c59de32e-29bd-4ce1-8011-0309f1a78b1b","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:27.127Z","userId":"6856e74788726d923e8ca172","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 203.820 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:28.118Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: jeSIA64O-KMcYLCDMCXbRlZmPu2RVtOl-am4

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.843 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:28.128Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.154 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:29.112Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 3rPdHyK5-cbIq1RlYcdss1gyCv5HXM4u6jHQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.011 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:29.122Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-45f7599f-dbdd-4aee-910e-f034d423de53","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:29.320Z","userId":"6856e74988726d923e8ca1c5","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 197.746 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:29.323Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 80.758 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:30.362Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: GL3VEAcD-ccIsi-iyInvGypBV4SnMXnsGmEg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 9.795 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:30.413Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 57.015 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:31.429Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: onORv2th-fpKzfNHlmOpcWGVFFEUOeHMutHI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.868 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:31.444Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-36d74ed5-166a-43c9-aa6e-067de5471611","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:31.639Z","userId":"6856e74b88726d923e8ca21d","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 195.359 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:31.643Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-dcb51c99-92ff-4961-92e9-1467f76cf6ee","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:31.880Z","userId":"6856e74b88726d923e8ca225","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 237.611 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:31.883Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-4af2505e-5808-42ae-935d-ed9d43b1bfee","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:32.134Z","userId":"6856e74c88726d923e8ca22e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 251.543 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:33.114Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: TioYEJ8f-vUW1iFHFAUqOO6GLD2ScUQh3QSU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.341 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:33.160Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-20822503-38e5-45bd-a23d-51ab45925d07","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-21T17:09:33.393Z","userId":"6856e74d88726d923e8ca25e","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 233.059 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:34.375Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: OMcK3Wss-_lzKgOFLf1NSO1rhmo88Hf9u7CI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.360 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:34.394Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 107.457 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:35.444Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: N8B1ZlMO-JjlM3sV0ck__-ib2pRnPoIsNiW8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.567 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:35.485Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad1e9ff7a161003053d2e08e8cff0ddfe.DV%2Fi7VFgmQFDhNRlTbj6ti%2BEfOxetPQz%2BP4eVstSX5M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:09:35.578Z","userType":"affiliate","username":"existing"}
info: undefined {"affiliateId":"AFF888888","ip":"::ffff:127.0.0.1","loginMethod":"social","method":"POST","path":"/social/callback","provider":"google","timestamp":"2025-06-21T17:09:35.578Z","userId":"6856e74f88726d923e8ca2b1","userType":"affiliate"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 93.225 ms - 560[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:36.533Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: bokq5rt0-DxU1msi4Ns6_WGIFJ9Hco6Yaj4E

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.742 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:36.602Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad1e9ff7a161003053d2e08e8cff0ddfe.DV%2Fi7VFgmQFDhNRlTbj6ti%2BEfOxetPQz%2BP4eVstSX5M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/callback","reason":"Social login successful","success":true,"timestamp":"2025-06-21T17:09:36.723Z","userType":"customer","username":"existingcustomer"}
[0mPOST /api/v1/auth/social/callback [32m200[0m 120.863 ms - 531[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:37.676Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: q15YIWyj-u1Mtw_ElrnRpYioGqztGtrRjEIw

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 11.405 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:37.690Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad1e9ff7a161003053d2e08e8cff0ddfe.DV%2Fi7VFgmQFDhNRlTbj6ti%2BEfOxetPQz%2BP4eVstSX5M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 54.084 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:38.699Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 0R2zbCFO-KB2G8q2bUp43vnfUynDkieMqE78

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.225 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:38.740Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad1e9ff7a161003053d2e08e8cff0ddfe.DV%2Fi7VFgmQFDhNRlTbj6ti%2BEfOxetPQz%2BP4eVstSX5M',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"twitter","socialAccountId":"twitter-link-123"},"eventType":"ACCOUNT_UPDATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/link","timestamp":"2025-06-21T17:09:38.822Z","userId":"6856e75288726d923e8ca331","userType":"affiliate"}
[0mPOST /api/v1/auth/social/link [32m200[0m 83.109 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:39.774Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: xv0TFQfx-TKqyzCbJIDYFhMLzO1zDlIFYffU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.204 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:39.784Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-9392cfd5-9fca-4231-9db6-4c14eb1752fa","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-21T17:09:39.980Z","userId":"6856e75388726d923e8ca35e","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 196.255 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:40.931Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: GFQ9JMe8-LvCQfwP58e7bRFRCruPj4nYan2o

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.476 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:40.949Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.141 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:41.894Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: JrHeNnxR-1KjcghJQYcNxZFiFclOm95hgFjA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.492 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:41.904Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.067 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:42.849Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: hIbXRu9R-WFWaVR2sVIsaqOa5qzwwvTZjXeA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.056 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:42.857Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.601 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:43.793Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: rDgbNon6-DclS9lCvQ7iLx9ZIObMIZ76-0ok

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.907 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:44.840Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 00U1s5iM-4DdHdE1tZHw6vgGvH8y03cfoTpU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.084 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:45.875Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: frJgDPR9-LlEffjJ047evyJwRmHyMaio2gHU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.204 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:45.945Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1613:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 31.884 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:46.952Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd1e9ff7a161003053d2e08e8cff0ddfe',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: BDHYjDsS-chWHUfRnLRfmh3G61UyhiIfPRJU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d1e9ff7a161003053d2e08e8cff0ddfe

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: OSg4J3xrag...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.440 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:47.018Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1594:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1613:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 30.071 ms - 336[0m
PASS tests/integration/oAuthFlows.test.js (29.48 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1911 ms)
      ✓ should poll for OAuth session results with complete data structure (1050 ms)
      ✓ should poll for OAuth login session results (1060 ms)
      ✓ should return pending status for non-existent session (1003 ms)
      ✓ should handle session polling race conditions (1091 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1197 ms)
      ✓ should reject registration with malicious social data (993 ms)
      ✓ should prevent duplicate social account registration (1250 ms)
      ✓ should prevent duplicate email registration (1076 ms)
      ✓ should generate unique usernames for social registrations (1682 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1261 ms)
      ✓ should reject customer registration with invalid affiliate ID (1070 ms)
    Social Login
      ✓ should login existing affiliate with social account (1092 ms)
      ✓ should login existing customer with social account (1142 ms)
      ✓ should return error for non-existent social account (1024 ms)
    Social Account Linking
      ✓ should link social account to existing affiliate (1071 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (1161 ms)
      ✓ should handle expired JWT tokens gracefully (962 ms)
      ✓ should handle invalid JWT tokens (954 ms)
      ✓ should validate required fields (944 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (1047 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (1035 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (1077 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (1092 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:48.927Z"}
(node:1298246) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:46:13)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:52.386Z"}
  console.log
    CSRF token generation: {
      sessionID: '8d0e2a2db0dcaa5d2902a3d3f88693c8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: lMWlQW8b-00yAjvPmrs3xgglxrSPSJ10qUec

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 8d0e2a2db0dcaa5d2902a3d3f88693c8

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Ka_jXjd7Bv...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.494 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:53.163Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:09:53.329Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 167.174 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:54.236Z"}
  console.log
    CSRF token generation: {
      sessionID: '1c9d9a623b03f56e70c8871b96dab1d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: NQ6RipLK-7o0k09rQeVsXpUQcJtnG1kjxbv0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 1c9d9a623b03f56e70c8871b96dab1d9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: Oaj1XZ_5a1...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.772 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:54.480Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-21T17:09:54.591Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 110.023 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:55.414Z"}
  console.log
    CSRF token generation: {
      sessionID: '52af2fcde738394534d7a675eee6097f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ozwi511m-48_TBE2ERwIG7k2gFQJ9xdQvdkQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 52af2fcde738394534d7a675eee6097f

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: KIeigdlacb...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.935 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:55.550Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-21T17:09:55.577Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 27.667 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:56.410Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f0973776884b9201adaf2a77eec8cbe1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: pRB90gCu-YKHL8mCvIdFUnZWvuJe7DAgzFO8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: f0973776884b9201adaf2a77eec8cbe1

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: vMjHFcDL8y...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.696 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:56.667Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 141.563 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:57.634Z"}
  console.log
    CSRF token generation: {
      sessionID: '5571cd3d331b30c540e778b315e297d0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 4DI4JTiw-xmpykoCEzKYK30aX4jKp_6d3Pm8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 5571cd3d331b30c540e778b315e297d0

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: y0H0NUHAX8...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.076 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:57.891Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 146.922 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:58.887Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e298ebeda0eb6d281da67ff4c4557fe9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: oZ1teIR0-Pjz0xV8AlG_8WG2U_7o8s5kDA3w

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: e298ebeda0eb6d281da67ff4c4557fe9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: hDL4llbIts...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.321 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:09:59.143Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 158.121 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:00.134Z"}
  console.log
    CSRF token generation: {
      sessionID: '638e3278edf59cc90dce186360e0841a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: MEfQc9rp-z9Md3HR6sL6h7kcpI6CyNIHS_bQ

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 638e3278edf59cc90dce186360e0841a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 8urlkGdEsd...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.549 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:00.396Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:510:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:511:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:512:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:545:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 146.642 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:01.377Z"}
  console.log
    CSRF token generation: {
      sessionID: '4dea51985e591497ef79ed62146efe1c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: hJO2fOEL-F_R_r3mGs1BCPNtrrkMHoCTim-U

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 4dea51985e591497ef79ed62146efe1c

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: vxqWxV4a02...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.745 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:01.515Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 28.009 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:02.361Z"}
  console.log
    CSRF token generation: {
      sessionID: '361e411956d2270a125f28b93ab5775d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 6idCaPAw-aVcxCTGO1WY5duq3lvWfAM94vYo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 361e411956d2270a125f28b93ab5775d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 4uVKyDDqod...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.471 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:02.591Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:02.747Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 156.781 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:02.750Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.430 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:03.605Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be3898302be4ca1e1287ece886f3ca25',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: C0V3VDQN-6kUyFWKq4uQX5tA8hhroTNGPGG0

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: be3898302be4ca1e1287ece886f3ca25

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: bIVBKPLDlh...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.086 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:03.743Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.158 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:04.564Z"}
  console.log
    CSRF token generation: {
      sessionID: '6adb6fab057890e8663d06a4a60c983d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: FNCsJiVI-nJSMOz0D-day39HdzEyXd3J0lzU

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6adb6fab057890e8663d06a4a60c983d

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: I5wkcbFGSa...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.050 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:04.710Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.213 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:05.538Z"}
  console.log
    CSRF token generation: {
      sessionID: '59f05e5d30960e1307a77fa5d4231efb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: BdaiZK3h-NLjBTCWJI68fUkrWLjAKgSdoV5s

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 59f05e5d30960e1307a77fa5d4231efb

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: GNAOpZE3iH...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.200 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:05.761Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:05.934Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 172.924 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:05.937Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 122.867 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:06.898Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd8e4bfb752a18429470e382c8b10ded0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: ivAdM5RE-2NqZ9VTAQ9_c_PPl4ejYaq7kVXA

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d8e4bfb752a18429470e382c8b10ded0

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: ENUBjgH8R3...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 4.988 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:07.040Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.276 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:07.858Z"}
  console.log
    CSRF token generation: {
      sessionID: '6d117952dece2fbdd62dab6c453954c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: eBNQdmbl-28eeSeYb28MlEUG3QhVF-dYFVjo

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 6d117952dece2fbdd62dab6c453954c9

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: zGy9XrNtxz...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.240 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:08.117Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.342 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:08.971Z"}
  console.log
    CSRF token generation: {
      sessionID: '192a30afc763dd5433de2072eff65d6a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: oMRN14UF-rrFSFWWxOQ1MY9-vD2xGjt5unms

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 192a30afc763dd5433de2072eff65d6a

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: jfUoewRa9x...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.582 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:09.195Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:09.338Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 143.072 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:09.341Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '192a30afc763dd5433de2072eff65d6a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A192a30afc763dd5433de2072eff65d6a.G55QYz%2FiOHFH7C92EpZQjDjkNT3vktztT%2B9WtDB1vjc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.364 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:09.434Z"}
[0mGET /api/v1/auth/verify [33m401[0m 27.861 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:09.465Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.341 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.320Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aa0f80e3874e580f6b84df8cd0cc6ecd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 9sXlwvPb-RPsyTNS0Qb1v-uv8I5hiE84i7gk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: aa0f80e3874e580f6b84df8cd0cc6ecd

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: t-zTBp15N3...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 11.835 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.563Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:10.701Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 138.402 ms - 544[0m
  console.log
    Got refresh token: cca11ad9f6e67daca6461052786780b3a6860d05af5e1a141811405fd36b62de8bebd3fab10a3e27

      at Object.log (tests/integration/auth.test.js:804:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:818:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.710Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.713Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.715Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.717Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:10.719Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.723 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.391 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.946 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.514 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 119.537 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NTZlNzcyNTAxN2I0ODNiOTk1ZTM5YSIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MDUyNTgxMCwiZXhwIjoxNzUwNTI5NDEwLCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.dQbBzQ1b9ZDpJ2hSZmGepX9zD-dJSbw4EQMG_qupKuw',
          refreshToken: 'e152995c185d2b4520e3578f0aa752ebce2aa1c9e8b254e6239f694e52ddec2fde809f89cc2834cf'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:820:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:11.657Z"}
  console.log
    CSRF token generation: {
      sessionID: '65d7d0e12b0c6299194c2b72fe4dfcf4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: 6QXb7IC8-reutkeviNyR6ruKjDWHgcWFzdkg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 65d7d0e12b0c6299194c2b72fe4dfcf4

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: -w51iOX1ZL...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.160 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:11.978Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:12.274Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 285.708 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.390Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-21T17:10:13.535Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.634 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.538Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.387 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.569Z"}
[0mGET /api/v1/auth/verify [32m200[0m 27.789 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.599Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '65d7d0e12b0c6299194c2b72fe4dfcf4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A65d7d0e12b0c6299194c2b72fe4dfcf4.87Q%2FDV824SK2Vs2%2F5WuXHBQK084FZ%2FVGb8kjIHPVlRo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/auth/logout [32m200[0m 98.677 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.700Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.578 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.734Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.024 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.764Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '65d7d0e12b0c6299194c2b72fe4dfcf4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A65d7d0e12b0c6299194c2b72fe4dfcf4.87Q%2FDV824SK2Vs2%2F5WuXHBQK084FZ%2FVGb8kjIHPVlRo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:221:11)

[0mPOST /api/v1/auth/logout [32m200[0m 87.136 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:13.854Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.005 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:14.719Z"}
  console.log
    CSRF token generation: {
      sessionID: '75a4e7e8166f8dafc4605e75bb202bc6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gylSpdi9-2ydR_RzaVFfZC_C7Fr9wm_qHa0A

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 75a4e7e8166f8dafc4605e75bb202bc6

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: ldBHNFnpbM...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.015 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:15.682Z"}
  console.log
    CSRF token generation: {
      sessionID: '95ceab8c4c4582c64af9be56b3290345',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: fJIQ5BXo-FYEmPmiTESg4_8GDCsqz8Yw1_ZM

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 95ceab8c4c4582c64af9be56b3290345

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: GLKXPTPluP...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 7.506 ms - 67[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:133:26)","timestamp":"2025-06-21T17:10:15.742Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:16.656Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af0e30cf0da3862f6331c945ec5587b8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: gM8Ec7Ul-Y56XtxHALz6U-TJCyZQ9SygVrvI

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: af0e30cf0da3862f6331c945ec5587b8

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: l_agoKkLQo...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.610 ms - 67[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:133:26)","timestamp":"2025-06-21T17:10:17.265Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:17.626Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd90bb6da9359383c5aa92e7b5b73dc0e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: sb5PVDmt-d3dD5aBp0nm9dJsYnm44XWItxZ8

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: d90bb6da9359383c5aa92e7b5b73dc0e

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: CHhLzMrXHX...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 5.752 ms - 67[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:133:26)","timestamp":"2025-06-21T17:10:18.558Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:18.616Z"}
  console.log
    CSRF token generation: {
      sessionID: '8506d5bb4c7b0cd505c550920d6ecba1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: wpa26hAo-AQcFj1ziEcVLub5P2Ro_RRfirfg

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: 8506d5bb4c7b0cd505c550920d6ecba1

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: 2fGdbGmItP...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 6.941 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-21T17:10:19.577Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e1d26c42ee564168858ed1b34deccdc5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:292:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:309:13)

  console.log
    Token: t2oMtuYv-equxPiL4jGkxjpBk6ceBRaCkYdk

      at log (server/config/csrf-config.js:310:13)

  console.log
    Session ID: e1d26c42ee564168858ed1b34deccdc5

      at log (server/config/csrf-config.js:311:13)

  console.log
    CSRF Secret: b2jSXrFtpL...

      at log (server/config/csrf-config.js:312:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:313:13)

[0mGET /api/csrf-token [32m200[0m 12.201 ms - 67[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:133:26)","timestamp":"2025-06-21T17:10:19.893Z"}
FAIL tests/integration/auth.test.js (32.381 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1869 ms)
      ✓ should fail with invalid credentials (1178 ms)
      ✓ should fail with non-existent username (996 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1223 ms)
      ✓ should login customer using emailOrUsername field with email (1253 ms)
      ✓ should login customer using emailOrUsername field with username (1246 ms)
      ✓ should prioritize emailOrUsername over username field (1244 ms)
      ✓ should return error with invalid emailOrUsername (984 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1244 ms)
      ✓ should fail with invalid token (958 ms)
      ✓ should fail with missing token (974 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1360 ms)
      ✓ should fail with invalid refresh token (959 ms)
      ✓ should fail with expired refresh token (1113 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1349 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1337 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (3058 ms)
    POST /api/v1/auth/administrator/login
      ✕ should login administrator with valid credentials (964 ms)
      ✕ should fail with invalid administrator credentials (974 ms)
      ✕ should fail when administrator is inactive (968 ms)
    POST /api/v1/auth/operator/login
      ✕ should login operator with valid credentials (990 ms)
      ✕ should fail with invalid operator credentials (960 ms)
      ✕ should fail when operator is inactive (968 ms)

  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should login administrator with valid credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should fail with invalid administrator credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should fail when administrator is inactive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should login operator with valid credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should fail with invalid operator credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should fail when operator is inactive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/order.test.js
  ● Test suite failed to run

    SyntaxError: /var/www/wavemax/wavemax-affiliate-program/tests/integration/order.test.js: Unexpected token, expected "," (110:21)

      108 |           numberOfBags: 2,
      109 |
    > 110 |       expect(response.status).toBe(201);
          |                      ^
      111 |       expect(response.body).toMatchObject({
      112 |         success: true,
      113 |         orderId: expect.stringMatching(/^ORD\d{6}$/),

      at constructor (node_modules/@babel/parser/src/parse-error.ts:95:45)
      at Parser.toParseError [as raise] (node_modules/@babel/parser/src/tokenizer/index.ts:1503:19)
      at Parser.raise [as unexpected] (node_modules/@babel/parser/src/tokenizer/index.ts:1543:16)
      at Parser.unexpected [as expect] (node_modules/@babel/parser/src/parser/util.ts:158:12)
      at Parser.expect [as parseBindingList] (node_modules/@babel/parser/src/parser/lval.ts:409:14)
      at Parser.parseBindingList [as parseFunctionParams] (node_modules/@babel/parser/src/parser/statement.ts:1695:24)
      at Parser.parseFunctionParams [as parseMethod] (node_modules/@babel/parser/src/parser/expression.ts:2452:10)
      at Parser.parseMethod [as parseObjectMethod] (node_modules/@babel/parser/src/parser/expression.ts:2264:19)
      at Parser.parseObjectMethod (node_modules/@babel/parser/src/parser/expression.ts:2342:24)
      at Parser.parseObjPropValue [as parsePropertyDefinition] (node_modules/@babel/parser/src/parser/expression.ts:2192:17)
      at Parser.parsePropertyDefinition [as parseObjectLike] (node_modules/@babel/parser/src/parser/expression.ts:2059:21)
      at Parser.parseObjectLike [as parseExprAtom] (node_modules/@babel/parser/src/parser/expression.ts:1158:21)
      at Parser.parseExprAtom [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:723:23)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)
      at Parser.parseExprListItem [as parseCallExpressionArguments] (node_modules/@babel/parser/src/parser/expression.ts:1025:14)
      at Parser.parseCallExpressionArguments [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:903:29)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseAwait] (node_modules/@babel/parser/src/parser/expression.ts:2901:28)
      at Parser.parseAwait [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:626:25)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3131:16)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseVar] (node_modules/@babel/parser/src/parser/statement.ts:1558:18)
      at Parser.parseVar [as parseVarStatement] (node_modules/@babel/parser/src/parser/statement.ts:1222:10)
      at Parser.parseVarStatement [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:578:21)
      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:449:17)
      at Parser.parseStatementLike [as parseStatementListItem] (node_modules/@babel/parser/src/parser/statement.ts:398:17)
      at Parser.parseStatementListItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1415:16)
      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1388:10)
      at Parser.parseBlockBody [as parseBlock] (node_modules/@babel/parser/src/parser/statement.ts:1356:10)
      at Parser.parseBlock [as parseFunctionBody] (node_modules/@babel/parser/src/parser/expression.ts:2579:24)
      at Parser.parseFunctionBody [as parseArrowExpression] (node_modules/@babel/parser/src/parser/expression.ts:2520:10)
      at Parser.parseArrowExpression [as parseAsyncArrowFromCallExpression] (node_modules/@babel/parser/src/parser/expression.ts:1045:10)
      at Parser.parseAsyncArrowFromCallExpression [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:924:27)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)
      at Parser.parseExprListItem [as parseCallExpressionArguments] (node_modules/@babel/parser/src/parser/expression.ts:1025:14)
      at Parser.parseCallExpressionArguments [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:903:29)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at Parser.parseMaybeAssign [as parseExpressionBase] (node_modules/@babel/parser/src/parser/expression.ts:221:23)
      at parseExpressionBase (node_modules/@babel/parser/src/parser/expression.ts:212:39)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3131:16)
      at Parser.allowInAnd [as parseExpression] (node_modules/@babel/parser/src/parser/expression.ts:212:17)
      at Parser.parseExpression [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:654:23)
      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:449:17)
      at Parser.parseStatementLike [as parseStatementListItem] (node_modules/@babel/parser/src/parser/statement.ts:398:17)
      at Parser.parseStatementListItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1415:16)
      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1388:10)
      at Parser.parseBlockBody [as parseBlock] (node_modules/@babel/parser/src/parser/statement.ts:1356:10)
      at Parser.parseBlock [as parseFunctionBody] (node_modules/@babel/parser/src/parser/expression.ts:2579:24)
      at Parser.parseFunctionBody [as parseArrowExpression] (node_modules/@babel/parser/src/parser/expression.ts:2520:10)
      at Parser.parseArrowExpression [as parseParenAndDistinguishExpression] (node_modules/@babel/parser/src/parser/expression.ts:1807:12)
      at Parser.parseParenAndDistinguishExpression [as parseExprAtom] (node_modules/@babel/parser/src/parser/expression.ts:1146:21)
      at Parser.parseExprAtom [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:723:23)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)

[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:133:26)","timestamp":"2025-06-21T17:10:21.501Z"}
-----------------------------|---------|----------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                                                 
-----------------------------|---------|----------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   65.78 |    55.65 |   69.58 |   65.91 |                                                                                                                                                                                                                                                                                                                                                                                                   
 config                      |   89.74 |    77.11 |      96 |   89.69 |                                                                                                                                                                                                                                                                                                                                                                                                   
  csrf-config.js             |    86.2 |    72.72 |     100 |    86.2 | 236-260,270-271,286,301-302                                                                                                                                                                                                                                                                                                                                                                       
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                                                    
  paygistix.config.js        |   65.71 |       50 |   91.66 |    64.7 | 26,45,57,69,102-103,125-143                                                                                                                                                                                                                                                                                                                                                                       
 controllers                 |   64.73 |     53.9 |   70.31 |   65.03 |                                                                                                                                                                                                                                                                                                                                                                                                   
  administratorController.js |   45.47 |    30.24 |   51.78 |   45.89 | 39,110-111,185-203,220,241-251,256-260,271,294-295,311,344,366-367,384,393,402,430-431,442-524,563-564,581-582,602,611,651-669,698,703,714-739,763-764,775-829,847,855-860,869-873,905-906,966-967,978-1014,1189-1198,1228-1229,1360-1361,1372-1490,1501-1592,1603-1657,1668-1710,1729,1740-1741,1772-1773,1784-1972,1983-2060,2088-2089,2100-2139,2161-2187,2204,2216,2234,2252-2273             
  affiliateController.js     |   85.19 |    78.39 |   96.96 |   84.89 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-568,578,667,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                                                       
  authController.js          |   66.42 |    54.03 |      90 |   66.42 | 130-131,143,176-181,185,215-216,234-235,251-341,359-360,368-369,377-378,398-399,449-450,497-498,548-549,564,576-581,610-618,626-627,642,660-671,687,690,712-713,738,779,803,813,823-824,867-882,995,1000-1045,1073,1115-1156,1302,1369,1380,1443-1444,1459,1569-1570,1585,1638-1639,1651-1695,1716-1779,1784-1830,1858,1894-1932,1944,1980,1994-1995,2008,2021,2078,2127-2128,2142-2181,2195-2234 
  customerController.js      |   63.13 |    60.37 |   59.09 |   63.47 | 135,154-155,214-215,234,247,270-286,296-297,316,329,341,343,345,379-380,398,411,478-501,513-555,589,632,644,684-685,697-782                                                                                                                                                                                                                                                                       
  operatorController.js      |    91.4 |     81.3 |   83.33 |   91.66 | 367-368,374-404,491-492,582-583,610-611,635                                                                                                                                                                                                                                                                                                                                                       
  orderController.js         |   32.73 |       25 |   21.73 |   34.06 | 57-58,164-165,251-252,271,283,340-341,359,380,409-410,421-515,526-595,606-741,752-840,851-948,959-1058                                                                                                                                                                                                                                                                                            
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                                               
  quickbooksController.js    |   88.03 |    87.27 |   94.73 |   88.39 | 263-264,315,357-381,391-392,421-422                                                                                                                                                                                                                                                                                                                                                               
  w9Controller.js            |   83.41 |    75.29 |   93.33 |   83.16 | 116,142-143,177-178,212-213,221-255,266,332-333,344,359,391-392,427-428,497-498,523,527,610-611                                                                                                                                                                                                                                                                                                   
  w9ControllerDocuSign.js    |   57.69 |    46.73 |      60 |   57.69 | 209,224,282,287-288,336-338,408,445-446,457-506,517-571,581-641,672-759                                                                                                                                                                                                                                                                                                                           
 middleware                  |   96.28 |    89.55 |   94.73 |   96.07 |                                                                                                                                                                                                                                                                                                                                                                                                   
  auth.js                    |   82.35 |    72.91 |   66.66 |   82.35 | 77,90,113-115,156-166                                                                                                                                                                                                                                                                                                                                                                             
  errorHandler.js            |   97.82 |    87.09 |     100 |   97.82 | 10                                                                                                                                                                                                                                                                                                                                                                                                
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                                                   
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
 models                      |   78.44 |    70.29 |   73.33 |   79.36 |                                                                                                                                                                                                                                                                                                                                                                                                   
  Administrator.js           |   41.79 |    21.42 |    12.5 |   45.16 | 107,122,128,136,141-146,153-170,175,183-192,198-199,205-206,212-213,218,229-234                                                                                                                                                                                                                                                                                                                   
  Affiliate.js               |   86.04 |    79.54 |   84.61 |   86.04 | 89,213,217,232,237-244                                                                                                                                                                                                                                                                                                                                                                            
  CallbackPool.js            |   44.44 |        0 |      20 |   44.44 | 41-46,51-54,89-101,106-119                                                                                                                                                                                                                                                                                                                                                                        
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                                           
  DocuSignToken.js           |   86.36 |    81.81 |     100 |   86.36 | 101,126-127                                                                                                                                                                                                                                                                                                                                                                                       
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  Order.js                   |      70 |    68.88 |     100 |   71.11 | 109,147-148,154-170                                                                                                                                                                                                                                                                                                                                                                               
  Payment.js                 |   88.09 |    55.55 |   88.88 |   88.09 | 237-245                                                                                                                                                                                                                                                                                                                                                                                           
  PaymentExport.js           |    42.1 |       40 |    37.5 |    42.1 | 135-141,146-153,158-165,170,180-183                                                                                                                                                                                                                                                                                                                                                               
  PaymentMethod.js           |   81.81 |    60.86 |   85.71 |   81.53 | 215-236,241-252                                                                                                                                                                                                                                                                                                                                                                                   
  PaymentToken.js            |   81.81 |      100 |      50 |   81.81 | 60-61                                                                                                                                                                                                                                                                                                                                                                                             
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                                                
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  W9AuditLog.js              |   56.09 |    19.04 |      50 |   58.97 | 144,185-199,208-257,262-265                                                                                                                                                                                                                                                                                                                                                                       
  W9Document.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
 routes                      |   56.66 |    19.59 |   30.23 |   56.77 |                                                                                                                                                                                                                                                                                                                                                                                                   
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  authRoutes.js              |   96.77 |    83.33 |     100 |   96.77 | 65                                                                                                                                                                                                                                                                                                                                                                                                
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                                                
  customerRoutes.js          |   95.83 |    83.33 |     100 |   95.83 | 42                                                                                                                                                                                                                                                                                                                                                                                                
  generalPaymentCallback.js  |   11.62 |        0 |       0 |   11.62 | 14-214,222-304                                                                                                                                                                                                                                                                                                                                                                                    
  operatorRoutes.js          |    75.6 |        0 |       0 |    75.6 | 24-30,36-43                                                                                                                                                                                                                                                                                                                                                                                       
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  paymentCallbackRoute.js    |       0 |        0 |       0 |       0 | 1-182                                                                                                                                                                                                                                                                                                                                                                                             
  paymentRoutes.js           |   46.15 |       50 |       0 |   46.15 | 23-46                                                                                                                                                                                                                                                                                                                                                                                             
  quickbooksRoutes.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                                                 
  socialAuthRoutes.js        |   56.25 |    17.64 |   14.28 |   56.25 | 50-57,79-86,150-163,176-177,187-196,219-228                                                                                                                                                                                                                                                                                                                                                       
  systemConfigRoutes.js      |   27.65 |        0 |       0 |   28.26 | 11-24,30-50,60-73,79-95,101-106                                                                                                                                                                                                                                                                                                                                                                   
  w9Routes.js                |   89.28 |        0 |       0 |   89.28 | 19-22                                                                                                                                                                                                                                                                                                                                                                                             
 services                    |   60.35 |    64.49 |   76.66 |   60.41 |                                                                                                                                                                                                                                                                                                                                                                                                   
  callbackPoolManager.js     |   98.11 |    83.33 |     100 |   98.11 | 17                                                                                                                                                                                                                                                                                                                                                                                                
  dataRetentionService.js    |       0 |        0 |       0 |       0 | 1-231                                                                                                                                                                                                                                                                                                                                                                                             
  docusignService.js         |   74.11 |    67.39 |      85 |    74.4 | 48-67,89-91,172,231-244,265,276-280,360,453-454,509-510,527-531,572-573,595-596,625-626                                                                                                                                                                                                                                                                                                           
  w9AuditService.js          |   78.78 |    68.08 |   78.57 |   78.78 | 146-165,210-224                                                                                                                                                                                                                                                                                                                                                                                   
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
 utils                       |    49.3 |    40.42 |      56 |   48.55 |                                                                                                                                                                                                                                                                                                                                                                                                   
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 98                                                                                                                                                                                                                                                                                                                                                                                                
  emailService.js            |       0 |        0 |       0 |       0 | 4-2210                                                                                                                                                                                                                                                                                                                                                                                            
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  fieldFilter.js             |   69.84 |    54.02 |    87.5 |   70.17 | 137-140,193-211                                                                                                                                                                                                                                                                                                                                                                                   
  helpers.js                 |   16.21 |        0 |       0 |   18.75 | 13-28,38-55,69-74,83-96,107-109                                                                                                                                                                                                                                                                                                                                                                   
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                                             
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                                   
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                                               
  w9Storage.js               |   91.26 |    83.33 |     100 |   91.26 | 91,96,101,227,235,241,266,274-275                                                                                                                                                                                                                                                                                                                                                                 
-----------------------------|---------|----------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for statements (80%) not met: 65.78%
Jest: "global" coverage threshold for branches (80%) not met: 55.65%
Jest: "global" coverage threshold for lines (80%) not met: 65.91%
Jest: "global" coverage threshold for functions (80%) not met: 69.58%
Summary of all failing tests
FAIL tests/unit/createAdminScript.test.js (7.65 s)
  ● Create Admin Script Tests › Admin ID Generation Logic › should generate sequential admin IDs starting from ADM001

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Admin ID Generation Logic › should calculate next admin ID correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Password Security Requirements › should accept strong passwords for admins

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Permission System Validation › should validate all permission types

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Permission System Validation › should handle partial permission sets

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Unique Constraint Validation › should prevent duplicate administrator IDs

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Unique Constraint Validation › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Email Integration › should handle admin creation with welcome email sending

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Data Validation and Sanitization › should handle special characters in names correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Data Validation and Sanitization › should normalize email addresses

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Administrator Model Integration › should integrate with existing administrator model schema

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Create Admin Script Tests › Administrator Model Integration › should work with password hashing middleware

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/unit/quickbooksController.test.js
  ● QuickBooks Controller › exportVendors › should export vendors as JSON

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -21,8 +21,11 @@
              "quickbooksVendorId": null,
              "taxIdLast4": "5678",
            },
          ],
        },
    -   "exportedBy": "admin123",
    +   "filename": "wavemax-vendors-EXP-1750525454385.json",
    +   "format": "json",
    +   "generatedBy": "admin123",
    +   "recordCount": 2,
        "type": "vendor",
      },

    Number of calls: 1

       95 |       });
       96 |
    >  97 |       expect(PaymentExport.create).toHaveBeenCalledWith({
          |                                    ^
       98 |         type: 'vendor',
       99 |         exportedBy: 'admin123',
      100 |         affiliateIds: ['AFF-001', 'AFF-002'],

      at Object.toHaveBeenCalledWith (tests/unit/quickbooksController.test.js:97:36)

  ● QuickBooks Controller › exportPaymentSummary › should export payment summary as JSON

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -24,10 +24,18 @@
              ],
              "totalCommission": 30,
            },
          ],
        },
    -   "exportedBy": "admin123",
    -   "periodEnd": Any<Date>,
    +   "filename": "wavemax-payment-summary-EXP-1750525454405.json",
    +   "format": "json",
    +   "generatedBy": "admin123",
    +   "orderIds": Array [
    +     "ORD-001",
    +     "ORD-002",
    +   ],
    +   "periodEnd": 2025-01-31T23:59:59.999Z,
        "periodStart": 2025-01-01T00:00:00.000Z,
    +   "recordCount": 1,
    +   "totalAmount": 30,
        "type": "payment_summary",
      },

    Number of calls: 1

      287 |       });
      288 |
    > 289 |       expect(PaymentExport.create).toHaveBeenCalledWith({
          |                                    ^
      290 |         type: 'payment_summary',
      291 |         periodStart: new Date('2025-01-01'),
      292 |         periodEnd: expect.any(Date),

      at Object.toHaveBeenCalledWith (tests/unit/quickbooksController.test.js:289:36)

FAIL tests/unit/docusignService.test.js
  ● DocuSign Service › PKCE Storage › should store and retrieve PKCE verifier

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_verifier_456"
    Received: null

      73 |       const retrieved = await docusignService.getPkceVerifier(state);
      74 |
    > 75 |       expect(retrieved).toBe(verifier);
         |                         ^
      76 |     });
      77 |
      78 |     it('should delete verifier after retrieval', async () => {

      at Object.toBe (tests/unit/docusignService.test.js:75:25)

  ● DocuSign Service › PKCE Storage › should delete verifier after retrieval

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_verifier_012"
    Received: null

      84 |       const secondRetrieval = await docusignService.getPkceVerifier(state);
      85 |
    > 86 |       expect(firstRetrieval).toBe(verifier);
         |                              ^
      87 |       expect(secondRetrieval).toBeNull();
      88 |     });
      89 |

      at Object.toBe (tests/unit/docusignService.test.js:86:30)

  ● DocuSign Service › Envelope Creation › should create W9 envelope for affiliate

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes", ObjectContaining {"status": "sent", "templateId": "test_template_id", "templateRoles": ArrayContaining [ObjectContaining {"clientUserId": "123456789", "email": "test@example.com", "name": "John Doe", "roleName": "Signer 1"}]}, ObjectContaining {"headers": {"Authorization": "Bearer valid_token", "Content-Type": "application/json"}}
    Received: "https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes", {"eventNotification": {"deliveryMode": "SIM", "eventData": {"format": "json", "version": "restv2.1"}, "events": ["envelope-completed", "envelope-declined", "envelope-voided"], "loggingEnabled": true, "requireAcknowledgment": true, "url": "https://test.com/api/v1/w9/docusign-webhook"}, "status": "sent", "templateId": "test_template_id", "templateRoles": [{"email": "test@example.com", "name": "John Doe", "roleName": "Signer 1", "tabs": {"textTabs": [{"tabLabel": "Owner's First Name", "value": "John"}, {"tabLabel": "Owner's Last Name", "value": "Doe"}, {"tabLabel": "Owner's Middle Initial", "value": ""}, {"tabLabel": "Street Address", "value": "123 Main St"}, {"tabLabel": "City", "value": "Testville"}, {"tabLabel": "State 1", "value": "TX"}, {"tabLabel": "5-Digit Zip Code", "value": "12345"}, {"tabLabel": "Business name", "value": "Test Business"}, {"tabLabel": "Business Name", "value": "Test Business"}, {"tabLabel": "DBA", "value": "Test Business"}]}}]}, {"headers": {"Authorization": "Bearer valid_token", "Content-Type": "application/json"}}

    Number of calls: 1

      290 |
      291 |       expect(result).toEqual(mockEnvelopeResponse.data);
    > 292 |       expect(axios.post).toHaveBeenCalledWith(
          |                          ^
      293 |         'https://demo.docusign.net/restapi/v2.1/accounts/test_account_id/envelopes',
      294 |         expect.objectContaining({
      295 |           templateId: 'test_template_id',

      at Object.toHaveBeenCalledWith (tests/unit/docusignService.test.js:292:26)

FAIL tests/unit/administrator.test.js
  ● Administrator Model › Schema Validation › should create a valid administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should require all mandatory fields

    expect(received).toBeDefined()

    Received: undefined

      49 |       expect(error.errors.lastName).toBeDefined();
      50 |       expect(error.errors.email).toBeDefined();
    > 51 |       expect(error.errors.password).toBeDefined();
         |                                     ^
      52 |     });
      53 |
      54 |     it('should enforce email format validation', async () => {

      at Object.toBeDefined (tests/unit/administrator.test.js:51:37)

  ● Administrator Model › Schema Validation › should enforce unique email constraint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should enforce unique adminId constraint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should accept valid permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should trim whitespace from string fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should convert email to lowercase

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Schema Validation › should not allow role to be changed after creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should hash password on save

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should verify correct password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should reject incorrect password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Handling › should not expose password in JSON output

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should increment login attempts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should lock account after 5 failed attempts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should reset login attempts on successful login

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should reset attempts if lock has expired

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Login Attempts and Account Locking › should correctly identify locked accounts

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Reset › should generate password reset token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Password Reset › should set password reset expiry to 30 minutes

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check single permission correctly

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check multiple permissions with AND operation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should check multiple permissions with OR operation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Permissions › should set default permissions if none provided

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should find active administrators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should find administrator by email with password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Static Methods › should handle case-insensitive email search

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Timestamps › should auto-generate timestamps on creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Timestamps › should update updatedAt on modification

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Admin ID Generation › should auto-generate unique admin ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Model › Admin ID Generation › should not override provided admin ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/unit/authController.test.js
  ● Auth Controller › affiliateLogin › should successfully login an affiliate with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "username": "testaffiliate",
    +   "username": Object {
    +     "$regex": /^testaffiliate$/i,
    +   },
      },

    Number of calls: 1

      86 |       await authController.affiliateLogin(req, res);
      87 |
    > 88 |       expect(Affiliate.findOne).toHaveBeenCalledWith({ username: 'testaffiliate' });
         |                                 ^
      89 |       expect(encryptionUtil.verifyPassword).toHaveBeenCalledWith(
      90 |         'password123',
      91 |         'salt',

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:88:33)

  ● Auth Controller › customerLogin › should successfully login a customer with valid credentials

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "testcustomer",
    +       "username": Object {
    +         "$regex": /^testcustomer$/i,
    +       },
          },
          Object {
            "email": "testcustomer",
          },
        ],,

    Number of calls: 1

      184 |       await authController.customerLogin(req, res);
      185 |
    > 186 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      187 |         $or: [
      188 |           { username: 'testcustomer' },
      189 |           { email: 'testcustomer' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:186:32)

  ● Auth Controller › customerLogin › should login customer using emailOrUsername field

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "jane@example.com",
    +       "username": Object {
    +         "$regex": /^jane@example.com$/i,
    +       },
          },
          Object {
            "email": "jane@example.com",
          },
        ],,

    Number of calls: 1

      263 |       await authController.customerLogin(req, res);
      264 |
    > 265 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      266 |         $or: [
      267 |           { username: 'jane@example.com' },
      268 |           { email: 'jane@example.com' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:265:32)

  ● Auth Controller › customerLogin › should prioritize emailOrUsername over username field

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    @@ -1,9 +1,11 @@
      Object {
        "$or": Array [
          Object {
    -       "username": "testcustomer",
    +       "username": Object {
    +         "$regex": /^testcustomer$/i,
    +       },
          },
          Object {
            "email": "testcustomer",
          },
        ],,

    Number of calls: 1

      312 |
      313 |       // Should use emailOrUsername value, not username
    > 314 |       expect(Customer.findOne).toHaveBeenCalledWith({
          |                                ^
      315 |         $or: [
      316 |           { username: 'testcustomer' },
      317 |           { email: 'testcustomer' }

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:314:32)

  ● Auth Controller › administratorLogin › should successfully login administrator

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "AdminPass123!"

    Number of calls: 0

      505 |
      506 |       expect(Administrator.findOne).toHaveBeenCalledWith({ email: 'admin@example.com' });
    > 507 |       expect(mockAdmin.verifyPassword).toHaveBeenCalledWith('AdminPass123!');
          |                                        ^
      508 |       expect(mockAdmin.resetLoginAttempts).toHaveBeenCalled();
      509 |       expect(res.json).toHaveBeenCalledWith({
      510 |         success: true,

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:507:40)

  ● Auth Controller › administratorLogin › should handle locked account

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403
    Received: 401

    Number of calls: 1

      533 |       await authController.administratorLogin(req, res);
      534 |
    > 535 |       expect(res.status).toHaveBeenCalledWith(403);
          |                          ^
      536 |       expect(res.json).toHaveBeenCalledWith({
      537 |         success: false,
      538 |         message: 'Account is locked due to multiple failed login attempts.'

      at Object.toHaveBeenCalledWith (tests/unit/authController.test.js:535:26)

FAIL tests/integration/payment.test.js (9.862 s)
  ● Payment Integration Tests › Payment Token Tests › should create payment token

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      117 |         });
      118 |
    > 119 |       expect(response.status).toBe(200);
          |                               ^
      120 |       expect(response.body).toHaveProperty('success', true);
      121 |       expect(response.body).toHaveProperty('token');
      122 |       expect(response.body).toHaveProperty('formConfig');

      at Object.toBe (tests/integration/payment.test.js:119:31)

  ● Payment Integration Tests › Payment Token Tests › should check payment status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      145 |         .get(`/api/v1/payments/check-status/${token}`);
      146 |
    > 147 |       expect(response.status).toBe(200);
          |                               ^
      148 |       expect(response.body).toHaveProperty('success');
      149 |       expect(response.body).toHaveProperty('status');
      150 |     });

      at Object.toBe (tests/integration/payment.test.js:147:31)

  ● Payment Integration Tests › Payment Token Tests › should cancel payment token

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      174 |         .send({});
      175 |
    > 176 |       expect(response.status).toBe(200);
          |                               ^
      177 |       expect(response.body).toHaveProperty('success');
      178 |     });
      179 |   });

      at Object.toBe (tests/integration/payment.test.js:176:31)

  ● Payment Integration Tests › Payment Callback Tests › should handle form callback

    expect(received).toBe(expected) // Object.is equality

    Expected: 302
    Received: 404

      189 |         });
      190 |
    > 191 |       expect(response.status).toBe(302); // Expect redirect
          |                               ^
      192 |     });
      193 |   });
      194 |

      at Object.toBe (tests/integration/payment.test.js:191:31)

FAIL tests/integration/adminCreation.test.js
  ● Admin Creation Integration Tests › Direct Database Admin Creation › should create admin with sequential ID when no admins exist

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should create admin with next sequential ID when admins exist

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should handle admin creation with all permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Direct Database Admin Creation › should handle admin creation with partial permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Model Validation › should save admins with different adminIds successfully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Model Validation › should save admins with different emails successfully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Password Handling › should hash password before saving

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Password Handling › should validate password with verifyPassword method

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admin by adminId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admin by email

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find active admins only

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should find admins with specific permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Admin Query Operations › should get last admin for ID generation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Email Integration › should call email service after admin creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Admin Creation Integration Tests › Email Integration › should handle email service failures gracefully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/w9.test.js (15.265 s)
  ● W-9 Integration Tests › W-9 Upload Flow › should allow affiliate to upload W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Upload Flow › should reject non-PDF files

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Upload Flow › should reject files over 5MB

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Status Check › should return current W-9 status for affiliate

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Status Check › should show pending status after upload

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should list pending W-9 documents for admin

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should allow admin to verify W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Admin W-9 Review › should allow admin to reject W-9 document

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Download › should allow affiliate to download their own W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Download › should allow admin to download any W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Audit Log Functionality › should retrieve audit logs with filters

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Audit Log Functionality › should export audit logs as CSV

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › W-9 Expiry and Retention › should set expiry date 3 years from upload

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow non-admin to access admin endpoints

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow unauthenticated access

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)

  ● W-9 Integration Tests › Security and Permissions › should not allow affiliate to download other affiliates W-9

    EACCES: permission denied

      428 |
      429 |     it('should handle storage path creation errors', async () => {
    > 430 |       fs.mkdir = jest.fn().mockRejectedValue(new Error('EACCES: permission denied'));
          |                                              ^
      431 |       fs.access = jest.fn().mockRejectedValue(new Error('Not found'));
      432 |
      433 |       await expect(w9Storage.store(

      at Object.<anonymous> (tests/unit/w9Storage.test.js:430:46)


  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'stop')

      32 |   afterAll(async () => {
      33 |     await mongoose.disconnect();
    > 34 |     await mongoServer.stop();
         |                       ^
      35 |   });
      36 |
      37 |   beforeEach(async () => {

      at Object.stop (tests/integration/w9.test.js:34:23)

  ● Test suite failed to run

    MongoNotConnectedError: Client must be connected before running operations

      57 |     const collections = mongoose.connection.collections;
      58 |     for (const key in collections) {
    > 59 |       await collections[key].deleteMany({});
         |                              ^
      60 |     }
      61 |   }
      62 |   await mongoose.disconnect();

      at autoConnect (node_modules/mongodb/src/operations/execute_operation.ts:135:13)
      at executeOperation (node_modules/mongodb/src/operations/execute_operation.ts:69:25)
      at Collection.deleteMany (node_modules/mongodb/src/collection.ts:457:34)
      at NativeCollection.<computed> [as deleteMany] (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)
      at Object.deleteMany (tests/setup.js:59:30)

FAIL tests/integration/systemConfig.test.js (15.192 s)
  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public › should return all public configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public › should not return private configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return a specific public configuration

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return 404 for non-existent config

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Public Endpoints › GET /api/v1/system/config/public/:key › should return 404 for private config accessed via public endpoint

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return all configurations for admin

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return 401 without authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › GET /api/v1/system/config › should return 403 for non-admin users

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should update a configuration value

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should validate value based on data type

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should validate value against min/max constraints

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should not allow updating non-editable configs

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › PUT /api/v1/system/config/:key › should require system_config permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › POST /api/v1/system/config/initialize › should initialize default configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Admin Endpoints › POST /api/v1/system/config/initialize › should not overwrite existing configurations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● System Config API Tests › Integration with Order Model › should use SystemConfig WDF rate in new orders

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/quickbooks.test.js (19.789 s)
  ● QuickBooks Export Integration Tests › Vendor Export › should export verified vendors as CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Vendor Export › should export vendors as JSON

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Vendor Export › should handle no verified vendors gracefully

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should export payment summary for date range as CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should export payment summary as JSON with correct aggregations

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should require date parameters

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Payment Summary Export › should handle empty date range

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should export commission details for specific affiliate

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should require all parameters

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should reject unverified affiliate export

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Commission Detail Export › should handle non-existent affiliate

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should retrieve export history

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should filter export history by type

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Export History › should limit export history results

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Security and Permissions › should require admin authentication for all QuickBooks endpoints

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › Security and Permissions › should not allow affiliate access to QuickBooks exports

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › CSV Format Validation › should generate QuickBooks-compatible vendor CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● QuickBooks Export Integration Tests › CSV Format Validation › should generate QuickBooks-compatible payment CSV

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/administrator.test.js (33.045 s)
  ● Administrator Integration Tests › GET /api/v1/administrators › should get all administrators with admin token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should filter by active status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should support pagination

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should require admin authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators › should require administrator permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should get administrator by ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should return 404 for non-existent administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/:id › should handle invalid ObjectId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should create new administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate required fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate email format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should validate password strength

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators › should require administrators.create permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update administrator details

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update email

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should update password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should deactivate administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should not allow updating adminId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should validate email uniqueness on update

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should prevent self-deactivation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › PATCH /api/v1/administrators/:id › should require administrators.update permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should delete administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should prevent self-deletion

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should prevent deleting last administrator with all permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should require administrators.delete permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › DELETE /api/v1/administrators/:id › should handle non-existent administrator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should reset administrator password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should clear login attempts on password reset

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should validate password strength

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › POST /api/v1/administrators/:id/reset-password › should require administrators.update permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/permissions › should get available permissions list

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Administrator Integration Tests › GET /api/v1/administrators/permissions › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/passwordValidation.test.js (21.287 s)
  ● Password Validation Integration Tests › Administrator Password Validation › should enforce strong passwords for administrator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Administrator Password Validation › should accept strong passwords for administrator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Operator Password Validation › should enforce strong passwords for operator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Password Validation Integration Tests › Operator Password Validation › should accept strong passwords for operator creation

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/operator.test.js (37.674 s)
  ● Operator Integration Tests › GET /api/v1/operators › should get all operators with admin token

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should filter by active status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should filter by on-shift status

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should support pagination

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators › should require operator management permissions

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should get operator by ID

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should allow operators to view their own profile

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should prevent operators from viewing other operators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/:id › should return 404 for non-existent operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should create new operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate required fields

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate email format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should validate shift time format

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should prevent duplicate emails

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators › should require operators.manage permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should update operator details

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should update password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should deactivate operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should allow operators to update their own profile (limited fields)

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should prevent operators from changing their own work station

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should not allow updating operatorId

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id › should validate email uniqueness on update

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should delete operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should prevent deleting operator with active orders

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should require operators.manage permission

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › DELETE /api/v1/operators/:id › should handle non-existent operator

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators/:id/reset-pin › should reset operator PIN/password

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › POST /api/v1/operators/:id/reset-pin › should clear login attempts on PIN reset

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should get available operators sorted by order count

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should respect limit parameter

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should only include active operators

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › GET /api/v1/operators/available › should require authentication

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update processing statistics

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update quality score

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should update both stats in one call

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Operator Integration Tests › PATCH /api/v1/operators/:id/stats › should validate processingTime is positive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/auth.test.js (32.381 s)
  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should login administrator with valid credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should fail with invalid administrator credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/administrator/login › should fail when administrator is inactive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should login operator with valid credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should fail with invalid operator credentials

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Authentication Integration Tests › POST /api/v1/auth/operator/login › should fail when operator is inactive

    ValidationError: Administrator validation failed: passwordHash: Path `passwordHash` is required., passwordSalt: Path `passwordSalt` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

FAIL tests/integration/order.test.js
  ● Test suite failed to run

    SyntaxError: /var/www/wavemax/wavemax-affiliate-program/tests/integration/order.test.js: Unexpected token, expected "," (110:21)

      108 |           numberOfBags: 2,
      109 |
    > 110 |       expect(response.status).toBe(201);
          |                      ^
      111 |       expect(response.body).toMatchObject({
      112 |         success: true,
      113 |         orderId: expect.stringMatching(/^ORD\d{6}$/),

      at constructor (node_modules/@babel/parser/src/parse-error.ts:95:45)
      at Parser.toParseError [as raise] (node_modules/@babel/parser/src/tokenizer/index.ts:1503:19)
      at Parser.raise [as unexpected] (node_modules/@babel/parser/src/tokenizer/index.ts:1543:16)
      at Parser.unexpected [as expect] (node_modules/@babel/parser/src/parser/util.ts:158:12)
      at Parser.expect [as parseBindingList] (node_modules/@babel/parser/src/parser/lval.ts:409:14)
      at Parser.parseBindingList [as parseFunctionParams] (node_modules/@babel/parser/src/parser/statement.ts:1695:24)
      at Parser.parseFunctionParams [as parseMethod] (node_modules/@babel/parser/src/parser/expression.ts:2452:10)
      at Parser.parseMethod [as parseObjectMethod] (node_modules/@babel/parser/src/parser/expression.ts:2264:19)
      at Parser.parseObjectMethod (node_modules/@babel/parser/src/parser/expression.ts:2342:24)
      at Parser.parseObjPropValue [as parsePropertyDefinition] (node_modules/@babel/parser/src/parser/expression.ts:2192:17)
      at Parser.parsePropertyDefinition [as parseObjectLike] (node_modules/@babel/parser/src/parser/expression.ts:2059:21)
      at Parser.parseObjectLike [as parseExprAtom] (node_modules/@babel/parser/src/parser/expression.ts:1158:21)
      at Parser.parseExprAtom [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:723:23)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)
      at Parser.parseExprListItem [as parseCallExpressionArguments] (node_modules/@babel/parser/src/parser/expression.ts:1025:14)
      at Parser.parseCallExpressionArguments [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:903:29)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseAwait] (node_modules/@babel/parser/src/parser/expression.ts:2901:28)
      at Parser.parseAwait [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:626:25)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3131:16)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseVar] (node_modules/@babel/parser/src/parser/statement.ts:1558:18)
      at Parser.parseVar [as parseVarStatement] (node_modules/@babel/parser/src/parser/statement.ts:1222:10)
      at Parser.parseVarStatement [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:578:21)
      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:449:17)
      at Parser.parseStatementLike [as parseStatementListItem] (node_modules/@babel/parser/src/parser/statement.ts:398:17)
      at Parser.parseStatementListItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1415:16)
      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1388:10)
      at Parser.parseBlockBody [as parseBlock] (node_modules/@babel/parser/src/parser/statement.ts:1356:10)
      at Parser.parseBlock [as parseFunctionBody] (node_modules/@babel/parser/src/parser/expression.ts:2579:24)
      at Parser.parseFunctionBody [as parseArrowExpression] (node_modules/@babel/parser/src/parser/expression.ts:2520:10)
      at Parser.parseArrowExpression [as parseAsyncArrowFromCallExpression] (node_modules/@babel/parser/src/parser/expression.ts:1045:10)
      at Parser.parseAsyncArrowFromCallExpression [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:924:27)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)
      at Parser.parseExprListItem [as parseCallExpressionArguments] (node_modules/@babel/parser/src/parser/expression.ts:1025:14)
      at Parser.parseCallExpressionArguments [as parseCoverCallAndAsyncArrowHead] (node_modules/@babel/parser/src/parser/expression.ts:903:29)
      at Parser.parseCoverCallAndAsyncArrowHead [as parseSubscript] (node_modules/@babel/parser/src/parser/expression.ts:785:19)
      at Parser.parseSubscript [as parseSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:744:19)
      at Parser.parseSubscripts [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:729:17)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at Parser.parseMaybeAssign [as parseExpressionBase] (node_modules/@babel/parser/src/parser/expression.ts:221:23)
      at parseExpressionBase (node_modules/@babel/parser/src/parser/expression.ts:212:39)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3131:16)
      at Parser.allowInAnd [as parseExpression] (node_modules/@babel/parser/src/parser/expression.ts:212:17)
      at Parser.parseExpression [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:654:23)
      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:449:17)
      at Parser.parseStatementLike [as parseStatementListItem] (node_modules/@babel/parser/src/parser/statement.ts:398:17)
      at Parser.parseStatementListItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1415:16)
      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1388:10)
      at Parser.parseBlockBody [as parseBlock] (node_modules/@babel/parser/src/parser/statement.ts:1356:10)
      at Parser.parseBlock [as parseFunctionBody] (node_modules/@babel/parser/src/parser/expression.ts:2579:24)
      at Parser.parseFunctionBody [as parseArrowExpression] (node_modules/@babel/parser/src/parser/expression.ts:2520:10)
      at Parser.parseArrowExpression [as parseParenAndDistinguishExpression] (node_modules/@babel/parser/src/parser/expression.ts:1807:12)
      at Parser.parseParenAndDistinguishExpression [as parseExprAtom] (node_modules/@babel/parser/src/parser/expression.ts:1146:21)
      at Parser.parseExprAtom [as parseExprSubscripts] (node_modules/@babel/parser/src/parser/expression.ts:723:23)
      at Parser.parseExprSubscripts [as parseUpdate] (node_modules/@babel/parser/src/parser/expression.ts:702:21)
      at Parser.parseUpdate [as parseMaybeUnary] (node_modules/@babel/parser/src/parser/expression.ts:664:23)
      at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (node_modules/@babel/parser/src/parser/expression.ts:398:14)
      at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (node_modules/@babel/parser/src/parser/expression.ts:410:23)
      at Parser.parseExprOps [as parseMaybeConditional] (node_modules/@babel/parser/src/parser/expression.ts:365:23)
      at Parser.parseMaybeConditional [as parseMaybeAssign] (node_modules/@babel/parser/src/parser/expression.ts:296:21)
      at parseMaybeAssign (node_modules/@babel/parser/src/parser/expression.ts:252:12)
      at Parser.callback [as allowInAnd] (node_modules/@babel/parser/src/parser/expression.ts:3136:12)
      at Parser.allowInAnd [as parseMaybeAssignAllowIn] (node_modules/@babel/parser/src/parser/expression.ts:251:17)
      at Parser.parseMaybeAssignAllowIn [as parseExprListItem] (node_modules/@babel/parser/src/parser/expression.ts:2742:18)


Test Suites: 15 failed, 3 skipped, 63 passed, 78 of 81 total
Tests:       202 failed, 32 skipped, 1382 passed, 1616 total
Snapshots:   0 total
Time:        450.626 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
