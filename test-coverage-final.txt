
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (97 ms)
    ✓ should be a winston logger instance (20 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (67 ms)
    ✓ should verify password correctly (220 ms)
    ✓ should encrypt and decrypt data correctly (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured
      ✓ should return false when not configured (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (1 ms)
    ✓ should parse page and limit from query params
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit (1 ms)
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers
    ✓ should preserve other query parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (14 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values (1 ms)
      ✓ should parse string amounts (1 ms)
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts (1 ms)
      ✓ should round to 2 decimal places
    formatDate
      ✓ should format date with short format by default (5 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format
      ✓ should handle string dates (1 ms)
      ✓ should handle null and undefined dates
      ✓ should handle invalid dates (1 ms)
      ✓ should handle different format cases

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters
    ✓ should support state parameter for context detection

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (1 ms)
      ✓ should log email operations
      ✓ should handle email errors (1 ms)
    Email Templates
      ✓ should process email templates
      ✓ should handle missing template variables
    Email Validation
      ✓ should validate email addresses (1 ms)
    Email Queue
      ✓ should queue emails for sending (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (21 ms)
      ✓ should export vendors as CSV (4 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (4 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (3 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (3 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields (1 ms)
    ✓ should configure Facebook strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (2 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (13 ms)
    GET /api/orders/export
      ✓ should export orders (3 ms)
    GET /api/orders/search
      ✓ should search orders (3 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (3 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (3 ms)
    GET /api/orders/:orderId
      ✓ should get order details (3 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (9 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (4 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderModelSimple.test.js
  Order Model - Line Coverage
    SystemConfig Error Handling (Line 110)
      ✓ should use default base rate when SystemConfig.getValue throws error (189 ms)
    Status Timestamp Updates (Lines 132-148)
      ✓ should set processingStartedAt when status changes to processing (227 ms)
      ✓ should set processedAt when status changes to processed (225 ms)
      ✓ should set completedAt when status changes to complete (223 ms)
      ✓ should set cancelledAt when status changes to cancelled (225 ms)
      ✓ should not overwrite existing timestamps (225 ms)
    Actual Weight and Commission Calculations
      ✓ should calculate actualTotal and commission when actualWeight is set (226 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:41.284Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:41.426Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T17:34:41.459Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:41.608Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:41.723Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:42.336Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:34:42.460Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js (5.297 s)
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (142 ms)
      ✓ should update existing token if one exists (179 ms)
      ✓ should calculate expiration time correctly (118 ms)
    getCurrentToken
      ✓ should return the most recent token (143 ms)
      ✓ should return null if no tokens exist (106 ms)
    clearTokens
      ✓ should remove all tokens (224 ms)
    token expiration
      ✓ should identify expired tokens (139 ms)
      ✓ should handle tokens without refresh token (124 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (245 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (23 ms)
    ✓ GET /api/orders/export - should export orders (6 ms)
    ✓ GET /api/orders/search - should search orders (4 ms)
    ✓ GET /api/orders/statistics - should get statistics (4 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (5 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (4 ms)
    ✓ GET /api/orders/:orderId - should get order details (11 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (4 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (5 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (3 ms)
    ✓ Error handling - should return 404 for unknown routes (5 ms)
    ✓ Error handling - should handle controller errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (9 ms)
      ✓ should reject invalid credentials (3 ms)
    POST /api/auth/register
      ✓ should register new user (3 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (4 ms)
      ✓ should reject logout without token (3 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (3 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (3 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (3 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (4 ms)
      ✓ should reject without token (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter (1 ms)
    URL Validation
      ✓ should validate customer ID format
      ✓ should handle URL encoding correctly (1 ms)
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly
      ✓ should handle both login and customer parameters together (1 ms)
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data (1 ms)
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export (1 ms)
      ✓ should not throw error when sending welcome email
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (9 ms)
      ✓ should handle admin with different adminId formats (1 ms)
      ✓ should handle admin with different email formats

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (6 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (6 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (4 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (3 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (4 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (4 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (3 ms)
    Error Handling
      ✓ should handle controller errors gracefully (3 ms)
      ✓ should handle missing routes with 404 (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle JSON parsing errors (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (341 ms)
      ✓ should authenticate valid x-auth-token header (211 ms)
      ✓ should reject request with no token (209 ms)
      ✓ should reject request with invalid token (207 ms)
      ✓ should reject request with expired token (208 ms)
      ✓ should handle malformed Authorization header (205 ms)
      ✓ should reject blacklisted token (217 ms)
    authorize
      ✓ should authorize user with correct role (209 ms)
      ✓ should authorize user with one of multiple roles (206 ms)
      ✓ should reject user with incorrect role (223 ms)
      ✓ should reject user with no role (209 ms)
      ✓ should reject when user is not set (208 ms)
    authLimiter
      ✓ should be a function (208 ms)
      ✓ should have rate limit configuration (205 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.full.test.js
  Social Auth Routes - Full Coverage
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (88 ms)
      ✓ should return 404 when Google OAuth is not configured (58 ms)
      ✓ should handle Google OAuth callback (49 ms)
      ✓ should pass state parameter through OAuth (71 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (74 ms)
      ✓ should return 404 when Facebook OAuth is not configured (70 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (65 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (56 ms)
      ✓ should redirect customer Google OAuth callback (65 ms)
      ✓ should handle customer Facebook OAuth callback (70 ms)
    Social Registration Completion
      ✓ should complete affiliate social registration (80 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly (1 ms)
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input
    Error handling
      ✓ should handle MongoDB connection errors (1 ms)
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderModel.test.js
  Order Model - Additional Coverage
    Pre-save Hook Coverage
      SystemConfig Error Handling
        ✓ should use default base rate when SystemConfig.getValue throws error (289 ms)
      Status Timestamp Updates
        ✓ should set processingStartedAt timestamp when status changes to processing (202 ms)
        ✓ should not overwrite existing processingStartedAt timestamp (197 ms)
      Actual Weight and Commission Calculations
        ✓ should calculate actual total and commission when actual weight is set (197 ms)
        ✓ should set processedAt timestamp when status changes to processed (194 ms)
        ✓ should set completedAt timestamp when status changes to complete (195 ms)
        ✓ should set cancelledAt timestamp when status changes to cancelled (192 ms)
        ✓ should properly calculate commission with different fee structures (163 ms)
        ✓ should not overwrite existing timestamps (192 ms)
      Edge Cases
        ✓ should handle status change to processing (199 ms)
        ✓ should calculate commission for large orders (162 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing (2 ms)
      ✓ should not warn when all required variables are present (2 ms)
    getEnvironment
      ✓ should return configured environment (2 ms)
      ✓ should default to production if not configured (1 ms)
    getMerchantId
      ✓ should return merchant ID when configured (1 ms)
      ✓ should throw error when not configured (10 ms)
    getFormId
      ✓ should return form ID when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormActionUrl
      ✓ should return configured form action URL (1 ms)
      ✓ should return default URL when not configured (1 ms)
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured (1 ms)
    isConfigured
      ✓ should return true when all required config is present (1 ms)
      ✓ should return false and log error when config is incomplete (1 ms)
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing (2 ms)
      ✓ should set testModeEnabled to false when not configured (1 ms)
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter (1 ms)
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly (1 ms)
      ✓ should generate correct CSS classes for highlighted customer
      ✓ should generate correct HTML content for highlighted customer (1 ms)
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate (1 ms)
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering
      ✓ should filter customer list by customer ID (1 ms)
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format (1 ms)
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (6 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (6 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (3 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (3 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (2 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (3 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (2 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (3 ms)
      ✓ should handle POST callback routes (2 ms)
      ✓ should handle multiple callback paths (4 ms)
    Error Handling
      ✓ should handle controller errors gracefully (3 ms)
      ✓ should handle missing routes with 404 (3 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (3 ms)
      ✓ should handle empty request bodies (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (18 ms)
      ✓ should allow access in test environment (5 ms)
      ✓ should deny access in production without key (1 ms)
      ✓ should allow access in production with valid key (3 ms)
      ✓ should deny access in production with invalid key (9 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (3 ms)
      ✓ should deny access when referer contains /embed (3 ms)
      ✓ should allow access with normal referer (4 ms)
    Route Handlers
      ✓ should serve index.html at root path (4 ms)
      ✓ should serve critical-files page (5 ms)
      ✓ should serve test-templates page (4 ms)
      ✓ should serve action-plan page (5 ms)
      ✓ should return 404 for non-existent pages (5 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (3 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (4 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (3 ms)
      ✓ should apply X-Frame-Options even with valid access (4 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (4 ms)
      ✓ should return valid HTML for 404 page (4 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (3 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (3 ms)
      ✓ should handle specific route handlers (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (14 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors
      ✓ should handle JWT errors
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available
      ✓ should handle errors with customer context
      ✓ should hide error details in production (1 ms)
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production
      ✓ should handle errors without message (1 ms)
      ✓ should handle errors with code property
      ✓ should log all console error sections (2 ms)
    AppError
      ✓ should create custom error with status code
      ✓ should have stack trace (7 ms)
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (4 ms)
      ✓ should handle undefined error (1 ms)
      ✓ should handle non-error objects
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderWithSystemConfig.test.js (9.679 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (807 ms)
      ✓ should use default rate when SystemConfig is not available (959 ms)
      ✓ should calculate estimated total using SystemConfig rate (665 ms)
      ✓ should calculate actual total using SystemConfig rate (639 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (641 ms)
      ✓ should calculate commission for zero delivery fee (647 ms)
      ✓ should handle commission calculation for large orders (651 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (644 ms)
      ✓ should update calculations when base rate changes (811 ms)
      ✓ should validate minimum and maximum base rates (880 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1172 ms)
      ✓ should match revenue calculator with different parameters (653 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.full.test.js
  Payment Routes - Full Coverage
    Dynamic Route Loading
      ✓ should load dynamic callback routes when not in test environment (26 ms)
      ✓ should handle GET requests on dynamic callback routes (33 ms)
      ✓ should handle POST requests on dynamic callback routes (32 ms)
      ✓ should handle errors when loading config file (38 ms)
      ✓ should handle invalid JSON in config file (62 ms)
      ✓ should skip dynamic route loading in test environment (22 ms)
    Static Routes
      ✓ should handle GET /config (31 ms)
      ✓ should handle POST /log-submission (41 ms)
      ✓ should handle POST /create-token (32 ms)
      ✓ should handle GET /check-status/:token (38 ms)
      ✓ should handle POST /cancel-token/:token (25 ms)
      ✓ should handle POST /update-status/:token (31 ms)
      ✓ should handle GET /pool-stats (28 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (119 ms)
      ✓ should use default values for blacklistedAt and reason (119 ms)
      ✓ should require all mandatory fields (79 ms)
      ✓ should enforce unique token constraint (247 ms)
      ✓ should validate userType enum (77 ms)
      ✓ should accept all valid userTypes (209 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (112 ms)
        ✓ should use default reason when not provided (112 ms)
        ✓ should return null when token already blacklisted (238 ms)
        ✓ should handle custom reasons (113 ms)
        ✓ should propagate non-duplicate errors (78 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (139 ms)
        ✓ should return false for non-blacklisted token (106 ms)
        ✓ should handle empty token (105 ms)
        ✓ should handle null token (103 ms)
      cleanupExpired
        ✓ should delete expired tokens (241 ms)
        ✓ should return 0 when no expired tokens (192 ms)
        ✓ should handle empty collection (104 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (3 ms)
      ✓ should reject invalid email addresses (1 ms)
    isValidPhone
      ✓ should validate correct US phone numbers (1 ms)
      ✓ should reject invalid phone numbers (1 ms)
    isValidUsername
      ✓ should validate correct usernames
      ✓ should reject invalid usernames (1 ms)
    isValidZipCode
      ✓ should validate correct US zip codes (1 ms)
      ✓ should reject invalid zip codes
    isValidTimeFormat
      ✓ should validate correct time formats (1 ms)
      ✓ should reject invalid time formats (1 ms)
    isValidName
      ✓ should validate correct names
      ✓ should reject invalid names
    mongooseValidators
      ✓ should provide email validator
      ✓ should provide phone validator
      ✓ should provide username validator
      ✓ should provide zipCode validator (1 ms)
      ✓ should provide timeFormat validator
      ✓ should provide name validator
    expressValidators
      ✓ should provide email validator function (1 ms)
      ✓ should provide phone validator function
      ✓ should provide username validator function
      ✓ should provide zipCode validator function (1 ms)
      ✓ should provide timeFormat validator function
      ✓ should provide name validator function
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails (1 ms)
      validatePhone
        ✓ should return validation result for phones
      validateUsername
        ✓ should return validation result for usernames
      validateZipCode
        ✓ should return validation result for zip codes (1 ms)
      validateTimeFormat
        ✓ should return validation result for time formats
      validateName
        ✓ should return validation result for names

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error checking active orders: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderControllerAdditional.test.js:98:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      86 |     });
      87 |   } catch (error) {
    > 88 |     console.error('Error checking active orders:', error);
         |             ^
      89 |     res.status(500).json({
      90 |       success: false,
      91 |       message: 'Failed to check active orders'

      at Object.error [as checkActiveOrders] (server/controllers/orderController.js:88:13)
      at Object.<anonymous> (tests/unit/orderControllerAdditional.test.js:101:7)

  console.log
    Creating order with data: {
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 20
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.error
    Bulk update order status error: TypeError: Cannot read properties of undefined (reading 'length')
        at Object.length [as bulkUpdateOrderStatus] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/orderController.js:573:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderControllerAdditional.test.js:383:7)

      641 |     });
      642 |   } catch (error) {
    > 643 |     console.error('Bulk update order status error:', error);
          |             ^
      644 |     res.status(500).json({
      645 |       success: false,
      646 |       message: 'An error occurred while updating orders'

      at Object.error [as bulkUpdateOrderStatus] (server/controllers/orderController.js:643:13)
      at Object.<anonymous> (tests/unit/orderControllerAdditional.test.js:383:7)

FAIL tests/unit/orderControllerAdditional.test.js
  Order Controller - Additional Coverage
    checkActiveOrders
      ✓ should check active orders for authenticated customer (54 ms)
      ✓ should return no active orders when none exist (56 ms)
      ✓ should handle missing customer ID (59 ms)
      ✕ should handle database errors (79 ms)
    createOrder error handling
      ✓ should handle general errors during order creation (95 ms)
    exportOrders
      ✕ should export orders as CSV (53 ms)
      ✕ should export orders as JSON by default (54 ms)
      ✕ should handle export errors (53 ms)
      ✓ should handle unauthorized access (52 ms)
    updateOrderStatus edge cases
      ✕ should handle invalid status transitions (52 ms)
    cancelOrder method
      ✓ should handle order not found (62 ms)
      ✕ should handle cancellation of non-cancellable order (55 ms)
    updatePaymentStatus
      ✓ should handle order not found (53 ms)
      ✕ should prevent payment updates on non-complete orders (54 ms)
      ✕ should prevent refund on non-completed payment (61 ms)
    bulkUpdateOrderStatus
      ✓ should handle invalid order IDs format (60 ms)
      ✓ should handle empty order IDs array (55 ms)
      ✕ should handle unauthorized access (72 ms)

  ● Order Controller - Additional Coverage › checkActiveOrders › should handle database errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Error checking active orders",
    +   "message": "Failed to check active orders",
        "success": false,
      },

    Number of calls: 1

      102 |
      103 |       expect(res.status).toHaveBeenCalledWith(500);
    > 104 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      105 |         success: false,
      106 |         message: 'Error checking active orders'
      107 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:104:24)

  ● Order Controller - Additional Coverage › exportOrders › should export orders as CSV

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Content-Type", "text/csv"

    Number of calls: 0

      163 |       await orderController.exportOrders(req, res);
      164 |
    > 165 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Type', 'text/csv');
          |                             ^
      166 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Disposition', 'attachment; filename=orders_export.csv');
      167 |       expect(res.end).toHaveBeenCalled();
      168 |     });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:165:29)

  ● Order Controller - Additional Coverage › exportOrders › should export orders as JSON by default

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "count": 1,
    -   "orders": Array [
    -     Object {
    -       "customerId": "CUST123",
    -       "orderId": "ORD001",
    -     },
    -   ],
    -   "success": true,
    +   "message": "Insufficient permissions for this export",
    +   "success": false,
      },

    Number of calls: 1

      181 |       await orderController.exportOrders(req, res);
      182 |
    > 183 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      184 |         success: true,
      185 |         count: 1,
      186 |         orders: mockOrders

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:183:24)

  ● Order Controller - Additional Coverage › exportOrders › should handle export errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error exporting orders:", Any<Error>

    Number of calls: 0

      198 |       await orderController.exportOrders(req, res);
      199 |
    > 200 |       expect(consoleSpy).toHaveBeenCalledWith('Error exporting orders:', expect.any(Error));
          |                          ^
      201 |       expect(res.status).toHaveBeenCalledWith(500);
      202 |       
      203 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:200:26)

  ● Order Controller - Additional Coverage › updateOrderStatus edge cases › should handle invalid status transitions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      233 |       await orderController.updateOrderStatus(req, res);
      234 |
    > 235 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      236 |       expect(res.json).toHaveBeenCalledWith({
      237 |         success: false,
      238 |         message: 'Invalid status transition'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:235:26)

  ● Order Controller - Additional Coverage › cancelOrder method › should handle cancellation of non-cancellable order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Order cannot be cancelled in current status",
    +   "message": "Orders in complete status cannot be cancelled. Only pending orders can be cancelled.",
        "success": false,
      },

    Number of calls: 1

      272 |
      273 |       expect(res.status).toHaveBeenCalledWith(400);
    > 274 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      275 |         success: false,
      276 |         message: 'Order cannot be cancelled in current status'
      277 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:274:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus › should prevent payment updates on non-complete orders

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      312 |       await orderController.updatePaymentStatus(req, res);
      313 |
    > 314 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      315 |       expect(res.json).toHaveBeenCalledWith({
      316 |         success: false,
      317 |         message: 'Cannot update payment status for non-complete orders'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:314:26)

  ● Order Controller - Additional Coverage › updatePaymentStatus › should prevent refund on non-completed payment

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      333 |       await orderController.updatePaymentStatus(req, res);
      334 |
    > 335 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      336 |       expect(res.json).toHaveBeenCalledWith({
      337 |         success: false,
      338 |         message: 'Cannot update payment status for non-complete orders'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:335:26)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus › should handle unauthorized access

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403
    Received: 500

    Number of calls: 1

      383 |       await orderController.bulkUpdateOrderStatus(req, res);
      384 |
    > 385 |       expect(res.status).toHaveBeenCalledWith(403);
          |                          ^
      386 |       expect(res.json).toHaveBeenCalledWith({
      387 |         success: false,
      388 |         message: 'Unauthorized'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:385:26)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (3 ms)
      ✓ should throw error with invalid encryption key length (15 ms)
      ✓ should throw error when encryption key is missing (2 ms)
      ✓ should handle crypto errors gracefully (2 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs (16 ms)
      ✓ should throw error with invalid encrypted object structure (5 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (60 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (2 ms)
      ✓ should handle invalid inputs gracefully (193 ms)
      ✓ should return false for invalid salt format (64 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (7 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (1 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1416 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/models.test.js (6.628 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (678 ms)
      ✓ should require required fields (327 ms)
      ✓ should enforce unique constraints (610 ms)
      ✓ should handle payment information correctly (341 ms)
    Customer Model
      ✓ should create a valid customer (343 ms)
    Order Model
      ✓ should create a valid order (380 ms)
      ✓ should calculate estimated total correctly (375 ms)
      ✓ should calculate actual total and commission when weight is set (371 ms)
      ✓ should update timestamps for status changes (479 ms)
    Transaction Model
      ✓ should create a valid transaction (356 ms)
      ✓ should validate transaction type (326 ms)
      ✓ should validate transaction status (308 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (352 ms)
      ✓ should validate user type (328 ms)
      ✓ should check if token is expired (375 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (35 ms)
      ✓ should handle errors when fetching public configs (9 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (4 ms)
      ✓ should return 404 for non-existent public config (5 ms)
      ✓ should handle errors when fetching specific config (5 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (4 ms)
      ✓ should filter configurations by category (4 ms)
      ✓ should handle errors when fetching all configs (5 ms)
      ✓ should require authentication (3 ms)
      ✓ should require administrator role (90 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (10 ms)
      ✓ should require system_config permission (82 ms)
      ✓ should handle validation errors (5 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (2 ms)
      ✓ should handle errors during initialization (3 ms)
      ✓ should require authentication and admin role (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/adminIdGeneration.test.js (5.066 s)
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (151 ms)
      ✓ should generate ADM002 when ADM001 exists (248 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (295 ms)
      ✓ should handle non-sequential admin IDs correctly (299 ms)
      ✓ should handle double-digit admin IDs (247 ms)
      ✓ should handle triple-digit admin IDs (223 ms)
      ✓ should handle large admin ID numbers (236 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (106 ms)
      ✓ should handle numbers above 999 without padding issues (107 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (106 ms)
      ✓ should handle edge cases in admin ID parsing (107 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (283 ms)
      ✓ should work correctly with different creation dates (333 ms)
      ✓ should work correctly with different permissions (292 ms)
    Performance and reliability
      ✓ should handle database query efficiently (222 ms)
      ✓ should handle concurrent admin creation scenario (250 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (5 ms)
      ✓ should not have duplicate endpoints across categories
      ✓ should include critical security endpoints
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests (1 ms)
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests (1 ms)
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password (1 ms)
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation (1 ms)
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates (1 ms)
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2 (8 ms)
        ✓ should handle bag management endpoints based on phase (1 ms)
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods (1 ms)
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable (1 ms)
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (2 ms)
      ✓ should handle empty allowed fields array
      ✓ should handle null or undefined objects (1 ms)
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully
      ✓ should not include inherited properties (1 ms)
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array (1 ms)
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role (1 ms)
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (4 ms)
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method
      ✓ should filter response data when _filterType is provided
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (4 ms)
      ✓ should handle empty store IP (1 ms)
      ✓ should load additional IPs from environment
      ✓ should trim whitespace from IPs (1 ms)
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment
      ✓ should handle empty IP ranges (1 ms)
    Session renewal configuration
      ✓ should use default session renewal settings (1 ms)
      ✓ should load custom session renewal settings from environment (1 ms)
      ✓ should handle invalid numeric values (1 ms)
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs
      ✓ should return false for non-whitelisted IPs (2 ms)
      ✓ should check IP ranges (2 ms)
      ✓ should return false for IPs outside ranges (1 ms)
    isInRange function
      ✓ should correctly check IPs in /24 subnet (1 ms)
      ✓ should correctly check IPs in /16 subnet (1 ms)
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host)
      ✓ should correctly check IPs in /0 subnet (all IPs)
      ✓ should handle invalid CIDR notation (1 ms)
      ✓ should handle invalid mask bits (1 ms)
      ✓ should handle invalid IP addresses
      ✓ should handle IP parts out of range (1 ms)
      ✓ should handle edge cases with console error (1 ms)
      ✓ should correctly handle boundary cases
      ✓ should handle various subnet sizes correctly (1 ms)
    Configuration export structure
      ✓ should export all required properties and functions (2 ms)
      ✓ should have correct session renewal properties (4 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (1 ms)
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization
    acquireCallback
      ✓ should acquire callback successfully
      ✓ should return null when no callbacks available
    releaseCallback
      ✓ should release callback successfully (1 ms)
      ✓ should handle null callback gracefully
    getPoolStatus
      ✓ should return pool status with all handler details (3 ms)
      ✓ should handle empty pool
    startCleanupJob
      ✓ should start cleanup interval (2 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (1 ms)
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow
      ✓ should handle concurrent acquire attempts (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (1 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers (1 ms)
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords (2 ms)
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email (1 ms)
        ✓ should reject sequential characters
        ✓ should reject repeated characters (6 ms)
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks
    customPasswordValidator
      ✓ should work as express-validator custom validator (14 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success (1 ms)
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history (1 ms)
      ✓ should return false for password not in history (60 ms)
      ✓ should handle null/undefined history
    getPasswordStrength
      ✓ should return higher scores for stronger passwords (1 ms)
      ✓ should score length appropriately
      ✓ should score character variety
      ✓ should penalize common patterns (1 ms)
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPool.test.js (6.455 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (148 ms)
      ✓ should have default values (151 ms)
      ✓ should have unique constraint on callbackPath (138 ms)
      ✓ should create document with defaults (172 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (211 ms)
        ✓ should increment usage count on each lock (298 ms)
        ✓ should update lastUsedAt timestamp (210 ms)
      release()
        ✓ should release locked callback (258 ms)
        ✓ should handle releasing already unlocked callback (196 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (210 ms)
        ✓ should use least recently used callback (245 ms)
        ✓ should acquire expired locked callback (244 ms)
        ✓ should return null when no callbacks available (240 ms)
        ✓ should increment usage count atomically (227 ms)
      releaseCallback()
        ✓ should release callback by payment token (214 ms)
        ✓ should return null if no callback found with token (170 ms)
        ✓ should only release callback locked by specific token (246 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (270 ms)
        ✓ should not release recently locked callbacks (237 ms)
        ✓ should handle custom timeout values (240 ms)
        ✓ should return 0 when no expired locks (250 ms)
        ✓ should handle empty collection (235 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (185 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (796 ms)
      ✓ should handle invalid ObjectId gracefully (172 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively (1 ms)
      ✓ should sanitize objects recursively
      ✓ should handle null values (1 ms)
      ✓ should handle undefined values
      ✓ should handle numbers
      ✓ should handle booleans
      ✓ should handle deeply nested objects (1 ms)
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters (1 ms)
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (2 ms)
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string (1 ms)
      ✓ should validate complex email formats
    sanitizePhone
      ✓ should keep only allowed characters (1 ms)
      ✓ should remove invalid characters
      ✓ should handle international format (1 ms)
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens (1 ms)
      ✓ should remove special characters
      ✓ should remove spaces
      ✓ should handle script injection attempts (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts (1 ms)
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain
      ✓ should handle complex nested structures (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (344 ms)
      ✓ should handle email sending failures gracefully (119 ms)
      ✓ should return error for invalid customer (53 ms)
      ✓ should return error for invalid affiliate (55 ms)
      ✓ should enforce authorization (55 ms)
    getOrderDetails
      ✓ should return order details for authorized user (53 ms)
      ✓ should return 404 for non-existent order (54 ms)
      ✓ should enforce authorization for customers (54 ms)
    updateOrderStatus
      ✓ should successfully update order status (54 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (54 ms)
      ✓ should send commission email when complete (56 ms)
    cancelOrder
      ✓ should successfully cancel an order (55 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (2 ms)
      ✓ should have unique event names
    logAuditEvent
      ✓ should log basic audit event (1 ms)
      ✓ should add request context when provided
      ✓ should handle customer context (1 ms)
      ✓ should use error level for critical events
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses (1 ms)
      ✓ should include request context in logs (1 ms)
    logLoginAttempt
      ✓ should log successful login (2 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason (1 ms)
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions (1 ms)
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods
      ✓ should not add console transport in production

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminScript.test.js (10.69 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (521 ms)
      ✓ should contain required functionality markers (399 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (610 ms)
      ✓ should calculate next admin ID correctly (662 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (364 ms)
      ✓ should accept strong passwords for admins (813 ms)
    Permission System Validation
      ✓ should validate all permission types (468 ms)
      ✓ should handle partial permission sets (468 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (571 ms)
      ✓ should prevent duplicate emails (545 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (479 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (559 ms)
      ✓ should normalize email addresses (492 ms)
      ✓ should validate email format (755 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (463 ms)
      ✓ should work with password hashing middleware (463 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (364 ms)
      ✓ should handle invalid input gracefully (430 ms)
    Security Considerations
      ✓ should not log or expose passwords (379 ms)
      ✓ should generate secure random passwords when needed (386 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/oAuthSession.test.js (6.77 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (240 ms)
      ✓ should require sessionId field (213 ms)
      ✓ should require result field (200 ms)
      ✓ should automatically set createdAt (232 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (239 ms)
      ✓ should enforce unique sessionId (298 ms)
      ✓ should allow complex result objects (235 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (276 ms)
        ✓ should throw error for duplicate session IDs (315 ms)
        ✓ should handle database errors (208 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (275 ms)
        ✓ should return null for non-existent session (235 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (292 ms)
        ✓ should return null when consuming non-existent session (233 ms)
        ✓ should handle race conditions safely (297 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (451 ms)
        ✓ should return zero deletions when no expired sessions exist (298 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (227 ms)
      ✓ should respect custom expiresAt when provided (242 ms)
    Data Integrity
      ✓ should preserve all data types in result field (245 ms)
      ✓ should handle empty and minimal result objects (369 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (210 ms)
      ✓ should handle very large result objects (307 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (56 ms)
      ✓ should require customerId (58 ms)
      ✓ should require paygistixId (61 ms)
      ✓ should validate type enum (60 ms)
      ✓ should reject invalid type (55 ms)
      ✓ should default type to card (56 ms)
    Card Validation
      ✓ should require card details when type is card (57 ms)
      ✓ should validate card last4 length (66 ms)
      ✓ should validate card brand enum (55 ms)
      ✓ should reject invalid card brand (54 ms)
      ✓ should validate expiry month range (52 ms)
      ✓ should validate expiry year is not in the past (52 ms)
      ✓ should require card fingerprint (53 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (57 ms)
      ✓ should require bank account details when type is bank_account (53 ms)
      ✓ should validate bank account last4 length (54 ms)
      ✓ should validate account type enum (58 ms)
      ✓ should reject invalid account type (54 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (53 ms)
      ✓ should require wallet type when type is wallet (54 ms)
      ✓ should validate wallet type enum (53 ms)
    Default Values
      ✓ should default isDefault to false (55 ms)
      ✓ should default isActive to true (53 ms)
      ✓ should default isVerified to false (53 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (53 ms)
        ✓ should format bank account display name (53 ms)
        ✓ should format wallet display name (55 ms)
        ✓ should handle google_pay formatting (56 ms)
        ✓ should return default for unknown type (52 ms)
      isExpired
        ✓ should return false for non-card types (52 ms)
        ✓ should return false for future expiry (52 ms)
        ✓ should return true for past year (53 ms)
        ✓ should return true for current year past month (52 ms)
        ✓ should return false for current year future month (52 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (52 ms)
        ✓ should not allow use of inactive payment method (53 ms)
        ✓ should not allow use of expired card (53 ms)
        ✓ should not allow use of unverified bank account (52 ms)
        ✓ should allow use of verified bank account (59 ms)
      markAsUsed()
        ✓ should update lastUsedAt (55 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (55 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (64 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (61 ms)
        ✓ should return null if no duplicate found (54 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (52 ms)
    Metadata Field
      ✓ should store metadata as Map (54 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (54 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (56 ms)
      ✓ should require orderId (60 ms)
      ✓ should require customerId (60 ms)
      ✓ should require paymentMethodId (63 ms)
      ✓ should require paygistixId (60 ms)
      ✓ should require amount (67 ms)
      ✓ should validate amount is non-negative (59 ms)
      ✓ should default currency to USD (54 ms)
      ✓ should validate currency enum (54 ms)
      ✓ should reject invalid currency (53 ms)
      ✓ should validate status enum (61 ms)
      ✓ should reject invalid status (54 ms)
      ✓ should default status to pending (52 ms)
    Default Values
      ✓ should default capturedAmount to 0 (52 ms)
      ✓ should default refundedAmount to 0 (52 ms)
      ✓ should default hasDispute to false (54 ms)
      ✓ should have empty refunds array (52 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (52 ms)
      ✓ should handle zero amounts (55 ms)
      ✓ should handle full refund (65 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (53 ms)
        ✓ should allow refund when status is partially_refunded (56 ms)
        ✓ should not allow refund when status is pending (52 ms)
        ✓ should not allow refund when fully refunded (52 ms)
        ✓ should validate refund amount (52 ms)
        ✓ should handle null amount parameter (53 ms)
      canCapture()
        ✓ should allow capture when status is authorized (53 ms)
        ✓ should not allow capture when status is captured (52 ms)
        ✓ should not allow capture when status is pending (53 ms)
      addRefund()
        ✓ should add refund to refunds array (54 ms)
        ✓ should update refundedAmount (53 ms)
        ✓ should update lastRefundAt (53 ms)
        ✓ should set status to partially_refunded for partial refund (53 ms)
        ✓ should set status to refunded for full refund (55 ms)
        ✓ should handle multiple refunds (54 ms)
        ✓ should handle refund that exceeds captured amount (52 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (53 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (55 ms)
        ✓ should accept custom limit (52 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (53 ms)
    Middleware
      ✓ should have pre-save middleware defined (70 ms)
    Refund Schema
      ✓ should validate refund subdocument (58 ms)
      ✓ should require refundId in refund (59 ms)
      ✓ should require amount in refund (56 ms)
      ✓ should validate refund amount is non-negative (55 ms)
      ✓ should set default createdAt for refund (53 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (54 ms)
      ✓ should allow dispute fields when hasDispute is true (53 ms)
      ✓ should validate dispute amount is non-negative (52 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (53 ms)
      ✓ should store response as mixed type (53 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (15 ms)
      ✓ should return 404 when Google OAuth is not configured (5 ms)
      ✓ should handle Google OAuth callback (9 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (4 ms)
      ✓ should return 404 when Facebook OAuth is not configured (4 ms)
      ✓ should handle Facebook OAuth callback (3 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (3 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (2 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (11 ms)
      ✓ should validate required fields for social registration (5 ms)
      ✓ should validate service radius range (5 ms)
      ✓ should validate payment method (6 ms)
    Social Account Linking Route
      ✓ should handle social account linking (8 ms)
      ✓ should validate provider for account linking (4 ms)
      ✓ should require social token for account linking (3 ms)
    Social Login Callback Route
      ✓ should handle social login callback (3 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (3 ms)
      ✓ should handle customer Google OAuth callback redirect (3 ms)
      ✓ should handle customer Facebook callback (3 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (3 ms)
      ✓ should validate service frequency (4 ms)
    Error Handling
      ✓ should handle errors gracefully (27 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (54 ms)
      ✓ should return error when Paygistix is not configured (55 ms)
      ✓ should handle errors gracefully (60 ms)
    logSubmission
      ✓ should log payment submission successfully (54 ms)
      ✓ should handle logging errors (58 ms)
    createPaymentToken
      ✓ should create payment token successfully (53 ms)
      ✓ should handle no available callbacks (52 ms)
      ✓ should handle token creation errors (53 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (54 ms)
      ✓ should handle token not found (53 ms)
      ✓ should handle database errors (53 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (60 ms)
      ✓ should not cancel non-pending tokens (53 ms)
      ✓ should handle token not found (54 ms)
    updatePaymentStatus
      ✓ should update payment status to success (56 ms)
      ✓ should update payment status to failed (54 ms)
    handleFormCallback
      ✓ should process callback successfully (53 ms)
      ✓ should handle no pending payment for callback (53 ms)
      ✓ should handle callback processing errors (53 ms)
    processCallbackResult
      ✓ should process successful payment from query params (53 ms)
      ✓ should process failed payment (54 ms)
      ✓ should handle body parameters (53 ms)
      ✓ should redirect with all parameters (62 ms)
    getPoolStats
      ✓ should return pool statistics (55 ms)
      ✓ should handle stats retrieval errors (55 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (9 ms)
        ✓ should handle success status as well as approved (3 ms)
        ✓ should update existing payment if found (3 ms)
        ✓ should handle customer not found gracefully (3 ms)
        ✓ should handle email send failure gracefully (3 ms)
        ✓ should not update customer if already active (2 ms)
      Failed payment
        ✓ should handle declined payment (3 ms)
        ✓ should handle failed status (9 ms)
        ✓ should increment payment attempts on failure (2 ms)
        ✓ should use default error message when none provided (2 ms)
      Error handling
        ✓ should handle order not found (2 ms)
        ✓ should handle unknown payment status (2 ms)
        ✓ should handle database errors gracefully (2 ms)
        ✓ should handle payment save error (3 ms)
      Edge cases
        ✓ should handle missing amount parameter (2 ms)
        ✓ should handle malformed maskedCard (2 ms)
        ✓ should log callback parameters (2 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (7 ms)
      ✓ should handle POST callback errors (3 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-28T15:36:11.605Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:11.923Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:36:11.924Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-28T16:36:11.924Z","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:11.959Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:11.959Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:12.069Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:12.167Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:12.168Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:36:12.246Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:36:12.304Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T16:36:12.549Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:12.943Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-28T15:36:13.047Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:13.136Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:13.227Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-28T15:36:13.510Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-28T15:36:13.590Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:13.758Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-28T15:36:13.840Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (86 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (89 ms)
      ✓ should delete verifier after retrieval (93 ms)
      ✓ should clean up old PKCE files (77 ms)
    Authorization URL
      ✓ should generate correct authorization URL (80 ms)
      ✓ should use provided state if given (79 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (146 ms)
      ✓ should throw error if PKCE verifier not found (96 ms)
      ✓ should handle token exchange errors (81 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (196 ms)
      ✓ should throw error if no refresh token available (106 ms)
    Access Token Management
      ✓ should return valid access token if not expired (174 ms)
      ✓ should refresh token if expired (114 ms)
      ✓ should throw error if no valid token and no refresh token (106 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (95 ms)
      ✓ should handle envelope creation errors (93 ms)
      ✓ should return mock envelope in test mode (96 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (88 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (112 ms)
      ✓ should reject invalid webhook signature (81 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (79 ms)
      ✓ should handle declined envelope (89 ms)
    Envelope Status
      ✓ should get envelope status (79 ms)
    Document Download
      ✓ should download completed W9 document (81 ms)
    Envelope Voiding
      ✓ should void an envelope (82 ms)

(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (10 ms)
      ✓ should export vendors as CSV (3 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully
    exportPaymentSummary
      ✓ should export payment summary as JSON (2 ms)
      ✓ should export payment summary as CSV (2 ms)
      ✓ should return 400 when dates are missing
      ✓ should return 404 when no payable commissions found
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (1 ms)
      ✓ should return 400 when required parameters are missing
      ✓ should return 404 when affiliate not found (1 ms)
      ✓ should return 400 when affiliate has no verified W-9
    getExportHistory
      ✓ should get export history (1 ms)
      ✓ should filter by type

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (3 ms)
        ✓ should accept passwords with 8 or more characters
      Character Type Requirements
        ✓ should require at least one uppercase letter (1 ms)
        ✓ should require at least one lowercase letter
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (1 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers (1 ms)
        ✓ should reject passwords with sequential letters
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters
        ✓ should accept passwords with acceptable repeated characters (1 ms)
      Username/Email Inclusion Check
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history (1 ms)
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores (6 ms)
      ✓ should return correct strength labels (1 ms)
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history (1 ms)
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function
      ✓ should validate passwords correctly in express-validator context
      ✓ should throw for invalid passwords in express-validator context (17 ms)
      ✓ should include admin-specific validation when userType is admin
      ✓ should include admin-specific validation when userType is operator (1 ms)
    passwordValidationMiddleware
      ✓ should call next() for valid passwords (1 ms)
      ✓ should return 400 error for invalid passwords
      ✓ should skip validation if no password in request (1 ms)
      ✓ should include strength assessment in response for invalid passwords
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully (1 ms)
      ✓ should handle very long passwords
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administrator.test.js (7.845 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (202 ms)
      ✓ should require all mandatory fields (104 ms)
      ✓ should enforce email format validation (183 ms)
      ✓ should enforce unique email constraint (540 ms)
      ✓ should enforce unique adminId constraint (520 ms)
      ✓ should validate permission enum values (135 ms)
      ✓ should accept valid permissions (176 ms)
      ✓ should trim whitespace from string fields (179 ms)
      ✓ should convert email to lowercase (169 ms)
      ✓ should not allow role to be changed after creation (228 ms)
    Password Handling
      ✓ should store password as hash and salt (200 ms)
      ✓ should verify correct password (258 ms)
      ✓ should reject incorrect password (275 ms)
      ✓ should not expose password in JSON output (193 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (244 ms)
      ✓ should lock account after 5 failed attempts (229 ms)
      ✓ should reset login attempts on successful login (227 ms)
      ✓ should reset attempts if lock has expired (229 ms)
      ✓ should correctly identify locked accounts (172 ms)
    Password Reset
      ✓ should generate password reset token (166 ms)
      ✓ should set password reset expiry to 30 minutes (171 ms)
    Permissions
      ✓ should check single permission correctly (179 ms)
      ✓ should check multiple permissions with AND operation (171 ms)
      ✓ should check multiple permissions with OR operation (163 ms)
      ✓ should set default permissions if none provided (172 ms)
    Static Methods
      ✓ should find active administrators (308 ms)
      ✓ should find administrator by email with password (207 ms)
      ✓ should handle case-insensitive email search (218 ms)
      ✓ should return null for non-existent email (108 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (167 ms)
      ✓ should update updatedAt on modification (302 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (269 ms)
      ✓ should not override provided admin ID (190 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/generalPaymentCallback.test.js
  General Payment Callback Routes
    GET /
      Registration Payment
        ✓ should redirect to success page on approved registration payment (7 ms)
        ✓ should redirect to success page on success status (4 ms)
        ✓ should redirect to register page with error on failed registration payment (3 ms)
        ✓ should handle missing response message on failure (2 ms)
        ✓ should handle registration payment callback errors (2 ms)
      Order Payment
        ✓ should handle approved order payment successfully (5 ms)
        ✓ should handle success status for order payment (3 ms)
        ✓ should update existing payment record (2 ms)
        ✓ should handle declined order payment (2 ms)
        ✓ should handle failed order payment (2 ms)
        ✓ should handle unknown payment status (3 ms)
        ✓ should handle order not found (2 ms)
        ✓ should handle missing orderId in query (2 ms)
        ✓ should handle email service failure gracefully (3 ms)
        ✓ should skip customer update if customer not found (2 ms)
        ✓ should not update already active customer (2 ms)
        ✓ should handle payment callback errors (2 ms)
        ✓ should use order amount if payment amount not provided (2 ms)
        ✓ should handle partial masked card (2 ms)
        ✓ should handle missing masked card (9 ms)
      General error handling
        ✓ should handle general callback errors (2 ms)
    POST /
      Registration Payment
        ✓ should create customer on approved registration payment with session (9 ms)
        ✓ should handle success status for registration (5 ms)
        ✓ should handle customer creation error (3 ms)
        ✓ should handle no pending registration (6 ms)
        ✓ should handle declined registration payment (5 ms)
        ✓ should handle failed registration payment without message (3 ms)
      Order Payment POST
        ✓ should acknowledge order payment callback (4 ms)
        ✓ should handle order payment with explicit type (3 ms)
      General POST error handling
        ✓ should handle POST callback errors (37 ms)
        ✓ should log POST callback data (17 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:822:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:365:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      843 |     });
      844 |   } catch (error) {
    > 845 |     console.error('Token verification error:', error);
          |             ^
      846 |     res.status(500).json({
      847 |       success: false,
      848 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:845:13)
      at Object.verifyToken (tests/unit/authController.test.js:365:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (2 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password (1 ms)
    customerLogin
      ✓ should successfully login a customer with valid credentials (27 ms)
      ✓ should return 401 for non-existent customer
      ✓ should login customer using emailOrUsername field (2 ms)
      ✓ should prioritize emailOrUsername over username field (2 ms)
      ✓ should return error when neither username nor emailOrUsername provided (1 ms)
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (39 ms)
      ✓ should return customer user data (1 ms)
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account (1 ms)
      ✓ should handle inactive administrator
    operatorLogin
      ✓ should successfully login operator with PIN (1 ms)
      ✓ should increment login attempts on failure (1 ms)
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate
      ✓ should handle non-existent email gracefully (1 ms)
    resetPassword
      ✓ should reset password with valid token (6 ms)
      ✓ should reject expired token (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles (1 ms)
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources (1 ms)
      ✓ should reject operator accessing administrator resources (1 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present
      ✓ should accept when user has access to all required roles (1 ms)
      ✓ should reject when user lacks access to any required role (1 ms)
      ✓ should accept admin for any combination of roles
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params (1 ms)
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource
      ✓ should reject affiliate access to another affiliate resource (1 ms)
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator (1 ms)
      ✓ should reject when administrator not found (10 ms)
      ✓ should reject when administrator is not active (2 ms)
      ✓ should accept when administrator has required permission
      ✓ should handle array of required permissions (1 ms)
      ✓ should reject when administrator lacks any required permission
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found
      ✓ should reject when operator is not active (1 ms)
      ✓ should reject when operator is not on shift
      ✓ should accept active operator on shift (1 ms)
      ✓ should handle database errors
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role (1 ms)
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions (1 ms)
      ✓ should handle nested field permissions
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields (1 ms)
      ✓ should handle non-object data gracefully
      ✓ should handle empty allowed fields (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-28T15:36:29.734Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1055 |             await OAuthSession.createSession(sessionId, message);
      1056 |           } catch (dbError) {
    > 1057 |             console.error('Error storing OAuth session:', dbError);
           |                     ^
      1058 |           }
      1059 |         }
      1060 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:1057:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1515:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1577:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T15:36:30.278Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T15:36:30.906Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T15:36:31.274Z","userType":"customer"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:581:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1487 |
      1488 |   } catch (error) {
    > 1489 |     console.error('OAuth session polling error:', error);
           |             ^
      1490 |     res.status(500).json({
      1491 |       success: false,
      1492 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1489:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:583:7)

PASS tests/unit/authControllerEnhanced.test.js (5.963 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (343 ms)
      ✓ should handle customer context from state parameter (175 ms)
      ✓ should handle missing user data gracefully (192 ms)
      ✓ should handle OAuth session creation errors (198 ms)
      ✓ should extract profile data correctly for different providers (157 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (159 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (191 ms)
      ✓ should sanitize social data and reject if fields become empty (157 ms)
      ✓ should check for existing email and username (156 ms)
      ✓ should check for existing social account (154 ms)
      ✓ should generate unique username from social data (156 ms)
      ✓ should handle JWT verification errors (154 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (213 ms)
      ✓ should validate affiliate existence (153 ms)
      ✓ should sanitize customer social data (154 ms)
    pollOAuthSession
      ✓ should return complete session data when available (169 ms)
      ✓ should return social-auth-login session data (156 ms)
      ✓ should return social-auth-error session data (155 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (157 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (159 ms)
      ✓ should return pending status when session not ready (155 ms)
      ✓ should handle database errors gracefully (175 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (169 ms)
      ✓ should handle database connection errors (154 ms)
      ✓ should handle missing required fields in social data (157 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (5 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (2 ms)
      ✓ should not configure Facebook strategy without credentials (1 ms)
      ✓ should configure LinkedIn strategy when credentials are present (1 ms)
    Google OAuth Strategy
      ✓ should handle database errors (2 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (2 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data (2 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (2 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (2 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (2 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (1 ms)
      ✓ should handle Facebook error (2 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should link LinkedIn account to existing affiliate (2 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (1 ms)
      ✓ should serialize user with socialId (5 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (1 ms)

(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (59 ms)
      ✓ should generate exportId automatically (59 ms)
      ✓ should require type field (58 ms)
      ✓ should validate type enum values (67 ms)
      ✓ should reject invalid type values (56 ms)
      ✓ should require generatedBy field (62 ms)
    Period Fields
      ✓ should store period dates for payment summary (54 ms)
      ✓ should store period dates for commission detail (56 ms)
    Export Data
      ✓ should store vendor export data (56 ms)
      ✓ should store payment summary data (56 ms)
      ✓ should store commission detail data (55 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (53 ms)
      ✓ should store single affiliate ID for commission detail (54 ms)
      ✓ should allow empty affiliate IDs array (55 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (58 ms)
    Indexes
      ✓ should have required indexes defined (56 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (58 ms)
      ✓ should handle payment summary export type correctly (56 ms)
      ✓ should handle commission detail export type correctly (65 ms)
    Export ID Generation
      ✓ should generate unique export IDs (55 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (56 ms)
      ✓ should accept valid ObjectId for generatedBy (55 ms)
    Instance Methods
      markDownloaded()
        ✓ should mark export as downloaded (184 ms)
        ✓ should increment download count on multiple downloads (234 ms)
        ✓ should not change status if already downloaded (196 ms)
        ✓ should update downloadedAt timestamp (187 ms)
      updateImportStatus()
        ✓ should update import status to success (175 ms)
        ✓ should update import status to failed (174 ms)
        ✓ should handle partial import status (180 ms)
    Static Methods
      findByPeriod()
        ✓ should find exports within period (154 ms)
        ✓ should filter by type when specified (152 ms)
        ✓ should return empty array when no matches (148 ms)
        ✓ should sort by generatedAt descending (183 ms)
      existsForPeriod()
        ✓ should find existing export for period (152 ms)
        ✓ should not find export for different period (152 ms)
        ✓ should exclude failed exports (180 ms)
        ✓ should find export with non-failed status (193 ms)
    Virtual Properties
      ageInDays
        ✓ should calculate age in days correctly (88 ms)
        ✓ should return 1 for exports created today (90 ms)
        ✓ should handle exports created in the past correctly (55 ms)
        ✓ should update as time passes (57 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/systemConfig.test.js (8.158 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (146 ms)
      ✓ should require mandatory fields (107 ms)
      ✓ should enforce unique key constraint (338 ms)
      ✓ should validate category enum (79 ms)
      ✓ should validate dataType enum (87 ms)
      ✓ should accept all valid categories (396 ms)
      ✓ should accept all valid data types (235 ms)
      ✓ should trim string fields (111 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (78 ms)
        ✓ should enforce minimum value validation (79 ms)
        ✓ should enforce maximum value validation (86 ms)
        ✓ should accept valid number within range (111 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (111 ms)
        ✓ should accept boolean values (113 ms)
      String validation
        ✓ should reject non-string values for string dataType (81 ms)
        ✓ should enforce regex validation (79 ms)
        ✓ should accept valid string matching regex (115 ms)
      Array validation
        ✓ should reject non-array values for array dataType (80 ms)
        ✓ should accept array values (112 ms)
      Object validation
        ✓ should reject non-object values for object dataType (78 ms)
        ✓ should reject arrays for object dataType (80 ms)
        ✓ should accept object values (113 ms)
      Allowed values validation
        ✓ should enforce allowed values (80 ms)
        ✓ should accept allowed values (117 ms)
    Static Methods
      getValue
        ✓ should return config value (140 ms)
        ✓ should return defaultValue when value is undefined (140 ms)
        ✓ should return provided default when config not found (104 ms)
        ✓ should return null when config not found and no default provided (114 ms)
      setValue
        ✓ should update config value (170 ms)
        ✓ should throw error for non-existent config (105 ms)
        ✓ should throw error for non-editable config (135 ms)
        ✓ should update updatedBy when provided (182 ms)
        ✓ should validate new value according to dataType (141 ms)
      getByCategory
        ✓ should return all configs for a category (150 ms)
        ✓ should return only public configs when specified (145 ms)
        ✓ should return empty array for non-existent category (145 ms)
        ✓ should sort by key (177 ms)
      getPublicConfigs
        ✓ should return only public configs (148 ms)
        ✓ should sort by category then key (146 ms)
      initializeDefaults
        ✓ should create default configurations (518 ms)
        ✓ should not overwrite existing configurations (478 ms)
        ✓ should add missing configurations (482 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (114 ms)
      ✓ should update updatedAt on modification (240 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (115 ms)
      ✓ should use defaultValue when value is undefined (108 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (115 ms)
      ✓ should handle empty validation object (114 ms)
      ✓ should skip validation when value is not modified (142 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/operator.test.js (10.828 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (205 ms)
      ✓ should require all mandatory fields (87 ms)
      ✓ should enforce email format validation (99 ms)
      ✓ should enforce unique email constraint (630 ms)
      ✓ should enforce unique username constraint (645 ms)
      ✓ should validate username format (78 ms)
      ✓ should validate shift time format (99 ms)
      ✓ should accept valid shift times (169 ms)
      ✓ should enforce quality score range (78 ms)
      ✓ should trim whitespace from string fields (165 ms)
      ✓ should convert email and username to lowercase (171 ms)
      ✓ should not allow role to be changed after creation (223 ms)
    Password Handling
      ✓ should hash password on save (200 ms)
      ✓ should verify correct password (261 ms)
      ✓ should reject incorrect password (261 ms)
      ✓ should not expose password in JSON output (181 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (230 ms)
      ✓ should lock account after 5 failed attempts (463 ms)
      ✓ should lock for 30 minutes (457 ms)
      ✓ should reset login attempts on successful login (297 ms)
      ✓ should reset attempts if lock has expired (274 ms)
      ✓ should correctly identify locked accounts (169 ms)
    Password Reset
      ✓ should generate password reset token (80 ms)
      ✓ should set password reset expiry to 30 minutes (80 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (80 ms)
        ✓ should correctly identify operator on shift during normal hours (79 ms)
        ✓ should correctly identify operator off shift (78 ms)
        ✓ should handle overnight shifts correctly (79 ms)
    Processing Statistics
      ✓ should update processing stats correctly (202 ms)
      ✓ should handle first order processing (195 ms)
      ✓ should update quality score with passing result (194 ms)
      ✓ should update quality score with failing result (201 ms)
    Static Methods
      findActive
        ✓ should find only active operators (291 ms)
      findOnShift
        ✓ should find only operators on shift (322 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (193 ms)
        ✓ should handle case-insensitive email search (203 ms)
        ✓ should return null for non-existent email (114 ms)
      findAvailableOperators
        ✓ should find operators with low order count (286 ms)
        ✓ should sort by current order count (292 ms)
        ✓ should respect limit parameter (1023 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (174 ms)
      ✓ should update updatedAt on modification (301 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (270 ms)
      ✓ should not override provided operator ID (170 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

PASS tests/unit/w9ControllerDocuSign.test.js (7.835 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (153 ms)
      ✓ should return authorization URL if no valid token (131 ms)
      ✓ should handle service errors (111 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (123 ms)
      ✓ should handle missing authorization code (122 ms)
      ✓ should handle missing state parameter (116 ms)
      ✓ should display error page on token exchange failure (119 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (217 ms)
      ✓ should return existing envelope if one is in progress (180 ms)
      ✓ should require DocuSign authorization if no valid token (143 ms)
      ✓ should handle affiliate not found (167 ms)
      ✓ should handle envelope creation errors (154 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (737 ms)
      ✓ should handle mismatched envelope ID (183 ms)
      ✓ should handle affiliate with no W9 information (207 ms)
      ✓ should return local status if DocuSign API fails (170 ms)
      ✓ should clear envelope ID if declined (233 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (246 ms)
      ✓ should reject webhook with invalid signature (120 ms)
      ✓ should handle affiliate not found (149 ms)
      ✓ should process completed W9 without downloading document (231 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (116 ms)
      ✓ should return authorized false if no valid token (113 ms)
      ✓ should handle service errors (116 ms)
    Get W9 Signing Status
      ✓ should return W9 status for affiliate (126 ms)
      ✓ should include tax info for verified W9 (119 ms)
      ✓ should check DocuSign status for in-progress envelopes (120 ms)
      ✓ should handle affiliate not found (117 ms)
      ✓ should handle errors gracefully (121 ms)
    Cancel W9 Signing
      ✓ should cancel W9 signing successfully (210 ms)
      ✓ should handle no W9 signing in progress (153 ms)
      ✓ should handle affiliate not found (115 ms)
      ✓ should handle void envelope errors (145 ms)
    Resend W9 Request
      ✓ should resend W9 request successfully (152 ms)
      ✓ should handle affiliate not found (119 ms)
      ✓ should continue if voiding existing envelope fails (179 ms)
      ✓ should handle envelope creation errors (123 ms)
    Send W9 To Affiliate
      ✓ should send W9 to affiliate successfully (149 ms)
      ✓ should handle affiliate not found (118 ms)
      ✓ should prevent sending to affiliate with verified W9 (118 ms)
      ✓ should prevent sending to affiliate with submitted W9 (118 ms)
      ✓ should handle authorization errors (118 ms)
      ✓ should handle template configuration errors (116 ms)
      ✓ should handle general errors (125 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (3 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (33 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle decryption errors gracefully (12 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (2 ms)
      ✓ should handle password change
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options (1 ms)
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (2 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (5 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate (1 ms)
    Error handling
      ✓ should handle database connection errors (2 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:54:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2255:70)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1073:9)

      2261 |     });
      2262 |   } catch (error) {
    > 2263 |     console.error('Error updating operator profile:', error);
           |             ^
      2264 |     res.status(500).json({
      2265 |       success: false,
      2266 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2263:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1073:9)

  console.error
    Error fetching administrators: Error: Connection timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1088:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1091:7)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query (1 ms)
        ✓ should handle database errors (73 ms)
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId (1 ms)
      createAdministrator
        ✓ should create new administrator with valid data (57 ms)
        ✓ should return validation errors (1 ms)
        ✓ should handle duplicate email error
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ✓ should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (1 ms)
        ✓ should prevent self-deletion (1 ms)
        ✓ should prevent deletion of last administrator
      resetAdministratorPassword
        ✓ should reset administrator password (59 ms)
        ✓ should handle email sending failure (55 ms)
      getPermissions
        ✓ should return all available permissions (1 ms)
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ✓ should reset operator password and send email (1 ms)
      resetOperatorPin
        ✓ should reset operator PIN
        ✓ should validate PIN format (1 ms)
      deleteOperator
        ✓ should delete operator permanently (1 ms)
      getAvailableOperators
        ✓ should get available operators for assignment
      updateOperatorStats
        ✓ should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ✓ should get operator analytics with date range (1 ms)
        ✓ should handle missing date range (1 ms)
      getAffiliateAnalytics
        ✓ should get affiliate analytics (1 ms)
      exportReport
        ✓ should export report as CSV
        ✓ should export report as JSON (1 ms)
        ✓ should reject invalid report type
    Operator Self-Management
      getOperatorSelf
        ✓ should get current operator profile
        ✓ should handle non-operator users (1 ms)
      updateOperatorSelf
        ✓ should allow operator to update own profile (1 ms)
        ✓ should prevent changing restricted fields (10 ms)
    Error Handling
      ✓ should handle database connection errors (2 ms)
      ✓ should handle validation errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

  console.error
    Get customer dashboard stats error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:688:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      498 |     });
      499 |   } catch (error) {
    > 500 |     console.error('Get customer dashboard stats error:', error);
          |             ^
      501 |     res.status(500).json({
      502 |       success: false,
      503 |       message: 'An error occurred while retrieving dashboard statistics'

      at Object.error [as getCustomerDashboardStats] (server/controllers/customerController.js:500:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:690:7)

  console.error
    Update payment info error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:792:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      552 |     });
      553 |   } catch (error) {
    > 554 |     console.error('Update payment info error:', error);
          |             ^
      555 |     res.status(500).json({
      556 |       success: false,
      557 |       message: 'An error occurred while updating payment information'

      at Object.error [as updatePaymentInfo] (server/controllers/customerController.js:554:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:794:7)

  console.error
    Update customer password error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:957:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      682 |     });
      683 |   } catch (error) {
    > 684 |     console.error('Update customer password error:', error);
          |             ^
      685 |     res.status(500).json({
      686 |       success: false,
      687 |       message: 'An error occurred while updating password'

      at Object.error [as updateCustomerPassword] (server/controllers/customerController.js:684:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:959:7)

  console.error
    Get customers for admin error: TypeError: Cannot read properties of undefined (reading 'search')
        at Object.search [as getCustomersForAdmin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/customerController.js:702:19)
        at Object.getCustomersForAdmin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1192:32)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      779 |     });
      780 |   } catch (error) {
    > 781 |     console.error('Get customers for admin error:', error);
          |             ^
      782 |     res.status(500).json({
      783 |       success: false,
      784 |       message: 'Failed to retrieve customers'

      at Object.error [as getCustomersForAdmin] (server/controllers/customerController.js:781:13)
      at Object.getCustomersForAdmin (tests/unit/customerController.test.js:1192:32)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Customer registration error: Error: Database save failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1259:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |     });
      153 |   } catch (error) {
    > 154 |     console.error('Customer registration error:', error);
          |             ^
      155 |     res.status(500).json({
      156 |       success: false,
      157 |       message: 'An error occurred during registration'

      at Object.error [as registerCustomer] (server/controllers/customerController.js:154:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:1278:7)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST999

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (14 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (1 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer (1 ms)
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (9 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (3 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (23 ms)
      ✓ should return 404 for non-existent customer
    getCustomerDashboardStats
      ✓ should return dashboard stats for authorized customer (1 ms)
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should allow affiliate access to their customer dashboard (1 ms)
      ✓ should handle database errors gracefully (2 ms)
    updatePaymentInfo
      ✓ should successfully update payment information (1 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access
      ✓ should allow admin to update customer payment info (1 ms)
      ✓ should handle database errors (2 ms)
    updateCustomerPassword
      ✓ should successfully update password (1 ms)
      ✓ should reject incorrect current password
      ✓ should validate new password length (1 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should handle missing new password
      ✓ should handle database errors (2 ms)
    getCustomersForAdmin
      ✓ should return all customers for admin (2 ms)
      ✓ should filter customers by search query
      ✓ should filter customers by affiliate
      ✓ should filter customers by active status
      ✓ should filter customers by inactive status (1 ms)
      ✓ should filter new customers with no orders
      ✓ should handle combined filters (1 ms)
      ✓ should handle database errors (17 ms)
      ✓ should ignore "all" filter values (1 ms)
    validation errors
      ✓ should return validation errors for registerCustomer (1 ms)
    error handling for registration
      ✓ should handle database save errors during registration (3 ms)
      ✓ should handle missing payment info gracefully (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1068:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1595:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)
      at Object.<anonymous> (tests/unit/operatorController.test.js:1597:7)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getOrderQueue
      ✓ should return available orders for operator workstation (1 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed
      ✓ should fail if order not found
      ✓ should handle database error during claim
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition
      ✓ should handle order not found
      ✓ should handle unauthorized operator
      ✓ should update workstation when washing status with new workstation (1 ms)
      ✓ should set processingCompleted when status is ready
      ✓ should handle database error (1 ms)
    performQualityCheck
      ✓ should record quality check results
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check (1 ms)
    getMyOrders
      ✓ should return orders assigned to operator
    updateShiftStatus
      ✓ should update operator shift status
      ✓ should handle operator not found
      ✓ should end shift successfully (1 ms)
      ✓ should handle database error
    getPerformanceStats
      ✓ should return operator performance statistics (1 ms)
    getCustomerDetails
      ✓ should return customer details for an order (1 ms)
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getOrderQueue (1 ms)
      ✓ should handle different filters in getOrderQueue
      ✓ should handle operator at max capacity in claimOrder (1 ms)
      ✓ should handle quality check failure in performQualityCheck
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift
      ✓ should handle different time periods in getPerformanceStats (1 ms)
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails (6 ms)
      ✓ should handle filters in getMyOrders (1 ms)
    scanCustomer
      ✓ should scan customer and return current order (1 ms)
      ✓ should handle customer not found
    scanBag
      ✓ should redirect to scanCustomer
      ✓ should handle error in scanBag (34 ms)
    receiveOrder
      ✓ should receive order and update status (1 ms)
      ✓ should handle order not found (1 ms)
    markBagProcessed
      ✓ should mark bag as processed
      ✓ should update order status when all bags processed (132 ms)
    confirmPickup
      ✓ should confirm pickup and complete order (1 ms)
      ✓ should handle partial pickup
    getTodayStats
      ✓ should return today's operator statistics (1 ms)
      ✓ should handle no orders for today
    getWorkstationStatus
      ✓ should return workstation status for all workstations (1 ms)
      ✓ should handle database error (1 ms)
    Additional coverage tests
      ✓ should handle error in getMyOrders
      ✓ should handle different performance stat periods
      ✓ should handle error in getPerformanceStats
      ✓ should handle error in getCustomerDetails (9 ms)
      ✓ should handle no active order in scanCustomer
      ✓ should handle different scan actions in scanCustomer (1 ms)
      ✓ should handle affiliate lookup in scanCustomer (1 ms)
      ✓ should handle error in scanCustomer (8 ms)
      ✓ should handle error in receiveOrder
      ✓ should handle order not found in markBagProcessed (1 ms)
      ✓ should handle error in markBagProcessed
      ✓ should handle order not found in confirmPickup
      ✓ should handle error in confirmPickup
      ✓ should handle error in getTodayStats
      ✓ should handle markOrderReady (deprecated function) (1 ms)
      ✓ should handle markOrderReady with affiliate notification
      ✓ should handle errors in markOrderReady (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:375:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:378:7)

  console.error
    Error fetching administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:809:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |
      110 |   } catch (error) {
    > 111 |     console.error('Error fetching administrator:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'Failed to fetch administrator'

      at Object.error [as getAdministratorById] (server/controllers/administratorController.js:111:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:812:7)

  console.error
    Error changing administrator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:924:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      544 |
      545 |   } catch (error) {
    > 546 |     console.error('Error changing administrator password:', error);
          |             ^
      547 |     res.status(500).json({
      548 |       success: false,
      549 |       message: 'Failed to change password'

      at Object.error [as changeAdministratorPassword] (server/controllers/administratorController.js:546:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:927:7)

  console.error
    Error fetching operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:991:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      849 |
      850 |   } catch (error) {
    > 851 |     console.error('Error fetching operator:', error);
          |             ^
      852 |     res.status(500).json({
      853 |       success: false,
      854 |       message: 'Failed to fetch operator details'

      at Object.error [as getOperatorById] (server/controllers/administratorController.js:851:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:994:7)

  console.error
    Error resetting operator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1057:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1034 |
      1035 |   } catch (error) {
    > 1036 |     console.error('Error resetting operator password:', error);
           |             ^
      1037 |     res.status(500).json({
      1038 |       success: false,
      1039 |       message: 'Failed to reset operator password'

      at Object.error [as resetOperatorPassword] (server/controllers/administratorController.js:1036:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1059:7)

  console.error
    Error fetching operator analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1112:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1510 |
      1511 |   } catch (error) {
    > 1512 |     console.error('Error fetching operator analytics:', error);
           |             ^
      1513 |     res.status(500).json({
      1514 |       success: false,
      1515 |       message: 'Failed to fetch operator analytics'

      at Object.error [as getOperatorAnalytics] (server/controllers/administratorController.js:1512:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1114:7)

  console.error
    Error fetching affiliate analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1166:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1612 |
      1613 |   } catch (error) {
    > 1614 |     console.error('Error fetching affiliate analytics:', error);
           |             ^
      1615 |     res.status(500).json({
      1616 |       success: false,
      1617 |       message: 'Failed to fetch affiliate analytics'

      at Object.error [as getAffiliateAnalytics] (server/controllers/administratorController.js:1614:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1168:7)

  console.error
    Error exporting report: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1288:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1677 |
      1678 |   } catch (error) {
    > 1679 |     console.error('Error exporting report:', error);
           |             ^
      1680 |     res.status(500).json({
      1681 |       success: false,
      1682 |       message: 'Failed to export report'

      at Object.error [as exportReport] (server/controllers/administratorController.js:1679:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1291:7)

  console.error
    Error fetching affiliates list: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1334:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1730 |     });
      1731 |   } catch (error) {
    > 1732 |     console.error('Error fetching affiliates list:', error);
           |             ^
      1733 |     res.status(500).json({
      1734 |       success: false,
      1735 |       message: 'Failed to fetch affiliates list',

      at Object.error [as getAffiliatesList] (server/controllers/administratorController.js:1732:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1337:7)

  console.error
    Error updating operator stats: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1515:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2080 |     });
      2081 |   } catch (error) {
    > 2082 |     console.error('Error updating operator stats:', error);
           |             ^
      2083 |     res.status(500).json({
      2084 |       success: false,
      2085 |       message: 'An error occurred while updating operator statistics'

      at Object.error [as updateOperatorStats] (server/controllers/administratorController.js:2082:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1517:7)

  console.error
    Error getting available operators: TypeError: Operator.find(...).sort(...).limit is not a function
        at Object.limit [as getAvailableOperators] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2103:8)
        at Object.getAvailableOperators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1565:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2109 |     });
      2110 |   } catch (error) {
    > 2111 |     console.error('Error getting available operators:', error);
           |             ^
      2112 |     res.status(500).json({
      2113 |       success: false,
      2114 |       message: 'An error occurred while fetching available operators'

      at Object.error [as getAvailableOperators] (server/controllers/administratorController.js:2111:13)
      at Object.getAvailableOperators (tests/unit/administratorController.test.js:1565:37)

  console.error
    Error deleting operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1619:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2159 |     });
      2160 |   } catch (error) {
    > 2161 |     console.error('Error deleting operator:', error);
           |             ^
      2162 |     res.status(500).json({
      2163 |       success: false,
      2164 |       message: 'An error occurred while deleting the operator'

      at Object.error [as deleteOperator] (server/controllers/administratorController.js:2161:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1621:7)

  console.error
    Error resetting operator PIN: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1679:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2207 |     });
      2208 |   } catch (error) {
    > 2209 |     console.error('Error resetting operator PIN:', error);
           |             ^
      2210 |     res.status(500).json({
      2211 |       success: false,
      2212 |       message: 'An error occurred while resetting the PIN'

      at Object.error [as resetOperatorPin] (server/controllers/administratorController.js:2209:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1681:7)

  console.error
    Error fetching environment variables: TypeError: Cannot read properties of undefined (reading 'DEFAULT_ADMIN_EMAIL')
        at Object.DEFAULT_ADMIN_EMAIL [as getEnvironmentVariables] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2402:56)
        at Object.getEnvironmentVariables (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1727:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2443 |
      2444 |   } catch (error) {
    > 2445 |     console.error('Error fetching environment variables:', error);
           |             ^
      2446 |     res.status(500).json({
      2447 |       success: false,
      2448 |       message: 'Failed to fetch environment variables'

      at Object.error [as getEnvironmentVariables] (server/controllers/administratorController.js:2445:13)
      at Object.getEnvironmentVariables (tests/unit/administratorController.test.js:1727:37)

  console.error
    Error updating administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1847:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      313 |
      314 |   } catch (error) {
    > 315 |     console.error('Error updating administrator:', error);
          |             ^
      316 |     res.status(500).json({
      317 |       success: false,
      318 |       message: 'Failed to update administrator'

      at Object.error [as updateAdministrator] (server/controllers/administratorController.js:315:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1850:7)

  console.error
    Error deleting administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1884:44)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      385 |
      386 |   } catch (error) {
    > 387 |     console.error('Error deleting administrator:', error);
          |             ^
      388 |     res.status(500).json({
      389 |       success: false,
      390 |       message: 'Failed to delete administrator'

      at Object.error [as deleteAdministrator] (server/controllers/administratorController.js:387:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1886:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (2 ms)
      ✓ should handle errors (40 ms)
    createAdministrator
      ✓ should create administrator
      ✓ should handle validation errors (1 ms)
    updateAdministrator
      ✓ should update administrator
      ✓ should prevent self-deactivation (1 ms)
    deleteAdministrator
      ✓ should delete administrator
      ✓ should prevent self-deletion (1 ms)
    resetAdministratorPassword
      ✓ should reset password
    Operator Management
      ✓ createOperator should create new operator (1 ms)
      ✓ getOperators should return operators list (15 ms)
      ✓ updateOperator should update operator details (1 ms)
      ✓ deactivateOperator should deactivate operator (1 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (1 ms)
      ✓ getOrderAnalytics should return order analytics (1 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (1 ms)
      ✓ updateSystemConfig should update configuration (1 ms)
    getPermissions
      ✓ should return available permissions
    getAdministratorById
      ✓ should get administrator by id (1 ms)
      ✓ should handle not found
      ✓ should handle errors (3 ms)
    changeAdministratorPassword
      ✓ should change password successfully (1 ms)
      ✓ should reject incorrect current password
      ✓ should validate new password strength (1 ms)
      ✓ should handle errors (2 ms)
    getOperatorById
      ✓ should get operator by id (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    resetOperatorPassword
      ✓ should reset operator password (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    getOperatorAnalytics
      ✓ should get operator analytics
      ✓ should handle errors (3 ms)
    getAffiliateAnalytics
      ✓ should get affiliate analytics
      ✓ should handle errors (2 ms)
    exportReport
      ✓ should export orders report (1 ms)
      ✓ should export operators report (1 ms)
      ✓ should handle invalid report type
      ✓ should handle errors (3 ms)
    getAffiliatesList
      ✓ should get affiliates list (1 ms)
      ✓ should handle errors (3 ms)
    getSystemHealth
      ✓ should get system health status
      ✓ should handle database connection issues (1 ms)
      ✓ should handle errors (1 ms)
    updateOperatorStats
      ✓ should update operator stats with processing time
      ✓ should handle operator not found (11 ms)
      ✓ should validate processing time (1 ms)
      ✓ should handle errors (2 ms)
    getAvailableOperators
      ✓ should get available operators (1 ms)
      ✓ should handle errors (26 ms)
    deleteOperator
      ✓ should delete operator
      ✓ should prevent deletion with active orders (1 ms)
      ✓ should handle errors (2 ms)
    resetOperatorPin
      ✓ should reset operator PIN (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    getEnvironmentVariables
      ✓ should get environment variables (1 ms)
      ✓ should handle errors (3 ms)
    Additional coverage for getAdministrators
      ✓ should handle search with active filter (1 ms)
    Additional coverage for createAdministrator
      ✓ should handle duplicate email (3 ms)
      ✓ should handle password validation failure (1 ms)
    Additional coverage for updateAdministrator
      ✓ should handle administrator not found
      ✓ should handle database errors (3 ms)
    Additional coverage for deleteAdministrator
      ✓ should prevent deleting last super admin (1 ms)
      ✓ should handle database errors (2 ms)
    Additional coverage for resetAdministratorPassword
      ✓ should handle admin not found (1 ms)
      ✓ should handle weak password

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error loading email template affiliate-password-reset: [Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'] {
      errno: -2,
      code: 'ENOENT',
      syscall: 'open',
      path: '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'
    }

      75 |     }
      76 |   } catch (error) {
    > 77 |     console.error(`Error loading email template ${templateName}:`, error);
         |             ^
      78 |     // Return a basic template as fallback
      79 |     return `
      80 |       <!DOCTYPE html>

      at error (server/utils/emailService.js:77:13)
      at Object.<anonymous>.exports.sendAffiliatePasswordResetEmail (server/utils/emailService.js:871:22)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.warn
    Email template placeholder [EMAIL_CONTENT] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliatePasswordResetEmail] (server/utils/emailService.js:881:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.log
    Missing template: password-reset.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.log
    Missing template: order-confirmation.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.warn
    Email template placeholder [AFFILIATE_ID] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliateWelcomeEmail] (server/utils/emailService.js:336:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:223:9)

  console.log
    === EMAIL CONSOLE LOG ===

      at Object.log [as sendMail] (server/utils/emailService.js:18:17)

  console.log
    From: test@wavemax.promo

      at Object.log [as sendMail] (server/utils/emailService.js:19:17)

  console.log
    To: undefined

      at Object.log [as sendMail] (server/utils/emailService.js:20:17)

  console.log
    Subject: Welcome to WaveMAX Laundry Affiliate Program

      at Object.log [as sendMail] (server/utils/emailService.js:21:17)

  console.log
    HTML Preview: [HTML content logged to console]

      at Object.log [as sendMail] (server/utils/emailService.js:22:17)

  console.log
    ========================

      at Object.log [as sendMail] (server/utils/emailService.js:23:17)

  console.log
    Email sent: console-1751125032834

      at log (server/utils/emailService.js:154:13)

PASS tests/integration/emailService.integration.test.js
  Email Service Integration
    Email Service Configuration
      ✓ should load and configure the email service correctly (23 ms)
      ✓ should have all required email functions (7 ms)
    Console Email Provider
      ✓ should log affiliate welcome emails to console (19 ms)
      ✓ should log customer welcome emails to console (7 ms)
      ✓ should log password reset emails to console (22 ms)
    Email Template Verification
      ✓ should verify email templates directory exists (2 ms)
      ✓ should verify essential email templates exist (1 ms)
    Mailcow SMTP Configuration
      ✓ should handle Mailcow SMTP configuration (5 ms)
      ✓ should handle secure Mailcow SMTP on port 465 (6 ms)
    Error Handling
      ✓ should handle missing required fields gracefully (10 ms)
      ✓ should handle invalid email addresses (6 ms)
    Bulk Email Operations
      ✓ should handle multiple email sends efficiently (5 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:13.640Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:14.024Z"}
  console.log
    CSRF token generation: {
      sessionID: '93de9895dd3e2755415e904636b3b5f0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: teVTlceu-8tL7Dc5BP0uwGFCtHL5kZ6AQswQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 93de9895dd3e2755415e904636b3b5f0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Z7Etqp9BaI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 16.093 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:14.674Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:15.060Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:15.061Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:15.154Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-9b7ee40d-3fd2-46f8-b532-bf01f7926d85",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 175.675 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:15.453Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:15.457Z"}
[0mGET /api/v1/payments/config [32m200[0m 3.640 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:16.369Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7397c11e79fa70999e3bfc351269b88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: J1mWEHUp-y1LCNTzgZPDjjJRVHoik9sB-9aw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7397c11e79fa70999e3bfc351269b88

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Dcbs_Yf074...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.077 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:16.519Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:16.826Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:16.826Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:16.955Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-0e2a5267-5c16-4263-8a89-ddfb9aa081de",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 179.735 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:17.199Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemu8i-fm13u0f: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:17.234Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:17.267Z","token":"mcgemu8i-fm13u0f"}
[0mPOST /api/v1/payments/create-token [32m200[0m 68.321 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.115Z"}
  console.log
    CSRF token generation: {
      sessionID: '1a2337da416541ccc7b4db4778127b22',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mzdW9zyw-dDBdkjNLK3do04keOui392_v528

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1a2337da416541ccc7b4db4778127b22

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rtaLCRHbKo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.491 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.284Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.598Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.598Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.690Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-b437a5bf-b95a-48fe-a4a0-fe7e9defaf01",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 147.858 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.902Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemvjs-oh6oj77: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.936Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.969Z","token":"mcgemvjs-oh6oj77"}
[0mPOST /api/v1/payments/create-token [32m200[0m 67.736 ms - 283[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mcgemvjs-oh6oj77 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:18.974Z"}
[0mGET /api/v1/payments/check-status/mcgemvjs-oh6oj77 [32m200[0m 30.039 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:19.769Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e85358a5f380407256008eca6e80e9b3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3ViyQbPh-pbW4HECLU8CmM5fkQN3fakGQeRg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e85358a5f380407256008eca6e80e9b3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YYTgA7MsAz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.743 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:19.935Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.238Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.238Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.320Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-8d1cd437-7abb-4544-be0f-a7b94ea993c4",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 163.604 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.550Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemwtk-6kttwzy: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.584Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.616Z","token":"mcgemwtk-6kttwzy"}
[0mPOST /api/v1/payments/create-token [32m200[0m 65.688 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcgemwtk-6kttwzy {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.620Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcgemwtk-6kttwzy {
      sessionID: 'e85358a5f380407256008eca6e80e9b3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae85358a5f380407256008eca6e80e9b3.VUPurvhNLHoU0a0%2FTyuZMCDLiGQ4srHDmVW1OUN3rAI',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcgemwtk-6kttwzy: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.722Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:20.723Z","token":"mcgemwtk-6kttwzy"}
[0mPOST /api/v1/payments/cancel-token/mcgemwtk-6kttwzy [32m200[0m 103.337 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:21.483Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f6e7537b4dcf8bf55ebc5e0ccf1c34ac',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gvwnCOvC-ietVzMonZGxbL0E7XtECnftj7ys

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f6e7537b4dcf8bf55ebc5e0ccf1c34ac

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: S__iScurd3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.870 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:21.628Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:21.949Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:21.950Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.044Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-11df2126-07df-4a62-960b-ca265c723882",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 153.845 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.264Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.267Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.269Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.272Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.275Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.278Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.281Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.284Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.287Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.290Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy55-y7l30nz: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.296Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5a-uin0qdb: {"callbackPath":"/api/v1/payments/callback/handler-3","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-3","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.301Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy58-7aj24jm: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.303Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5d-6ssw7ej: {"callbackPath":"/api/v1/payments/callback/handler-4","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-4","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.308Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5g-9yapo5k: {"callbackPath":"/api/v1/payments/callback/handler-5","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-5","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.311Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5n-78z9kw4: {"callbackPath":"/api/v1/payments/callback/handler-7","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-7","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.312Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5k-1mfupza: {"callbackPath":"/api/v1/payments/callback/handler-6","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-6","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.314Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5q-dulthwl: {"callbackPath":"/api/v1/payments/callback/handler-8","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-8","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.315Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5t-yjlf4jy: {"callbackPath":"/api/v1/payments/callback/handler-9","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-9","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.318Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemy5w-bgsiqtm: {"callbackPath":"/api/v1/payments/callback/handler-10","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-10","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.320Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"customer0@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.325Z","token":"mcgemy55-y7l30nz"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.585 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-3","customerEmail":"customer2@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.328Z","token":"mcgemy5a-uin0qdb"}
[0mPOST /api/v1/payments/create-token [32m200[0m 58.813 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"customer1@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.333Z","token":"mcgemy58-7aj24jm"}
[0mPOST /api/v1/payments/create-token [32m200[0m 65.713 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-5","customerEmail":"customer4@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.340Z","token":"mcgemy5g-9yapo5k"}
[0mPOST /api/v1/payments/create-token [32m200[0m 65.724 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-4","customerEmail":"customer3@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.342Z","token":"mcgemy5d-6ssw7ej"}
[0mPOST /api/v1/payments/create-token [32m200[0m 69.939 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-8","customerEmail":"customer7@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.345Z","token":"mcgemy5q-dulthwl"}
[0mPOST /api/v1/payments/create-token [32m200[0m 60.725 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-7","customerEmail":"customer6@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.346Z","token":"mcgemy5n-78z9kw4"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-6","customerEmail":"customer5@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.347Z","token":"mcgemy5k-1mfupza"}
[0mPOST /api/v1/payments/create-token [32m200[0m 64.540 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 68.836 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-9","customerEmail":"customer8@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.349Z","token":"mcgemy5t-yjlf4jy"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-10","customerEmail":"customer9@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.350Z","token":"mcgemy5w-bgsiqtm"}
[0mPOST /api/v1/payments/create-token [32m200[0m 62.053 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 60.189 ms - 285[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.366Z"}
[33mwarn[39m: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:22.395Z"}
[0mPOST /api/v1/payments/create-token [31m503[0m 40.843 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.176Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b3483d2b68c3c87eb53624a0f60bfcf2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SQpYQDu8-88eg0ySqim7Ma8qMqFglpUtfdR4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b3483d2b68c3c87eb53624a0f60bfcf2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VbIEERJUMw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.039 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.320Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.628Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.630Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.719Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-65a12385-664a-407f-8da7-c90c107a1f7d",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 160.381 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.941Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemzfr-1ks0a1b: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:23.974Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"cancel@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.005Z","token":"mcgemzfr-1ks0a1b"}
[0mPOST /api/v1/payments/create-token [32m200[0m 63.488 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcgemzfr-1ks0a1b {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.007Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcgemzfr-1ks0a1b {
      sessionID: 'b3483d2b68c3c87eb53624a0f60bfcf2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab3483d2b68c3c87eb53624a0f60bfcf2.3U6z6rBClFKKtuPqDEKBKSp%2FSTSY0akhflaINZkjquw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcgemzfr-1ks0a1b: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.099Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.099Z","token":"mcgemzfr-1ks0a1b"}
[0mPOST /api/v1/payments/cancel-token/mcgemzfr-1ks0a1b [32m200[0m 91.942 ms - 73[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.102Z"}
[32minfo[39m: Acquired callback handler for payment token mcgemzk8-t8qkopy: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.134Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"new@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.166Z","token":"mcgemzk8-t8qkopy"}
[0mPOST /api/v1/payments/create-token [32m200[0m 63.571 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:24.914Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a2248ae100dd2e446bc37c36faf6b96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ldHCNE4U-oDM9YheAe564I7gNvjBf8SkIKio

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6a2248ae100dd2e446bc37c36faf6b96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cmCfQGPBUo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.305 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:25.084Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:25.392Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:25.392Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:25.483Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-efb976c5-5f22-402b-a54b-ce8c77c3b918",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 146.930 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:25.699Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 31.265 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:26.510Z"}
PASS tests/integration/payment.test.js (14.022 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2341 ms)
    Payment Token Tests
      ✓ should create payment token (1764 ms)
      ✓ should check payment status (1654 ms)
      ✓ should cancel payment token (1714 ms)
    Payment Callback Tests
      ✓ should return 503 when all callback handlers are locked (1694 ms)
      ✓ should release callback handler when payment is cancelled (1737 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (1598 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:27.556Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:28.491Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:28.813Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 323.300 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:29.821Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:29.988Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 167.756 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-83169ef0-9db4-4332-a84b-fc370a187fad/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:30.005Z"}
[0mGET /api/v1/affiliates/AFF-83169ef0-9db4-4332-a84b-fc370a187fad/customers [32m200[0m 114.133 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:31.050Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:31.200Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.833 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-13ab3c7c-c0f3-4ad1-a4a6-d23a1e4c2f08/customers?customerId=CUST-e674137f-944d-4425-bfdc-af57de0351a5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:31.313Z"}
[0mGET /api/v1/affiliates/AFF-13ab3c7c-c0f3-4ad1-a4a6-d23a1e4c2f08/customers?customerId=CUST-e674137f-944d-4425-bfdc-af57de0351a5 [32m200[0m 111.097 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:32.341Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:32.498Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 156.700 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c8700b50-4f2b-4398-a79b-09e9fcec90b9/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:32.504Z"}
[0mGET /api/v1/affiliates/AFF-c8700b50-4f2b-4398-a79b-09e9fcec90b9/customers?customerId=NONEXISTENT123 [32m200[0m 109.243 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:33.532Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:33.678Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.233 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-08df44ee-ba56-42df-a0c6-586647f0ef35/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:33.688Z"}
[0mGET /api/v1/affiliates/AFF-08df44ee-ba56-42df-a0c6-586647f0ef35/customers [33m401[0m 1.500 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:34.609Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:34.772Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 163.604 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:34.777Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:34.919Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 141.543 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-248f3e91-c92b-4019-8f11-5e30eb93b864/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:34.923Z"}
[0mGET /api/v1/affiliates/AFF-248f3e91-c92b-4019-8f11-5e30eb93b864/customers [32m200[0m 107.700 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-248f3e91-c92b-4019-8f11-5e30eb93b864/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:35.034Z"}
[0mGET /api/v1/affiliates/AFF-248f3e91-c92b-4019-8f11-5e30eb93b864/dashboard [32m200[0m 136.790 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:36.108Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:36.255Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.621 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:37.187Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:37.356Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 169.425 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-21935c8f-cac5-4042-905b-0a5486126133 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:37.360Z"}
[0mGET /api/v1/affiliates/AFF-21935c8f-cac5-4042-905b-0a5486126133 [32m200[0m 58.654 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:38.366Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:38.511Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.206 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-0446766e-92d7-4ec1-abf6-26eb007b48d3/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:38.516Z"}
[0mGET /api/v1/affiliates/AFF-0446766e-92d7-4ec1-abf6-26eb007b48d3/dashboard [32m200[0m 134.408 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:39.563Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:39.713Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 149.674 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d15841be-7d5b-4746-b2b1-043cb237075a/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:39.716Z"}
[0mGET /api/v1/affiliates/AFF-d15841be-7d5b-4746-b2b1-043cb237075a/customers?customerId=INVALID_ID [32m200[0m 130.533 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:40.757Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:40.903Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 146.156 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:40.912Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 28.664 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:41.862Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:42.012Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 151.385 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-266a87f5-4c20-4340-89da-b41c2ea1479d/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:42.016Z"}
[0mGET /api/v1/affiliates/AFF-266a87f5-4c20-4340-89da-b41c2ea1479d/customers [32m200[0m 108.711 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (16.168 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (1750 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1216 ms)
      ✓ should filter customers by customerId when provided (1300 ms)
      ✓ should return empty array when filtering by non-existent customerId (1201 ms)
      ✓ should require authentication to access customer list (1055 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1488 ms)
      ✓ should handle URL parameters correctly throughout the flow (1091 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1178 ms)
      ✓ should load dashboard statistics correctly (1219 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1184 ms)
      ✓ should handle invalid affiliate ID (1107 ms)
      ✓ should handle database connection issues gracefully (1171 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:43.741Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:44.158Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ec028e5d57d764695e5a76177a16fb7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TstwfSnH-v9MRiTnhwSfD4enL2ftEa_-b0Fw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ec028e5d57d764695e5a76177a16fb7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fkkXdlitJd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.235 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:44.338Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 275.340 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:45.502Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e5cc8098eef12b4424aa14b3625079f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qOXqUdpL-GR-TyccXQtWecMg68j2UXoCgAtY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e5cc8098eef12b4424aa14b3625079f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wZRTJHrEXg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.488 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-35067d07-d6c2-43bc-a0fe-c3ebce49a8ec {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:45.545Z"}
[0mGET /api/v1/affiliates/AFF-35067d07-d6c2-43bc-a0fe-c3ebce49a8ec [32m200[0m 59.097 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:46.349Z"}
  console.log
    CSRF token generation: {
      sessionID: '6efbedf0ff8d6e346f6253cbf8465ff8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w3epE5Nn-RmHaNmy9aEI5gvGZexZjSJPv2po

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6efbedf0ff8d6e346f6253cbf8465ff8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -Y7Wxvtri2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.693 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-6a558011-1273-4325-aae7-adc029029f2b {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:46.395Z"}
[0mPUT /api/v1/affiliates/AFF-6a558011-1273-4325-aae7-adc029029f2b [32m200[0m 89.775 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:47.272Z"}
  console.log
    CSRF token generation: {
      sessionID: '729b7ce8c652cdcded7617a84920b49b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CImqQpPf-Meock3MJWyYnSVMhK_5PLwJ0d1E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 729b7ce8c652cdcded7617a84920b49b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qU9LyzLWK4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.684 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:47.401Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:37:47.553Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 152.125 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:48.305Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a4f540f227a515224b1d7e995e6b3360',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: K4UVdP0O-HQ5oJLqUu-9KzYZfpiarEpxXAsc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a4f540f227a515224b1d7e995e6b3360

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vsrh5AIc1z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.007 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5230dd38-f80c-4923-bb74-5124d489894e/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:48.384Z"}
[0mGET /api/v1/affiliates/AFF-5230dd38-f80c-4923-bb74-5124d489894e/customers?page=1&limit=10 [32m200[0m 113.392 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:49.250Z"}
  console.log
    CSRF token generation: {
      sessionID: '6e45e11f080cc309d147c61c06c7aa5b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B55MAC2R-W20Hj0QC6hxXJ94rZPdymPW5NME

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6e45e11f080cc309d147c61c06c7aa5b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9rDcpBMGyV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.288 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-a6bcbd94-8d6f-422a-8458-b06a1e62d9de/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:49.353Z"}
[0mGET /api/v1/affiliates/AFF-a6bcbd94-8d6f-422a-8458-b06a1e62d9de/orders?page=1&limit=10 [32m200[0m 113.788 ms - 576[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:50.217Z"}
  console.log
    CSRF token generation: {
      sessionID: '8dcf2cf898a00368dd6a1017ed07bb15',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wJ7JUGgL-2F5HN92Ei9ARLa1jiWFaUS2-nTQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8dcf2cf898a00368dd6a1017ed07bb15

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wNfCqe20h8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.107 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-9b18f0c0-800b-49f9-8810-9b389fa18405/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:50.294Z"}
[0mGET /api/v1/affiliates/AFF-9b18f0c0-800b-49f9-8810-9b389fa18405/transactions?page=1&limit=10 [32m200[0m 146.099 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:51.233Z"}
  console.log
    CSRF token generation: {
      sessionID: '8e306ce8607b011ecf92d752ef25206e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KKZRjmfr--ObAqq1iL-p0tM3mkFGVAkdUDWE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8e306ce8607b011ecf92d752ef25206e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gFEHsv5I7n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.277 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-59a94fbb-72e6-4022-9d0f-beaf79f3a93b/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:51.372Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-59a94fbb-72e6-4022-9d0f-beaf79f3a93b/delete-all-data {
      sessionID: '8e306ce8607b011ecf92d752ef25206e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8e306ce8607b011ecf92d752ef25206e.vjEdKWZac0hERMVEzm%2Bil5TW%2FubECm9LgjvICvLQmeA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-59a94fbb-72e6-4022-9d0f-beaf79f3a93b/delete-all-data [32m200[0m 201.632 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:52.402Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b89938817debbca09203517ef61345c2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZnEhZF8c-L4zMsUi7cf3qYZR4JuXooMGmPcs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b89938817debbca09203517ef61345c2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -B3sTEPIpT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 13.081 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-a5ad857d-f862-4b8c-b5f7-493a3c245f48/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:52.453Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-a5ad857d-f862-4b8c-b5f7-493a3c245f48/delete-all-data {
      sessionID: 'b89938817debbca09203517ef61345c2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab89938817debbca09203517ef61345c2.8B%2Bk%2FrlcxLe4ayjDUF4hEpw%2BLkSgNEbpqE20E0YMlIc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-a5ad857d-f862-4b8c-b5f7-493a3c245f48/delete-all-data [33m403[0m 46.182 ms - 59[0m
PASS tests/integration/affiliate.test.js (10.283 s)
  Affiliate API
    ✓ should register a new affiliate (1355 ms)
    ✓ should get affiliate profile (845 ms)
    ✓ should update affiliate profile (923 ms)
    ✓ should login affiliate (1034 ms)
    ✓ should get affiliate's customers list (945 ms)
    ✓ should get affiliate's orders (967 ms)
    ✓ should get affiliate's earnings/transactions (1016 ms)
    ✓ Delete all affiliate data (development only) (1168 ms)
    ✓ Reject delete in production environment (837 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:54.610Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:55.370Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 6.105 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:56.386Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 2.179 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:57.284Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.594 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:58.144Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.680 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:59.058Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.931 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:37:59.929Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.269 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:00.834Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.436 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:01.795Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.480 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:02.706Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.242 ms - 128[0m
FAIL tests/integration/socialAuth.test.js (10.288 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✕ should redirect to Google OAuth when Google auth is configured (1387 ms)
      ✕ should redirect to Facebook OAuth when Facebook auth is configured (906 ms)
      ✕ should redirect to LinkedIn OAuth when LinkedIn auth is configured (856 ms)
      ✕ should return 404 when OAuth provider is not configured (915 ms)
    Social Registration Flow
      ✕ should successfully complete social registration (858 ms)
      ✕ should validate required fields for social registration (915 ms)
      ✕ should prevent duplicate social registrations (961 ms)
    OAuth Callback and Session Flow
      ✕ should create OAuth session on successful callback (892 ms)
    Customer Social Authentication
      ✕ should successfully register customer via social auth (907 ms)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to Google OAuth when Google auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to Facebook OAuth when Facebook auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to LinkedIn OAuth when LinkedIn auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should return 404 when OAuth provider is not configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should successfully complete social registration

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should validate required fields for social registration

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should prevent duplicate social registrations

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Callback and Session Flow › should create OAuth session on successful callback

    TypeError: OAuthSession.updateSession is not a function

      295 |
      296 |       // Update session to completed
    > 297 |       await OAuthSession.updateSession(sessionId, {
          |                          ^
      298 |         type: 'social-auth-success',
      299 |         provider: 'google',
      300 |         socialId: 'google123',

      at Object.updateSession (tests/integration/socialAuth.test.js:297:26)

  ● Social Authentication Integration Tests › Customer Social Authentication › should successfully register customer via social auth

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:04.544Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:05.542Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 2.383 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:06.617Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.671 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:07.507Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 2.297 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:08.371Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.873 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:09.385Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.356 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:10.307Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.696 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:11.174Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.390 ms - 128[0m
[34mdebug[39m: GET /api/v1/auth/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:12.037Z"}
[0mGET /api/v1/auth/csrf-token [33m404[0m 1.367 ms - 128[0m
FAIL tests/integration/oAuthFlows.test.js (9.178 s)
  OAuth Authentication Flows
    OAuth Provider Availability
      ✕ should show available OAuth providers (1387 ms)
    New User OAuth Registration Flow
      ✕ should complete full OAuth registration for new affiliate (920 ms)
      ✕ should complete OAuth registration for new customer (877 ms)
    Existing User OAuth Login Flow
      ✕ should login existing affiliate via OAuth (1016 ms)
    OAuth Error Handling
      ✕ should handle duplicate social account registration (914 ms)
      ✕ should handle OAuth provider not configured (872 ms)
    OAuth Session Management
      ✕ should handle expired OAuth sessions (864 ms)
      ✕ should handle non-existent OAuth session (860 ms)

  ● OAuth Authentication Flows › OAuth Provider Availability › should show available OAuth providers

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › New User OAuth Registration Flow › should complete full OAuth registration for new affiliate

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › New User OAuth Registration Flow › should complete OAuth registration for new customer

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › Existing User OAuth Login Flow › should login existing affiliate via OAuth

    TypeError: OAuthSession.updateSession is not a function

      216 |
      217 |       // Simulate successful OAuth callback
    > 218 |       await OAuthSession.updateSession(sessionId, {
          |                          ^
      219 |         type: 'social-auth-success',
      220 |         provider: 'linkedin',
      221 |         socialId: 'linkedin-existing-123',

      at Object.updateSession (tests/integration/oAuthFlows.test.js:218:26)

  ● OAuth Authentication Flows › OAuth Error Handling › should handle duplicate social account registration

    ValidationError: Affiliate validation failed: paymentMethod: `stripe` is not a valid enum value for path `paymentMethod`.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● OAuth Authentication Flows › OAuth Error Handling › should handle OAuth provider not configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › OAuth Session Management › should handle expired OAuth sessions

    ValidationError: OAuthSession validation failed: result: Path `result` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● OAuth Authentication Flows › OAuth Session Management › should handle non-existent OAuth session

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/integration/adminCreation.test.js (5.211 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (241 ms)
      ✓ should create admin with next sequential ID when admins exist (335 ms)
      ✓ should handle admin creation with all permissions (232 ms)
      ✓ should handle admin creation with partial permissions (206 ms)
    Admin Model Validation
      ✓ should require email field (172 ms)
      ✓ should save admins with different adminIds successfully (285 ms)
      ✓ should save admins with different emails successfully (288 ms)
    Password Handling
      ✓ should hash password before saving (207 ms)
      ✓ should validate password with verifyPassword method (313 ms)
    Admin Query Operations
      ✓ should find admin by adminId (350 ms)
      ✓ should find admin by email (373 ms)
      ✓ should find active admins only (368 ms)
      ✓ should find admins with specific permissions (346 ms)
      ✓ should get last admin for ID generation (337 ms)
    Email Integration
      ✓ should call email service after admin creation (194 ms)
      ✓ should handle email service failures gracefully (228 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:19.107Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.001Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 33.746 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.040Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.043Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 3.291 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.119Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"env_123456","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"68600c6b28d1c1ce97555d5d","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T15:38:20.215Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 96.687 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.268Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 84.608 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:20.355Z"}
[32minfo[39m: W9 status updated for affiliate AFF000001: {"details":{"envelopeId":"env_123456","event":"envelope-completed","status":"completed","success":true},"docusignStatus":"completed","envelopeId":"env_123456","performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"system@docusign","userName":"DocuSign System","userType":"system"},"service":"wavemax-affiliate","status":"verified","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T15:38:20.418Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 62.633 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:21.366Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 59.724 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:22.279Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 87.161 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:23.246Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"new_env_after_refresh","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"68600c6f28d1c1ce97555de8","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T15:38:23.338Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 92.604 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:24.156Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-28T15:38:24.216Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 60.861 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:25.033Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-28T15:38:25.095Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 62.476 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:25.931Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:25.932Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.526 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:26.778Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 55.631 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:27.653Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 27.862 ms - 65[0m
PASS tests/integration/docusignW9.test.js (10.108 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (1806 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (907 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (968 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (939 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (877 ms)
      ✓ should handle network errors during envelope creation (895 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (820 ms)
      ✓ should prevent accessing another affiliates envelope status (903 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (853 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:29.702Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:31.032Z"}
[0mGET /api/v1/system/config/public [32m200[0m 31.277 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:32.267Z"}
[0mGET /api/v1/system/config/public [32m200[0m 28.826 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:33.417Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 29.485 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:34.554Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 27.662 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:35.713Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 28.908 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:36.873Z"}
[0mGET /api/v1/system/config [32m200[0m 57.896 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:38.031Z"}
[0mGET /api/v1/system/config [33m401[0m 1.097 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:39.129Z"}
[0mGET /api/v1/system/config [33m403[0m 29.105 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:40.273Z"}
  console.log
    CSRF token generation: {
      sessionID: '9025a6805f23a8e72fe99551308c6a40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JLI22TZ9-NZ8eLBzjfg7NMzeAA2E3OQFggwM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9025a6805f23a8e72fe99551308c6a40

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kZ4J694SbM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.704 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:40.403Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '9025a6805f23a8e72fe99551308c6a40',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9025a6805f23a8e72fe99551308c6a40.vt0y8PrhA1TRoq6pwjorxs8A91%2FL8prpsRGOP%2FPaByI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 126.060 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:41.712Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c78f6c1fc62d5b15678f15a80f3226c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Fb7rrj1d-BAnUHeZc9i_zD5My_OnhSvUGt18

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2c78f6c1fc62d5b15678f15a80f3226c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4Gq_WotTDq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.973 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:41.838Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '2c78f6c1fc62d5b15678f15a80f3226c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2c78f6c1fc62d5b15678f15a80f3226c.%2Fb59UGgUpHSnnvrR2KUbtG2mEM%2F15%2BpDIURprLJaOrU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 95.229 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:43.050Z"}
  console.log
    CSRF token generation: {
      sessionID: '46a918e0c9bd256147180a5fa8204c43',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yzGQ1WyV-zdsIH9yCNE4QCEj-HP4Q5ERdOSk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 46a918e0c9bd256147180a5fa8204c43

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Y9wqxLYzYZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.878 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:43.202Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '46a918e0c9bd256147180a5fa8204c43',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A46a918e0c9bd256147180a5fa8204c43.IP1U24tTNJECDo8SPybXv8G1%2BGM1FZ2ZRerNJjy2q8E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 90.965 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:44.387Z"}
  console.log
    CSRF token generation: {
      sessionID: '26cac0d337e3a6a1e5fe01273215b75f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TnaBZGbd-4db08ALz9iJoyuA5znF5nOR1bEA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26cac0d337e3a6a1e5fe01273215b75f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 48Nsx_YEiJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.535 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:44.543Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: '26cac0d337e3a6a1e5fe01273215b75f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26cac0d337e3a6a1e5fe01273215b75f.lwQed1UVeJjI%2FSxHtXxUTaIqazVuIqhEpvXpAmRdPeA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 87.452 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:45.758Z"}
  console.log
    CSRF token generation: {
      sessionID: '85cd6d77d2a2a05acd37f57f2f8d5660',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: r9VCXiet-982n7CrOySNIPe89VEkNlTU53VM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 85cd6d77d2a2a05acd37f57f2f8d5660

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Kw8Oag49zp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.899 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:45.974Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd60e1fc66b7568525c580ee3cad8b491',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g0sZX4QJ-J9WwxS0Sl_rsbYDl95XyKIOJWuo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d60e1fc66b7568525c580ee3cad8b491

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rVQGfn4jj8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.219 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:45.987Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'd60e1fc66b7568525c580ee3cad8b491',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad60e1fc66b7568525c580ee3cad8b491.1ymj55QmTFm4Ol4LGlk61mXJuHs8Htfzz23c3imntas',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 60.825 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:47.189Z"}
  console.log
    CSRF token generation: {
      sessionID: '0a0e20dedf5b1cd790aa9ce7a9a15a7c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: H9IzlDDA-e4iU8uxq5VFCUuFh2yatlQqONyc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0a0e20dedf5b1cd790aa9ce7a9a15a7c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6daSqMIytW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.033 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:47.238Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: '0a0e20dedf5b1cd790aa9ce7a9a15a7c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0a0e20dedf5b1cd790aa9ce7a9a15a7c.YdgdnH0Z5DRjRWEJMpvfVh%2BkD5NN2ectvSpPLa8u4nI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 333.344 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:48.677Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c11acd1d13359a4d2f3b8ba49f01d1a1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: M2K4GAkt-0uEhATad7vqMzNnitpIF6cawk-M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c11acd1d13359a4d2f3b8ba49f01d1a1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7le9W9d88y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.725 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:48.749Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'c11acd1d13359a4d2f3b8ba49f01d1a1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac11acd1d13359a4d2f3b8ba49f01d1a1.1ck9E9T09gErT%2B3lkQ7vMFYDN8t6rCxZs%2FQ4vOKoiO0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 325.461 ms - 48[0m
PASS tests/integration/systemConfig.test.js (22.663 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1331 ms)
        ✓ should not return private configurations (1173 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1126 ms)
        ✓ should return 404 for non-existent config (1120 ms)
        ✓ should return 404 for private config accessed via public endpoint (1198 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1153 ms)
        ✓ should return 401 without authentication (1105 ms)
        ✓ should return 403 for non-admin users (1139 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1442 ms)
        ✓ should validate value based on data type (1340 ms)
        ✓ should validate value against min/max constraints (1338 ms)
        ✓ should not allow updating non-editable configs (1367 ms)
        ✓ should require system_config permission (1427 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1503 ms)
        ✓ should not overwrite existing configurations (1559 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1297 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:52.138Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:53.676Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-ec5634d6-1f53-4938-8e20-434be883753a

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 100.115 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:55.282Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-80d8808f-5a81-4627-b4d6-ad48bf2ad477

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 94.619 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:56.846Z"}
[0mGET /api/v1/quickbooks/vendors [33m404[0m 56.090 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:58.292Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 124.318 ms - 318[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:38:59.788Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=json [32m200[0m 129.600 ms - 955[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:01.354Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m400[0m 29.543 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2026-06-28&endDate=2026-06-28 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:02.799Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2026-06-28&endDate=2026-06-28 [33m404[0m 82.315 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:04.359Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 151.559 ms - 169[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:05.931Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 [33m400[0m 29.618 ms - 81[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:07.371Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 [33m400[0m 57.148 ms - 76[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:08.849Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 [33m404[0m 56.223 ms - 49[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:10.340Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-449cb8ac-353c-471e-baa2-668e14d9fd52

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 89.142 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:10.432Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 80.700 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:10.516Z"}
[0mGET /api/v1/quickbooks/history [32m200[0m 117.380 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:12.026Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-eab5fb60-e69b-4992-8500-984a00ff35ec

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 92.234 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:12.122Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 84.658 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?type=vendor {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:12.210Z"}
[0mGET /api/v1/quickbooks/history?type=vendor [32m200[0m 84.257 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:13.662Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-83e65a9a-3310-4346-b356-0c5447cbf03c

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 97.150 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:13.761Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 84.504 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:13.849Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-a6df85f7-99ba-408b-bb17-0395fcfdc12b

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 91.967 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:13.944Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-c9f96d4b-a8f2-4247-8af0-63746917dd62

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 92.797 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:14.039Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-0aa80c7e-304a-4b20-9326-27f7f076c1cc

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 90.860 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:14.132Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-940a74c2-48c7-445e-af7f-7c8ed7862388

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 94.000 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:14.229Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-028e4319-c51d-4cc8-909a-cc5273e19bc3

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 101.770 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?limit=3 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:14.339Z"}
[0mGET /api/v1/quickbooks/history?limit=3 [32m200[0m 86.854 ms - -[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:15.844Z"}
[0mGET /api/v1/quickbooks/vendors [33m401[0m 1.420 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:15.849Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m401[0m 1.124 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:15.852Z"}
[0mGET /api/v1/quickbooks/commission-detail [33m401[0m 0.925 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:15.855Z"}
[0mGET /api/v1/quickbooks/history [33m401[0m 0.774 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:17.269Z"}
  console.log
    Authorization failed for path: /vendors - User role: affiliate Allowed roles: [ 'administrator' ]

      at log (server/middleware/auth.js:184:15)

[0mGET /api/v1/quickbooks/vendors [33m403[0m 30.518 ms - 54[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:18.688Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-12ec4ebf-433f-48c3-b78c-9826c85ff523

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 95.267 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:20.172Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 121.899 ms - 318[0m
PASS tests/integration/quickbooks.test.js (29.701 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✓ should export verified vendors as CSV (2191 ms)
      ✓ should export vendors as JSON (1538 ms)
      ✓ should handle no verified vendors gracefully (1485 ms)
    Payment Summary Export
      ✓ should export payment summary for date range as CSV (1524 ms)
      ✓ should export payment summary as JSON with correct aggregations (1535 ms)
      ✓ should require date parameters (1439 ms)
      ✓ should handle empty date range (1489 ms)
    Commission Detail Export
      ✓ should export commission details for specific affiliate (1638 ms)
      ✓ should require all parameters (1442 ms)
      ✓ should reject unverified affiliate export (1469 ms)
      ✓ should handle non-existent affiliate (1477 ms)
    Export History
      ✓ should retrieve export history (1719 ms)
      ✓ should filter export history by type (1663 ms)
      ✓ should limit export history results (2159 ms)
    Security and Permissions
      ✓ should require admin authentication for all QuickBooks endpoints (1424 ms)
      ✓ should not allow affiliate access to QuickBooks exports (1448 ms)
    CSV Format Validation
      ✓ should generate QuickBooks-compatible vendor CSV (1460 ms)
      ✓ should generate QuickBooks-compatible payment CSV (1512 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:21.834Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:22.372Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f94cfce0944499d468d30fb94ee2b3a8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YKgIMFW2-sJWCkHvG41R6mif192RSi4lIL2s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f94cfce0944499d468d30fb94ee2b3a8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BsXSfKC4KF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.745 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:23.050Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-ee9be60d-408b-4b5e-9da1-5a1f93a8286c

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 180.451 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:24.074Z"}
  console.log
    CSRF token generation: {
      sessionID: '38d4764120635c6dd78fdfbfac5aae49',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ktVwUtw6-6clxgydcqFKJx3njucdUtAII5qk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 38d4764120635c6dd78fdfbfac5aae49

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yuhtRs-4Df...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.969 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:24.341Z"}
[0mPOST /api/v1/customers/register [33m400[0m 30.224 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:25.103Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e821fa856f50bc10f52937eaec6a2d45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fys5ETwK-WmAYwt727GXTxL8z6gAyx4NvjOU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e821fa856f50bc10f52937eaec6a2d45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WijBQ--3nZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.852 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:25.402Z"}
[0mPOST /api/v1/customers/register [33m400[0m 55.666 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:26.194Z"}
  console.log
    CSRF token generation: {
      sessionID: '38fd8885b2ab92f3309843c739e1270e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iTC9fwCQ-Mjq_vckBWBQ1buLMpBej82cv-6Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 38fd8885b2ab92f3309843c739e1270e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zf0oCJJb-0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.007 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:26.453Z"}
[0mPOST /api/v1/customers/register [33m400[0m 56.669 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:27.281Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c44b3e8bffa9f797e0a5ce7a63c2777b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vrpKCPAa-ppS8Nleu83-t3Yg1DX5g-ICMYyM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c44b3e8bffa9f797e0a5ce7a63c2777b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: R9fjVyUHRy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.884 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:27.554Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 85.256 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:28.376Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7f3cef11a7512d977c988661c30dfc4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Hia9zHMy-T-UhGJl8IatL4EtM7pyMvDmpHiM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7f3cef11a7512d977c988661c30dfc4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zUZiSec9NR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.140 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:28.651Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 82.875 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:29.460Z"}
  console.log
    CSRF token generation: {
      sessionID: '0dc370c5a9dcbcad29305b09d52a383d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9aZKDbZj-I4ICjpXHRy0WNq2FEMGBH2W4Keg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0dc370c5a9dcbcad29305b09d52a383d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5F4O9tGoux...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.789 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:29.772Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 55.230 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:30.560Z"}
  console.log
    CSRF token generation: {
      sessionID: '39df663304de12549e332a8ef7caadda',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4umzfcBj-GAHdsOTA-XQK9gds64L-ZczXotM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 39df663304de12549e332a8ef7caadda

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: j-F1VCzM-4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.050 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:30.831Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 55.913 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:31.629Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cbf69f6fd0d623509bcc0e86e56f204e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5YYOzqJM-MyuErKR9ykgamRbJ-UQb66p-Gac

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cbf69f6fd0d623509bcc0e86e56f204e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rvpoMi8t3V...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.414 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:31.886Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 85.700 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:32.742Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a2e141d3ac5c634fbd243fda77db31d3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: l9QoXnuB-_AsaE3vAv3JBxTrxGTSCFnGzhYo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a2e141d3ac5c634fbd243fda77db31d3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vaVxOYrJA-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.092 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:33.032Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 111.673 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:33.902Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd2a4e9e37a88a98e7a1d85907e502548',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GGKPZ0wx-AGpT_CzksESzGu0bUVK59luZOyU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d2a4e9e37a88a98e7a1d85907e502548

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IGJyFrG_hz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.503 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:34.217Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 113.068 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:35.070Z"}
  console.log
    CSRF token generation: {
      sessionID: '491b4e7d92eea8282192dc0e45cee172',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yyfxlY4r-ysJFt5o0qQ0HDMuh-SxxYrPZHJM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 491b4e7d92eea8282192dc0e45cee172

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pu8F-yOkVh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.479 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:35.415Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 111.186 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:36.259Z"}
  console.log
    CSRF token generation: {
      sessionID: '31bf7f9aec8a3d7d6f8df91580849a0e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YVMZthaS-9_Y2yHERZN1iQJoUfvVjKAc1RlU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 31bf7f9aec8a3d7d6f8df91580849a0e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fwFMvnLcva...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.481 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:36.536Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '31bf7f9aec8a3d7d6f8df91580849a0e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A31bf7f9aec8a3d7d6f8df91580849a0e.w7%2BTfrlzlc%2FPG7Qt46s4UWFTH05vZHFbPepxEZsGNeY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 201.052 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:36.741Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 167.781 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:37.710Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef1fdc033e708b2562d5b9b7e3558dc5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oeaKsdVs-u5a9Q2woPWXvrgtbLEyegYNUknw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef1fdc033e708b2562d5b9b7e3558dc5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qZ4XpQQQpT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.455 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:37.984Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'ef1fdc033e708b2562d5b9b7e3558dc5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aef1fdc033e708b2562d5b9b7e3558dc5.yfCJXGGH8w2r3PHpTskd7hKxvvNecq0AvJwUxkdI%2BiY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 127.596 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:38.859Z"}
  console.log
    CSRF token generation: {
      sessionID: '34b89ca9a8889a65d41af34a09b799ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QL3Oo6kG-vzjrQOLxz1hGyzkimLVXqDiIayc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 34b89ca9a8889a65d41af34a09b799ab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XHdiR-9QUF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.349 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:39.125Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '34b89ca9a8889a65d41af34a09b799ab',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A34b89ca9a8889a65d41af34a09b799ab.C9JdNfmQWHYTW05YLs%2B5S2bLo2H5kczKalbAwcThBAA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 113.749 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:39.977Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b6785cc967948e56cc8fa531d477854',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0r6Uzp0F-IF-39YnMJExkd-YCM8P5S2USsmw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b6785cc967948e56cc8fa531d477854

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ikCNkaPJpk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.981 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:40.289Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 138.057 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:41.176Z"}
  console.log
    CSRF token generation: {
      sessionID: '292a2c04119f8cb80a04a52e72843b17',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NeOU8FxE-P-O_EnGxb_9r7tJebd3nrVeSs2E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 292a2c04119f8cb80a04a52e72843b17

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tbss5tB1Xv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.526 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:41.500Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 137.841 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:42.413Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dda5c0dc81206293d380d8161e9430d8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aIdcd8sS-hbjpigK3qStHWWqezORbBcEN6s4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dda5c0dc81206293d380d8161e9430d8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QWWluz0a63...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.115 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:42.728Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 136.327 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:43.604Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aa9383d6898141d5836d68f62c04a035',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bIVFJu6L-EPZmM9zchwP0OsKa5UgVaTL10SY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aa9383d6898141d5836d68f62c04a035

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2xfAmgtaxi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.919 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:43.975Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'aa9383d6898141d5836d68f62c04a035',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aaa9383d6898141d5836d68f62c04a035.R4FpcQMj5OA0A4B1uAqgKrCOAFGt5%2BlHFl3%2BZmE%2Fxa4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 119.810 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:44.877Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb9fd5b02bf73d8caa1e884fed4015a3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QHoNHDvS-MT-o3LdpJ8ZK66utkTFCfSD2mi4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb9fd5b02bf73d8caa1e884fed4015a3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lsAwUeAJZo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.902 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:45.217Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'fb9fd5b02bf73d8caa1e884fed4015a3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afb9fd5b02bf73d8caa1e884fed4015a3.4bBHiuu56tTn%2ByBcSbZIVcZmJ%2F63SbX3rJUlws%2FvVdk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 31.395 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:45.977Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc45cabf512ba219fa593df775d88833',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PS94vz0v-61ENxIFfoJ1sEj2Yw3dw0i9uiZc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc45cabf512ba219fa593df775d88833

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eiUlTquU5d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.345 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:46.355Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'dc45cabf512ba219fa593df775d88833',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adc45cabf512ba219fa593df775d88833.qW%2BFUI%2BxVHnc3CijmflFDwp6vvPXYQBohQ5R6CQKCUs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 31.048 ms - 63[0m
PASS tests/integration/customer.test.js (26.011 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1738 ms)
      ✓ should fail with invalid affiliate ID (1029 ms)
      ✓ should fail with duplicate email (1090 ms)
      ✓ should fail with duplicate username (1086 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1095 ms)
      ✓ should return customer profile for affiliate (1084 ms)
      ✓ should fail for unauthorized customer (1100 ms)
      ✓ should return limited data without authentication (1067 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1113 ms)
      ✓ should not update protected fields (1160 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1166 ms)
      ✓ should filter orders by status (1189 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1450 ms)
      ✓ should fail with incorrect current password (1149 ms)
      ✓ should fail with weak new password (1119 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1197 ms)
      ✓ should return monthly statistics (1237 ms)
      ✓ should allow affiliate to view customer dashboard (1192 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1273 ms)
      ✓ should reject deletion in production environment (1099 ms)
      ✓ should reject unauthorized deletion (1190 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:48.416Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:49.236Z"}
  console.log
    CSRF token generation: {
      sessionID: 'db0237c052aeca4d14ebec467a988bd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C26kgP4P-tbpcNPIOJ-ZTXBJcjKf_DCJgIIQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: db0237c052aeca4d14ebec467a988bd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vbfF5kCxCo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.350 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:49.351Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 178.719 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:49.729Z"}
[0mGET /api/v1/administrators [32m200[0m 123.791 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:50.781Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6f10269f933ac4d12bb42c6a7abd082',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hwcuLmCa-QuKIaMmoTDgy5Z2lqIMZVzWzNLU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6f10269f933ac4d12bb42c6a7abd082

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: x16csxibTK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.751 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:50.904Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.981 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:51.192Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 112.872 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:52.163Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb57931a09dc0ad16cffacbd31e8df13',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6pYvWA0q-M-xxHoLRaAPNYBZBYlMtUcb995w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb57931a09dc0ad16cffacbd31e8df13

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eA8Lb-oNIs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.360 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:52.297Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.434 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:53.579Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 117.172 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:54.570Z"}
  console.log
    CSRF token generation: {
      sessionID: '926afc512a64722bcedd809468328181',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YBFEgpTT-j0LE0-Nu6my_Py6epUWjn2CfCv8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 926afc512a64722bcedd809468328181

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ld06ZQ9qOL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.419 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:54.677Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.676 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:54.849Z"}
[0mGET /api/v1/administrators [33m401[0m 2.701 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:55.722Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ada9636701dd50d2db567458e6282f88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1Ww5fmG3-ZUMx4wwwRFDTZdgNRXHxRW-k0A4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ada9636701dd50d2db567458e6282f88

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: achXVl5KSe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.946 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:55.837Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 167.332 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:56.102Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 170.543 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:56.277Z"}
[0mGET /api/v1/administrators [33m403[0m 30.048 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:57.185Z"}
  console.log
    CSRF token generation: {
      sessionID: '2d46237da2d285b172dc200df3dae7c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bT7tKves-KGxKqLPdPm9IpSLcx0c3FlsjMnM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2d46237da2d285b172dc200df3dae7c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: N5mI6it9Jc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.528 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:57.297Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 168.204 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/68600ccdbf19a9db18e07a72 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:57.571Z"}
[0mGET /api/v1/administrators/68600ccdbf19a9db18e07a72 [32m200[0m 87.573 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:58.541Z"}
  console.log
    CSRF token generation: {
      sessionID: '8945a6e3f7814892b007084beec1a043',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5ZXD0wKs-xeC0_vx0GzOnt-vFENS2N445368

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8945a6e3f7814892b007084beec1a043

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XEh0VdBER0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.006 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:58.647Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.081 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/68600ccebf19a9db18e07a9d {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:58.805Z"}
[0mGET /api/v1/administrators/68600ccebf19a9db18e07a9d [33m404[0m 86.222 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:59.787Z"}
  console.log
    CSRF token generation: {
      sessionID: '8384d8cc2d827583c07714792c0e9ad9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eT7UmINE-Bu2uU5nQzMki5wJc4D4ignj3S7E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8384d8cc2d827583c07714792c0e9ad9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AUE1JTVgzn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.774 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:39:59.902Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 168.222 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:00.075Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 63.920 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:01.015Z"}
  console.log
    CSRF token generation: {
      sessionID: '233f2c23718c2e34a3e3d1fbe78b180b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qpVEJB3i-4JT0ZDPC4S9LgDcTvfYolLq41Xk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 233f2c23718c2e34a3e3d1fbe78b180b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fgJNe99o2Y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.749 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:01.116Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 168.369 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:01.289Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '233f2c23718c2e34a3e3d1fbe78b180b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A233f2c23718c2e34a3e3d1fbe78b180b.MCN9loh2zPL8EmTHV0xrEnqUtGv9XImwMJL4BjoVIJs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [32m201[0m 219.658 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:01.513Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 162.485 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:02.562Z"}
  console.log
    CSRF token generation: {
      sessionID: '38199d85c654e35e7e558520b0e74764',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FmbMy61o-WDOkT6pXknR-lI2WW5XRyX_-hq4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 38199d85c654e35e7e558520b0e74764

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ya7UvSbXek...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.310 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:02.682Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 173.165 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:02.859Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '38199d85c654e35e7e558520b0e74764',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A38199d85c654e35e7e558520b0e74764.bMPZdFifvSbBB%2Fdccgz3e64oPGwCgBtAMmyc%2FwJcS04',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 61.094 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:03.787Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a839af1b2aef67c98fd72564278808d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2m2nkLMJ-9zH3uetQbEdm4xExnjMH9yzD5Ow

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a839af1b2aef67c98fd72564278808d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: o21R13Q5FB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.571 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:03.888Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 172.845 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:04.064Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '7a839af1b2aef67c98fd72564278808d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7a839af1b2aef67c98fd72564278808d.fBl%2B1udKyGdTkwbbIRDUFLHhUmqHH6qiucw0ZCCRMQo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 60.245 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:05.011Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c447f32499f53f481757988d1f8de249',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cLSgknB2-bqu1in3K_px6F8QR2JI8Zj0qHtk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c447f32499f53f481757988d1f8de249

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yVdEU-F_OY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.805 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:05.123Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.734 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:05.278Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'c447f32499f53f481757988d1f8de249',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac447f32499f53f481757988d1f8de249.lz8ZugtnXb44aGN7rqlxQcaXN%2Bia7umwmNpIQXb1FP8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 60.418 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:06.215Z"}
  console.log
    CSRF token generation: {
      sessionID: '7fd01dea6d0c3905936c8506b6ef9f9d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bQvQrkY9-PDAI5wrXIczYUbr6m_j8_cERSwk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7fd01dea6d0c3905936c8506b6ef9f9d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Srp56TTXjG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.383 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:06.320Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.251 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:06.485Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '7fd01dea6d0c3905936c8506b6ef9f9d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7fd01dea6d0c3905936c8506b6ef9f9d.ob2fA15BLZ1M3YaLECNdNYKqHzi8O683DvElaX3pbzE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m409[0m 86.855 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:07.432Z"}
  console.log
    CSRF token generation: {
      sessionID: '36bfc84f323cfd5e4c8641d6a103dcdd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EeFWUKC2-Z5U7mC6XT5WmOyz3TcVf0XS_Dj4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 36bfc84f323cfd5e4c8641d6a103dcdd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9ze9fcU-dy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.969 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:07.536Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.117 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:07.802Z"}
  console.log
    CSRF token generation: {
      sessionID: '3fc5e1a7a090a8f3ae2b8d81523a1002',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7gnDHFLk-VFDXFInwZUNp1TUt-Q9M1FGCi9k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3fc5e1a7a090a8f3ae2b8d81523a1002

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YoZzqDMR6R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.989 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:07.809Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.728 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:07.965Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '3fc5e1a7a090a8f3ae2b8d81523a1002',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3fc5e1a7a090a8f3ae2b8d81523a1002.kycHRNriTylLMiVcZoHqH%2BEDUUT7chcMDMUVuw%2FdIyo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m403[0m 58.603 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:08.887Z"}
  console.log
    CSRF token generation: {
      sessionID: '05d15984061b02341f27166b2fac090d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9NmbuBjd-fTl8R4jnHOQssWyK_2JadAegAMA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 05d15984061b02341f27166b2fac090d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xN7PLn0vDI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.924 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:08.984Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 170.329 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600cd9bf19a9db18e07bee {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:09.265Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cd9bf19a9db18e07bee {
      sessionID: '05d15984061b02341f27166b2fac090d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A05d15984061b02341f27166b2fac090d.gZRPS1nEGXWsJ99%2FYrhXZiTtDfe6pmayuh9GUFNXPl8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600cd9bf19a9db18e07bee [32m200[0m 95.944 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:10.241Z"}
  console.log
    CSRF token generation: {
      sessionID: '1fcb24406222d48a7674a084e6bed3c6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZLTcJDex-IdM1Mc_yzQ9LsfjWiU28RmsRIJc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1fcb24406222d48a7674a084e6bed3c6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -MFbzWt9-s...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.870 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:10.363Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.219 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600cdabf19a9db18e07c19 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:10.612Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cdabf19a9db18e07c19 {
      sessionID: '1fcb24406222d48a7674a084e6bed3c6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1fcb24406222d48a7674a084e6bed3c6.fvsgcZXM1k6G9559Ka5xzBd8kp3UGNpXvXf%2FYQVSkCo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600cdabf19a9db18e07c19 [32m200[0m 117.343 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:11.621Z"}
  console.log
    CSRF token generation: {
      sessionID: '5f792b036f73a3458ab44ebbc17a8752',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uj8K9KA0-m5k7jp77R_FoxaXrMFB8NLABAy4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5f792b036f73a3458ab44ebbc17a8752

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rVU077nAYk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.852 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:11.725Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 160.552 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600cdbbf19a9db18e07c45 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:11.982Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cdbbf19a9db18e07c45 {
      sessionID: '5f792b036f73a3458ab44ebbc17a8752',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5f792b036f73a3458ab44ebbc17a8752.TqHEJbHaNELkG9qYbvPiqEIFIkdhuVlZNxhXwUqU8ss',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600cdbbf19a9db18e07c45 [32m200[0m 159.441 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:12.145Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd51b126033bdff1bd45775cebb917ca8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: b6hRlM6d-jCcC3_NnvU8Bpcv5bkbwjxKuSuY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d51b126033bdff1bd45775cebb917ca8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Dm_OwXCUkj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.346 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:12.155Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.255 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:13.163Z"}
  console.log
    CSRF token generation: {
      sessionID: '0c802133cfa53aada60798d5e26f23bb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rKsk3F1u-yifHhxOTxBS28YqyadXpZwn8kY4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0c802133cfa53aada60798d5e26f23bb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ytFSjjNEQv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.049 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:13.262Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.231 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600cddbf19a9db18e07c74 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:13.537Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cddbf19a9db18e07c74 {
      sessionID: '0c802133cfa53aada60798d5e26f23bb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0c802133cfa53aada60798d5e26f23bb.9R4%2B8eSaDyaZkrhn39GRdvEAOHT7InO%2Bc9K7z5c%2FcyA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600cddbf19a9db18e07c74 [32m200[0m 93.201 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:13.634Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.991 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:14.529Z"}
  console.log
    CSRF token generation: {
      sessionID: '0262d30f350a4235ce649aae396ce4c1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nYcNfz1G-sVMK4xGJOOdt_j8UFHSAmYmIxY8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0262d30f350a4235ce649aae396ce4c1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ocGgbOkzoy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.216 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:14.629Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 168.381 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600cdebf19a9db18e07ca0 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:14.910Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cdebf19a9db18e07ca0 {
      sessionID: '0262d30f350a4235ce649aae396ce4c1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0262d30f350a4235ce649aae396ce4c1.FTZO7eUhdUzuNSjAtnk4pPmVH0GLunTwqJvBXLEx8KU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600cdebf19a9db18e07ca0 [32m200[0m 89.144 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:15.869Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b74a9d086386b54d4997d2fd4af2ec3d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2rHu7tqP-7gQpQ4Y3FhxIeuARh9ZYJqbwCyc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b74a9d086386b54d4997d2fd4af2ec3d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: o3G2wU6fj5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.573 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:15.992Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.786 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600ce0bf19a9db18e07ccb {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:16.259Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce0bf19a9db18e07ccb {
      sessionID: 'b74a9d086386b54d4997d2fd4af2ec3d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab74a9d086386b54d4997d2fd4af2ec3d.wM5MxHl5jEeiVZ8z47TNGMr7E9ftKAyRGrCHJ2ifir0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600ce0bf19a9db18e07ccb [33m409[0m 86.550 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:17.205Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb4eb71080bdd4d51eb68ccbe8495e00',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FGGyyc0v-s6mv_9RxP7kDc7fwYB6MfqM2jng

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb4eb71080bdd4d51eb68ccbe8495e00

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KPx-y7Xsp6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.202 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:17.302Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.649 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600ce1bf19a9db18e07cf0 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:17.538Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce1bf19a9db18e07cf0 {
      sessionID: 'bb4eb71080bdd4d51eb68ccbe8495e00',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abb4eb71080bdd4d51eb68ccbe8495e00.3Livv%2FOddzSqc%2FL5yS0qc%2FXH4c1cQ%2F8i22R8BPVwmjE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600ce1bf19a9db18e07cf0 [33m400[0m 57.820 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:18.463Z"}
  console.log
    CSRF token generation: {
      sessionID: '01bd0d520d69892ac74a2a76e3d34cec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qEz2fkio-egTcc3F0MsF7XvQI-ki1VHMvGjU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 01bd0d520d69892ac74a2a76e3d34cec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 82eE0WYt_J...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.539 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:18.568Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.867 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:18.935Z"}
  console.log
    CSRF token generation: {
      sessionID: '75b28ca168aa0cb4ecc9565006bd383b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5WsGTgbu-VIDth7aN-snQ-OxD6d4paXwUV60

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 75b28ca168aa0cb4ecc9565006bd383b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FsQANRkwwf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.108 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:18.950Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.352 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/68600ce2bf19a9db18e07d20 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:19.117Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce2bf19a9db18e07d20 {
      sessionID: '75b28ca168aa0cb4ecc9565006bd383b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A75b28ca168aa0cb4ecc9565006bd383b.Alpz%2FULAH8d27zg0EHnogzIcTN4r%2BoBS%2Fc3DEZmeNiI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/68600ce2bf19a9db18e07d20 [33m403[0m 58.069 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:20.038Z"}
  console.log
    CSRF token generation: {
      sessionID: '7362a331f6fc48488b993fe416ef75b2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: m0iZZRmk-sMPczZyIVnjv3CMgkTlJDx5FIHs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7362a331f6fc48488b993fe416ef75b2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZN1KgJ_a_0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.568 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:20.152Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.459 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/68600ce4bf19a9db18e07d50 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:20.394Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce4bf19a9db18e07d50 {
      sessionID: '7362a331f6fc48488b993fe416ef75b2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7362a331f6fc48488b993fe416ef75b2.MOuE9I2RVMeFDbOpufwHaJuHgPxi4pauoVopQ9%2B2CSA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/68600ce4bf19a9db18e07d50 [32m200[0m 119.014 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:21.402Z"}
  console.log
    CSRF token generation: {
      sessionID: '686437809a400a82e1962b355c7a7f1d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0BXQX3lX-sSqvDUvn2toMcM607A6j9r8XwKs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 686437809a400a82e1962b355c7a7f1d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u-UVWh0fY5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.775 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:21.513Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 180.071 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/68600ce5bf19a9db18e07d77 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:21.801Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce5bf19a9db18e07d77 {
      sessionID: '686437809a400a82e1962b355c7a7f1d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A686437809a400a82e1962b355c7a7f1d.y%2BXwlANVYTju0JK%2BBUWTzGSKR5quMevAA8lpueikrao',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/68600ce5bf19a9db18e07d77 [33m400[0m 59.161 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:22.723Z"}
  console.log
    CSRF token generation: {
      sessionID: '49f61eb68420ffb8f1add595113492c3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lM55KlqZ-VnpPM9TQUJL1M6TXjtfknK7qRi0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 49f61eb68420ffb8f1add595113492c3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pAzbUenHnt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.381 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:22.834Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.132 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/68600ce6bf19a9db18e07da1 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:23.118Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce6bf19a9db18e07da1 {
      sessionID: '49f61eb68420ffb8f1add595113492c3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A49f61eb68420ffb8f1add595113492c3.85rWs41p35fZkZxPsu%2B00gOTLdPD5zelG4O0VDlXV1U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/68600ce6bf19a9db18e07da1 [33m400[0m 58.463 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:24.050Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b7002e8b740708f8987c84266c3dc313',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v1dEF4qG-xjHynhiO1mmzqJThggjZTsg5NHw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b7002e8b740708f8987c84266c3dc313

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cVifeZK1Oi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.320 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:24.164Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.413 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:24.527Z"}
  console.log
    CSRF token generation: {
      sessionID: '241c764aa62409cf99885e4bbe062e6c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ii89B9iG-_2hWyTp7OCxSX0TXJqAMSl7wJoc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 241c764aa62409cf99885e4bbe062e6c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PRjLzQP-fy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.854 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:24.535Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.294 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/68600ce8bf19a9db18e07dd2 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:24.687Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce8bf19a9db18e07dd2 {
      sessionID: '241c764aa62409cf99885e4bbe062e6c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A241c764aa62409cf99885e4bbe062e6c.%2FlblfshUDk7qnHdsCoeEXXXHWW8pMA%2BW2XS4OWzaC90',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/68600ce8bf19a9db18e07dd2 [33m403[0m 58.386 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:25.606Z"}
  console.log
    CSRF token generation: {
      sessionID: '849a3eb87c052b202ca5789578443656',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5z4h4lkm-xAzIONngt_4zkIwvkKddJbw_Stk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 849a3eb87c052b202ca5789578443656

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9RX3q1zT1E...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.512 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:25.705Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.757 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/68600ce9bf19a9db18e07e04 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:25.973Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ce9bf19a9db18e07e04 {
      sessionID: '849a3eb87c052b202ca5789578443656',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A849a3eb87c052b202ca5789578443656.7ugYW4oMF3t%2FKd91ow2MonWfxnr6PvZDKZYaWyD17AM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/68600ce9bf19a9db18e07e04 [33m404[0m 117.445 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:26.959Z"}
  console.log
    CSRF token generation: {
      sessionID: '4845203680120af24d449d402eef6bac',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RJ1u7EfN--vKjCghK-uUN7yThYVCMKWmyeVQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4845203680120af24d449d402eef6bac

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pB6WjRzS6s...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.984 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.077Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.973 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/68600cebbf19a9db18e07e2f/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.317Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cebbf19a9db18e07e2f/reset-password {
      sessionID: '4845203680120af24d449d402eef6bac',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4845203680120af24d449d402eef6bac.2Pw8v3iwKPnOSQkTyIln97TqU2gkSqbdiAVDEIXMIIw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/68600cebbf19a9db18e07e2f/reset-password [32m200[0m 189.740 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.511Z"}
  console.log
    CSRF token generation: {
      sessionID: '8cba66d7011516174a2109702cb99f9c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: r02xXaDo-agvviQR4XXVZYEINIWj_2oS1Uv8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8cba66d7011516174a2109702cb99f9c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: USnNSTKfxc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.497 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.520Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.154 ms - 644[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.679Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f2bba039b5afa892b065e7822f3d9249',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lFjReubh-AL4OW80Hc7v_BslmdeOEYkXcTtw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f2bba039b5afa892b065e7822f3d9249

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J4XvJPsT8Z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.451 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:27.690Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 114.108 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:28.657Z"}
  console.log
    CSRF token generation: {
      sessionID: '5cefe415bcb5e6f1db23fddc8382acee',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KNEdQBqb-iRimkBcKXHTTjWyNIp4M0nyo8Zo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5cefe415bcb5e6f1db23fddc8382acee

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WTYpyNhzxX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.516 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:28.769Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.468 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/68600cecbf19a9db18e07e61/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:29.031Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cecbf19a9db18e07e61/reset-password {
      sessionID: '5cefe415bcb5e6f1db23fddc8382acee',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5cefe415bcb5e6f1db23fddc8382acee.pVL9RpcelHcWGQ4Kk9XXb8foV2FBCwmJ%2F8u7HjduCKw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/68600cecbf19a9db18e07e61/reset-password [32m200[0m 175.041 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:30.097Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b50d4fc2ecf22fc9436d8cecd459c218',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TahCiSTy--HnhBkz0pf6zhD9T2fh0hos5zZw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b50d4fc2ecf22fc9436d8cecd459c218

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: y7GK4ibNNl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.087 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:30.202Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.667 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/68600ceebf19a9db18e07e8f/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:30.462Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600ceebf19a9db18e07e8f/reset-password {
      sessionID: 'b50d4fc2ecf22fc9436d8cecd459c218',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab50d4fc2ecf22fc9436d8cecd459c218.fd6WcYO3gwtCYFbbqdfiyMc4SIJa8i1ZEXjeunUC%2Bt0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/68600ceebf19a9db18e07e8f/reset-password [33m400[0m 61.387 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:31.393Z"}
  console.log
    CSRF token generation: {
      sessionID: '36a71d6bb080199048e8dc08a6185ba1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aPBuYTFb-ZujkWD7piCE5UpjNjsd7E_sABMo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 36a71d6bb080199048e8dc08a6185ba1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4ISmOfN0Zj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.318 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:31.495Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 166.012 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:31.840Z"}
  console.log
    CSRF token generation: {
      sessionID: 'de98530c05398b31793fe8d576f907fa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eO7ePIC6-weySB1kdt1jE5sIL1BEtv1dcJHc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: de98530c05398b31793fe8d576f907fa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: V9tsHneKD5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.249 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:31.849Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 154.482 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/68600cefbf19a9db18e07eb9/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:32.008Z"}
  console.log
    CSRF check for: /api/v1/administrators/68600cefbf19a9db18e07eb9/reset-password {
      sessionID: 'de98530c05398b31793fe8d576f907fa',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ade98530c05398b31793fe8d576f907fa.NsD5VxM2QKchflTXvCIemoGlra7EQ8Um8x3vIOzC6%2BE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/68600cefbf19a9db18e07eb9/reset-password [33m403[0m 60.658 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:32.927Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9a593775bffe287c4b560ede5367b2d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jwerR48m-5Kj1GLSE9qhUb3wyiPs3WIN7Qjs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9a593775bffe287c4b560ede5367b2d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZhETMRBN9u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.405 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:33.027Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.042 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:33.177Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 28.690 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:34.068Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e04d833e10a09d16d02ef35d9b2713b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QujWqsmL-w3lgQAqIn6822tk_yIDOv9v_23o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7e04d833e10a09d16d02ef35d9b2713b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kURx0W2I4T...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.163 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:34.168Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.968 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:34.320Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 1.099 ms - 47[0m
PASS tests/integration/administrator.test.js (47.8 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1931 ms)
      ✓ should filter by active status (1384 ms)
      ✓ should support pagination (2400 ms)
      ✓ should require admin authentication (1148 ms)
      ✓ should require administrator permissions (1470 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1353 ms)
      ✓ should return 404 for non-existent administrator (1231 ms)
      ✓ should handle invalid ObjectId (1241 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1544 ms)
      ✓ should validate required fields (1228 ms)
      ✓ should validate email format (1226 ms)
      ✓ should validate password strength (1207 ms)
      ✓ should prevent duplicate emails (1216 ms)
      ✓ should require administrators.create permission (1455 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1355 ms)
      ✓ should update email (1376 ms)
      ✓ should update password (1543 ms)
      ✓ should deactivate administrator (1366 ms)
      ✓ should not allow updating adminId (1337 ms)
      ✓ should validate email uniqueness on update (1336 ms)
      ✓ should prevent self-deactivation (1261 ms)
      ✓ should require administrators.update permission (1572 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1368 ms)
      ✓ should prevent self-deletion (1319 ms)
      ✓ should prevent deleting last administrator with all permissions (1327 ms)
      ✓ should require administrators.delete permission (1557 ms)
      ✓ should handle non-existent administrator (1352 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1696 ms)
      ✓ should clear login attempts on password reset (1441 ms)
      ✓ should validate password strength (1294 ms)
      ✓ should require administrators.update permission (1535 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (1142 ms)
      ✓ should require authentication (1111 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:36.066Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.523Z"}
  console.log
    CSRF token generation: {
      sessionID: '433f0b4ac92e6b5e0d30bee03a616cf3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JdkaYkY3-x_tisCHsbMgyzPwY2zyEgBg6kec

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 433f0b4ac92e6b5e0d30bee03a616cf3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SNp194aG77...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.866 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.533Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 9.056 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.545Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.171 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.558Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.294 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.563Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.120 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.569Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.863 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.572Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.651 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.577Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.789 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.581Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.500 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.586Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.628 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.589Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.563 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.594Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.771 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.598Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.953 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.613Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.255 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.618Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.074 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.625Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.008 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.630Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.592 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.634Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.500 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:37.638Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.844 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:38.709Z"}
  console.log
    CSRF token generation: {
      sessionID: '325351ce3cd8a9bad2e0eeec231cdf27',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9jKzE2lk-_GibPcU3V-0HJ8jpv7ibhnYF-ss

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 325351ce3cd8a9bad2e0eeec231cdf27

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RUAmQ1Wx3R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.037 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:38.718Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 122.307 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:38.844Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 133.876 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:38.981Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 135.004 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:39.120Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 116.096 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:39.247Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 122.099 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:40.208Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ed30977395d6e0873b9a074fd485e591',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dLeOZEOo-vFObspjBycStg-fg00M7vzNFZf0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ed30977395d6e0873b9a074fd485e591

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pHhO9zXx3q...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.304 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:40.217Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.892 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:41.065Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd050c07f7857a9c1c60dabe098e8a584',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XAh9ZVCS-CNh-ZbhNQ-jzjgpXsmEMWJOcWnc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d050c07f7857a9c1c60dabe098e8a584

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _bR9vxHD6S...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.427 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:41.073Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.627 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.027Z"}
  console.log
    CSRF token generation: {
      sessionID: '21d98c7a1c10164925e859ae34483259',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0hhNAtny-TsGJOxUsPjWSgC72Tsx_KWzEA2A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 21d98c7a1c10164925e859ae34483259

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LF2GYPX7ea...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.446 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.041Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.264 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.047Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.522 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.051Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.507 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.054Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.580 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:42.931Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bbb503c61d0e630ad88c75dee58e33e3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MEKD0vwS-nZHcz8YrDdyTkO6mT16q2TYlWlQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bbb503c61d0e630ad88c75dee58e33e3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ChngjvYl8G...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.888 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:43.092Z"}
[0mPOST /api/v1/customers/register [33m400[0m 2.002 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:43.943Z"}
  console.log
    CSRF token generation: {
      sessionID: '0f97fe37c2ed45e24a982993af7e5895',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: if3rQClR-1hBQtoPb-A32NiGxcZ8kkj2-Jkc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0f97fe37c2ed45e24a982993af7e5895

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZkkTMzntA0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.012 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:44.144Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-2848a00e-5c69-4104-870b-57d89a4c3ff4

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 173.942 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:45.170Z"}
  console.log
    CSRF token generation: {
      sessionID: '1cd312a49c1a393e66aa634dbb85c05f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AGHb0Zsf-wcaiNAjtjPk-uJFh7Bzpe1I6sds

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1cd312a49c1a393e66aa634dbb85c05f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nwkQsoVask...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.749 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:45.290Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:45.454Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:40:45.455Z","userId":"68600cfd275dbb8cf3cdc27a","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.522 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:45.459Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '1cd312a49c1a393e66aa634dbb85c05f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1cd312a49c1a393e66aa634dbb85c05f.VeetW%2BZkcueLrpDa2VPSmNvELC58vlAVWt7HpElWzvg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 60.140 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:46.364Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ff67fd904bccc11e0d5131bead11822a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0Myg2EMV-ZO6BqPctc3qZjAg_y_fEehWm4t4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ff67fd904bccc11e0d5131bead11822a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TYwvSmxU3j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.719 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:46.481Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:46.628Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:40:46.629Z","userId":"68600cfe275dbb8cf3cdc2a2","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.213 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:46.632Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: 'ff67fd904bccc11e0d5131bead11822a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aff67fd904bccc11e0d5131bead11822a.9WPdSkwkd%2FdlAxw590yvPMeA5rAdsbsSWJ8kS9JVHyA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"68600cfe275dbb8cf3cdc2ac","targetType":"administrator","timestamp":"2025-06-28T15:40:46.831Z","userId":"68600cfe275dbb8cf3cdc2a2","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 200.345 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:47.676Z"}
  console.log
    CSRF token generation: {
      sessionID: '7bbc0db1de8626effba617c5fce8840f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qA7QKYBr-GVBUt0azcIdOOSasPr7DSpfb0UY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7bbc0db1de8626effba617c5fce8840f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FVYPyZNE0V...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.542 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:47.780Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:47.927Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:40:47.928Z","userId":"68600cff275dbb8cf3cdc2ce","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.492 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:47.931Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '7bbc0db1de8626effba617c5fce8840f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7bbc0db1de8626effba617c5fce8840f.mUDba3YUY3mv78BI9ZdnCq3rE3V99wEPQI%2F%2Bqbog7KY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 58.762 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:48.863Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e051fed1719fe363b667061caf0b04d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9l9gK0l1-GtlEgN9ydVSTZ91VBH7Rn2HsdpM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7e051fed1719fe363b667061caf0b04d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VyAsVbSJXv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.891 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:48.979Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:49.126Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:40:49.126Z","userId":"68600d00275dbb8cf3cdc2f6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.360 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:49.130Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '7e051fed1719fe363b667061caf0b04d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7e051fed1719fe363b667061caf0b04d.bGjK9bEbNmZJWQ6FpvNuOFAZ9bn%2FtPAtS9N1e3q2g%2Bo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMCGERDTS72A485"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"68600d01275dbb8cf3cdc2ff","targetType":"operator","timestamp":"2025-06-28T15:40:49.305Z","userId":"68600d00275dbb8cf3cdc2f6","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 175.935 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:50.154Z"}
  console.log
    CSRF token generation: {
      sessionID: '199ec0491e50d0752e955727da97a86c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XI1UckBW-N-CaQ5ON2tmB3mMT8kKU6nUU7eM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 199ec0491e50d0752e955727da97a86c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oNDUqJW2PW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.041 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:50.253Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 59.317 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:50.342Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 1.902 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:51.179Z"}
  console.log
    CSRF token generation: {
      sessionID: '7effb4d301a7b5b85ea1b23d4e488f6b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UJIBTZf3-sM9xZSIQ7nYZ4p0z-CwYTjTgw04

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7effb4d301a7b5b85ea1b23d4e488f6b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sRDkDxsQ12...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.844 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:51.294Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 61.372 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:51.387Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 119.601 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:52.380Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec6e29c658b1f427dcc77214524dff31',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NuXhm6mX-X7PnESps3G_zXe7rGuwhmNg9KE0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec6e29c658b1f427dcc77214524dff31

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kLB44vQ2wy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 14.108 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:52.531Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:52.726Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 194.364 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:53.595Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ed65b5c0ad3e7ed72982e3829b26efa',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1R6OGH0q-qMtjhrazI06UCLv3nGdu3439wZI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ed65b5c0ad3e7ed72982e3829b26efa

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1Ei6RMapyU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:53.607Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.150 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:54.453Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a7127f1683c46b578aa929a0191f98ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4GVye5lq-4T2TOGziWdDQNI-L9O1dALaM8DU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a7127f1683c46b578aa929a0191f98ce

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fh5oPlx9vL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.975 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:54.462Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.750 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:55.304Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd0949c50d6ffdbedaa1b9137562862cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WwLd4jSS-F_zNLM1sSQSUW12SWqK9ZRFbTi8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d0949c50d6ffdbedaa1b9137562862cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vctJM0RMUo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.254 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:55.314Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 131.257 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:56.289Z"}
  console.log
    CSRF token generation: {
      sessionID: '9664134acae475ebe02ae32f247d3efd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PiQDLobf-DEkEgUBde5TOi7NLLUdF-h47h58

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9664134acae475ebe02ae32f247d3efd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Gb8ibNbXUU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.093 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:56.300Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 131.920 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (21.917 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (2059 ms)
      ✓ should accept strong passwords during affiliate registration (1498 ms)
      ✓ should reject passwords containing username (856 ms)
      ✓ should reject passwords containing email (956 ms)
      ✓ should reject passwords with sequential characters (910 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (1014 ms)
      ✓ should accept strong passwords for customer registration (1224 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1186 ms)
      ✓ should accept strong passwords for administrator creation (1320 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1183 ms)
      ✓ should accept strong passwords for operator creation (1293 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1023 ms)
      ✓ should accept strong passwords during password reset (1202 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1215 ms)
      ✓ should handle case-insensitive username/email validation during registration (857 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (848 ms)
      ✓ should accept passwords with mixed character distribution (988 ms)
      ✓ should handle Unicode characters in passwords appropriately (983 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:58.016Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:58.778Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd74c33e03ccdb1cb8077333c7a8d0955',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C6OBFNwZ-8nhE3wzZ-I-A8ZY1yIkW0kS8qRc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d74c33e03ccdb1cb8077333c7a8d0955

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G80GHWmqey...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.472 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:58.895Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:59.079Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:40:59.080Z","userId":"68600d0a490efba162dd5994","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 184.228 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:59.086Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ae51eeddd417dfdb4ca87c4aa68983b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fDGUhtqQ-Gaizmu3a6NxfNijxzwTAtKYaoVQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ae51eeddd417dfdb4ca87c4aa68983b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6kciRAc1KM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.837 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:59.186Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:40:59.354Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:40:59.354Z","userId":"68600d0b490efba162dd59a8","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 168.494 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:59.359Z"}
  console.log
    CSRF token generation: {
      sessionID: '89cecbcdc3795ffd1ccab50a12e8ce64',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QFP4Z7cD-4-tmtPS3bG3PgaUuBLCrea5W7Yo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 89cecbcdc3795ffd1ccab50a12e8ce64

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: l7ybpWVyGG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.688 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:40:59.522Z"}
[0mGET /api/v1/operators [32m200[0m 196.984 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:00.672Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bed9cfe9ccd5e15544688e3777f55db2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vmGwouQg-uvuZxhh-7h1Yx6BWC6m5fFveHJw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bed9cfe9ccd5e15544688e3777f55db2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DfUNGEcdGZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.607 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:00.788Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:00.943Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:00.943Z","userId":"68600d0c490efba162dd59df","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.342 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:00.947Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd6879503e394df1cf637794a8398a90d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Fj0fpsNl-Tz18lU0GoWF1wiI-qi5sKroNYpw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d6879503e394df1cf637794a8398a90d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ErP4NxWwZJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.053 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:01.074Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:01.224Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:01.225Z","userId":"68600d0c490efba162dd59e5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.242 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:01.229Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f47fd55f14b50a1199a070b3fe14aaf6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1jRR20X5-Vi9oVMl1hEtbW04AUGQMWzkbcYw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f47fd55f14b50a1199a070b3fe14aaf6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HWYrXciG1X...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.398 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:01.332Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 144.504 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:02.326Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc894a4d33c83b15c54b682b8aea88cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lABtbOkP-mKBhyfgz4S3O3X1psKu9jKLILwE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc894a4d33c83b15c54b682b8aea88cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1o7oPYqSch...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.161 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:02.447Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:02.608Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:02.608Z","userId":"68600d0e490efba162dd5a11","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.859 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:02.612Z"}
  console.log
    CSRF token generation: {
      sessionID: '9521976c074d136d0bd6410460eefd10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: I712HaKN-noHrvq_el0yp1MkJjgm657Oaqdc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9521976c074d136d0bd6410460eefd10

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: k7BRA_iutT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.638 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:02.752Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:02.922Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:02.922Z","userId":"68600d0e490efba162dd5a17","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 169.646 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:02.925Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c76993b7a93d51a465d319462fec781e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ykNkurSE-TGS8LXgaSz84b58ki3wijDxVonY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c76993b7a93d51a465d319462fec781e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: layXamqbCs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.397 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:03.033Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 114.524 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:03.999Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c40916d0657d2eb06cf5f426ee28c98e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1C4nfIKh-yz0LlYgrOYSIwKKqaVTzJlvW60Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c40916d0657d2eb06cf5f426ee28c98e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nmiM3e9BPV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.819 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:04.114Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:04.264Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:04.265Z","userId":"68600d10490efba162dd5a42","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.058 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:04.268Z"}
  console.log
    CSRF token generation: {
      sessionID: '05af15889c0f876f70995583e7fcd99a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jn9XzKC8-HjQx-ncThGgJ05VS8slLnlGCtKA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 05af15889c0f876f70995583e7fcd99a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MJ1Upj1bVL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.194 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:04.366Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:04.521Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:04.522Z","userId":"68600d10490efba162dd5a48","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.979 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:04.527Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad022a9e98ec1b450e396e1dcc8a522a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KC1KZ9Gi-D9LiVg2v2IJ4iJdpappHIooyNeA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad022a9e98ec1b450e396e1dcc8a522a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xty05ZI5iJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.376 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:05.699Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 141.417 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:06.670Z"}
  console.log
    CSRF token generation: {
      sessionID: '2276a2c745f3774930b5dbca6fab8e3c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PnK9nzpP-Leb0bWqVMwmvDV6gzgajVMlSW08

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2276a2c745f3774930b5dbca6fab8e3c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lpNX05AQEr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.735 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:06.800Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:06.955Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:06.955Z","userId":"68600d12490efba162dd5a91","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.140 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:06.960Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e48cd762fe0b523f9e4713260561aa8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RKLe5KHZ-75pGipejuDsOCmfYjPvPTO_zONY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e48cd762fe0b523f9e4713260561aa8b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3vzlFa_yk7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.561 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:07.056Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:07.221Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:07.222Z","userId":"68600d12490efba162dd5a97","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 166.742 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:07.226Z"}
  console.log
    CSRF token generation: {
      sessionID: '361508502ec6ea14b4c11d469221f5ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 03g07I1k-z2paV4i1UFZWLlH5UBeMimVI_aM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 361508502ec6ea14b4c11d469221f5ec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GywVTPrDHt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.460 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:07.238Z"}
[0mGET /api/v1/operators [33m401[0m 1.369 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.065Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ca355f35c24016d31b3ea0ef35b9f0cc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tuRrnoSp-2A24FMUgu1l2Vo9_R3HAYnFd87M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ca355f35c24016d31b3ea0ef35b9f0cc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zd7KG-oyd1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.453 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.184Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:08.347Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:08.347Z","userId":"68600d14490efba162dd5abc","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.736 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.352Z"}
  console.log
    CSRF token generation: {
      sessionID: '4625968c681ea20059d9a1bf341193d7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6qjl1A72-AjympYYoE2ggxO2jCLZJoX6eaVQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4625968c681ea20059d9a1bf341193d7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fRHcx4qHkc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.626 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.453Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:08.612Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:08.612Z","userId":"68600d14490efba162dd5ac2","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 159.391 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.616Z"}
  console.log
    CSRF token generation: {
      sessionID: '1885bc2cece77db57f377443ee371364',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Oxru2F8N-rGE75aCVQd6CYg1ZxQRwPEjM-4o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1885bc2cece77db57f377443ee371364

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8zcFoE2F-4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.936 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.715Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:08.874Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:08.874Z","userId":"68600d14490efba162dd5ac8","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.078 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:08.877Z"}
[0mGET /api/v1/operators [33m403[0m 55.534 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:09.746Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea4aad7572987a719ab13c52c515cfde',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ypKNSt9q-VU-yusJiLmDE1Csemx-6ee9BQaE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea4aad7572987a719ab13c52c515cfde

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: baiPp1lBSC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.566 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:09.847Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:09.998Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:09.999Z","userId":"68600d15490efba162dd5aef","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.347 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:10.006Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dbbaf3b9f51ed3695b238abd98236c00',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mkh2O8YM-GnvMigVDMUvgylt-qzPv8Zv-rsc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dbbaf3b9f51ed3695b238abd98236c00

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RjUROEEvH5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.502 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:10.114Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:10.268Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:10.269Z","userId":"68600d16490efba162dd5af5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.324 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:10.274Z"}
  console.log
    CSRF token generation: {
      sessionID: '9374b0d409704ac047ea09983b15f41a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qjoHMtBd-pkhLPJq9CYxBASkU8MuHgihLrIU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9374b0d409704ac047ea09983b15f41a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G18vdAlOSk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.748 ms - 67[0m
[34mdebug[39m: GET /api/v1/administrators/operators/68600d16490efba162dd5afb {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:10.384Z"}
[0mGET /api/v1/administrators/operators/68600d16490efba162dd5afb [32m200[0m 122.277 ms - 761[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.350Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e74de24cdf69ec26dfb31c594820649',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5wYv4JUx-oEpuOfEK_ucx0RNLmgbXgTBMt9A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e74de24cdf69ec26dfb31c594820649

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: floghZu4NB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.921 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.456Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:11.604Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:11.604Z","userId":"68600d17490efba162dd5b20","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.456 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.607Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5514b25a2303df1e0a25f62dbc7b14b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ubzPYuV8-kwPjisojnG-Bk8_OFC-J6VQhM2s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d5514b25a2303df1e0a25f62dbc7b14b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ok3Dwz7TbF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.838 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.703Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:11.855Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:11.856Z","userId":"68600d17490efba162dd5b26","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.321 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.860Z"}
  console.log
    CSRF token generation: {
      sessionID: '0092e926aac8d28c8f49f7628e30edf8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WxTzZoRp-7x2u0cXDFU-hsdBah4lslF7Wx7w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0092e926aac8d28c8f49f7628e30edf8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K61RK7AnSe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.586 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/68600d17490efba162dd5b26 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:11.885Z"}
[0mGET /api/v1/operators/68600d17490efba162dd5b26 [32m200[0m 84.336 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:12.805Z"}
  console.log
    CSRF token generation: {
      sessionID: '432323a9326be56576a0fe9b6f2d4bf2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: e8L0iHqv-B6Kn4VX0z_cSJpWyFBiThAbAXL8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 432323a9326be56576a0fe9b6f2d4bf2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: finfEnIEsp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.850 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:12.905Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:13.056Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:13.057Z","userId":"68600d18490efba162dd5b4e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.543 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:13.061Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2c16640d72f2c41a8bd904d58107500',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9sDnIRsN-GpT7XDrBDkeQzZMGd5_Ms_5zRiQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b2c16640d72f2c41a8bd904d58107500

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4ZUHreYImW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.214 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:13.162Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:13.338Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:13.338Z","userId":"68600d19490efba162dd5b54","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 175.283 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:13.341Z"}
  console.log
    CSRF token generation: {
      sessionID: '8cd8295ffcbf626bc8677c531ea47185',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QsZ5jOg8--jf4MiGc7m6RV94oEqFaaWUkvOA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8cd8295ffcbf626bc8677c531ea47185

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SX3aK9MYCa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.024 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/68600d19490efba162dd5b5a {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:13.456Z"}
[0mGET /api/v1/operators/68600d19490efba162dd5b5a [33m403[0m 56.674 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.353Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7cbc7ce3164c33159d4cd56823bee81',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PDahyHwv-lDUUCz1es_4_v7N4MOnRHC6cJw4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7cbc7ce3164c33159d4cd56823bee81

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hXoVc9SXV8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.010 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.455Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:14.604Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:14.605Z","userId":"68600d1a490efba162dd5b7d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.596 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.609Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c318e4596684f38c8a990145b54aa9ab',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rgBZ8kjr-VFIwYknDf5JwHbw8MnELBnKDhqw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c318e4596684f38c8a990145b54aa9ab

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PbJTiY8z5h...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 35.512 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.742Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:14.893Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:14.906Z","userId":"68600d1a490efba162dd5b83","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 164.579 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.912Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4fbe6bcd705082b36c5d6734f724cba',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F2CbJxDK-t9cJoujEcSqqVZOX2m0s497QUFg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4fbe6bcd705082b36c5d6734f724cba

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G2vzalgVnx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.180 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/68600d1a490efba162dd5b89 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:14.927Z"}
[0mGET /api/v1/operators/68600d1a490efba162dd5b89 [33m404[0m 122.830 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:15.899Z"}
  console.log
    CSRF token generation: {
      sessionID: '049296402406616998cffe77634a2d56',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ONyqFlYd-OWGzcltLJqv59c8K3_07J6CF9Us

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 049296402406616998cffe77634a2d56

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: He_u1tmxeU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.181 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.003Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:16.172Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:16.172Z","userId":"68600d1b490efba162dd5bad","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.644 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.177Z"}
  console.log
    CSRF token generation: {
      sessionID: '012c7a129cb4b043f7d2e6caafa5c9d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Gqa0AAcO-eCh4rN02XLwqd2JUcl2mdhCmdyE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 012c7a129cb4b043f7d2e6caafa5c9d1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ahCTU906R_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.596 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.277Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:16.428Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:16.429Z","userId":"68600d1c490efba162dd5bb3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.930 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.434Z"}
  console.log
    CSRF token generation: {
      sessionID: '101c4d069abd6cbaa752fc27a955acbe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4Cv9RcnH-CeDBTXH0mowvmvMjj48AhtxRxyo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 101c4d069abd6cbaa752fc27a955acbe

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pNW8njnX1K...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.312 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.456Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '012c7a129cb4b043f7d2e6caafa5c9d1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A012c7a129cb4b043f7d2e6caafa5c9d1.SDZOUgfWIb4OAoVwXC5sigbSIjSagvuTC%2BlGYtYzt3A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMCGERYXUA4A7B0"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"68600d1c490efba162dd5bbc","targetType":"operator","timestamp":"2025-06-28T15:41:16.668Z","userId":"68600d1b490efba162dd5bad","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 212.734 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:16.675Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:16.823Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMCGERYXUA4A7B0","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:16.824Z","userId":"68600d1c490efba162dd5bbc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.046 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:17.666Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e3077406f43b9fde9c95a8271fe7df07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NqsObYB8-MYbDXaOmqQvnDZLCV3MG9e0WLBg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e3077406f43b9fde9c95a8271fe7df07

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YlDSfO0K_2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.188 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:17.765Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:17.921Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:17.921Z","userId":"68600d1d490efba162dd5be1","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.736 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:17.926Z"}
  console.log
    CSRF token generation: {
      sessionID: 'da1d27897875c3cd3ade15ae24939faf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lVs0JCf0-7v7zHIFgiO_S1560cI1EdeTMyfo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: da1d27897875c3cd3ade15ae24939faf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3SxfcuP8n1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.115 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:18.029Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:18.182Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:18.183Z","userId":"68600d1d490efba162dd5be7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.889 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:18.186Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f303d3eb5dd34cb5224de7a886942c2e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RGrScIWl-CSGSfXUaCpFvokirgFdyFUhEzs0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f303d3eb5dd34cb5224de7a886942c2e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9kCkPkqox6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.935 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:18.197Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'da1d27897875c3cd3ade15ae24939faf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ada1d27897875c3cd3ade15ae24939faf.jvEEkPT68hhnXkaUoPHG5i8uH%2FBMjibjyIsj9NPgUag',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 58.541 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.083Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef343cadf9642fbfca8bf86a287855e8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XrvpA0Xu-rzo43gBfxxnGfFGOhcSwg41genM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef343cadf9642fbfca8bf86a287855e8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NzoFSBA3pm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.888 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.190Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:19.340Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:19.340Z","userId":"68600d1f490efba162dd5c0e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.869 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.344Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d3adb5220294fad1452b81f112fd960',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NexB3I49-V4H9lFHYxFFB1I3xZtfxNtoMDS0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d3adb5220294fad1452b81f112fd960

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BvZpz-8DVK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.767 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.445Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:19.613Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:19.613Z","userId":"68600d1f490efba162dd5c14","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 168.141 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.616Z"}
  console.log
    CSRF token generation: {
      sessionID: '892144f0894571a8d1ad5f38361d1365',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Eimd4usv-n0dWow3JWOCQw55yZkJMZw-rXUk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 892144f0894571a8d1ad5f38361d1365

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8H4WnSWKjK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.695 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:19.626Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '3d3adb5220294fad1452b81f112fd960',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3d3adb5220294fad1452b81f112fd960.4ih3p5u52Z2AkELEukNDtcCBNa0NKZcvwia3gAGTk5k',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 58.399 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:20.514Z"}
  console.log
    CSRF token generation: {
      sessionID: 'eb4e6aea2bf63eddba750e0831b8675c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eJg8XRId-FQBRO44Xv81tpLKPOzpJ8heeb9E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: eb4e6aea2bf63eddba750e0831b8675c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pvIIH6C9_x...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.221 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:20.631Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:20.779Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:20.779Z","userId":"68600d20490efba162dd5c3b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.109 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:20.784Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd829e72ade3d2bd9a9905d7aa1513723',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UGjlTVFe-9d6U-hx3hRN1sabD3K4lEy0mVag

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d829e72ade3d2bd9a9905d7aa1513723

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rx9HecfEal...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.552 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:20.895Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:21.046Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:21.047Z","userId":"68600d20490efba162dd5c41","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.208 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:21.051Z"}
  console.log
    CSRF token generation: {
      sessionID: '57bd3884ed3d1e0326d0adc6b62c41e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7JUZK7Yf-d9JwKXRmcdttmjiYCm2vFcokeSc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 57bd3884ed3d1e0326d0adc6b62c41e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gOoGSm6q4p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.417 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:21.062Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'd829e72ade3d2bd9a9905d7aa1513723',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad829e72ade3d2bd9a9905d7aa1513723.TrDL2qv90uY92uu00bbUd5Aqrj5k%2FmPApn1jgywO2dI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 57.782 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:21.940Z"}
  console.log
    CSRF token generation: {
      sessionID: '0d8b0bb4bfb47bc64d40e1110f53a747',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oSOzRbCP-6QMpQZjx1agsqgg20rsRjC6NG5A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0d8b0bb4bfb47bc64d40e1110f53a747

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1w3EdEH8RP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.826 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:22.040Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:22.188Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:22.189Z","userId":"68600d22490efba162dd5c68","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.919 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:22.193Z"}
  console.log
    CSRF token generation: {
      sessionID: '90f7ce8c5e3bba0cad2e05c57c1c6cf7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BN8gujkN-acseJz0Tb9iwNWNLJwhtUzzk_HM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 90f7ce8c5e3bba0cad2e05c57c1c6cf7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OE3dbQX7tP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.348 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:22.290Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:22.457Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:22.458Z","userId":"68600d22490efba162dd5c6e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 167.609 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:22.462Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec28922af87a3a358058c805b843f027',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zZVTIi5K-jypO8vuRVlqyyOS1-DwWXyOJSTA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec28922af87a3a358058c805b843f027

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NU-yWV6SpE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.232 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:22.471Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '90f7ce8c5e3bba0cad2e05c57c1c6cf7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A90f7ce8c5e3bba0cad2e05c57c1c6cf7.ai8r8WVT1y2r3FtOvptUTmnRBlW6in861K7AgCSJ%2BHA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m409[0m 87.140 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:23.380Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc65e5d02e9f9f8951873ea0885a6b5f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nGkuJ9Ia-Ks3N3pBtP902m6Q8O1XOVZX72J0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc65e5d02e9f9f8951873ea0885a6b5f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e-TciJi9Vk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.966 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:23.483Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:23.630Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:23.631Z","userId":"68600d23490efba162dd5c96","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.347 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:23.635Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7d627a3041b952a0f559c10720136c7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vuY9XQjg-osFCwW23GSC9Qia2Tc2n0LPwSr0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7d627a3041b952a0f559c10720136c7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: skXW2w828O...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.074 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:23.738Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:23.905Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:23.905Z","userId":"68600d23490efba162dd5c9c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 167.295 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:23.909Z"}
  console.log
    CSRF token generation: {
      sessionID: '49a1e65730e7871992a0d595a9310e0a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3Cg1Eakq-PuctM2zR964tlJS-GORcHTZS3_A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 49a1e65730e7871992a0d595a9310e0a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aGWkuCtVaP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.928 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:24.018Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:24.170Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:24.170Z","userId":"68600d23490efba162dd5ca2","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.736 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:24.173Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'dc65e5d02e9f9f8951873ea0885a6b5f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adc65e5d02e9f9f8951873ea0885a6b5f.StOSdcOlDIW1mgAyv92B0963bJ9kkJXwD19RaVV5b98',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m403[0m 56.918 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.060Z"}
  console.log
    CSRF token generation: {
      sessionID: '8464777734e4c73dee6265df6684615f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9k6oAxch-5GKRxelyO7uxgRHsn3fndhjqKbI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8464777734e4c73dee6265df6684615f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tbMKuuMh0z...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.023 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.176Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:25.324Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:25.324Z","userId":"68600d25490efba162dd5cc9","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.377 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.327Z"}
  console.log
    CSRF token generation: {
      sessionID: '0be31b074ef13473c8777c49e6c06a8e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Z77qpG6N-JPOd2Z1zugquR9Kh1WA5Pj4uN4k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0be31b074ef13473c8777c49e6c06a8e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aKd3GcqFgl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.147 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.424Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:25.570Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:25.570Z","userId":"68600d25490efba162dd5ccf","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.922 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.574Z"}
  console.log
    CSRF token generation: {
      sessionID: '65e1977930cb6b399b31b33503de4afb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CwkGbrqL-EgtEobpepzsvVg738XeApeuzrn0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 65e1977930cb6b399b31b33503de4afb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xDyqLI9NKm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.464 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d25490efba162dd5cd5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:25.686Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d25490efba162dd5cd5 {
      sessionID: '0be31b074ef13473c8777c49e6c06a8e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0be31b074ef13473c8777c49e6c06a8e.RwFS0Wmj%2BiY6yYOZQlXq0ebrMrPCnBkcY6n7tpRgvXc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/68600d25490efba162dd5cd5","targetId":"68600d25490efba162dd5cd5","targetType":"operator","timestamp":"2025-06-28T15:41:25.831Z","userId":"68600d25490efba162dd5cc9","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/68600d25490efba162dd5cd5 [32m200[0m 145.592 ms - 442[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:26.643Z"}
  console.log
    CSRF token generation: {
      sessionID: '47a7c7b5e3aff2cec060b92f549036d0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XNHHm0TB-XeXLoVV4cVN7ZJbrqnVxLffv3Y8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 47a7c7b5e3aff2cec060b92f549036d0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Efp6NvpAtB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.880 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:26.738Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:26.881Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:26.882Z","userId":"68600d26490efba162dd5cfb","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 144.111 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:26.885Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea9464bb9f3ec9c8700465a74b6294b0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qeLtMcvn-LxuYKBeCGpwm1rqZ-hEwzXMSXwA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea9464bb9f3ec9c8700465a74b6294b0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -JvKW8MBsL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.111 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:26.980Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:27.128Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:27.129Z","userId":"68600d26490efba162dd5d01","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.815 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:27.132Z"}
  console.log
    CSRF token generation: {
      sessionID: '8b192419dfdcac1655704e23e327895d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UX0FOD9I-wUHuno13luAcq70AWR15e2DZ-BE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8b192419dfdcac1655704e23e327895d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Y-ETm6qT7L...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.248 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d27490efba162dd5d07 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:27.232Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d27490efba162dd5d07 {
      sessionID: 'ea9464bb9f3ec9c8700465a74b6294b0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aea9464bb9f3ec9c8700465a74b6294b0.dCuXBV1fh4E9vxj%2B3TxYs2WsiKTj8U9WjH%2BymRKnTHk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/68600d27490efba162dd5d07","targetId":"68600d27490efba162dd5d07","targetType":"operator","timestamp":"2025-06-28T15:41:27.487Z","userId":"68600d26490efba162dd5cfb","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/68600d27490efba162dd5d07 [32m200[0m 255.776 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:27.491Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:27.633Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:27.634Z","userId":"68600d27490efba162dd5d07","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.161 ms - 606[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:28.452Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fc8c2fdf5bd4856a7f42338922a50084',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aU2l6J5S-rE0blWosdFqu3ZA54KDU7OjmSBM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fc8c2fdf5bd4856a7f42338922a50084

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8XISVRAdfE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.344 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:28.556Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:28.725Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:28.726Z","userId":"68600d28490efba162dd5d33","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.940 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:28.729Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ac3485f8d18e305bd16952e53f74be6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: t2ouEs8t-3bd51yzh9TqGGMztfw-BMlbEDmY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ac3485f8d18e305bd16952e53f74be6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6pvDj3miyb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.322 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:28.834Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:28.979Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:28.980Z","userId":"68600d28490efba162dd5d39","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.491 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:28.983Z"}
  console.log
    CSRF token generation: {
      sessionID: '5ac2a40cf429d88dbe96a0be6198bb07',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OiV9OBDi-naD5-PySZLZiVv5yYsaDhPoj4zw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5ac2a40cf429d88dbe96a0be6198bb07

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gZ2AO9H9bb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.279 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d28490efba162dd5d3f {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:29.078Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d28490efba162dd5d3f {
      sessionID: '0ac3485f8d18e305bd16952e53f74be6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0ac3485f8d18e305bd16952e53f74be6.S3pA9BVVV4mlQTPZ9xBNDyZxPqk15ez6DCjSKhvn%2Fwg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/68600d28490efba162dd5d3f","targetId":"68600d28490efba162dd5d3f","targetType":"operator","timestamp":"2025-06-28T15:41:29.220Z","userId":"68600d28490efba162dd5d33","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/68600d28490efba162dd5d3f [32m200[0m 143.799 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:29.226Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T15:41:29.255Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 29.755 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.073Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a692566a542f4d9a56f7c89ca90b83f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: URffMZAf-hY72Zhcjb9BxZQAut5Abx21WUt0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6a692566a542f4d9a56f7c89ca90b83f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ocb5peIqGB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.995 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.177Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:30.343Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:30.343Z","userId":"68600d2a490efba162dd5d66","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 166.341 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.348Z"}
  console.log
    CSRF token generation: {
      sessionID: '108b873594b8c3905ea416fae2e97971',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cCYYjyfS-7neBY1TU6XLe77glBUZHScuoruI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 108b873594b8c3905ea416fae2e97971

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: miOuPOJUvk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.888 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.463Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:30.610Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:30.610Z","userId":"68600d2a490efba162dd5d6c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.020 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.614Z"}
  console.log
    CSRF token generation: {
      sessionID: '01f560e0d9252d1d22e803b53eb6e96f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: q0ogqcmM-PM_3ae-aHOksgebYBKMcC-I8yfI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 01f560e0d9252d1d22e803b53eb6e96f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9ax_h4pQg8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.962 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.724Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:30.873Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:30.873Z","userId":"68600d2a490efba162dd5d72","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.220 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d2a490efba162dd5d72 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:30.877Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d2a490efba162dd5d72 {
      sessionID: '6a692566a542f4d9a56f7c89ca90b83f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6a692566a542f4d9a56f7c89ca90b83f.QHBHYQ2n14FabKr5vvrYzZOvOFlXg3SUM0%2BhHcVm19c',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d2a490efba162dd5d72 [32m200[0m 170.778 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:31.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '3bdafe64317efd5c726f80911e45be4e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TN5nf4tl-aXbPNe3FgtxyvwBeB9dwxF9yjYA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3bdafe64317efd5c726f80911e45be4e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ni_CLNVFMf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.005 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:31.991Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:32.139Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:32.140Z","userId":"68600d2b490efba162dd5d9b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.215 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:32.143Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd7a9184bf2080f6aa5ede6f1e486c3b4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: r2duM35h-01X1raOtQ3qhlAaXsPBjcrdDHT4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d7a9184bf2080f6aa5ede6f1e486c3b4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jF5dKB1X7-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.975 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:32.244Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:32.389Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:32.390Z","userId":"68600d2c490efba162dd5da1","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.884 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:32.393Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd92d70d6d4cf7b4a54e204bf412e656a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QJzZUJdO-HnuFFqM2CT7EfNjwwZmK7OSKDoA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d92d70d6d4cf7b4a54e204bf412e656a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AspU9MlKN2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.917 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:32.493Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:32.645Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:32.645Z","userId":"68600d2c490efba162dd5da7","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.276 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d2c490efba162dd5da7 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:32.649Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d2c490efba162dd5da7 {
      sessionID: '3bdafe64317efd5c726f80911e45be4e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3bdafe64317efd5c726f80911e45be4e.xaSSzOyblLTItA32xHYq3FRarAqq%2F3beMrOfp7yEG5E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d2c490efba162dd5da7 [32m200[0m 114.063 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:33.575Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f75c1510c7add81a001545e7f08bca6d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mT4ZfRzi-PMcJYYVJZflyuocoJrqKmGFAH_U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f75c1510c7add81a001545e7f08bca6d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zvpat7yiCH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.765 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:33.679Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:33.841Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:33.841Z","userId":"68600d2d490efba162dd5dd0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 161.875 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:33.845Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c39d03787e278b63052259d7a942ad6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IdikiyWw-9B2SUI-hxhpn7lQH8YgKJo2vlfE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8c39d03787e278b63052259d7a942ad6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LSIxCv3sHK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.079 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:33.944Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:34.092Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:34.093Z","userId":"68600d2d490efba162dd5dd6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.878 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:34.096Z"}
  console.log
    CSRF token generation: {
      sessionID: '931a5492edb69381bc2444003914f0c0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kTGTyp9z-8nVm6MRHjIdxCB8rQN3DQTt7QgU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 931a5492edb69381bc2444003914f0c0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _bmINGUS22...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.358 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d2e490efba162dd5ddc {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:34.202Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d2e490efba162dd5ddc {
      sessionID: '8c39d03787e278b63052259d7a942ad6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8c39d03787e278b63052259d7a942ad6.BJ6OW%2F4vvEYwPzQ5iqzgPq%2F4UjE8QyrSR%2BcFxzklGtc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/68600d2e490efba162dd5ddc","targetId":"68600d2e490efba162dd5ddc","targetType":"operator","timestamp":"2025-06-28T15:41:34.337Z","userId":"68600d2d490efba162dd5dd0","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/68600d2e490efba162dd5ddc [32m200[0m 135.623 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.153Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7dc313ec12c93ffca8ced05a9ae0c02',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iYxVeP9D-0YJ_KtbJ50tsInQRNLQkahIR6tE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7dc313ec12c93ffca8ced05a9ae0c02

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Wi2xKVItKP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.527 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.252Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:35.399Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:35.399Z","userId":"68600d2f490efba162dd5e02","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.350 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.404Z"}
  console.log
    CSRF token generation: {
      sessionID: '05cefde19321438c8b9d2aec357ed4c4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3AjOMFij-tWc6s3OmmM1TP9FKZLLNCz198S4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 05cefde19321438c8b9d2aec357ed4c4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AzlPIFXlu5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 21.107 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.534Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:35.700Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:35.701Z","userId":"68600d2f490efba162dd5e08","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 166.929 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.704Z"}
  console.log
    CSRF token generation: {
      sessionID: '2a27f3537d5f69edb7e89b3113be34c8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qlMCubaV-lEEClOyRI725bgq7r0eoKLFiFv4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2a27f3537d5f69edb7e89b3113be34c8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -520OO-ukS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.126 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d2f490efba162dd5e0e {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:35.814Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d2f490efba162dd5e0e {
      sessionID: '05cefde19321438c8b9d2aec357ed4c4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A05cefde19321438c8b9d2aec357ed4c4.ylt4Ckdae%2F4M3e%2FdB%2B0lMsqp9YzKGtkXZbtyAxp6NJ0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d2f490efba162dd5e0e [33m409[0m 137.503 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:36.970Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dca79aadd47ea17b0dee0eeef2d4b11b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zRBFiJxI-bVvMF85922GKVo9BTkD09RM5fE8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dca79aadd47ea17b0dee0eeef2d4b11b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3QtJ79WiV1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.738 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:37.078Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:37.229Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:37.230Z","userId":"68600d31490efba162dd5e34","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.352 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:37.236Z"}
  console.log
    CSRF token generation: {
      sessionID: '485f660ad0cd1ff155d082b9ec405285',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jF1ABhmk-0rWzVrrIgGb4fIN0aLVR01lTNNA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 485f660ad0cd1ff155d082b9ec405285

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VpJFMkVuZt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.248 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:37.335Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:37.496Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:37.497Z","userId":"68600d31490efba162dd5e3a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 162.170 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:37.500Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c55db00b428cb4f60177db32a5336d0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w6jBDJpc-A97jSwr1W0jqKM1lVIkhnYqJ7O0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2c55db00b428cb4f60177db32a5336d0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Pr_L85xMje...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.476 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/68600d31490efba162dd5e40 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:37.616Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d31490efba162dd5e40 {
      sessionID: '485f660ad0cd1ff155d082b9ec405285',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A485f660ad0cd1ff155d082b9ec405285.L0GYPTMic1s4ZaBarVe0d3UzkBwatltLslS0Yz0T6G4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"0","11":"e","12":"f","13":"b","14":"a","15":"1","16":"6","17":"2","18":"d","19":"d","2":"6","20":"5","21":"e","22":"3","23":"4","3":"0","4":"0","5":"d","6":"3","7":"1","8":"4","9":"9","timestamp":"2025-06-28T15:41:37.766Z"}
[0mDELETE /api/v1/operators/68600d31490efba162dd5e40 [32m200[0m 149.868 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:38.602Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b14e4ce3d29bf87e2b508dbfd1b2f761',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dhxIRJd0-P2Wn2IyMKpcy3ItlGZbLX8qj9ro

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b14e4ce3d29bf87e2b508dbfd1b2f761

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 64V0PKme1O...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 15.281 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:38.729Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:38.885Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:38.885Z","userId":"68600d32490efba162dd5e67","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.275 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:38.889Z"}
  console.log
    CSRF token generation: {
      sessionID: '3b454038df3286a49843057f84c525d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IwPiAHPE-nA0fUPdvkVPOjI2UWPTMMWy8pGs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3b454038df3286a49843057f84c525d9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sXu6zKtZKG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.082 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:39.005Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:39.167Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:39.167Z","userId":"68600d32490efba162dd5e6d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 162.278 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:39.170Z"}
  console.log
    CSRF token generation: {
      sessionID: '12228ce0b3c0ecfa68f7d18ffc94c8b7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tmmFMeEM-5fUDEXJHHsxI9hArNKETIV9BUCs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 12228ce0b3c0ecfa68f7d18ffc94c8b7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 90J1KMwrMv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.074 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/68600d33490efba162dd5e73 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:39.301Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d33490efba162dd5e73 {
      sessionID: '3b454038df3286a49843057f84c525d9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3b454038df3286a49843057f84c525d9.bzS104spXXzpX18Z2BgalO3X7OX8EDNhZGvh3h8iLsk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/68600d33490efba162dd5e73 [33m400[0m 113.472 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.234Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a900f44c30e0ea3ea5cf2d3fa96a7c0c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Q6Ix75J9-m7cFrEcLyj7jw_KsGMaEEAyJyDA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a900f44c30e0ea3ea5cf2d3fa96a7c0c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0KArUT2fqb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.678 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.345Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:40.494Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:40.494Z","userId":"68600d34490efba162dd5e99","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.433 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.497Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd7dc1c7045acb2686d24f878bc96913d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L0aZk0lg-EX60FIbMOPG3aXhrrCRH7vlm_SY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d7dc1c7045acb2686d24f878bc96913d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B4f4teI2XZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.821 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.597Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:40.776Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:40.777Z","userId":"68600d34490efba162dd5e9f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 179.852 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.780Z"}
  console.log
    CSRF token generation: {
      sessionID: '80f3733758aa95d3072085ff7c84ee3b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dnySJcmS-VP1jbhWvp7Sqvlt_QLcPnh5Vzjc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 80f3733758aa95d3072085ff7c84ee3b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NuXBMpDuSg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.348 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:40.982Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:41.132Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:41.133Z","userId":"68600d34490efba162dd5ea7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.619 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/68600d34490efba162dd5ea5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:41.136Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d34490efba162dd5ea5 {
      sessionID: 'a900f44c30e0ea3ea5cf2d3fa96a7c0c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa900f44c30e0ea3ea5cf2d3fa96a7c0c.a5PRrg%2Fc4rD6ta550yYTHi%2BRXAycB4hCAb4HNxwnGMU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/68600d34490efba162dd5ea5 [33m403[0m 56.161 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.006Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f4fb8169e9b7d0e61e7e5599fd9074d3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: do82OVA7-xeZryvuw9STqvxVm2Nwv8dZtcxs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f4fb8169e9b7d0e61e7e5599fd9074d3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0rYNtFPOsF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.812 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.113Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:42.272Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:42.273Z","userId":"68600d36490efba162dd5ece","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.808 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.277Z"}
  console.log
    CSRF token generation: {
      sessionID: '9a8739c5c05d840aa02e4b66d8f3a47f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KLeVbMhx-NQsBeA5y9SMdddlAY3I3HoGPe8Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9a8739c5c05d840aa02e4b66d8f3a47f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uNYfyFzAuw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.161 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.391Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:42.554Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:42.554Z","userId":"68600d36490efba162dd5ed4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 163.711 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.558Z"}
  console.log
    CSRF token generation: {
      sessionID: '0144cda788f0799357bf276871835c64',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iKfOH9Oj-IGqh1Le6ChBmPmO5g3oh6iJbXIg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0144cda788f0799357bf276871835c64

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MWVS4WezKE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.664 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/68600d36490efba162dd5edc {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:42.677Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d36490efba162dd5edc {
      sessionID: '9a8739c5c05d840aa02e4b66d8f3a47f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9a8739c5c05d840aa02e4b66d8f3a47f.dNCTxwdBNECC2Sp%2BnXSltpVXmUZA%2F6Vzbebo%2FMUGyL0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/68600d36490efba162dd5edc [33m404[0m 86.569 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:43.593Z"}
  console.log
    CSRF token generation: {
      sessionID: '448b5861ed880904089bb9c77e3f7740',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZVPJzMIJ-3kkptm4vnVBG0LX_jS1BF4vPdgs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 448b5861ed880904089bb9c77e3f7740

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SxJG8ALm5E...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.631 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:43.695Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:43.851Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:43.852Z","userId":"68600d37490efba162dd5eff","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.453 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:43.855Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb5106170eaf6f058552b46b6edeb097',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7O7UHcn0-sqZeIUoTJs3S9Zj7qw3PUnPxlV0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb5106170eaf6f058552b46b6edeb097

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: n7nu0MCC3M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.304 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:43.958Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:44.105Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:44.105Z","userId":"68600d37490efba162dd5f05","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 147.744 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:44.109Z"}
  console.log
    CSRF token generation: {
      sessionID: '7aa682baf364fde4b78275b3feb9eca0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uJY6Np1v-7T2ovKH6CWL_J7ML_88Ftz_D3bI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7aa682baf364fde4b78275b3feb9eca0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TH_uHOjeO_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 16.089 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/68600d38490efba162dd5f0b/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:44.224Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d38490efba162dd5f0b/reset-pin {
      sessionID: 'fb5106170eaf6f058552b46b6edeb097',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afb5106170eaf6f058552b46b6edeb097.Y0RDEBky8BqKek2ZCSpipFuaSOFdhPKQCc1sLVSQpCw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"0","11":"e","12":"f","13":"b","14":"a","15":"1","16":"6","17":"2","18":"d","19":"d","2":"6","20":"5","21":"e","22":"f","23":"f","3":"0","4":"0","5":"d","6":"3","7":"7","8":"4","9":"9","timestamp":"2025-06-28T15:41:44.406Z"}
[0mPOST /api/v1/operators/68600d38490efba162dd5f0b/reset-pin [32m200[0m 183.128 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:44.412Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:44.576Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-28T15:41:44.576Z","userId":"68600d38490efba162dd5f0b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 164.364 ms - 555[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:45.413Z"}
  console.log
    CSRF token generation: {
      sessionID: '164a1dace8889b2ab713fb3c94ce9f0c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P0b5LcVf-tOcOUPr7QDyl8teRIjntM4PEM-0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 164a1dace8889b2ab713fb3c94ce9f0c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AjU6H0KAcK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.920 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:45.525Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:45.695Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:45.695Z","userId":"68600d39490efba162dd5f34","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 170.199 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:45.698Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bdc6fc856b0155a3e1f36b8417dc4788',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8d9EkOd2-L3UjrpB4WvklRDs3McamElTMfoI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bdc6fc856b0155a3e1f36b8417dc4788

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 17kRqYEZzD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 14.446 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:45.806Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:45.974Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:45.975Z","userId":"68600d39490efba162dd5f3a","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 168.363 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:45.978Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e03a94f7e2b31afa32e9bb6160da072',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Uo9J1bqr-wM3MtyHv1hcMmL_xQv94ggye0aE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5e03a94f7e2b31afa32e9bb6160da072

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5jC_-Grro2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.717 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/68600d39490efba162dd5f40/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:46.107Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d39490efba162dd5f40/reset-pin {
      sessionID: 'bdc6fc856b0155a3e1f36b8417dc4788',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abdc6fc856b0155a3e1f36b8417dc4788.9zq8T%2BpIlXyIUA13KTVxn%2FBEAHfC%2Fy%2FpgPxVwkOaLXg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"0","11":"e","12":"f","13":"b","14":"a","15":"1","16":"6","17":"2","18":"d","19":"d","2":"6","20":"5","21":"f","22":"3","23":"4","3":"0","4":"0","5":"d","6":"3","7":"9","8":"4","9":"9","timestamp":"2025-06-28T15:41:46.286Z"}
[0mPOST /api/v1/operators/68600d39490efba162dd5f40/reset-pin [32m200[0m 179.189 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.135Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd67a95fe3081f6af840598a69ca17741',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E9b6ueqg-30i5V9LtmB3MoTGqLWBv4tcvvxo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d67a95fe3081f6af840598a69ca17741

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5gJGgENPDP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.300 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.256Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:47.404Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:47.404Z","userId":"68600d3b490efba162dd5f67","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.228 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.407Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dfb820ba7309d7818203cfb8f46e6917',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9CEKzvUx--P_Yj6Vjim5R5icgE5GvYS98cbw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dfb820ba7309d7818203cfb8f46e6917

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lzStv16wRm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.439 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.508Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:47.663Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:47.663Z","userId":"68600d3b490efba162dd5f6d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.148 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.667Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe2fbd4cb1fbf759b6a173db9fc33b9c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZNZ0OGFV-_qx2m6EQnIKNIlZ7-nyq12rr5Uk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe2fbd4cb1fbf759b6a173db9fc33b9c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RMlt-oVLUA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.725 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:47.946Z"}
[0mGET /api/v1/operators/available [32m200[0m 85.889 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:48.876Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b4b8465b71b374695a850429c58c78e3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UFkrk3jP-LjhdtT1qfmQkF-PmhtccRS4V3B0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b4b8465b71b374695a850429c58c78e3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yd1lLhVTb0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.866 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:48.990Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:49.152Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:49.153Z","userId":"68600d3c490efba162dd5f9d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.080 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:49.157Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a98bc035eda04964ad427d5c27de6994',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E1Jd4IbC-fe1lKQK0_lRkW1-Qcesxxq6jND4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a98bc035eda04964ad427d5c27de6994

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uq5pHgjOLV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.477 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:49.261Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:49.430Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:49.430Z","userId":"68600d3d490efba162dd5fa3","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 168.431 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:49.433Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c09960e725c465178331d393a3ac59c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9OSuPUoO-QMzXc3Nk9sb_F-GzQmX9slbK2Kc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c09960e725c465178331d393a3ac59c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hGuFoedeH7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.199 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:49.712Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 86.167 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:50.619Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c4b41cce2611da9f3c91448c0585eae',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BffdEbc8-nCyebFJBRh59Da8FZz1wuxmipJ4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2c4b41cce2611da9f3c91448c0585eae

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: y4OMsIeoik...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.873 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:50.735Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:50.884Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:50.885Z","userId":"68600d3e490efba162dd5fd3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.998 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:50.889Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fee797b8b86962415aef2cfa86ced112',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MX0cTrPO-UL3076YqpJaZDQcQFwRpNyhxRLg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fee797b8b86962415aef2cfa86ced112

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZwGz_lf00D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.852 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:50.987Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:51.151Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:51.152Z","userId":"68600d3e490efba162dd5fd9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 164.892 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:51.155Z"}
  console.log
    CSRF token generation: {
      sessionID: '29f871dfbde075c43c2a8fe27490603f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lnJiYlHh-KosT0snFJcvLuUbbWmWzZxz1PTw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 29f871dfbde075c43c2a8fe27490603f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6pcYwKhSVN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.073 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:51.497Z"}
[0mGET /api/v1/operators/available [32m200[0m 87.525 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:52.418Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b6e175771b4e4c2711bfdd0bb751e6f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FINUDbsH-v8DV7uYdKAShFdl0jdvT4Wiyu-c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0b6e175771b4e4c2711bfdd0bb751e6f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cLb_PuTe40...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.532 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:52.572Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:52.750Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:52.750Z","userId":"68600d40490efba162dd6009","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 178.770 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:52.754Z"}
  console.log
    CSRF token generation: {
      sessionID: '1eab773d1cd64f99e3a4a894d1db450e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: o23eP9Bw-BzQmJ7_J0SXH9IJe4J7Ud0JNAjw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1eab773d1cd64f99e3a4a894d1db450e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lX5aE89o62...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.713 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:52.872Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:53.032Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:53.033Z","userId":"68600d40490efba162dd600f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 157.907 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:53.035Z"}
  console.log
    CSRF token generation: {
      sessionID: '895105b4e7551875052fd2f9b5f1f683',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sbj2jcvC-wUbjBkeXRHfwyL8vPmdahW0s0yo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 895105b4e7551875052fd2f9b5f1f683

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: O59LaS4kZh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.089 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:53.334Z"}
[0mGET /api/v1/operators/available [33m401[0m 2.052 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.183Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef0d055c3ec51cbe8249e53b51f2cf2c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ez2hw3tk-L6BPFRdGKgwGeTWFU4gzLc8mSmQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef0d055c3ec51cbe8249e53b51f2cf2c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DQkjBYN7QC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.566 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.294Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:54.450Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:54.451Z","userId":"68600d42490efba162dd603c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.471 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.455Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a0a48942cfa8fe20dcb8ea468df40868',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GM85MdeK-3m1RHkzCYaa3g1au2eMVJ7kSyfI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a0a48942cfa8fe20dcb8ea468df40868

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mYVPNseAE1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.596 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.562Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:54.730Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:54.731Z","userId":"68600d42490efba162dd6042","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 168.348 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.734Z"}
  console.log
    CSRF token generation: {
      sessionID: '63bdca5b664e9b7b3e4d5219eaff7075',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bPHY3Xa3-bEMAHhSBqhrd5_0XZrFszltVVRg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 63bdca5b664e9b7b3e4d5219eaff7075

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lypKLJRdDV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.992 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d42490efba162dd6048/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:54.865Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d42490efba162dd6048/stats {
      sessionID: 'a0a48942cfa8fe20dcb8ea468df40868',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa0a48942cfa8fe20dcb8ea468df40868.AoA87OBl2eSb0nmf%2BCaUecAduZHxOEXpDelaeKoipHQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d42490efba162dd6048/stats [32m200[0m 119.372 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:55.835Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6c94c66f3d8178b208725517ded22da',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lfb1KaGR-wRphj_P8-cHDhP3jQzGy_nYCqF0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a6c94c66f3d8178b208725517ded22da

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: H0JQAiWNua...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.372 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:55.934Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:56.085Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:56.086Z","userId":"68600d43490efba162dd606d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.288 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:56.091Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f0e034fc95566dc2348e339fb5a618eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: V35hEmWr-j6pH4Eh8zB7mUl4vN36sYlN1a0c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f0e034fc95566dc2348e339fb5a618eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KXJFA8CkXs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.084 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:56.197Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:56.360Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:56.360Z","userId":"68600d44490efba162dd6073","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 163.711 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:56.364Z"}
  console.log
    CSRF token generation: {
      sessionID: '1ce5368aafc4c5df4e397a8e60e20c59',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mLYWWjLi-otUriURWchmw_V5Knxn2MjatWpY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1ce5368aafc4c5df4e397a8e60e20c59

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: G2PZ8KkQ4j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.550 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d44490efba162dd6079/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:56.466Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d44490efba162dd6079/stats {
      sessionID: 'f0e034fc95566dc2348e339fb5a618eb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af0e034fc95566dc2348e339fb5a618eb.IdQVBQFnChTEXTAqVN3krL094vSB2DHjJwkg7WRzMY8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d44490efba162dd6079/stats [32m200[0m 119.078 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:57.437Z"}
  console.log
    CSRF token generation: {
      sessionID: '39fd09dc44ec8f18d1eeeb9de3dff4a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 94xHtCNY-qE7ePDwb712cLgLFA3E_Gean0dI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 39fd09dc44ec8f18d1eeeb9de3dff4a5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1KgUwUsQba...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.674 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:57.540Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:57.689Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:57.690Z","userId":"68600d45490efba162dd609e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.560 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:57.693Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e32983baf2e3679b1e363834e1704fe6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BcemNQTP-XA8qvlrL07bVB4GvOA6CIRtnbQY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e32983baf2e3679b1e363834e1704fe6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -RIIWdfWC9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.834 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:57.794Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:57.939Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:57.939Z","userId":"68600d45490efba162dd60a4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.085 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:57.943Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cf366ffa631d1b2ccd52bdfb3196f959',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Ij0NefOe-6klf_ks4i3FjPFFW5nX-LmdVpME

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cf366ffa631d1b2ccd52bdfb3196f959

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Abg6i8ff6y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.091 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d45490efba162dd60aa/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:58.051Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d45490efba162dd60aa/stats {
      sessionID: 'e32983baf2e3679b1e363834e1704fe6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae32983baf2e3679b1e363834e1704fe6.VPB2NAarB%2Btp5AdcJylBtJLjb5xDAdghzicdfaJGh3A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d45490efba162dd60aa/stats [32m200[0m 118.142 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.033Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4f7972dfe1dff0d67aae31550c52fb8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: BNpA42S7-j4Lk0bmIe3mZwATV_IZ8Pz3wqbI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4f7972dfe1dff0d67aae31550c52fb8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZmyHHlKx2d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.176 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.154Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:59.306Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:41:59.307Z","userId":"68600d47490efba162dd60cf","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.012 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.311Z"}
  console.log
    CSRF token generation: {
      sessionID: '6815ec6ae061f26a17d1d75b8224bf00',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8uZC5ojY-twt5dCR6Cdb5nPAQePyWOQ1EU00

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6815ec6ae061f26a17d1d75b8224bf00

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bq_Z4U8lc3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.542 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.414Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:41:59.565Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:41:59.566Z","userId":"68600d47490efba162dd60d5","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.586 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.569Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a66ee559bd38c60a2e800f091ff47d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XAcS7YUr-RwzHATHIF7tn-pzB8vo8aKsBmVM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a66ee559bd38c60a2e800f091ff47d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NTEn-JGHq7...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.954 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/68600d47490efba162dd60db/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:41:59.682Z"}
  console.log
    CSRF check for: /api/v1/operators/68600d47490efba162dd60db/stats {
      sessionID: '6815ec6ae061f26a17d1d75b8224bf00',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6815ec6ae061f26a17d1d75b8224bf00.gD25u80oQu8LThZZEPElXbyVjh%2B%2B762m50%2FoDDhU%2Fg0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/68600d47490efba162dd60db/stats [33m400[0m 58.829 ms - 62[0m
PASS tests/integration/operator.test.js (63.343 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2269 ms)
      ✓ should filter by active status (1658 ms)
      ✓ should filter by on-shift status (1668 ms)
      ✓ should support pagination (2676 ms)
      ✓ should require authentication (1395 ms)
      ✓ should require operator management permissions (1682 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1590 ms)
      ✓ should allow operators to view their own profile (1464 ms)
      ✓ should prevent operators from viewing other operators (1547 ms)
      ✓ should return 404 for non-existent operator (1533 ms)
    POST /api/v1/operators
      ✓ should create new operator (1779 ms)
      ✓ should validate required fields (1412 ms)
      ✓ should validate email format (1438 ms)
      ✓ should validate shift time format (1422 ms)
      ✓ should prevent duplicate emails (1442 ms)
      ✓ should require operators.manage permission (1681 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1583 ms)
      ✓ should update password (1805 ms)
      ✓ should deactivate operator (1625 ms)
      ✓ should allow operators to update their own profile (limited fields) (1794 ms)
      ✓ should prevent operators from changing their own work station (1708 ms)
      ✓ should not allow updating operatorId (1577 ms)
      ✓ should validate email uniqueness on update (1771 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1675 ms)
      ✓ should prevent deleting operator with active orders (1634 ms)
      ✓ should require operators.manage permission (1771 ms)
      ✓ should handle non-existent operator (1588 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1817 ms)
      ✓ should clear login attempts on PIN reset (1725 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1735 ms)
      ✓ should respect limit parameter (1745 ms)
      ✓ should only include active operators (1798 ms)
      ✓ should require authentication (1762 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1653 ms)
      ✓ should update quality score (1601 ms)
      ✓ should update both stats in one call (1598 ms)
      ✓ should validate processingTime is positive (1548 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:01.820Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:02.230Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ffa6f6abcf7dbadfb2d4fc2759d44821',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L0jCDI0H-rVX55WAsH__ShKlLUdvHUtSdCMI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ffa6f6abcf7dbadfb2d4fc2759d44821

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XtK8Ke0cyZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.323 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:03.060Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:03.238Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 177.940 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:04.059Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3ef40399f289621b99aff076243ad0b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YdKOYlan-Ld-HByiLroDKi0bjpmVY39SQx2k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d3ef40399f289621b99aff076243ad0b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eeHbHT1Cy6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.786 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:04.300Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T15:42:04.390Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 90.077 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:05.153Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a7f1aa7d42f54b9ceead7ae668a8cc1c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wT6VaY5g-GMQ_cKT0_hLeo5B7naZAfFSOe3o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a7f1aa7d42f54b9ceead7ae668a8cc1c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Nd22Oo1FN3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.323 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:05.298Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-28T15:42:05.327Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 29.107 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:06.074Z"}
  console.log
    CSRF token generation: {
      sessionID: '7534ca9d378777e4aada166561e73e43',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: x4mVI3E2-tBO-L9vzsDyM7FrPKi-ouXusjdU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7534ca9d378777e4aada166561e73e43

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: o7b_FZk8MN...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.475 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:06.363Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 167.515 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:07.310Z"}
  console.log
    CSRF token generation: {
      sessionID: '5fb3215bdec542f719c2b1d33d895eca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JAT0DhXf-kn-DUwUjM2Gn7ATYPvNJomrws2Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5fb3215bdec542f719c2b1d33d895eca

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6RQjnlNWyp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.621 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:07.589Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 173.191 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:08.502Z"}
  console.log
    CSRF token generation: {
      sessionID: 'db0c4c4475893c025ba3f8199e14995e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QOo3qNLg-JC_LOfdgT6Cy3Nnu2hy_C1qMPjY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: db0c4c4475893c025ba3f8199e14995e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: w6I0GugP-_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.528 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:08.773Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 165.715 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:09.683Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e856b30daa5cfaac3b19b817745f4df',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DQ62dla9-5vYlVNtl7OcbJ5DR0D6rkW2SIyk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7e856b30daa5cfaac3b19b817745f4df

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 89o-VyIhW1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:09.956Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 158.117 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:10.847Z"}
  console.log
    CSRF token generation: {
      sessionID: '265bd8a0dc614a8e4725858a98a88447',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jk5oDtp8-cK2DREcnRqtEOMmqfus75o6eong

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 265bd8a0dc614a8e4725858a98a88447

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pTnd_LOm75...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.391 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:10.985Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 32.048 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:11.746Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e67358d9e88b9d1b33c7ecac81f27a5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: y7yAicql-oDj5FJlrA59l51ENtyQN18WJvKI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e67358d9e88b9d1b33c7ecac81f27a5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Cm2gvUgeTD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.657 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:11.977Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:12.149Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 171.796 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:12.153Z"}
[0mGET /api/v1/auth/verify [32m200[0m 30.999 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:12.922Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b89667b99b57bfd3247f0ee4cf1aa897',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g1Oy3ZX9-qYdZ_hfokm96Ll_02TLM-NIUjHE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b89667b99b57bfd3247f0ee4cf1aa897

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OjGyxVFJN4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.486 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:13.070Z"}
[0mGET /api/v1/auth/verify [33m401[0m 2.142 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:13.818Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a8aaa912b9d4c7a3a9bd9bf6b20758d1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: F4xXv2vQ-wfmScrLRX3xP0FGvkZJfysvnu70

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a8aaa912b9d4c7a3a9bd9bf6b20758d1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Nw7eULkEzo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.787 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:13.958Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.378 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:14.688Z"}
  console.log
    CSRF token generation: {
      sessionID: 'acd5db103ef495d6b5c9427b7c31159b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dtzyMeMR-Xfbbi4JFcj4ibxbnn9mZ4pEMs0k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: acd5db103ef495d6b5c9427b7c31159b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: IRUB9Of5Ai...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.676 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:14.927Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:15.077Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:15.084Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 157.347 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:15.088Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 127.587 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:15.954Z"}
  console.log
    CSRF token generation: {
      sessionID: '5f106687a64be443c8e2bd5d5477f291',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ONWJMOp6-wTwEARfgLCwSx7K2TSWijOclsu4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5f106687a64be443c8e2bd5d5477f291

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Xe39thRVB2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.569 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:16.099Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.927 ms - 89[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:16.829Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:16.833Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bf0683d35e4df41abf4ce5c4de2bf62c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VN0AI1iY-PABih9hE7S3wqbfxKJpL8qAF01E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bf0683d35e4df41abf4ce5c4de2bf62c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xKRSORnCSC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.246 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:17.106Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.919 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:17.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '8734de2aef27468f5531f97dbad7cc3b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: K6heLmhO-IyRu2yhT_o6UxDQiHSnw_x6GlVo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8734de2aef27468f5531f97dbad7cc3b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EbdIB8BrIS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.577 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:18.107Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:18.261Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 153.865 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:18.264Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '8734de2aef27468f5531f97dbad7cc3b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8734de2aef27468f5531f97dbad7cc3b.nZjEaDZPR69KrMr47MHGCrATeJ49Ztb%2FsdijZNvH6i0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 92.545 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:18.360Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.276 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:18.392Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.562 ms - 62[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:18.600Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.164Z"}
  console.log
    CSRF token generation: {
      sessionID: '4dd27b2eef25b6db237c0c2e998a613b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YucoVfFo-DTcJEnDRLdZCXuDJnz7wTl-5LWI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4dd27b2eef25b6db237c0c2e998a613b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2lED-hN-X8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.619 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.407Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:19.568Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 160.881 ms - 544[0m
  console.log
    Got refresh token: 56e0c797524b442f4efa85b5cfc35eedca3e8d8a167b75eed3d522f849a1b28e6156c88ff29a2b56

      at Object.log (tests/integration/auth.test.js:805:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:819:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.586Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.589Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.591Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.593Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:19.594Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.327 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 30.057 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.230 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.141 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 119.314 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjAwZDViNzI2Y2ZmMDQxMjQ3NTllZSIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MTEyNTMzOSwiZXhwIjoxNzUxMTI4OTM5LCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.swY1v94-X1ux-AC0GEKNAI-8II1Ydoa-lq7Pux5YAMY',
          refreshToken: '1a9afa02c6981ff6df5a96f31bf1e167493347e62428252404cc71400a8dbe83d4a73f407a4bec8e'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:821:15)

[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:20.241Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:20.454Z"}
  console.log
    CSRF token generation: {
      sessionID: '231784b6a76073451eaf71bc60bff55d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fpPxD6yx-lU45LJLWy8uLh9m0NA6_HYH300g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 231784b6a76073451eaf71bc60bff55d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ru-YXAhMgx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.344 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:20.708Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:20.858Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.064 ms - 547[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:21.953Z"}
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:21.963Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:22.145Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 182.847 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.161Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.650 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.194Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.197 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.228Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '231784b6a76073451eaf71bc60bff55d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A231784b6a76073451eaf71bc60bff55d.T29HbRjUczLZ0tSEDjQ1cGBNISyjdneFp602zg7vKu0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 94.393 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.326Z"}
[0mGET /api/v1/auth/verify [33m401[0m 30.074 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.360Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.296 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.393Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '231784b6a76073451eaf71bc60bff55d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A231784b6a76073451eaf71bc60bff55d.T29HbRjUczLZ0tSEDjQ1cGBNISyjdneFp602zg7vKu0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 91.814 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:22.488Z"}
[0mGET /api/v1/auth/verify [33m401[0m 30.360 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:23.249Z"}
  console.log
    CSRF token generation: {
      sessionID: '71641761b29d92d0bc771d4d7e38d1bb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LpBEInYs-jVS_OceaB2ERyMDgAM5ngXiwG0k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 71641761b29d92d0bc771d4d7e38d1bb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: f_mI4QD5XU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.157 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:23.486Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T15:42:23.632Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:23.649Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T15:42:23.650Z","userId":"68600d5f726cff0412475a56","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.656 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:24.386Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb9de568a636349f697b54ddbfa4727f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 32TwGJe8-3mlWaGEZXWmPFqxhfAWQKI2pBOM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb9de568a636349f697b54ddbfa4727f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rM4Hh_ma6c...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.739 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:24.646Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T15:42:24.786Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 140.544 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:25.520Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc2ab57929768444b36f2142d1be9d40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: H5XNt7z0-9PGtEeer3PdGTUpGLU78uXt-IOI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc2ab57929768444b36f2142d1be9d40

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0la2Q4tgN9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.760 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:25.766Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T15:42:25.797Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 31.179 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:26.532Z"}
  console.log
    CSRF token generation: {
      sessionID: '17ff420d68c484a9757b9ec21c15bf06',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2O6TvRNh-0Nw13acOyh3LCrfPQR8OCxqLypM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 17ff420d68c484a9757b9ec21c15bf06

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mLDYHMfOae...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.774 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:26.895Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T15:42:27.075Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T15:42:27.075Z","userId":"68600d62726cff0412475ac8","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 180.309 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:27.820Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fa4144c159a6ebb4742b416162beb542',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6ijDvwBu-wgvydeSkuDLfIJZz0pXJdc0T96U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fa4144c159a6ebb4742b416162beb542

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6xHpWdAOKI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.882 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:28.145Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T15:42:28.259Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 114.761 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:28.994Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea3be47f8dc9ad55ea7d916252e1da0f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mgU55Q1i-JKhUy3xELmitakCrPZnyjx2anaU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea3be47f8dc9ad55ea7d916252e1da0f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SLGOILnqZs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.716 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:29.348Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T15:42:29.377Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.821 ms - 82[0m
PASS tests/integration/auth.test.js (29.363 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1856 ms)
      ✓ should fail with invalid credentials (1095 ms)
      ✓ should fail with non-existent username (919 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1237 ms)
      ✓ should login customer using emailOrUsername field with email (1191 ms)
      ✓ should login customer using emailOrUsername field with username (1182 ms)
      ✓ should prioritize emailOrUsername over username field (1164 ms)
      ✓ should return error with invalid emailOrUsername (898 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1176 ms)
      ✓ should fail with invalid token (895 ms)
      ✓ should fail with missing token (869 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1266 ms)
      ✓ should fail with invalid refresh token (879 ms)
      ✓ should fail with expired refresh token (1034 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1297 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1289 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2796 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1137 ms)
      ✓ should fail with invalid administrator credentials (1133 ms)
      ✓ should fail when administrator is inactive (1011 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1289 ms)
      ✓ should fail with invalid operator credentials (1173 ms)
      ✓ should fail when operator is inactive (1127 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:31.031Z"}
(node:2042117) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:31.424Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df682d5891ba0f99692100cbb432de74',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XjEJXQWK-c45bCNm67XEXcgED9bRq9aUUa6I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: df682d5891ba0f99692100cbb432de74

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 268kvTGlvU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.967 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:32.051Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'df682d5891ba0f99692100cbb432de74',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adf682d5891ba0f99692100cbb432de74.vbg4ZuyVUOUQ3VHpIiSb9WflGjY0M3sRlTMxWESUGc4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 288.436 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:33.215Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a09eff1c48861ada913019f56db4bd67',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WzDYzBym-9JaWCZ0pRxwwHs4cnF-U464tR1s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a09eff1c48861ada913019f56db4bd67

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 68RRBQ57PJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.466 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:33.480Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'a09eff1c48861ada913019f56db4bd67',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa09eff1c48861ada913019f56db4bd67.YRsXyadFl0L%2F9x0ZS%2F16z03zTLCvWsX7pC%2FAWeRmaUc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 232.717 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:34.465Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e6fa555ebbe8f1b2124bacabd2638f1f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vackdkGz-cs5jYyQv5Cbgtgpht7vmB4llkeY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e6fa555ebbe8f1b2124bacabd2638f1f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 72rkrrBdY3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.818 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:34.762Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e6fa555ebbe8f1b2124bacabd2638f1f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae6fa555ebbe8f1b2124bacabd2638f1f.KkodXrg4SnVOfLPrK1GJgWaeyKMrAook37Ij06LDvCI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:130:15)

[0mPOST /api/v1/orders [33m400[0m 60.369 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:35.570Z"}
  console.log
    CSRF token generation: {
      sessionID: '9d04a249d1ad22ec11edc1b306db1432',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZUENb63I-Nrx6ddUXS_9SWQIKQgQcVJK9KYE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9d04a249d1ad22ec11edc1b306db1432

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ydyQtwE2xe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 14.452 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:35.854Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '9d04a249d1ad22ec11edc1b306db1432',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9d04a249d1ad22ec11edc1b306db1432.qj1a8KATqij3YHMzBw8OcmcCtgYU3tUbjHgM7SIAtr4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:159:15)

[0mPOST /api/v1/orders [33m400[0m 116.628 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:36.711Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f6ce3708aaada01c0b97345a632a88e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vZ8I0Rw3-ZQC-I4aCUfVnuP7g0isnnaxi9Kw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f6ce3708aaada01c0b97345a632a88e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bzhrqmvudA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.581 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:37.022Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'f6ce3708aaada01c0b97345a632a88e4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af6ce3708aaada01c0b97345a632a88e4.pfAeZfDB4rU9Tw7xWwk3ZrIojg%2B77IZbFRxO5vXOBOE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [33m403[0m 113.610 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:37.871Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2cc6572286fe34953dba046d6e40743',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YpYNXvAf-cO1HsMCGz-_I5_Ly3hnF6h031uk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2cc6572286fe34953dba046d6e40743

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gQGWniTM__...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.315 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:38.135Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'c2cc6572286fe34953dba046d6e40743',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac2cc6572286fe34953dba046d6e40743.yQlKIL4u9l31vq74Er0OwxbfZSKL%2BjWNofAUijHXSRs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:105:15)

[0mPOST /api/v1/orders [33m400[0m 30.599 ms - 444[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:38.906Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c89aa3474b5dfa270ba61a309bd243f6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S46l3Gsb-bNeBqkJi99N5X8rAbPzfrDn5KZY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c89aa3474b5dfa270ba61a309bd243f6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RwXUelYP9U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.224 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:39.216Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 114.737 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:40.094Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c55e84d9cf3ac5f2119776b85a4d1176',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mKH6d2NE-9Kg82pxvKy8HYI-59qiQ3oTI_yk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c55e84d9cf3ac5f2119776b85a4d1176

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -D53mQ8UGH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.242 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:40.399Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 127.080 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:41.280Z"}
  console.log
    CSRF token generation: {
      sessionID: '45ec4970f86833805fbac395d1ab3b45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GFo7lDm9-YM5p9ih9OImwX13BZKAKydaqEAY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 45ec4970f86833805fbac395d1ab3b45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NWgTLULzyD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.515 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:41.585Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 59.599 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:42.390Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b3189f7ae3321a30fa29fec2ae256a78',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TMvYafgE-egBUfIeUc4qovqIvsvzSAnciyGU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b3189f7ae3321a30fa29fec2ae256a78

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Z0XY2CAR7_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.742 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:42.696Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 54.918 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:43.504Z"}
  console.log
    CSRF token generation: {
      sessionID: 'edbd2a3f5fbf296f8f7b9a6be9854627',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: J8a5pDmc-x5lSl2ZroikT000a-QTsUJFPW5w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: edbd2a3f5fbf296f8f7b9a6be9854627

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eK-3HRu2x0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.301 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:43.810Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'edbd2a3f5fbf296f8f7b9a6be9854627',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aedbd2a3f5fbf296f8f7b9a6be9854627.MjNLu4WnLlI3S9yRQ8f%2B6agqgZSy9T7YwwVnyxtD%2BYk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 143.797 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:44.759Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7d6ae5ac3870dc28147b47ab199f2b5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4TSb5wFP-L0vnl3IsoEFFnSMjiYyenhAl6qU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7d6ae5ac3870dc28147b47ab199f2b5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: V7qXGI4Xld...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.863 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:45.114Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'e7d6ae5ac3870dc28147b47ab199f2b5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae7d6ae5ac3870dc28147b47ab199f2b5.O2NOu%2F1MDIN2KyWA8%2F%2BIv2MwGD2Y11yKe326Mn2fcwc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 145.759 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:46.025Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b6bfde291445c45e999397718b857cdd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iLiRknix-5tF9mA2svwHQKCpsysupj0P7pkw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b6bfde291445c45e999397718b857cdd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zCl1OYPO5A...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.629 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:46.388Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'b6bfde291445c45e999397718b857cdd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab6bfde291445c45e999397718b857cdd.YCrmptzkrp3Oqvv88Q0BqzjCUQvZZZ3sFzXp9P8E1rA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 60.241 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:47.203Z"}
  console.log
    CSRF token generation: {
      sessionID: '8751faa8ad058433a03652c40d3dac3e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AHI1wrKs-Mm89CaTVvUgbV5-TNtK49wCO9eU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8751faa8ad058433a03652c40d3dac3e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rPtxInD0Zh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.893 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:47.509Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '8751faa8ad058433a03652c40d3dac3e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8751faa8ad058433a03652c40d3dac3e.1OM8VO7%2FERMbPKrhMpmosGRQ%2FfqU86HFiMSfl2O2xMQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 59.718 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:48.309Z"}
  console.log
    CSRF token generation: {
      sessionID: '889fe622e1e320cff16c0ddbbfce0f2e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rmU1YH3k-DiLFOmn3kh3OiZnKoChG2xXb0Ws

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 889fe622e1e320cff16c0ddbbfce0f2e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A7ebmL6qhQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.601 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:48.645Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '889fe622e1e320cff16c0ddbbfce0f2e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A889fe622e1e320cff16c0ddbbfce0f2e.O8BrMBS8j1AYTJEcgKruFZgQlH8vUPB6UXm7yxmfwgk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 60.176 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:49.448Z"}
  console.log
    CSRF token generation: {
      sessionID: '487a0f02358d076e61322a3f8ff5357f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Nr9Zhbfe-2xyye71EOGx5iuYYBvnQO_e69xU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 487a0f02358d076e61322a3f8ff5357f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4G-J8Pzlvr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:49.769Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '487a0f02358d076e61322a3f8ff5357f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A487a0f02358d076e61322a3f8ff5357f.V%2Fq%2B37U1PuhvtCC63XpkzbvkPjzkPXhY7tTaJXrecaI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 149.493 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:50.701Z"}
  console.log
    CSRF token generation: {
      sessionID: '3f657351cf1ca18216a793d75e11cbfb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jHhjqx6K-nXZr5dMhdx4rQ7bZ3EeEKFJgfZ8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3f657351cf1ca18216a793d75e11cbfb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: g5-6WSnsVb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.711 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:51.010Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '3f657351cf1ca18216a793d75e11cbfb',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3f657351cf1ca18216a793d75e11cbfb.rFEBbLBEh0Bnia0GiCJSz%2BYJ4YYrfWvL9mZzQMf2R3E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 143.861 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:51.900Z"}
  console.log
    CSRF token generation: {
      sessionID: '49ff738d5f9de06d04ac573f6d8483a6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oEAEbBMl-WGBX97XQRaMJ0RFuPZtRsks0oL8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 49ff738d5f9de06d04ac573f6d8483a6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sfaYbw1hEj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.274 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:52.261Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '49ff738d5f9de06d04ac573f6d8483a6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A49ff738d5f9de06d04ac573f6d8483a6.A64%2Firp0uIxdzxTBtIA6sJRpb3GLeo%2F0mdCoJYhbcJU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 56.743 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:53.075Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b18b348e9a4db7d75ea3d14f8c3e441f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 16HPcIAZ-rt6pRrJ5gSVhcbJedjuMLacq79w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b18b348e9a4db7d75ea3d14f8c3e441f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gEiGP9BpDC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.962 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:53.412Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'b18b348e9a4db7d75ea3d14f8c3e441f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab18b348e9a4db7d75ea3d14f8c3e441f.z%2F6pueGQjTE31UnMoVmk97Zk6Tw94efu2huma7mjqFU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 56.660 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:54.209Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef04b1f7f8ae7ac9790826f2c0905295',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 60JQXiZO-EqvGN2BJ_1nuHxI9_99CZL1DFy0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef04b1f7f8ae7ac9790826f2c0905295

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xTLVfBt6cG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.104 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:54.525Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'ef04b1f7f8ae7ac9790826f2c0905295',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aef04b1f7f8ae7ac9790826f2c0905295.e1p3Y7Xpa79C37ZYI5Ayjl7CaPEkzGsKCr1culfNtjQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 122.663 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:55.417Z"}
  console.log
    CSRF token generation: {
      sessionID: '4bc590e74ff898761610ac754a3f6766',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Hlr41kLr-W8Qn1qNNd2HsrpidML94Mq6BfPQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4bc590e74ff898761610ac754a3f6766

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kK0UwId82q...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.188 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:55.789Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '4bc590e74ff898761610ac754a3f6766',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4bc590e74ff898761610ac754a3f6766.OtAPS0Rcl8DkpwlJe9nXQjoLjLQoCUaRtBRFNiNmSvc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 119.086 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:56.652Z"}
  console.log
    CSRF token generation: {
      sessionID: '614bd481f692017dc8a8b72280cc71d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 12chEtpJ-VZBF8vBIvH4uT5dJy4gmBySAGes

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 614bd481f692017dc8a8b72280cc71d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: m5ALaTdmH5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.629 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:56.954Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '614bd481f692017dc8a8b72280cc71d5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A614bd481f692017dc8a8b72280cc71d5.fUMluC9sw635pJIkf65b5H9Yj7KAPer00O6YLU3dtcg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 152.089 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:57.887Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e5eda52601e42985bc8cf5b981fa7a7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yYVRCnEp-fqneBwdqpiBH34Rr6c_saHMVuTg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5e5eda52601e42985bc8cf5b981fa7a7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Uf9iCmaRLG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.202 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:58.212Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 87.257 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:59.040Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f3d58ea4a1e6a3ce03cd47891449d36a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qdNM4ysR-PjNxRUpRZqGwwhEuGMULbuGv4zE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f3d58ea4a1e6a3ce03cd47891449d36a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fQw-6nbC3D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.593 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:42:59.351Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 87.798 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:00.220Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c6a30c7bfc131f08f5ce54b9155d6aca',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JE5J6f9u-NWRMiSu8ASJSVfWXyfi8qJSCxls

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c6a30c7bfc131f08f5ce54b9155d6aca

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A5NV_7t1o0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.350 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:00.549Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 84.478 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:01.366Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f770d32937815c0a6b7a03402f787916',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RgkI6krh-DSO7yTHbVT3aTGo4VpWJZColHow

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f770d32937815c0a6b7a03402f787916

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L0TqIZgadv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.025 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:01.679Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 29.433 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:02.452Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ecd2aac92ec1dcbfaa1e24462c452b6b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FVey8ZQz-z0WEb1TI4QAiGIuJvAKBdKvFfGM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ecd2aac92ec1dcbfaa1e24462c452b6b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vWUY4v6QhH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.779 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:02.759Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: 'ecd2aac92ec1dcbfaa1e24462c452b6b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aecd2aac92ec1dcbfaa1e24462c452b6b.qg7ZsnYgFwyXi4TNIiXuAo7SkvUKrRNzEl%2FplxRLqj0',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 90.110 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:03.624Z"}
  console.log
    CSRF token generation: {
      sessionID: '43649582bb1e4be72030a5e20c9b9262',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WhESl9kt-eBsBcI_k-EyJXm5EgiwfaNd7Qks

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 43649582bb1e4be72030a5e20c9b9262

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tcGeT2oPfQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.078 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:03.964Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '43649582bb1e4be72030a5e20c9b9262',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A43649582bb1e4be72030a5e20c9b9262.yhYWBLMnGnB22bAKGXcXlRNIXK%2F%2BIbKVtrep0URMbL4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.945 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:04.800Z"}
  console.log
    CSRF token generation: {
      sessionID: '2488986f45c529cdccf65e4769263784',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uIN3QnTV-uUxjhnPaOveEuVuTKg5sQs50t58

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2488986f45c529cdccf65e4769263784

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pTwkFRcjnV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.568 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:05.173Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '2488986f45c529cdccf65e4769263784',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2488986f45c529cdccf65e4769263784.Jn1GCFY3v%2BS686Rvg2ehUTxVudWmjRkyAwBI60QWPtk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 59.237 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:05.976Z"}
  console.log
    CSRF token generation: {
      sessionID: '8749b4aa7fece053801886eb2e098b10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LIR0LviI-IEdLBrsD4lB_w-R3FxZr2YIMpL8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8749b4aa7fece053801886eb2e098b10

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bq6p4_2ulA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.754 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:06.356Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '8749b4aa7fece053801886eb2e098b10',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8749b4aa7fece053801886eb2e098b10.xEysqujKa2No33SpA%2BwuDi0Rd7tLaX8qVSp48IfDTok',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.247 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:07.185Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e3984e26c2e93a784cf515311ae75145',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C8L0F0S6-ebQ_DSDNQLwuaU6j1t5YsuPRavM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e3984e26c2e93a784cf515311ae75145

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hv-73V_eRY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.815 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:07.544Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 140.227 ms - 552[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:08.437Z"}
  console.log
    CSRF token generation: {
      sessionID: '6a3123e5338a9ead285a58252b5adc45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZTPYTtpC-F20dgwYT9gtdMVSHlzYdzeNDrAk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6a3123e5338a9ead285a58252b5adc45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QD9oSc12DQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.354 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:08.793Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 113.028 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:09.643Z"}
  console.log
    CSRF token generation: {
      sessionID: '8647d32315ad45ccdf721fcb4d573762',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UPHYmQFF-bMSlRONVn8pdSJ4a6siLGclQMag

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8647d32315ad45ccdf721fcb4d573762

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MN1JXv9Ngh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.514 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:09.986Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 132.925 ms - 945[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:10.867Z"}
  console.log
    CSRF token generation: {
      sessionID: '68574db660801e7d7a5caec82fd42ce4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oFn7xOxv-bz5mm2O77qfYv8MhUPH1gPudGSM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 68574db660801e7d7a5caec82fd42ce4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PCZXGWD41U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.075 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:11.237Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 58.458 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:12.039Z"}
  console.log
    CSRF token generation: {
      sessionID: '8ae647d83b33e358fe6fd25e3d9463d2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aNrIxJZY-0rEd-HbrgZ4l_rAkj7fK2LFGUnU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8ae647d83b33e358fe6fd25e3d9463d2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KtH7x75BGn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.474 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:12.721Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '8ae647d83b33e358fe6fd25e3d9463d2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8ae647d83b33e358fe6fd25e3d9463d2.djV8yzJ%2FeK09WPVlCMdGjh0LgWpz9cNtMF7OY4nyKP8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 254.158 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:13.804Z"}
  console.log
    CSRF token generation: {
      sessionID: '27b92cad8955926b67b6515979d8a000',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: I2EZBI3N-8-CNl2t4nPS5paYQFUd3ByYGedo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 27b92cad8955926b67b6515979d8a000

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ROpS8DOu09...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.445 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:14.554Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '27b92cad8955926b67b6515979d8a000',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A27b92cad8955926b67b6515979d8a000.61GQbAiwOPcw1Ws3mJxWgGf94SfWA04cqy6PjigG%2BXU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 236.919 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1139:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:15.729Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e02417cf9d3daaadcbbd66bb283f411d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: e3Le9HQe-CGVMZG86G5yXkKuNHd__nPA69iI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e02417cf9d3daaadcbbd66bb283f411d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MXLsoFTZe5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.398 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:16.524Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e02417cf9d3daaadcbbd66bb283f411d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae02417cf9d3daaadcbbd66bb283f411d.87eEVlvT%2FULFliDeA2B%2B4lIm3c16SrOVFZ3rq26lQPQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-0',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-0

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test0 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 237.775 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:16.863Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e02417cf9d3daaadcbbd66bb283f411d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae02417cf9d3daaadcbbd66bb283f411d.87eEVlvT%2FULFliDeA2B%2B4lIm3c16SrOVFZ3rq26lQPQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-1',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-1

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test1 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 228.107 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:17.202Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e02417cf9d3daaadcbbd66bb283f411d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae02417cf9d3daaadcbbd66bb283f411d.87eEVlvT%2FULFliDeA2B%2B4lIm3c16SrOVFZ3rq26lQPQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-2',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-2

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test2 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 228.419 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:18.385Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a7b786c1642c265e6d574f97c95d546',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fCBIq85y-_-a3YuwgKJA6U-UV3WdQIemLhkg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a7b786c1642c265e6d574f97c95d546

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: T_J92KP6zM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.970 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T15:43:19.153Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '5a7b786c1642c265e6d574f97c95d546',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5a7b786c1642c265e6d574f97c95d546.LQ92XUIftqqBzT%2FGWb6ptOUO1INrlF1dPStTZ4fFIYY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 228.052 ms - 104[0m
PASS tests/integration/order.test.js (49.966 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1830 ms)
      ✓ should create order as affiliate for their customer (1249 ms)
      ✓ should fail with invalid customer ID (1105 ms)
      ✓ should fail with invalid affiliate ID (1142 ms)
      ✓ should fail when customer tries to create order for another customer (1159 ms)
      ✓ should validate required fields (1035 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1188 ms)
      ✓ should return order details for affiliate (1187 ms)
      ✓ should fail for unauthorized customer (1110 ms)
      ✓ should return 404 for non-existent order (1113 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1254 ms)
      ✓ should update weight when processing (1266 ms)
      ✓ should prevent invalid status transitions (1177 ms)
      ✓ should fail for unauthorized affiliate (1107 ms)
      ✓ should fail for customers (1137 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1253 ms)
      ✓ should cancel order as affiliate (1200 ms)
      ✓ should prevent cancelling non-cancellable orders (1175 ms)
      ✓ should fail for unauthorized user (1134 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1208 ms)
      ✓ should handle partial bulk update failures (1235 ms)
      ✓ should cancel multiple orders in bulk (1233 ms)
    Order export functionality
      ✓ should export orders as CSV (1152 ms)
      ✓ should export orders as JSON (1180 ms)
      ✓ should export orders as Excel (1146 ms)
      ✓ should respect export permissions (1086 ms)
    Payment status updates
      ✓ should update payment status (1171 ms)
      ✓ should handle payment failure (1176 ms)
      ✓ should prevent payment status update on non-complete orders (1175 ms)
      ✓ should record refund (1209 ms)
    Order filtering and search
      ✓ should search orders by customer name (1249 ms)
      ✓ should filter orders by multiple criteria (1208 ms)
      ✓ should filter by pickup time slots (1223 ms)
      ✓ should provide aggregated statistics with filters (1171 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1767 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1925 ms)
      ✓ should calculate commission for multiple orders (2655 ms)
      ✓ should handle high delivery fee scenarios (1815 ms)

-----------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                                      
-----------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   85.97 |     73.7 |   91.16 |   85.87 |                                                                                                                                                                                                                                                                                                                                                                                        
 config                      |   96.68 |    87.17 |     100 |   96.53 |                                                                                                                                                                                                                                                                                                                                                                                        
  csrf-config.js             |    86.2 |    72.72 |     100 |    86.2 | 240-264,274-275,290,305-306                                                                                                                                                                                                                                                                                                                                                            
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                                         
  paygistix.config.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  storeIPs.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
 controllers                 |   85.49 |    73.99 |   93.66 |   85.46 |                                                                                                                                                                                                                                                                                                                                                                                        
  administratorController.js |    87.7 |    78.54 |   85.96 |    88.1 | 190-208,225,332,405,453-454,471,481,506,586-587,674-692,726,786-787,870,928-929,989-990,1212-1221,1251-1252,1383-1384,1650-1651,1698,1708,1710,1752,1763-1764,1795-1796,1836-1837,1846-1847,1981-1995,2020,2227,2295-2296,2419-2420                                                                                                                                                    
  affiliateController.js     |   86.51 |    79.01 |   96.96 |   86.24 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-563,578,667,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                                            
  authController.js          |   63.79 |    50.48 |   84.21 |   63.79 | 130-131,143,176-181,185,215-216,234-235,279-288,340-341,355-436,451-452,460-461,490-491,541-542,589-590,640-641,656,668-673,702-710,718-719,734,752-763,779,782,804-805,830,871,895,905,915-916,959-974,1087,1092-1137,1165,1207-1248,1260,1394,1441-1442,1457,1510-1511,1523-1567,1588-1651,1656-1702,1730,1766-1804,1816,1852,1866-1867,1880,1893,1950,1999-2000,2014-2053,2067-2106 
  customerController.js      |   91.52 |    83.64 |     100 |    91.3 | 135,214-215,234,247,270-286,296-297,316,329,341,343,345,379-380                                                                                                                                                                                                                                                                                                                        
  operatorController.js      |   98.31 |    86.28 |     100 |   98.57 | 560,632,695-696,860                                                                                                                                                                                                                                                                                                                                                                    
  orderController.js         |   84.84 |    72.45 |    92.3 |   84.85 | 145-146,240-293,381-382,401,469-470,538-539,564,574,585,627-632,659,669,682,695-700,723-724,863-870,926,968-969,989-991,996,1008-1009,1076-1077,1103-1104,1166-1167                                                                                                                                                                                                                    
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                                    
  quickbooksController.js    |   94.73 |    81.81 |     100 |   94.35 | 269-270,332,408-409,438-439                                                                                                                                                                                                                                                                                                                                                            
  w9ControllerDocuSign.js    |   93.96 |    84.78 |     100 |   93.96 | 207,222,280,285-286,334-336,421-422,475,676                                                                                                                                                                                                                                                                                                                                            
 middleware                  |   88.07 |    83.91 |   94.73 |    87.5 |                                                                                                                                                                                                                                                                                                                                                                                        
  auth.js                    |    72.3 |    74.57 |   66.66 |    72.3 | 67-93,121,134,157-159,200-210                                                                                                                                                                                                                                                                                                                                                          
  errorHandler.js            |    72.3 |    63.26 |     100 |    72.3 | 10,81-96,102-103                                                                                                                                                                                                                                                                                                                                                                       
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                                        
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
 models                      |   91.85 |    80.32 |   92.66 |   92.03 |                                                                                                                                                                                                                                                                                                                                                                                        
  Administrator.js           |   80.76 |    61.11 |   82.35 |   82.19 | 137-159,169-174                                                                                                                                                                                                                                                                                                                                                                        
  Affiliate.js               |   76.74 |    68.18 |   84.61 |   76.74 | 89,201-204,213,217,232,237-244                                                                                                                                                                                                                                                                                                                                                         
  CallbackPool.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  Customer.js                |   86.66 |    71.42 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                                
  DocuSignToken.js           |   86.36 |    81.81 |     100 |   86.36 | 101,126-127                                                                                                                                                                                                                                                                                                                                                                            
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  Order.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  Payment.js                 |   88.09 |    55.55 |   88.88 |   88.09 | 237-245                                                                                                                                                                                                                                                                                                                                                                                
  PaymentExport.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  PaymentMethod.js           |   81.81 |    60.86 |   85.71 |   81.53 | 215-236,241-252                                                                                                                                                                                                                                                                                                                                                                        
  PaymentToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                                     
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
 routes                      |   95.95 |    86.98 |   90.47 |   95.95 |                                                                                                                                                                                                                                                                                                                                                                                        
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  authRoutes.js              |   96.87 |    83.33 |     100 |   96.87 | 65                                                                                                                                                                                                                                                                                                                                                                                     
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                                     
  customerRoutes.js          |   95.83 |    83.33 |     100 |   95.83 | 42                                                                                                                                                                                                                                                                                                                                                                                     
  generalPaymentCallback.js  |   93.02 |    95.83 |     100 |   93.02 | 45-46,82-83,303-304                                                                                                                                                                                                                                                                                                                                                                    
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  paymentCallbackRoute.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  paymentRoutes.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  quickbooksRoutes.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                                      
  socialAuthRoutes.js        |   78.26 |    55.88 |   71.42 |   78.26 | 80,131,167-176,199-208                                                                                                                                                                                                                                                                                                                                                                 
  systemConfigRoutes.js      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  w9Routes.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
 services                    |   84.82 |    68.18 |    92.1 |   85.13 |                                                                                                                                                                                                                                                                                                                                                                                        
  callbackPoolManager.js     |   94.44 |    61.11 |     100 |   94.44 | 13-17                                                                                                                                                                                                                                                                                                                                                                                  
  docusignService.js         |   81.76 |    69.56 |      85 |   82.14 | 67-75,172,231-244,265,276-280,360,453-454,509-510,527-531,572-573,595-596,625-626                                                                                                                                                                                                                                                                                                      
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
 utils                       |   69.74 |    56.07 |   77.38 |   68.69 |                                                                                                                                                                                                                                                                                                                                                                                        
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 101                                                                                                                                                                                                                                                                                                                                                                                    
  emailService.js            |    38.6 |    18.93 |   32.14 |    38.6 | 29-48,127,157-158,353,361-501,509-636,644-746,755-862,889,904-905,1122-1123,1131-1268,1276-1428,1436-1542,1550-1569,1581-1691,1699-1718,1730-1841,1849-1957,1965-2078,2088,2099-2107,2115-2123,2131-2190,2195-2232,2237-2272                                                                                                                                                           
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  fieldFilter.js             |   85.71 |    72.41 |     100 |   87.71 | 140,201-206                                                                                                                                                                                                                                                                                                                                                                            
  helpers.js                 |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                                  
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                                    
  validators.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                                        
-----------------------------|---------|----------|---------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for branches (80%) not met: 73.7%
Summary of all failing tests
FAIL tests/unit/orderControllerAdditional.test.js
  ● Order Controller - Additional Coverage › checkActiveOrders › should handle database errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Error checking active orders",
    +   "message": "Failed to check active orders",
        "success": false,
      },

    Number of calls: 1

      102 |
      103 |       expect(res.status).toHaveBeenCalledWith(500);
    > 104 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      105 |         success: false,
      106 |         message: 'Error checking active orders'
      107 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:104:24)

  ● Order Controller - Additional Coverage › exportOrders › should export orders as CSV

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Content-Type", "text/csv"

    Number of calls: 0

      163 |       await orderController.exportOrders(req, res);
      164 |
    > 165 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Type', 'text/csv');
          |                             ^
      166 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Disposition', 'attachment; filename=orders_export.csv');
      167 |       expect(res.end).toHaveBeenCalled();
      168 |     });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:165:29)

  ● Order Controller - Additional Coverage › exportOrders › should export orders as JSON by default

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "count": 1,
    -   "orders": Array [
    -     Object {
    -       "customerId": "CUST123",
    -       "orderId": "ORD001",
    -     },
    -   ],
    -   "success": true,
    +   "message": "Insufficient permissions for this export",
    +   "success": false,
      },

    Number of calls: 1

      181 |       await orderController.exportOrders(req, res);
      182 |
    > 183 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      184 |         success: true,
      185 |         count: 1,
      186 |         orders: mockOrders

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:183:24)

  ● Order Controller - Additional Coverage › exportOrders › should handle export errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error exporting orders:", Any<Error>

    Number of calls: 0

      198 |       await orderController.exportOrders(req, res);
      199 |
    > 200 |       expect(consoleSpy).toHaveBeenCalledWith('Error exporting orders:', expect.any(Error));
          |                          ^
      201 |       expect(res.status).toHaveBeenCalledWith(500);
      202 |       
      203 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:200:26)

  ● Order Controller - Additional Coverage › updateOrderStatus edge cases › should handle invalid status transitions

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      233 |       await orderController.updateOrderStatus(req, res);
      234 |
    > 235 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      236 |       expect(res.json).toHaveBeenCalledWith({
      237 |         success: false,
      238 |         message: 'Invalid status transition'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:235:26)

  ● Order Controller - Additional Coverage › cancelOrder method › should handle cancellation of non-cancellable order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Order cannot be cancelled in current status",
    +   "message": "Orders in complete status cannot be cancelled. Only pending orders can be cancelled.",
        "success": false,
      },

    Number of calls: 1

      272 |
      273 |       expect(res.status).toHaveBeenCalledWith(400);
    > 274 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      275 |         success: false,
      276 |         message: 'Order cannot be cancelled in current status'
      277 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:274:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus › should prevent payment updates on non-complete orders

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      312 |       await orderController.updatePaymentStatus(req, res);
      313 |
    > 314 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      315 |       expect(res.json).toHaveBeenCalledWith({
      316 |         success: false,
      317 |         message: 'Cannot update payment status for non-complete orders'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:314:26)

  ● Order Controller - Additional Coverage › updatePaymentStatus › should prevent refund on non-completed payment

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 403

    Number of calls: 1

      333 |       await orderController.updatePaymentStatus(req, res);
      334 |
    > 335 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      336 |       expect(res.json).toHaveBeenCalledWith({
      337 |         success: false,
      338 |         message: 'Cannot update payment status for non-complete orders'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:335:26)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus › should handle unauthorized access

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403
    Received: 500

    Number of calls: 1

      383 |       await orderController.bulkUpdateOrderStatus(req, res);
      384 |
    > 385 |       expect(res.status).toHaveBeenCalledWith(403);
          |                          ^
      386 |       expect(res.json).toHaveBeenCalledWith({
      387 |         success: false,
      388 |         message: 'Unauthorized'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:385:26)

FAIL tests/integration/socialAuth.test.js (10.288 s)
  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to Google OAuth when Google auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to Facebook OAuth when Facebook auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should redirect to LinkedIn OAuth when LinkedIn auth is configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Initiation Endpoints › should return 404 when OAuth provider is not configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should successfully complete social registration

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should validate required fields for social registration

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › Social Registration Flow › should prevent duplicate social registrations

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● Social Authentication Integration Tests › OAuth Callback and Session Flow › should create OAuth session on successful callback

    TypeError: OAuthSession.updateSession is not a function

      295 |
      296 |       // Update session to completed
    > 297 |       await OAuthSession.updateSession(sessionId, {
          |                          ^
      298 |         type: 'social-auth-success',
      299 |         provider: 'google',
      300 |         socialId: 'google123',

      at Object.updateSession (tests/integration/socialAuth.test.js:297:26)

  ● Social Authentication Integration Tests › Customer Social Authentication › should successfully register customer via social auth

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

FAIL tests/integration/oAuthFlows.test.js (9.178 s)
  ● OAuth Authentication Flows › OAuth Provider Availability › should show available OAuth providers

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › New User OAuth Registration Flow › should complete full OAuth registration for new affiliate

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › New User OAuth Registration Flow › should complete OAuth registration for new customer

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › Existing User OAuth Login Flow › should login existing affiliate via OAuth

    TypeError: OAuthSession.updateSession is not a function

      216 |
      217 |       // Simulate successful OAuth callback
    > 218 |       await OAuthSession.updateSession(sessionId, {
          |                          ^
      219 |         type: 'social-auth-success',
      220 |         provider: 'linkedin',
      221 |         socialId: 'linkedin-existing-123',

      at Object.updateSession (tests/integration/oAuthFlows.test.js:218:26)

  ● OAuth Authentication Flows › OAuth Error Handling › should handle duplicate social account registration

    ValidationError: Affiliate validation failed: paymentMethod: `stripe` is not a valid enum value for path `paymentMethod`.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● OAuth Authentication Flows › OAuth Error Handling › should handle OAuth provider not configured

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ● OAuth Authentication Flows › OAuth Session Management › should handle expired OAuth sessions

    ValidationError: OAuthSession validation failed: result: Path `result` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● OAuth Authentication Flows › OAuth Session Management › should handle non-existent OAuth session

    TypeError: Invalid value "undefined" for header "x-csrf-token"

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)


Test Suites: 3 failed, 83 passed, 86 total
Tests:       26 failed, 2 skipped, 1893 passed, 1921 total
Snapshots:   0 total
Time:        535.851 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
