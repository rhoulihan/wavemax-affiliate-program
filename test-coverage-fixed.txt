
> wavemax-affiliate-program@1.0.0 test:coverage
> jest --coverage --runInBand --forceExit

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (80 ms)
    ✓ should be a winston logger instance (19 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (58 ms)
    ✓ should verify password correctly (152 ms)
    ✓ should encrypt and decrypt data correctly (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixService.test.js
  Paygistix Service
    getConfig
      ✓ should return client config from paygistixConfig (2 ms)
    isConfigured
      ✓ should return true when properly configured (1 ms)
      ✓ should return false when not configured

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (2 ms)
    ✓ should parse page and limit from query params (1 ms)
    ✓ should enforce minimum values
    ✓ should enforce maximum limit (1 ms)
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages
    ✓ should handle floating point numbers
    ✓ should preserve other query parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/emailService.test.js
  Email Service
    Email Functions
      ✓ should have basic email functionality (2 ms)
      ✓ should log email operations (1 ms)
      ✓ should handle email errors
    Email Templates
      ✓ should process email templates
      ✓ should handle missing template variables (1 ms)
    Email Validation
      ✓ should validate email addresses (1 ms)
    Email Queue
      ✓ should queue emails for sending (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/quickbooksRoutesSimple.test.js
  QuickBooks Routes - Simple
    GET /api/quickbooks/vendors/export
      ✓ should export vendors (22 ms)
      ✓ should export vendors as CSV (4 ms)
    GET /api/quickbooks/payments/export
      ✓ should export payment summary (3 ms)
    GET /api/quickbooks/commissions/export
      ✓ should export commission detail (3 ms)
    GET /api/quickbooks/exports
      ✓ should get export history (3 ms)
      ✓ should filter export history by type (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields (1 ms)
    ✓ should configure Facebook strategy with correct parameters

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope
    ✓ should configure LinkedIn strategy with correct parameters (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/orderModelSimple.test.js
  Order Model - Line Coverage
    SystemConfig Error Handling (Line 113)
      ✓ should use default base rate when SystemConfig.getValue throws error (188 ms)
    Scheduled Status Timestamp (Lines 139-140)
      ✕ should set scheduledAt when saving with scheduled status (203 ms)
    Order Processing Status (Lines 158-174)
      ✕ should handle orderProcessingStatus changes (225 ms)
      ✕ should handle completed status without processingStarted (221 ms)

  ● Order Model - Line Coverage › Scheduled Status Timestamp (Lines 139-140) › should set scheduledAt when saving with scheduled status

    ValidationError: Order validation failed: status: `scheduled` is not a valid enum value for path `status`.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle orderProcessingStatus changes

    expect(received).toBeDefined()

    Received: undefined

      91 |       order.orderProcessingStatus = 'washing';
      92 |       await order.save();
    > 93 |       expect(order.processingStarted).toBeDefined();
         |                                       ^
      94 |       const washingStartTime = order.processingStarted;
      95 |       
      96 |       // Test drying status (should not overwrite processingStarted)

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:93:39)

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle completed status without processingStarted

    expect(received).toBeDefined()

    Received: undefined

      136 |       await order.save();
      137 |       
    > 138 |       expect(order.processingCompleted).toBeDefined();
          |                                         ^
      139 |       expect(order.processingTimeMinutes).toBeUndefined(); // No start time to calculate from
      140 |     });
      141 |   });

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:138:41)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutesSimple.test.js
  Order Routes - Simple
    POST /api/orders
      ✓ should create order with valid data (14 ms)
    GET /api/orders/export
      ✓ should export orders (4 ms)
    GET /api/orders/search
      ✓ should search orders (5 ms)
    GET /api/orders/statistics
      ✓ should get order statistics (3 ms)
    PUT /api/orders/bulk/status
      ✓ should bulk update order status (4 ms)
    POST /api/orders/bulk/cancel
      ✓ should bulk cancel orders (3 ms)
    GET /api/orders/:orderId
      ✓ should get order details (3 ms)
    PUT /api/orders/:orderId/status
      ✓ should update order status (3 ms)
    POST /api/orders/:orderId/cancel
      ✓ should cancel order (4 ms)
    PUT /api/orders/:orderId/payment-status
      ✓ should update payment status (5 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:43.973Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:44.109Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T15:57:44.142Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:44.289Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:44.402Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:45.020Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:57:45.136Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

PASS tests/unit/docusignToken.test.js (6.947 s)
  DocuSignToken Model
    saveToken
      ✓ should save a new token with all fields (136 ms)
      ✓ should update existing token if one exists (179 ms)
      ✓ should calculate expiration time correctly (113 ms)
    getCurrentToken
      ✓ should return the most recent token (144 ms)
      ✓ should return null if no tokens exist (104 ms)
    clearTokens
      ✓ should remove all tokens (230 ms)
    token expiration
      ✓ should identify expired tokens (139 ms)
      ✓ should handle tokens without refresh token (115 ms)
    lastUsed tracking
      ✓ should update lastUsed when token is accessed (246 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderRoutes.isolated.test.js
  Order Routes - Isolated V2
    ✓ POST /api/orders - should create a new order (24 ms)
    ✓ GET /api/orders/export - should export orders (14 ms)
    ✓ GET /api/orders/search - should search orders (5 ms)
    ✓ GET /api/orders/statistics - should get statistics (4 ms)
    ✓ PUT /api/orders/bulk/status - should bulk update (4 ms)
    ✓ POST /api/orders/bulk/cancel - should bulk cancel (4 ms)
    ✓ GET /api/orders/:orderId - should get order details (4 ms)
    ✓ PUT /api/orders/:orderId/status - should update status (5 ms)
    ✓ POST /api/orders/:orderId/cancel - should cancel order (4 ms)
    ✓ PUT /api/orders/:orderId/payment-status - should update payment (6 ms)
    ✓ Error handling - should return 404 for unknown routes (6 ms)
    ✓ Error handling - should handle controller errors (5 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/authRoutesSimple.test.js
  Auth Routes - Simple
    POST /api/auth/login
      ✓ should login with valid credentials (9 ms)
      ✓ should reject invalid credentials (4 ms)
    POST /api/auth/register
      ✓ should register new user (3 ms)
    POST /api/auth/logout
      ✓ should logout with valid token (2 ms)
      ✓ should reject logout without token (2 ms)
    POST /api/auth/forgot-password
      ✓ should send password reset email (2 ms)
    POST /api/auth/reset-password
      ✓ should reset password with valid token (2 ms)
    GET /api/auth/verify-email/:token
      ✓ should verify email with valid token (2 ms)
    POST /api/auth/refresh-token
      ✓ should refresh token (5 ms)
    GET /api/auth/me
      ✓ should get current user with valid token (4 ms)
      ✓ should reject without token (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/helpers.test.js
  Helpers Utility Functions
    formatCurrency
      ✓ should format a number as USD currency by default (20 ms)
      ✓ should handle null and undefined amounts (1 ms)
      ✓ should handle NaN values (1 ms)
      ✓ should parse string amounts (1 ms)
      ✓ should format with different currencies (1 ms)
      ✓ should handle negative amounts
      ✓ should round to 2 decimal places (1 ms)
    formatDate
      ✓ should format date with short format by default (6 ms)
      ✓ should format date with long format (1 ms)
      ✓ should format date with ISO format (1 ms)
      ✓ should handle string dates
      ✓ should handle null and undefined dates (1 ms)
      ✓ should handle invalid dates
      ✓ should handle different format cases (1 ms)
    generateRandomString
      ✕ should generate a string of default length 10
      ✕ should generate strings of specified length
      ✕ should generate different strings on each call
      ✕ should only use alphanumeric characters (1 ms)
    sanitizeForCSV
      ✕ should return empty string for null and undefined
      ✕ should convert non-string values to strings
      ✕ should leave simple strings unchanged
      ✕ should escape double quotes by doubling them
      ✕ should wrap strings containing commas in quotes
      ✕ should wrap strings containing newlines in quotes (1 ms)
      ✕ should handle complex strings with multiple special characters
    calculatePercentage
      ✕ should calculate percentage correctly (1 ms)
      ✕ should handle zero total
      ✕ should handle null or undefined total
      ✕ should respect decimal places parameter
      ✕ should round correctly
      ✕ should handle edge cases
      ✕ should handle negative values

  ● Helpers Utility Functions › generateRandomString › should generate a string of default length 10

    TypeError: generateRandomString is not a function

      89 |   describe('generateRandomString', () => {
      90 |     it('should generate a string of default length 10', () => {
    > 91 |       const result = generateRandomString();
         |                      ^
      92 |       expect(result).toHaveLength(10);
      93 |       expect(result).toMatch(/^[A-Za-z0-9]+$/);
      94 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:91:22)

  ● Helpers Utility Functions › generateRandomString › should generate strings of specified length

    TypeError: generateRandomString is not a function

       95 |
       96 |     it('should generate strings of specified length', () => {
    >  97 |       expect(generateRandomString(5)).toHaveLength(5);
          |              ^
       98 |       expect(generateRandomString(20)).toHaveLength(20);
       99 |       expect(generateRandomString(0)).toHaveLength(0);
      100 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:97:14)

  ● Helpers Utility Functions › generateRandomString › should generate different strings on each call

    TypeError: generateRandomString is not a function

      103 |       const results = new Set();
      104 |       for (let i = 0; i < 10; i++) {
    > 105 |         results.add(generateRandomString());
          |                     ^
      106 |       }
      107 |       expect(results.size).toBeGreaterThan(5); // Very unlikely to get duplicates
      108 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:105:21)

  ● Helpers Utility Functions › generateRandomString › should only use alphanumeric characters

    TypeError: generateRandomString is not a function

      109 |
      110 |     it('should only use alphanumeric characters', () => {
    > 111 |       const result = generateRandomString(100);
          |                      ^
      112 |       expect(result).toMatch(/^[A-Za-z0-9]*$/);
      113 |     });
      114 |   });

      at Object.generateRandomString (tests/unit/helpers.test.js:111:22)

  ● Helpers Utility Functions › sanitizeForCSV › should return empty string for null and undefined

    TypeError: sanitizeForCSV is not a function

      116 |   describe('sanitizeForCSV', () => {
      117 |     it('should return empty string for null and undefined', () => {
    > 118 |       expect(sanitizeForCSV(null)).toBe('');
          |              ^
      119 |       expect(sanitizeForCSV(undefined)).toBe('');
      120 |     });
      121 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:118:14)

  ● Helpers Utility Functions › sanitizeForCSV › should convert non-string values to strings

    TypeError: sanitizeForCSV is not a function

      121 |
      122 |     it('should convert non-string values to strings', () => {
    > 123 |       expect(sanitizeForCSV(123)).toBe('123');
          |              ^
      124 |       expect(sanitizeForCSV(true)).toBe('true');
      125 |       expect(sanitizeForCSV(false)).toBe('false');
      126 |     });

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:123:14)

  ● Helpers Utility Functions › sanitizeForCSV › should leave simple strings unchanged

    TypeError: sanitizeForCSV is not a function

      127 |
      128 |     it('should leave simple strings unchanged', () => {
    > 129 |       expect(sanitizeForCSV('hello')).toBe('hello');
          |              ^
      130 |       expect(sanitizeForCSV('test123')).toBe('test123');
      131 |     });
      132 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:129:14)

  ● Helpers Utility Functions › sanitizeForCSV › should escape double quotes by doubling them

    TypeError: sanitizeForCSV is not a function

      132 |
      133 |     it('should escape double quotes by doubling them', () => {
    > 134 |       expect(sanitizeForCSV('She said "hello"')).toBe('"She said ""hello"""');
          |              ^
      135 |       expect(sanitizeForCSV('""')).toBe('""""""');
      136 |     });
      137 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:134:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing commas in quotes

    TypeError: sanitizeForCSV is not a function

      137 |
      138 |     it('should wrap strings containing commas in quotes', () => {
    > 139 |       expect(sanitizeForCSV('hello, world')).toBe('"hello, world"');
          |              ^
      140 |       expect(sanitizeForCSV('a,b,c')).toBe('"a,b,c"');
      141 |     });
      142 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:139:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing newlines in quotes

    TypeError: sanitizeForCSV is not a function

      142 |
      143 |     it('should wrap strings containing newlines in quotes', () => {
    > 144 |       expect(sanitizeForCSV('hello\nworld')).toBe('"hello\nworld"');
          |              ^
      145 |       expect(sanitizeForCSV('line1\nline2\nline3')).toBe('"line1\nline2\nline3"');
      146 |     });
      147 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:144:14)

  ● Helpers Utility Functions › sanitizeForCSV › should handle complex strings with multiple special characters

    TypeError: sanitizeForCSV is not a function

      147 |
      148 |     it('should handle complex strings with multiple special characters', () => {
    > 149 |       expect(sanitizeForCSV('John "JD" Doe, CEO\nAcme Corp')).toBe('"John ""JD"" Doe, CEO\nAcme Corp"');
          |              ^
      150 |     });
      151 |   });
      152 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:149:14)

  ● Helpers Utility Functions › calculatePercentage › should calculate percentage correctly

    TypeError: calculatePercentage is not a function

      153 |   describe('calculatePercentage', () => {
      154 |     it('should calculate percentage correctly', () => {
    > 155 |       expect(calculatePercentage(50, 100)).toBe(50);
          |              ^
      156 |       expect(calculatePercentage(25, 100)).toBe(25);
      157 |       expect(calculatePercentage(75, 150)).toBe(50);
      158 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:155:14)

  ● Helpers Utility Functions › calculatePercentage › should handle zero total

    TypeError: calculatePercentage is not a function

      159 |
      160 |     it('should handle zero total', () => {
    > 161 |       expect(calculatePercentage(10, 0)).toBe(0);
          |              ^
      162 |       expect(calculatePercentage(0, 0)).toBe(0);
      163 |     });
      164 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:161:14)

  ● Helpers Utility Functions › calculatePercentage › should handle null or undefined total

    TypeError: calculatePercentage is not a function

      164 |
      165 |     it('should handle null or undefined total', () => {
    > 166 |       expect(calculatePercentage(10, null)).toBe(0);
          |              ^
      167 |       expect(calculatePercentage(10, undefined)).toBe(0);
      168 |     });
      169 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:166:14)

  ● Helpers Utility Functions › calculatePercentage › should respect decimal places parameter

    TypeError: calculatePercentage is not a function

      169 |
      170 |     it('should respect decimal places parameter', () => {
    > 171 |       expect(calculatePercentage(1, 3, 0)).toBe(33);
          |              ^
      172 |       expect(calculatePercentage(1, 3, 1)).toBe(33.3);
      173 |       expect(calculatePercentage(1, 3, 2)).toBe(33.33);
      174 |       expect(calculatePercentage(1, 3, 3)).toBe(33.333);

      at Object.calculatePercentage (tests/unit/helpers.test.js:171:14)

  ● Helpers Utility Functions › calculatePercentage › should round correctly

    TypeError: calculatePercentage is not a function

      176 |
      177 |     it('should round correctly', () => {
    > 178 |       expect(calculatePercentage(2, 3, 2)).toBe(66.67);
          |              ^
      179 |       expect(calculatePercentage(1, 6, 2)).toBe(16.67);
      180 |     });
      181 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:178:14)

  ● Helpers Utility Functions › calculatePercentage › should handle edge cases

    TypeError: calculatePercentage is not a function

      181 |
      182 |     it('should handle edge cases', () => {
    > 183 |       expect(calculatePercentage(0, 100)).toBe(0);
          |              ^
      184 |       expect(calculatePercentage(100, 100)).toBe(100);
      185 |       expect(calculatePercentage(200, 100)).toBe(200);
      186 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:183:14)

  ● Helpers Utility Functions › calculatePercentage › should handle negative values

    TypeError: calculatePercentage is not a function

      187 |
      188 |     it('should handle negative values', () => {
    > 189 |       expect(calculatePercentage(-50, 100)).toBe(-50);
          |              ^
      190 |       expect(calculatePercentage(50, -100)).toBe(-50);
      191 |     });
      192 |   });

      at Object.calculatePercentage (tests/unit/helpers.test.js:189:14)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (5 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter (1 ms)
    URL Validation
      ✓ should validate customer ID format
      ✓ should handle URL encoding correctly (1 ms)
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly
      ✓ should handle both login and customer parameters together
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow (1 ms)
      ✓ should handle multiple URL parameters correctly

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission (1 ms)
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully (1 ms)
      ✓ should include current year in template data
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array (1 ms)
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export
      ✓ should not throw error when sending welcome email (1 ms)
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats
      ✓ should handle admin with different email formats (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.isolated.test.js
  Payment Routes - Isolated
    GET /api/v1/payments/config
      ✓ should return payment configuration (6 ms)
    POST /api/v1/payments/log-submission
      ✓ should log payment submission (6 ms)
    POST /api/v1/payments/create-token
      ✓ should create payment token (3 ms)
    GET /api/v1/payments/check-status/:token
      ✓ should check payment status (2 ms)
    POST /api/v1/payments/cancel-token/:token
      ✓ should cancel payment token (3 ms)
    POST /api/v1/payments/update-status/:token
      ✓ should update payment status (3 ms)
    GET /api/v1/payments/pool-stats
      ✓ should return pool statistics (3 ms)
    Error Handling
      ✓ should handle controller errors gracefully (3 ms)
      ✓ should handle missing routes with 404 (3 ms)
    Request Validation
      ✓ should pass through request headers (12 ms)
      ✓ should handle JSON parsing errors (5 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Authorization failed for path: /api/test - User role: customer Allowed roles: [ 'admin', 'affiliate' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed for path: /api/test - User role: undefined Allowed roles: [ 'admin' ]

      at log (server/middleware/auth.js:184:15)

  console.log
    Authorization failed - No user object on request for path: /api/test

      at log (server/middleware/auth.js:176:15)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (320 ms)
      ✓ should authenticate valid x-auth-token header (236 ms)
      ✓ should reject request with no token (225 ms)
      ✓ should reject request with invalid token (210 ms)
      ✓ should reject request with expired token (209 ms)
      ✓ should handle malformed Authorization header (208 ms)
      ✓ should reject blacklisted token (205 ms)
    authorize
      ✓ should authorize user with correct role (207 ms)
      ✓ should authorize user with one of multiple roles (206 ms)
      ✓ should reject user with incorrect role (211 ms)
      ✓ should reject user with no role (206 ms)
      ✓ should reject when user is not set (209 ms)
    authLimiter
      ✓ should be a function (205 ms)
      ✓ should have rate limit configuration (212 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.full.test.js
  Social Auth Routes - Full Coverage
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (98 ms)
      ✓ should return 404 when Google OAuth is not configured (56 ms)
      ✓ should handle Google OAuth callback (61 ms)
      ✓ should pass state parameter through OAuth (71 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (71 ms)
      ✓ should return 404 when Facebook OAuth is not configured (69 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (66 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (59 ms)
      ✓ should redirect customer Google OAuth callback (66 ms)
      ✓ should handle customer Facebook OAuth callback (71 ms)
    Social Registration Completion
      ✓ should complete affiliate social registration (69 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (2 ms)
      ✓ should generate next sequential ID when administrators exist
      ✓ should handle double-digit admin IDs correctly
    Permission selection
      ✓ should handle "all" permission selection
      ✓ should handle specific permission selection (1 ms)
      ✓ should filter out invalid permission numbers
    Database operations
      ✓ should connect to MongoDB successfully (1 ms)
      ✓ should create administrator with correct data
      ✓ should handle database save errors (1 ms)
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully (1 ms)
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input (1 ms)
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderModel.test.js
  Order Model - Additional Coverage
    Pre-save Hook Coverage
      SystemConfig Error Handling
        ✓ should use default base rate when SystemConfig.getValue throws error (296 ms)
      Status Timestamp Updates
        ✓ should set processingStartedAt timestamp when status changes to processing (204 ms)
        ✓ should not overwrite existing processingStartedAt timestamp (200 ms)
      Actual Weight and Commission Calculations
        ✓ should calculate actual total and commission when actual weight is set (207 ms)
        ✓ should set processedAt timestamp when status changes to processed (197 ms)
        ✓ should set completedAt timestamp when status changes to complete (195 ms)
        ✓ should set cancelledAt timestamp when status changes to cancelled (193 ms)
        ✓ should properly calculate commission with different fee structures (165 ms)
        ✓ should not overwrite existing timestamps (191 ms)
      Edge Cases
        ✓ should handle status change to processing (195 ms)
        ✓ should calculate commission for large orders (164 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paygistixConfig.test.js
  Paygistix Config
    validateEnvironment
      ✓ should warn when required environment variables are missing (1 ms)
      ✓ should not warn when all required variables are present (3 ms)
    getEnvironment
      ✓ should return configured environment (1 ms)
      ✓ should default to production if not configured (1 ms)
    getMerchantId
      ✓ should return merchant ID when configured (1 ms)
      ✓ should throw error when not configured (11 ms)
    getFormId
      ✓ should return form ID when configured (1 ms)
      ✓ should throw error when not configured (1 ms)
    getFormHash
      ✓ should return form hash when configured (1 ms)
      ✓ should throw error when not configured (6 ms)
    getFormActionUrl
      ✓ should return configured form action URL (2 ms)
      ✓ should return default URL when not configured
    getReturnUrl
      ✓ should return configured return URL (1 ms)
      ✓ should return default URL when not configured (1 ms)
    isConfigured
      ✓ should return true when all required config is present (1 ms)
      ✓ should return false and log error when config is incomplete (1 ms)
    getClientConfig
      ✓ should return complete client config when properly configured (1 ms)
      ✓ should throw and log error when config is missing (1 ms)
      ✓ should set testModeEnabled to false when not configured (1 ms)
    getFullConfig
      ✓ should return complete config including hash (1 ms)
      ✓ should throw and log error when config is missing (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL (1 ms)
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer (1 ms)
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter (1 ms)
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering (1 ms)
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format (1 ms)
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.test.js
  Payment Routes
    Static Routes
      GET /api/v1/payments/config
        ✓ should return payment configuration (7 ms)
      POST /api/v1/payments/log-submission
        ✓ should log payment submission (8 ms)
      POST /api/v1/payments/create-token
        ✓ should create payment token (5 ms)
      GET /api/v1/payments/check-status/:token
        ✓ should check payment status (4 ms)
      POST /api/v1/payments/cancel-token/:token
        ✓ should cancel payment token (5 ms)
      POST /api/v1/payments/update-status/:token
        ✓ should update payment status (11 ms)
      GET /api/v1/payments/pool-stats
        ✓ should return pool statistics (3 ms)
    Dynamic Callback Routes
      ✓ should handle GET callback routes (3 ms)
      ✓ should handle POST callback routes (3 ms)
      ✓ should handle multiple callback paths (4 ms)
    Error Handling
      ✓ should handle controller errors gracefully (2 ms)
      ✓ should handle missing routes with 404 (3 ms)
      ✓ should handle JSON parsing errors (3 ms)
    Request Validation
      ✓ should pass through request headers (2 ms)
      ✓ should handle empty request bodies (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (18 ms)
      ✓ should allow access in test environment (3 ms)
      ✓ should deny access in production without key
      ✓ should allow access in production with valid key (3 ms)
      ✓ should deny access in production with invalid key (3 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (3 ms)
    Route Handlers
      ✓ should serve index.html at root path (3 ms)
      ✓ should serve critical-files page (4 ms)
      ✓ should serve test-templates page (3 ms)
      ✓ should serve action-plan page (3 ms)
      ✓ should return 404 for non-existent pages (3 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (8 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (6 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (3 ms)
      ✓ should apply X-Frame-Options even with valid access (3 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (2 ms)
      ✓ should return valid HTML for 404 page (4 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (4 ms)
      ✓ should handle URL-encoded keys (4 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (4 ms)
      ✓ should handle specific route handlers (4 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (13 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors (1 ms)
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors (1 ms)
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (2 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message
      ✓ should handle errors with code property
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code (11 ms)
      ✓ should have stack trace (1 ms)
      ✓ should work with error handler (1 ms)
    Edge cases
      ✓ should handle null error (3 ms)
      ✓ should handle undefined error (1 ms)
      ✓ should handle non-error objects (3 ms)
      ✓ should handle errors thrown from within error handler (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/orderWithSystemConfig.test.js (9.933 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (854 ms)
      ✓ should use default rate when SystemConfig is not available (951 ms)
      ✓ should calculate estimated total using SystemConfig rate (669 ms)
      ✓ should calculate actual total using SystemConfig rate (653 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (655 ms)
      ✓ should calculate commission for zero delivery fee (661 ms)
      ✓ should handle commission calculation for large orders (648 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (663 ms)
      ✓ should update calculations when base rate changes (824 ms)
      ✓ should validate minimum and maximum base rates (906 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1209 ms)
      ✓ should match revenue calculator with different parameters (680 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentRoutes.full.test.js
  Payment Routes - Full Coverage
    Dynamic Route Loading
      ✓ should load dynamic callback routes when not in test environment (27 ms)
      ✓ should handle GET requests on dynamic callback routes (37 ms)
      ✓ should handle POST requests on dynamic callback routes (41 ms)
      ✓ should handle errors when loading config file (30 ms)
      ✓ should handle invalid JSON in config file (37 ms)
      ✓ should skip dynamic route loading in test environment (32 ms)
    Static Routes
      ✓ should handle GET /config (42 ms)
      ✓ should handle POST /log-submission (27 ms)
      ✓ should handle POST /create-token (41 ms)
      ✓ should handle GET /check-status/:token (32 ms)
      ✓ should handle POST /cancel-token/:token (61 ms)
      ✓ should handle POST /update-status/:token (32 ms)
      ✓ should handle GET /pool-stats (34 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (121 ms)
      ✓ should use default values for blacklistedAt and reason (122 ms)
      ✓ should require all mandatory fields (79 ms)
      ✓ should enforce unique token constraint (241 ms)
      ✓ should validate userType enum (78 ms)
      ✓ should accept all valid userTypes (203 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (112 ms)
        ✓ should use default reason when not provided (110 ms)
        ✓ should return null when token already blacklisted (234 ms)
        ✓ should handle custom reasons (126 ms)
        ✓ should propagate non-duplicate errors (76 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (137 ms)
        ✓ should return false for non-blacklisted token (103 ms)
        ✓ should handle empty token (104 ms)
        ✓ should handle null token (105 ms)
      cleanupExpired
        ✓ should delete expired tokens (232 ms)
        ✓ should return 0 when no expired tokens (232 ms)
        ✓ should handle empty collection (103 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/validators.test.js
  Validators
    isValidEmail
      ✓ should validate correct email addresses (3 ms)
      ✓ should reject invalid email addresses (1 ms)
    isValidPhone
      ✓ should validate correct US phone numbers
      ✓ should reject invalid phone numbers (1 ms)
    isValidUsername
      ✓ should validate correct usernames (2 ms)
      ✓ should reject invalid usernames
    isValidZipCode
      ✓ should validate correct US zip codes (1 ms)
      ✓ should reject invalid zip codes
    isValidTimeFormat
      ✓ should validate correct time formats (6 ms)
      ✓ should reject invalid time formats (1 ms)
    isValidName
      ✓ should validate correct names
      ✓ should reject invalid names (1 ms)
    mongooseValidators
      ✓ should provide email validator
      ✓ should provide phone validator
      ✓ should provide username validator
      ✓ should provide zipCode validator
      ✓ should provide timeFormat validator (1 ms)
      ✓ should provide name validator
    expressValidators
      ✓ should provide email validator function
      ✓ should provide phone validator function
      ✓ should provide username validator function
      ✓ should provide zipCode validator function
      ✓ should provide timeFormat validator function
      ✓ should provide name validator function (1 ms)
    Client-side validation functions
      validateEmail
        ✓ should return validation result for emails
      validatePhone
        ✓ should return validation result for phones (1 ms)
      validateUsername
        ✓ should return validation result for usernames
      validateZipCode
        ✓ should return validation result for zip codes (1 ms)
      validateTimeFormat
        ✓ should return validation result for time formats
      validateName
        ✓ should return validation result for names (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (1 ms)
      ✓ should throw error with invalid encryption key length (12 ms)
      ✓ should throw error when encryption key is missing (2 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (2 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (2 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (2 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (86 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (254 ms)
      ✓ should return false for invalid salt format (84 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes
      ✓ should handle barcode generation errors
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (10 ms)
      ✓ should handle unicode and special characters (8 ms)
      ✓ should produce different IVs for same input (2 ms)
      ✓ should validate encryption output structure (2 ms)
      ✓ should handle password edge cases (1633 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/models.test.js (6.485 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (547 ms)
      ✓ should require required fields (319 ms)
      ✓ should enforce unique constraints (593 ms)
      ✓ should handle payment information correctly (345 ms)
    Customer Model
      ✓ should create a valid customer (344 ms)
    Order Model
      ✓ should create a valid order (378 ms)
      ✓ should calculate estimated total correctly (378 ms)
      ✓ should calculate actual total and commission when weight is set (367 ms)
      ✓ should update timestamps for status changes (466 ms)
    Transaction Model
      ✓ should create a valid transaction (345 ms)
      ✓ should validate transaction type (309 ms)
      ✓ should validate transaction status (310 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (345 ms)
      ✓ should validate user type (311 ms)
      ✓ should check if token is expired (369 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching public configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:88:55)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      21 |     res.json(formattedConfigs);
      22 |   } catch (error) {
    > 23 |     console.error('Error fetching public configs:', error);
         |             ^
      24 |     res.status(500).json({ error: 'Failed to fetch public configurations' });
      25 |   }
      26 | });

      at error (server/routes/systemConfigRoutes.js:23:13)

  console.error
    Error fetching config: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:141:46)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      47 |     });
      48 |   } catch (error) {
    > 49 |     console.error('Error fetching config:', error);
         |             ^
      50 |     res.status(500).json({ error: 'Failed to fetch configuration' });
      51 |   }
      52 | });

      at error (server/routes/systemConfigRoutes.js:49:13)

  console.error
    Error fetching configs: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:190:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      70 |     res.json(configs);
      71 |   } catch (error) {
    > 72 |     console.error('Error fetching configs:', error);
         |             ^
      73 |     res.status(500).json({ error: 'Failed to fetch configurations' });
      74 |   }
      75 | });

      at error (server/routes/systemConfigRoutes.js:72:13)

  console.error
    Error updating config: Error: Invalid value
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:333:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

  console.error
    Error initializing configs: Error: Init failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/systemConfigRoutes.test.js:359:57)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      103 |     res.json({ message: 'Default configurations initialized' });
      104 |   } catch (error) {
    > 105 |     console.error('Error initializing configs:', error);
          |             ^
      106 |     res.status(500).json({ error: 'Failed to initialize configurations' });
      107 |   }
      108 | });

      at error (server/routes/systemConfigRoutes.js:105:13)

PASS tests/unit/systemConfigRoutes.test.js
  System Config Routes
    GET /api/system-config/public
      ✓ should return public configurations (19 ms)
      ✓ should handle errors when fetching public configs (19 ms)
    GET /api/system-config/public/:key
      ✓ should return specific public configuration (5 ms)
      ✓ should return 404 for non-existent public config (4 ms)
      ✓ should handle errors when fetching specific config (6 ms)
    GET /api/system-config (authenticated)
      ✓ should return all configurations for admin (4 ms)
      ✓ should filter configurations by category (3 ms)
      ✓ should handle errors when fetching all configs (4 ms)
      ✓ should require authentication (3 ms)
      ✓ should require administrator role (83 ms)
    PUT /api/system-config/:key
      ✓ should update configuration value (11 ms)
      ✓ should require system_config permission (212 ms)
      ✓ should handle validation errors (22 ms)
    POST /api/system-config/initialize
      ✓ should initialize default configurations (13 ms)
      ✓ should handle errors during initialization (4 ms)
      ✓ should require authentication and admin role (5 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (144 ms)
      ✓ should generate ADM002 when ADM001 exists (252 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (315 ms)
      ✓ should handle non-sequential admin IDs correctly (285 ms)
      ✓ should handle double-digit admin IDs (245 ms)
      ✓ should handle triple-digit admin IDs (219 ms)
      ✓ should handle large admin ID numbers (220 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (106 ms)
      ✓ should handle numbers above 999 without padding issues (106 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (105 ms)
      ✓ should handle edge cases in admin ID parsing (105 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (318 ms)
      ✓ should work correctly with different creation dates (283 ms)
      ✓ should work correctly with different permissions (288 ms)
    Performance and reliability
      ✓ should handle database query efficiently (243 ms)
      ✓ should handle concurrent admin creation scenario (240 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (5 ms)
      ✓ should not have duplicate endpoints across categories (1 ms)
      ✓ should include critical security endpoints
      ✓ should exclude authentication endpoints from CSRF
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests (1 ms)
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests (1 ms)
        ✓ should consider CSRF for PUT requests
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints (1 ms)
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration (1 ms)
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation (1 ms)
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion
        ✓ should enforce CSRF for admin operations (1 ms)
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2 (1 ms)
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2
        ✓ should handle bag management endpoints based on phase (5 ms)
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints (1 ms)
        ✓ should enforce CSRF for search endpoints with state-changing methods
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes (1 ms)
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints (1 ms)
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable (1 ms)
        ✓ should handle non-numeric CSRF_PHASE
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

FAIL tests/unit/orderControllerAdditional.test.js
  Order Controller - Additional Coverage
    checkActiveOrders (lines 52-89)
      ✓ should check active orders for authenticated customer (53 ms)
      ✓ should return no active orders when none exist (55 ms)
      ✓ should handle missing customer ID (58 ms)
      ✓ should handle database errors (51 ms)
    Error handling in various methods
      ✕ should handle error in createOrder when email service fails (lines 145-146) (52 ms)
    exportOrders edge cases (lines 240-293)
      ✕ should handle CSV export with special characters (55 ms)
      ✕ should handle JSON export (58 ms)
      ✕ should handle export errors (52 ms)
    updateOrderStatus edge cases
      ✕ should handle invalid status transitions (lines 381-382) (51 ms)
    cancelOrder method (lines 469-470, 488)
      ✓ should handle order not found (51 ms)
      ✕ should handle cancellation of already cancelled order (65 ms)
    updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585)
      ✕ should handle missing payment data (52 ms)
      ✕ should handle refund without completed payment (52 ms)
      ✕ should handle refund amount greater than order total (55 ms)
    bulkUpdateOrderStatus edge cases (lines 627-632, 643-644)
      ✕ should handle empty order IDs array (52 ms)
      ✕ should handle some orders not found (55 ms)

  ● Order Controller - Additional Coverage › Error handling in various methods › should handle error in createOrder when email service fails (lines 145-146)

    TypeError: Cannot read properties of undefined (reading 'mockRejectedValue')

      152 |       
      153 |       // Mock email service to throw error
    > 154 |       emailService.sendOrderConfirmationEmail.mockRejectedValue(new Error('Email failed'));
          |                                               ^
      155 |       emailService.sendNewOrderNotificationToAffiliate.mockRejectedValue(new Error('Email failed'));
      156 |
      157 |       const consoleSpy = jest.spyOn(console, 'error').mockImplementation();

      at Object.mockRejectedValue (tests/unit/orderControllerAdditional.test.js:154:47)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle CSV export with special characters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Content-Type", "text/csv"

    Number of calls: 0

      193 |       await orderController.exportOrders(req, res);
      194 |
    > 195 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Type', 'text/csv');
          |                             ^
      196 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Disposition', 'attachment; filename=orders_export.csv');
      197 |       
      198 |       const csvContent = res.end.mock.calls[0][0];

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:195:29)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle JSON export

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "count": 1,
    -   "orders": Array [
    -     Object {
    -       "customerId": "CUST123",
    -       "orderId": "ORD001",
    -     },
    -   ],
    -   "success": true,
    +   "message": "Insufficient permissions for this export",
    +   "success": false,
      },

    Number of calls: 1

      218 |       await orderController.exportOrders(req, res);
      219 |
    > 220 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      221 |         success: true,
      222 |         count: 1,
      223 |         orders: [{ orderId: 'ORD001', customerId: 'CUST123' }]

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:220:24)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle export errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error exporting orders:", Any<Error>

    Number of calls: 0

      238 |       await orderController.exportOrders(req, res);
      239 |
    > 240 |       expect(consoleSpy).toHaveBeenCalledWith('Error exporting orders:', expect.any(Error));
          |                          ^
      241 |       expect(res.status).toHaveBeenCalledWith(500);
      242 |       
      243 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:240:26)

  ● Order Controller - Additional Coverage › updateOrderStatus edge cases › should handle invalid status transitions (lines 381-382)

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      264 |       await orderController.updateOrderStatus(req, res);
      265 |
    > 266 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      267 |       expect(res.status).toHaveBeenCalledWith(500);
      268 |       
      269 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalled (tests/unit/orderControllerAdditional.test.js:266:26)

  ● Order Controller - Additional Coverage › cancelOrder method (lines 469-470, 488) › should handle cancellation of already cancelled order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Order is already cancelled",
    +   "message": "Orders in cancelled status cannot be cancelled. Only pending orders can be cancelled.",
        "success": false,
      },

    Number of calls: 1

      304 |
      305 |       expect(res.status).toHaveBeenCalledWith(400);
    > 306 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      307 |         success: false,
      308 |         message: 'Order is already cancelled'
      309 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:306:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle missing payment data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 404

    Number of calls: 1

      319 |       await orderController.updatePaymentStatus(req, res);
      320 |
    > 321 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      322 |       expect(res.json).toHaveBeenCalledWith({
      323 |         success: false,
      324 |         message: 'Payment status is required'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:321:26)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund without completed payment

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Can only refund completed payments",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      346 |
      347 |       expect(res.status).toHaveBeenCalledWith(400);
    > 348 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      349 |         success: false,
      350 |         message: 'Can only refund completed payments'
      351 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:348:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund amount greater than order total

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Refund amount cannot exceed order total",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      372 |
      373 |       expect(res.status).toHaveBeenCalledWith(400);
    > 374 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      375 |         success: false,
      376 |         message: 'Refund amount cannot exceed order total'
      377 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:374:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle empty order IDs array

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "No orders specified",
    +   "message": "Order IDs must be provided as an array",
        "success": false,
      },

    Number of calls: 1

      390 |
      391 |       expect(res.status).toHaveBeenCalledWith(400);
    > 392 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      393 |         success: false,
      394 |         message: 'No orders specified'
      395 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:392:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle some orders not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Orders updated",
    -   "notFoundCount": 1,
    -   "results": Any<Array>,
    -   "success": true,
    -   "updatedCount": 2,
    +   "message": "Unauthorized",
    +   "success": false,
      },

    Number of calls: 1

      413 |       await orderController.bulkUpdateOrderStatus(req, res);
      414 |
    > 415 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      416 |         success: true,
      417 |         message: 'Orders updated',
      418 |         updatedCount: 2,

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:415:24)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array (1 ms)
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects
      ✓ should handle empty array
      ✓ should handle non-array inputs (1 ms)
      ✓ should handle arrays with mixed types
    fieldDefinitions
      ✓ should have definitions for all data types (1 ms)
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role (1 ms)
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role (1 ms)
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions (1 ms)
    responseFilter middleware
      ✓ should create filtered json method
      ✓ should filter response data when _filterType is provided (1 ms)
      ✓ should not filter when _filterType is not provided
      ✓ should handle public role when user is not authenticated (1 ms)
      ✓ should extract user ID from different user types
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/storeIPs.test.js
  storeIPs configuration
    IP whitelist configuration
      ✓ should load single store IP from environment (6 ms)
      ✓ should handle empty store IP (1 ms)
      ✓ should load additional IPs from environment (1 ms)
      ✓ should trim whitespace from IPs (1 ms)
      ✓ should filter out empty IP entries (1 ms)
      ✓ should load IP ranges from environment
      ✓ should handle empty IP ranges (1 ms)
    Session renewal configuration
      ✓ should use default session renewal settings (1 ms)
      ✓ should load custom session renewal settings from environment (1 ms)
      ✓ should handle invalid numeric values
    isWhitelisted function
      ✓ should return true for directly whitelisted IPs
      ✓ should return false for non-whitelisted IPs (2 ms)
      ✓ should check IP ranges (1 ms)
      ✓ should return false for IPs outside ranges (1 ms)
    isInRange function
      ✓ should correctly check IPs in /24 subnet
      ✓ should correctly check IPs in /16 subnet
      ✓ should correctly check IPs in /8 subnet (1 ms)
      ✓ should correctly check IPs in /32 subnet (single host) (1 ms)
      ✓ should correctly check IPs in /0 subnet (all IPs) (1 ms)
      ✓ should handle invalid CIDR notation (1 ms)
      ✓ should handle invalid mask bits
      ✓ should handle invalid IP addresses (1 ms)
      ✓ should handle IP parts out of range
      ✓ should handle edge cases with console error (2 ms)
      ✓ should correctly handle boundary cases (6 ms)
      ✓ should handle various subnet sizes correctly (2 ms)
    Configuration export structure
      ✓ should export all required properties and functions (1 ms)
      ✓ should have correct session renewal properties (1 ms)
    Integration scenarios
      ✓ should handle complex whitelist configuration (1 ms)
      ✓ should work with no configuration (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPoolManager.test.js
  CallbackPoolManager
    constructor
      ✓ should initialize with correct configuration (2 ms)
    initializePool
      ✓ should create or update callback entries for all paths (1 ms)
      ✓ should start cleanup job after initialization (1 ms)
    acquireCallback
      ✓ should acquire callback successfully (1 ms)
      ✓ should return null when no callbacks available (1 ms)
    releaseCallback
      ✓ should release callback successfully
      ✓ should handle null callback gracefully (1 ms)
    getPoolStatus
      ✓ should return pool status with all handler details (2 ms)
      ✓ should handle empty pool
    startCleanupJob
      ✓ should start cleanup interval (3 ms)
      ✓ should run cleanup task every 5 minutes (1 ms)
      ✓ should handle cleanup errors gracefully (19 ms)
      ✓ should not log when no locks are released (1 ms)
    stopCleanupJob
      ✓ should stop cleanup interval when running (1 ms)
      ✓ should handle stopping when no interval exists
    integration scenarios
      ✓ should handle complete payment flow (1 ms)
      ✓ should handle concurrent acquire attempts (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (3 ms)
        ✓ should require uppercase letters (1 ms)
        ✓ should require lowercase letters
        ✓ should require numbers
        ✓ should require special characters (1 ms)
      Security Validations
        ✓ should reject common passwords (2 ms)
        ✓ should reject passwords containing username
        ✓ should reject passwords containing email
        ✓ should reject sequential characters (1 ms)
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password (1 ms)
        ✓ should handle null/undefined password
        ✓ should handle case-insensitive username/email checks (1 ms)
    customPasswordValidator
      ✓ should work as express-validator custom validator (18 ms)
      ✓ should include validation errors in thrown message (1 ms)
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success (1 ms)
      ✓ should return error response on validation failure (2 ms)
    isPasswordInHistory
      ✓ should return false for empty history (1 ms)
      ✓ should return false for password not in history (60 ms)
      ✓ should handle null/undefined history (1 ms)
    getPasswordStrength
      ✓ should return higher scores for stronger passwords
      ✓ should score length appropriately (1 ms)
      ✓ should score character variety
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords (1 ms)
      ✓ should contain domain-specific passwords

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/callbackPool.test.js (6.686 s)
  CallbackPool Model
    Schema and Indexes
      ✓ should have required fields (150 ms)
      ✓ should have default values (148 ms)
      ✓ should have unique constraint on callbackPath (143 ms)
      ✓ should create document with defaults (178 ms)
    Instance Methods
      lock()
        ✓ should lock callback with payment token (206 ms)
        ✓ should increment usage count on each lock (289 ms)
        ✓ should update lastUsedAt timestamp (207 ms)
      release()
        ✓ should release locked callback (264 ms)
        ✓ should handle releasing already unlocked callback (197 ms)
    Static Methods
      acquireCallback()
        ✓ should acquire available unlocked callback (213 ms)
        ✓ should use least recently used callback (244 ms)
        ✓ should acquire expired locked callback (245 ms)
        ✓ should return null when no callbacks available (246 ms)
        ✓ should increment usage count atomically (225 ms)
      releaseCallback()
        ✓ should release callback by payment token (205 ms)
        ✓ should return null if no callback found with token (168 ms)
        ✓ should only release callback locked by specific token (241 ms)
      releaseExpiredLocks()
        ✓ should release callbacks locked longer than timeout (495 ms)
        ✓ should not release recently locked callbacks (237 ms)
        ✓ should handle custom timeout values (247 ms)
        ✓ should return 0 when no expired locks (257 ms)
        ✓ should handle empty collection (241 ms)
    Edge Cases and Error Handling
      ✓ should handle concurrent lock attempts (172 ms)
      ✓ should maintain data integrity with rapid lock/release cycles (772 ms)
      ✓ should handle invalid ObjectId gracefully (170 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively (1 ms)
      ✓ should sanitize objects recursively
      ✓ should handle null values (1 ms)
      ✓ should handle undefined values
      ✓ should handle numbers
      ✓ should handle booleans (1 ms)
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties
    sanitizeRequest
      ✓ should sanitize request body (1 ms)
      ✓ should sanitize query parameters
      ✓ should sanitize URL parameters (1 ms)
      ✓ should handle missing request properties
      ✓ should handle all properties in one request (1 ms)
    sanitizeEmail
      ✓ should sanitize and validate email
      ✓ should remove HTML from email (1 ms)
      ✓ should return empty string for invalid email
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should validate complex email formats (1 ms)
    sanitizePhone
      ✓ should keep only allowed characters
      ✓ should remove invalid characters (1 ms)
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters (1 ms)
      ✓ should remove spaces
      ✓ should handle script injection attempts (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace (1 ms)
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts (1 ms)
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined (1 ms)
      ✓ should handle non-string inputs
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts (1 ms)
      ✓ should preserve forward slashes
    Integration tests
      ✓ should work with express middleware chain (1 ms)
      ✓ should handle complex nested structures

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

  console.log
    Updated customer isActive status to true for customer: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:209:15)

  console.error
    Failed to send notification emails: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/orderController.test.js:109:73)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      215 |       await emailService.sendAffiliateNewOrderEmail(affiliate, customer, newOrder);
      216 |     } catch (emailError) {
    > 217 |       console.error('Failed to send notification emails:', emailError);
          |               ^
      218 |       // Continue with the response even if emails fail
      219 |     }
      220 |

      at Object.error [as createOrder] (server/controllers/orderController.js:217:15)
      at Object.<anonymous> (tests/unit/orderController.test.js:112:7)

  console.log
    Creating order with data: { customerId: 'INVALID', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:130:15)

  console.log
    Creating order with data: { customerId: 'CUST123', affiliateId: 'INVALID' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at Object.log [as createOrder] (server/controllers/orderController.js:159:15)

  console.log
    Creating order with data: { customerId: 'CUST456', affiliateId: 'AFF123' }

      at Object.log [as createOrder] (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST456

      at Object.log [as createOrder] (server/controllers/orderController.js:126:13)

  console.log
    Found customer: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at Object.log [as createOrder] (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: undefined undefined

      at Object.log [as createOrder] (server/controllers/orderController.js:165:13)

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (206 ms)
      ✓ should handle email sending failures gracefully (127 ms)
      ✓ should return error for invalid customer (59 ms)
      ✓ should return error for invalid affiliate (54 ms)
      ✓ should enforce authorization (58 ms)
    getOrderDetails
      ✓ should return order details for authorized user (55 ms)
      ✓ should return 404 for non-existent order (52 ms)
      ✓ should enforce authorization for customers (54 ms)
    updateOrderStatus
      ✓ should successfully update order status (54 ms)
      ✓ should update actual weight when processing (52 ms)
      ✓ should validate status transitions (70 ms)
      ✓ should send commission email when complete (53 ms)
    cancelOrder
      ✓ should successfully cancel an order (52 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (2 ms)
      ✓ should have unique event names (1 ms)
    logAuditEvent
      ✓ should log basic audit event (1 ms)
      ✓ should add request context when provided (1 ms)
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events
      ✓ should handle missing user context (1 ms)
      ✓ should handle connection.remoteAddress fallback (3 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish (1 ms)
      ✓ should log successful responses
      ✓ should not log failed responses (1 ms)
      ✓ should include request context in logs (1 ms)
    logLoginAttempt
      ✓ should log successful login (6 ms)
      ✓ should log failed login with reason (1 ms)
      ✓ should handle null reason (1 ms)
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details (1 ms)
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (1 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/createAdminScript.test.js (10.499 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (358 ms)
      ✓ should contain required functionality markers (376 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (612 ms)
      ✓ should calculate next admin ID correctly (710 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (367 ms)
      ✓ should accept strong passwords for admins (760 ms)
    Permission System Validation
      ✓ should validate all permission types (474 ms)
      ✓ should handle partial permission sets (456 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (559 ms)
      ✓ should prevent duplicate emails (583 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (483 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (512 ms)
      ✓ should normalize email addresses (485 ms)
      ✓ should validate email format (757 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (487 ms)
      ✓ should work with password hashing middleware (451 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (382 ms)
      ✓ should handle invalid input gracefully (376 ms)
    Security Considerations
      ✓ should not log or expose passwords (374 ms)
      ✓ should generate secure random passwords when needed (362 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/oAuthSession.test.js (6.609 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (236 ms)
      ✓ should require sessionId field (202 ms)
      ✓ should require result field (227 ms)
      ✓ should automatically set createdAt (245 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (233 ms)
      ✓ should enforce unique sessionId (275 ms)
      ✓ should allow complex result objects (239 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (270 ms)
        ✓ should throw error for duplicate session IDs (273 ms)
        ✓ should handle database errors (213 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (266 ms)
        ✓ should return null for non-existent session (236 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (293 ms)
        ✓ should return null when consuming non-existent session (225 ms)
        ✓ should handle race conditions safely (286 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (459 ms)
        ✓ should return zero deletions when no expired sessions exist (296 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (245 ms)
      ✓ should respect custom expiresAt when provided (237 ms)
    Data Integrity
      ✓ should preserve all data types in result field (243 ms)
      ✓ should handle empty and minimal result objects (362 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (205 ms)
      ✓ should handle very large result objects (320 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentMethod.test.js
  PaymentMethod Model Unit Tests
    Schema Validation
      ✓ should create a valid payment method (63 ms)
      ✓ should require customerId (62 ms)
      ✓ should require paygistixId (57 ms)
      ✓ should validate type enum (59 ms)
      ✓ should reject invalid type (62 ms)
      ✓ should default type to card (63 ms)
    Card Validation
      ✓ should require card details when type is card (59 ms)
      ✓ should validate card last4 length (59 ms)
      ✓ should validate card brand enum (56 ms)
      ✓ should reject invalid card brand (54 ms)
      ✓ should validate expiry month range (55 ms)
      ✓ should validate expiry year is not in the past (53 ms)
      ✓ should require card fingerprint (55 ms)
    Bank Account Validation
      ✓ should create valid bank account payment method (53 ms)
      ✓ should require bank account details when type is bank_account (54 ms)
      ✓ should validate bank account last4 length (53 ms)
      ✓ should validate account type enum (55 ms)
      ✓ should reject invalid account type (55 ms)
    Wallet Validation
      ✓ should create valid wallet payment method (57 ms)
      ✓ should require wallet type when type is wallet (54 ms)
      ✓ should validate wallet type enum (54 ms)
    Default Values
      ✓ should default isDefault to false (53 ms)
      ✓ should default isActive to true (55 ms)
      ✓ should default isVerified to false (53 ms)
    Virtual Properties
      displayName
        ✓ should format card display name (54 ms)
        ✓ should format bank account display name (54 ms)
        ✓ should format wallet display name (53 ms)
        ✓ should handle google_pay formatting (54 ms)
        ✓ should return default for unknown type (59 ms)
      isExpired
        ✓ should return false for non-card types (56 ms)
        ✓ should return false for future expiry (55 ms)
        ✓ should return true for past year (56 ms)
        ✓ should return true for current year past month (56 ms)
        ✓ should return false for current year future month (54 ms)
    Instance Methods
      canUse()
        ✓ should allow use of active non-expired card (53 ms)
        ✓ should not allow use of inactive payment method (54 ms)
        ✓ should not allow use of expired card (55 ms)
        ✓ should not allow use of unverified bank account (54 ms)
        ✓ should allow use of verified bank account (54 ms)
      markAsUsed()
        ✓ should update lastUsedAt (54 ms)
    Static Methods
      findDefault()
        ✓ should find default payment method for customer (54 ms)
      findActiveByCustomer()
        ✓ should find active payment methods sorted by default and date (54 ms)
      checkDuplicate()
        ✓ should check for duplicate card fingerprint (54 ms)
        ✓ should return null if no duplicate found (53 ms)
    Middleware
      Pre-save middleware existence
        ✓ should have pre-save middleware defined (54 ms)
    Metadata Field
      ✓ should store metadata as Map (55 ms)
    JSON Transformation
      ✓ should include virtuals and exclude sensitive fields (55 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/payment.test.js
  Payment Model Unit Tests
    Schema Validation
      ✓ should create a valid payment (54 ms)
      ✓ should require orderId (57 ms)
      ✓ should require customerId (59 ms)
      ✓ should require paymentMethodId (58 ms)
      ✓ should require paygistixId (56 ms)
      ✓ should require amount (57 ms)
      ✓ should validate amount is non-negative (65 ms)
      ✓ should default currency to USD (60 ms)
      ✓ should validate currency enum (53 ms)
      ✓ should reject invalid currency (54 ms)
      ✓ should validate status enum (53 ms)
      ✓ should reject invalid status (54 ms)
      ✓ should default status to pending (52 ms)
    Default Values
      ✓ should default capturedAmount to 0 (52 ms)
      ✓ should default refundedAmount to 0 (52 ms)
      ✓ should default hasDispute to false (53 ms)
      ✓ should have empty refunds array (62 ms)
    Virtual Properties
      ✓ should calculate netAmount correctly (56 ms)
      ✓ should handle zero amounts (52 ms)
      ✓ should handle full refund (52 ms)
    Instance Methods
      canRefund()
        ✓ should allow refund when status is captured (52 ms)
        ✓ should allow refund when status is partially_refunded (52 ms)
        ✓ should not allow refund when status is pending (52 ms)
        ✓ should not allow refund when fully refunded (51 ms)
        ✓ should validate refund amount (53 ms)
        ✓ should handle null amount parameter (53 ms)
      canCapture()
        ✓ should allow capture when status is authorized (52 ms)
        ✓ should not allow capture when status is captured (55 ms)
        ✓ should not allow capture when status is pending (52 ms)
      addRefund()
        ✓ should add refund to refunds array (54 ms)
        ✓ should update refundedAmount (52 ms)
        ✓ should update lastRefundAt (53 ms)
        ✓ should set status to partially_refunded for partial refund (53 ms)
        ✓ should set status to refunded for full refund (52 ms)
        ✓ should handle multiple refunds (53 ms)
        ✓ should handle refund that exceeds captured amount (54 ms)
    Static Methods
      findByOrder()
        ✓ should find payments by orderId (56 ms)
      findSuccessfulByCustomer()
        ✓ should find successful payments by customer with default limit (53 ms)
        ✓ should accept custom limit (52 ms)
      calculateRevenue()
        ✓ should calculate revenue for a period (60 ms)
    Middleware
      ✓ should have pre-save middleware defined (52 ms)
    Refund Schema
      ✓ should validate refund subdocument (54 ms)
      ✓ should require refundId in refund (53 ms)
      ✓ should require amount in refund (53 ms)
      ✓ should validate refund amount is non-negative (57 ms)
      ✓ should set default createdAt for refund (53 ms)
    Dispute Tracking
      ✓ should validate dispute status enum (54 ms)
      ✓ should allow dispute fields when hasDispute is true (55 ms)
      ✓ should validate dispute amount is non-negative (54 ms)
    Metadata and Response Fields
      ✓ should store metadata as Map (52 ms)
      ✓ should store response as mixed type (53 ms)
    JSON Transformation
      ✓ should remove __v and response fields from JSON (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (15 ms)
      ✓ should return 404 when Google OAuth is not configured (6 ms)
      ✓ should handle Google OAuth callback (12 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (3 ms)
      ✓ should return 404 when Facebook OAuth is not configured (3 ms)
      ✓ should handle Facebook OAuth callback (3 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (3 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (3 ms)
      ✓ should handle LinkedIn OAuth callback (4 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (12 ms)
      ✓ should validate required fields for social registration (9 ms)
      ✓ should validate service radius range (4 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (2 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (3 ms)
      ✓ should handle customer LinkedIn callback (4 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (3 ms)
      ✓ should validate service frequency (10 ms)
    Error Handling
      ✓ should handle errors gracefully (20 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentController.test.js
  Payment Controller
    getConfig
      ✓ should return payment configuration when properly configured (205 ms)
      ✓ should return error when Paygistix is not configured (53 ms)
      ✓ should handle errors gracefully (52 ms)
    logSubmission
      ✓ should log payment submission successfully (52 ms)
      ✓ should handle logging errors (54 ms)
    createPaymentToken
      ✓ should create payment token successfully (53 ms)
      ✓ should handle no available callbacks (52 ms)
      ✓ should handle token creation errors (53 ms)
    checkPaymentStatus
      ✓ should return payment status successfully (52 ms)
      ✓ should handle token not found (53 ms)
      ✓ should handle database errors (51 ms)
    cancelPaymentToken
      ✓ should cancel pending payment token (55 ms)
      ✓ should not cancel non-pending tokens (52 ms)
      ✓ should handle token not found (61 ms)
    updatePaymentStatus
      ✓ should update payment status to success (53 ms)
      ✓ should update payment status to failed (51 ms)
    handleFormCallback
      ✓ should process callback successfully (56 ms)
      ✓ should handle no pending payment for callback (52 ms)
      ✓ should handle callback processing errors (53 ms)
    processCallbackResult
      ✓ should process successful payment from query params (52 ms)
      ✓ should process failed payment (52 ms)
      ✓ should handle body parameters (55 ms)
      ✓ should redirect with all parameters (51 ms)
    getPoolStats
      ✓ should return pool statistics (64 ms)
      ✓ should handle stats retrieval errors (52 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentCallbackRoute.test.js
  Payment Callback Route
    GET /payment_callback
      Successful payment
        ✓ should handle approved payment successfully (8 ms)
        ✓ should handle success status as well as approved (3 ms)
        ✓ should update existing payment if found (12 ms)
        ✓ should handle customer not found gracefully (3 ms)
        ✓ should handle email send failure gracefully (3 ms)
        ✓ should not update customer if already active (3 ms)
      Failed payment
        ✓ should handle declined payment (2 ms)
        ✓ should handle failed status (2 ms)
        ✓ should increment payment attempts on failure (2 ms)
        ✓ should use default error message when none provided (2 ms)
      Error handling
        ✓ should handle order not found (2 ms)
        ✓ should handle unknown payment status (1 ms)
        ✓ should handle database errors gracefully (2 ms)
        ✓ should handle payment save error (2 ms)
      Edge cases
        ✓ should handle missing amount parameter (2 ms)
        ✓ should handle malformed maskedCard (1 ms)
        ✓ should log callback parameters (2 ms)
    POST /payment_callback
      ✓ should handle POST callback and return JSON response (6 ms)
      ✓ should handle POST callback errors (3 ms)
      ✓ should handle empty POST body (2 ms)
      ✓ should handle POST with form-urlencoded data (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[31merror[39m: Failed to retrieve PKCE verifier: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json' {"code":"ENOENT","errno":-2,"path":"/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json","service":"wavemax-affiliate","stack":"Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/temp/pkce/test_state_789.json'\n    at open (node:internal/fs/promises:639:25)\n    at Object.readFile (node:internal/fs/promises:1246:14)\n    at DocuSignService.getPkceVerifier (/var/www/wavemax/wavemax-affiliate-program/server/services/docusignService.js:85:23)\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/docusignService.test.js:112:31)","syscall":"open","timestamp":"2025-06-28T13:59:14.286Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.626Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":13}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:59:14.627Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: Token saved to database {"expiresAt":"2025-06-28T14:59:14.627Z","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.667Z","tokenId":"default"}
[32minfo[39m: Token exchange successful {"expiresIn":3600,"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.668Z"}
[31merror[39m: PKCE verifier not found for state: {"service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.785Z"}
[32minfo[39m: Token exchange request: {"client_id":"test_integration_key","has_verifier":true,"redirect_uri":"https://test.com/callback","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.899Z","url":"https://account-d.docusign.com/oauth/token","verifier_length":8}
[31merror[39m: Failed to exchange code for token: {"error":"Network error","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:14.900Z"}
  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:59:14.981Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:59:15.042Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

  console.log
    DocuSignToken saved: {
      tokenId: 'default',
      expiresAt: 2025-06-28T14:59:15.298Z,
      status: 'active'
    }

      at Function.log [as saveToken] (server/models/DocuSignToken.js:118:13)

[32minfo[39m: DocuSign envelope created: {"affiliateId":"123456789","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:15.706Z"}
[31merror[39m: Failed to create W9 envelope: {"affiliateEmail":"test@example.com","data":{"message":"Invalid template ID"},"service":"wavemax-affiliate","status":400,"templateId":"test_template_id","timestamp":"2025-06-28T13:59:15.789Z"}
[32minfo[39m: DocuSign in test mode - returning mock envelope {"service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:15.871Z"}
[32minfo[39m: Embedded signing URL generated: {"affiliateId":"123456","envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:15.957Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-completed","service":"wavemax-affiliate","status":"completed","timestamp":"2025-06-28T13:59:16.203Z"}
[32minfo[39m: Processing DocuSign webhook event: {"envelopeId":"test_envelope_id","event":"envelope-declined","service":"wavemax-affiliate","status":"declined","timestamp":"2025-06-28T13:59:16.287Z"}
[32minfo[39m: Downloaded completed W9: {"envelopeId":"test_envelope_id","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:16.461Z"}
[32minfo[39m: Voided envelope: {"envelopeId":"test_envelope_id","reason":"Cancelled by user","service":"wavemax-affiliate","timestamp":"2025-06-28T13:59:16.567Z"}
PASS tests/unit/docusignService.test.js
  DocuSign Service
    PKCE Generation
      ✓ should generate valid PKCE challenge and verifier (91 ms)
    PKCE Storage
      ✓ should store and retrieve PKCE verifier (87 ms)
      ✓ should delete verifier after retrieval (97 ms)
      ✓ should clean up old PKCE files (82 ms)
    Authorization URL
      ✓ should generate correct authorization URL (89 ms)
      ✓ should use provided state if given (84 ms)
    Token Exchange
      ✓ should exchange authorization code for tokens (159 ms)
      ✓ should throw error if PKCE verifier not found (112 ms)
      ✓ should handle token exchange errors (84 ms)
    Token Refresh
      ✓ should refresh access token using refresh token (207 ms)
      ✓ should throw error if no refresh token available (109 ms)
    Access Token Management
      ✓ should return valid access token if not expired (178 ms)
      ✓ should refresh token if expired (119 ms)
      ✓ should throw error if no valid token and no refresh token (109 ms)
    Envelope Creation
      ✓ should create W9 envelope for affiliate (84 ms)
      ✓ should handle envelope creation errors (82 ms)
      ✓ should return mock envelope in test mode (84 ms)
    Embedded Signing URL
      ✓ should generate embedded signing URL (82 ms)
    Webhook Signature Verification
      ✓ should verify valid webhook signature (81 ms)
      ✓ should reject invalid webhook signature (82 ms)
    Webhook Event Processing
      ✓ should process completed envelope event (85 ms)
      ✓ should handle declined envelope (84 ms)
    Envelope Status
      ✓ should get envelope status (84 ms)
    Document Download
      ✓ should download completed W9 document (88 ms)
    Envelope Voiding
      ✓ should void an envelope (106 ms)

(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:102:13)

  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-123

      at Object.log [as exportVendors] (server/controllers/quickbooksController.js:94:15)

PASS tests/unit/quickbooksController.test.js
  QuickBooks Controller
    exportVendors
      ✓ should export vendors as JSON (10 ms)
      ✓ should export vendors as CSV (2 ms)
      ✓ should return 404 when no verified vendors found
      ✓ should handle errors gracefully (1 ms)
    exportPaymentSummary
      ✓ should export payment summary as JSON (1 ms)
      ✓ should export payment summary as CSV (1 ms)
      ✓ should return 400 when dates are missing
      ✓ should return 404 when no payable commissions found
      ✓ should filter out orders without verified W-9 (1 ms)
    exportCommissionDetail
      ✓ should export commission detail as JSON (1 ms)
      ✓ should return 400 when required parameters are missing (1 ms)
      ✓ should return 404 when affiliate not found
      ✓ should return 400 when affiliate has no verified W-9 (1 ms)
    getExportHistory
      ✓ should get export history
      ✓ should filter by type (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (2 ms)
        ✓ should accept passwords with 8 or more characters (1 ms)
      Character Type Requirements
        ✓ should require at least one uppercase letter
        ✓ should require at least one lowercase letter (1 ms)
        ✓ should require at least one number (1 ms)
        ✓ should require at least one special character
        ✓ should accept passwords with all required character types (1 ms)
      Common Password Detection
        ✓ should reject common passwords (1 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers
        ✓ should reject passwords with sequential letters (1 ms)
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters
      Username/Email Inclusion Check
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email
      Password History Check
        ✓ should reject passwords in history (1 ms)
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords
    getPasswordStrength
      ✓ should return correct strength scores (6 ms)
      ✓ should return correct strength labels (1 ms)
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history (1 ms)
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function (1 ms)
      ✓ should validate passwords correctly in express-validator context
      ✓ should throw for invalid passwords in express-validator context (17 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator (1 ms)
    passwordValidationMiddleware
      ✓ should call next() for valid passwords (1 ms)
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request
      ✓ should include strength assessment in response for invalid passwords (1 ms)
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully
      ✓ should handle very long passwords (1 ms)
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/administrator.test.js (7.741 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (214 ms)
      ✓ should require all mandatory fields (87 ms)
      ✓ should enforce email format validation (138 ms)
      ✓ should enforce unique email constraint (528 ms)
      ✓ should enforce unique adminId constraint (534 ms)
      ✓ should validate permission enum values (140 ms)
      ✓ should accept valid permissions (166 ms)
      ✓ should trim whitespace from string fields (177 ms)
      ✓ should convert email to lowercase (194 ms)
      ✓ should not allow role to be changed after creation (224 ms)
    Password Handling
      ✓ should store password as hash and salt (206 ms)
      ✓ should verify correct password (283 ms)
      ✓ should reject incorrect password (266 ms)
      ✓ should not expose password in JSON output (172 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (227 ms)
      ✓ should lock account after 5 failed attempts (223 ms)
      ✓ should reset login attempts on successful login (232 ms)
      ✓ should reset attempts if lock has expired (243 ms)
      ✓ should correctly identify locked accounts (169 ms)
    Password Reset
      ✓ should generate password reset token (171 ms)
      ✓ should set password reset expiry to 30 minutes (173 ms)
    Permissions
      ✓ should check single permission correctly (179 ms)
      ✓ should check multiple permissions with AND operation (170 ms)
      ✓ should check multiple permissions with OR operation (186 ms)
      ✓ should set default permissions if none provided (187 ms)
    Static Methods
      ✓ should find active administrators (313 ms)
      ✓ should find administrator by email with password (197 ms)
      ✓ should handle case-insensitive email search (201 ms)
      ✓ should return null for non-existent email (107 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (188 ms)
      ✓ should update updatedAt on modification (304 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (265 ms)
      ✓ should not override provided admin ID (170 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/generalPaymentCallback.test.js
  General Payment Callback Routes
    GET /
      Registration Payment
        ✓ should redirect to success page on approved registration payment (6 ms)
        ✓ should redirect to success page on success status (3 ms)
        ✓ should redirect to register page with error on failed registration payment (13 ms)
        ✓ should handle missing response message on failure (2 ms)
        ✓ should handle registration payment callback errors (2 ms)
      Order Payment
        ✓ should handle approved order payment successfully (5 ms)
        ✓ should handle success status for order payment (3 ms)
        ✓ should update existing payment record (2 ms)
        ✓ should handle declined order payment (3 ms)
        ✓ should handle failed order payment (4 ms)
        ✓ should handle unknown payment status (3 ms)
        ✓ should handle order not found (3 ms)
        ✓ should handle missing orderId in query (3 ms)
        ✓ should handle email service failure gracefully (3 ms)
        ✓ should skip customer update if customer not found (3 ms)
        ✓ should not update already active customer (5 ms)
        ✓ should handle payment callback errors (3 ms)
        ✓ should use order amount if payment amount not provided (3 ms)
        ✓ should handle partial masked card (2 ms)
        ✓ should handle missing masked card (3 ms)
      General error handling
        ✓ should handle general callback errors (2 ms)
    POST /
      Registration Payment
        ✓ should create customer on approved registration payment with session (9 ms)
        ✓ should handle success status for registration (5 ms)
        ✓ should handle customer creation error (4 ms)
        ✓ should handle no pending registration (12 ms)
        ✓ should handle declined registration payment (2 ms)
        ✓ should handle failed registration payment without message (3 ms)
      Order Payment POST
        ✓ should acknowledge order payment callback (2 ms)
        ✓ should handle order payment with explicit type (2 ms)
      General POST error handling
        ✓ should handle POST callback errors (23 ms)
        ✓ should log POST callback data (3 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.log
    Customer affiliateId: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at Object.log [as customerLogin] (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: undefined, per-bag: undefined

      at Object.log [as customerLogin] (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "undefined undefined"
      }
    }

      at Object.log [as customerLogin] (server/controllers/authController.js:637:13)

  console.error
    Token verification error: Error: User data not found in request
        at Object.<anonymous>.exports.verifyToken (/var/www/wavemax/wavemax-affiliate-program/server/controllers/authController.js:822:13)
        at Object.verifyToken (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authController.test.js:365:28)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      843 |     });
      844 |   } catch (error) {
    > 845 |     console.error('Token verification error:', error);
          |             ^
      846 |     res.status(500).json({
      847 |       success: false,
      848 |       message: 'An error occurred during token verification'

      at Object.error [as verifyToken] (server/controllers/authController.js:845:13)
      at Object.verifyToken (tests/unit/authController.test.js:365:28)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (2 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password
    customerLogin
      ✓ should successfully login a customer with valid credentials (16 ms)
      ✓ should return 401 for non-existent customer
      ✓ should login customer using emailOrUsername field (2 ms)
      ✓ should prioritize emailOrUsername over username field (2 ms)
      ✓ should return error when neither username nor emailOrUsername provided (1 ms)
    verifyToken
      ✓ should verify a valid JWT token (1 ms)
      ✓ should handle missing user data (42 ms)
      ✓ should return customer user data (6 ms)
    refreshToken
      ✓ should refresh token successfully (1 ms)
      ✓ should return error for invalid refresh token (1 ms)
      ✓ should return error for expired refresh token
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator (1 ms)
    operatorLogin
      ✓ should successfully login operator with PIN (1 ms)
      ✓ should increment login attempts on failure
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate
      ✓ should handle non-existent email gracefully (1 ms)
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present
      ✓ should reject when user has no role (1 ms)
      ✓ should reject when user has invalid role (1 ms)
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy (1 ms)
      ✓ should handle array of required roles
      ✓ should accept administrator accessing operator resources (1 ms)
      ✓ should reject operator accessing administrator resources
    checkAllRoles Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should accept when user has access to all required roles (1 ms)
      ✓ should reject when user lacks access to any required role
      ✓ should accept admin for any combination of roles (1 ms)
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (8 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource (1 ms)
      ✓ should allow affiliate access to own resource via params
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource (1 ms)
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator
      ✓ should reject when administrator not found (1 ms)
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission (1 ms)
      ✓ should handle array of required permissions
      ✓ should reject when administrator lacks any required permission (1 ms)
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found (1 ms)
      ✓ should reject when operator is not active
      ✓ should reject when operator is not on shift (1 ms)
      ✓ should accept active operator on shift
      ✓ should handle database errors (1 ms)
    filterResponseFields Middleware
      ✓ should pass through data when no user present (1 ms)
      ✓ should pass through data when user has no role
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions (1 ms)
      ✓ should handle nested field permissions
      ✓ should handle array data
      ✓ should handle standard response format with data property (1 ms)
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields (1 ms)
      ✓ should handle non-object data gracefully
      ✓ should handle empty allowed fields (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (6 ms)
      ✓ should not configure Google strategy without credentials (2 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials (1 ms)
      ✓ should configure LinkedIn strategy when credentials are present (2 ms)
    Google OAuth Strategy
      ✓ should handle database errors (2 ms)
      Customer Context
        ✓ should handle existing customer with Google account (2 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (2 ms)
        ✓ should return new user data (1 ms)
      Affiliate Context
        ✓ should handle existing affiliate with Google account (2 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (2 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration (1 ms)
      ✓ should link Facebook account to existing affiliate (7 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate (2 ms)
      ✓ should link LinkedIn account to existing affiliate (2 ms)
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (2 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors (2 ms)

(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/paymentExport.test.js
  PaymentExport Model Unit Tests
    Schema Validation
      ✓ should create a valid PaymentExport (56 ms)
      ✓ should generate exportId automatically (59 ms)
      ✓ should require type field (56 ms)
      ✓ should validate type enum values (61 ms)
      ✓ should reject invalid type values (53 ms)
      ✓ should require generatedBy field (53 ms)
    Period Fields
      ✓ should store period dates for payment summary (59 ms)
      ✓ should store period dates for commission detail (54 ms)
    Export Data
      ✓ should store vendor export data (52 ms)
      ✓ should store payment summary data (53 ms)
      ✓ should store commission detail data (59 ms)
    Affiliate IDs
      ✓ should store multiple affiliate IDs for vendor export (53 ms)
      ✓ should store single affiliate ID for commission detail (54 ms)
      ✓ should allow empty affiliate IDs array (53 ms)
    Timestamps
      ✓ should have createdAt and updatedAt timestamps (53 ms)
    Indexes
      ✓ should have required indexes defined (55 ms)
    Different Export Types
      ✓ should handle vendor export type correctly (56 ms)
      ✓ should handle payment summary export type correctly (55 ms)
      ✓ should handle commission detail export type correctly (60 ms)
    Export ID Generation
      ✓ should generate unique export IDs (53 ms)
    Reference Validation
      ✓ should validate generatedBy as ObjectId reference (52 ms)
      ✓ should accept valid ObjectId for generatedBy (55 ms)
    Instance Methods
      markDownloaded()
        ✓ should mark export as downloaded (196 ms)
        ✓ should increment download count on multiple downloads (235 ms)
        ✓ should not change status if already downloaded (176 ms)
        ✓ should update downloadedAt timestamp (181 ms)
      updateImportStatus()
        ✓ should update import status to success (172 ms)
        ✓ should update import status to failed (169 ms)
        ✓ should handle partial import status (170 ms)
    Static Methods
      findByPeriod()
        ✓ should find exports within period (157 ms)
        ✓ should filter by type when specified (148 ms)
        ✓ should return empty array when no matches (149 ms)
        ✓ should sort by generatedAt descending (177 ms)
      existsForPeriod()
        ✓ should find existing export for period (146 ms)
        ✓ should not find export for different period (154 ms)
        ✓ should exclude failed exports (178 ms)
        ✓ should find export with non-failed status (180 ms)
    Virtual Properties
      ageInDays
        ✓ should calculate age in days correctly (91 ms)
        ✓ should return 1 for exports created today (84 ms)
        ✓ should handle exports created in the past correctly (53 ms)
        ✓ should update as time passes (53 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/systemConfig.test.js (8.892 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (282 ms)
      ✓ should require mandatory fields (79 ms)
      ✓ should enforce unique key constraint (288 ms)
      ✓ should validate category enum (79 ms)
      ✓ should validate dataType enum (79 ms)
      ✓ should accept all valid categories (404 ms)
      ✓ should accept all valid data types (248 ms)
      ✓ should trim string fields (116 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (79 ms)
        ✓ should enforce minimum value validation (81 ms)
        ✓ should enforce maximum value validation (78 ms)
        ✓ should accept valid number within range (112 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (81 ms)
        ✓ should accept boolean values (114 ms)
      String validation
        ✓ should reject non-string values for string dataType (81 ms)
        ✓ should enforce regex validation (80 ms)
        ✓ should accept valid string matching regex (116 ms)
      Array validation
        ✓ should reject non-array values for array dataType (78 ms)
        ✓ should accept array values (126 ms)
      Object validation
        ✓ should reject non-object values for object dataType (80 ms)
        ✓ should reject arrays for object dataType (79 ms)
        ✓ should accept object values (111 ms)
      Allowed values validation
        ✓ should enforce allowed values (79 ms)
        ✓ should accept allowed values (113 ms)
    Static Methods
      getValue
        ✓ should return config value (139 ms)
        ✓ should return defaultValue when value is undefined (139 ms)
        ✓ should return provided default when config not found (104 ms)
        ✓ should return null when config not found and no default provided (106 ms)
      setValue
        ✓ should update config value (172 ms)
        ✓ should throw error for non-existent config (105 ms)
        ✓ should throw error for non-editable config (138 ms)
        ✓ should update updatedBy when provided (173 ms)
        ✓ should validate new value according to dataType (154 ms)
      getByCategory
        ✓ should return all configs for a category (407 ms)
        ✓ should return only public configs when specified (384 ms)
        ✓ should return empty array for non-existent category (386 ms)
        ✓ should sort by key (210 ms)
      getPublicConfigs
        ✓ should return only public configs (161 ms)
        ✓ should sort by category then key (149 ms)
      initializeDefaults
        ✓ should create default configurations (500 ms)
        ✓ should not overwrite existing configurations (486 ms)
        ✓ should add missing configurations (480 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (114 ms)
      ✓ should update updatedAt on modification (242 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (112 ms)
      ✓ should use defaultValue when value is undefined (113 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (113 ms)
      ✓ should handle empty validation object (113 ms)
      ✓ should skip validation when value is not modified (140 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    OAuth Callback State Parameter Debug: { state: undefined, sessionId: null, allParams: {} }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: false
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-28T13:59:47.132Z","userType":"affiliate","username":"johndoe"}
  console.error
    Error storing OAuth session: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:127:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1055 |             await OAuthSession.createSession(sessionId, message);
      1056 |           } catch (dbError) {
    > 1057 |             console.error('Error storing OAuth session:', dbError);
           |                     ^
      1058 |           }
      1059 |         }
      1060 |

      at Object.error [as handleSocialCallback] (server/controllers/authController.js:1057:21)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:129:7)

  console.log
    OAuth Callback State Parameter Debug: {
      state: 'oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'oauth_test-session-id', popup: 'true' }
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:944:13)

  console.log
    OAuth Callback Debug: {
      popup: 'true',
      state: 'oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleSocialCallback] (server/controllers/authController.js:1009:13)

  console.log
    Customer OAuth Callback State Parameter Debug: {
      state: 'customer_oauth_test-session-id',
      sessionId: 'oauth_test-session-id',
      allParams: { state: 'customer_oauth_test-session-id' }
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1515:13)

  console.log
    Customer OAuth Callback Debug: {
      popup: undefined,
      state: 'customer_oauth_test-session-id',
      referer: undefined,
      isPopup: true,
      userIsNew: true
    }

      at Object.log [as handleCustomerSocialCallback] (server/controllers/authController.js:1577:13)

info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T13:59:47.652Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T13:59:48.292Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-28T13:59:48.666Z","userType":"customer"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        provider: 'google',
        socialToken: 'social-jwt-token',
        socialId: 'google123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF001',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-error',
        message: 'Social authentication failed'
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane@example.com'
        }
      }
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1485:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'test-session-123',
      sessionResult: 'not found',
      resultData: null
    }

      at Object.log [as pollOAuthSession] (server/controllers/authController.js:1466:13)

  console.error
    OAuth session polling error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/authControllerEnhanced.test.js:752:65)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1487 |
      1488 |   } catch (error) {
    > 1489 |     console.error('OAuth session polling error:', error);
           |             ^
      1490 |     res.status(500).json({
      1491 |       success: false,
      1492 |       message: 'An error occurred while polling OAuth session'

      at Object.error [as pollOAuthSession] (server/controllers/authController.js:1489:13)
      at Object.<anonymous> (tests/unit/authControllerEnhanced.test.js:754:7)

FAIL tests/unit/authControllerEnhanced.test.js (6.689 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (349 ms)
      ✓ should handle customer context from state parameter (166 ms)
      ✓ should handle missing user data gracefully (169 ms)
      ✓ should handle OAuth session creation errors (177 ms)
      ✓ should extract profile data correctly for different providers (162 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (158 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (180 ms)
      ✓ should sanitize social data and reject if fields become empty (154 ms)
      ✓ should check for existing email and username (156 ms)
      ✓ should check for existing social account (173 ms)
      ✓ should generate unique username from social data (160 ms)
      ✓ should handle JWT verification errors (153 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (215 ms)
      ✓ should validate affiliate existence (155 ms)
      ✓ should sanitize customer social data (165 ms)
    socialLogin
      ✕ should login existing affiliate with social account (156 ms)
      ✕ should return error for non-existent social account (157 ms)
      ✕ should login existing customer with social account (157 ms)
    linkSocialAccount
      ✕ should link social account to existing affiliate (154 ms)
      ✕ should prevent linking already existing social account (154 ms)
      ✕ should handle user not found error (158 ms)
    pollOAuthSession
      ✓ should return complete session data when available (160 ms)
      ✓ should return social-auth-login session data (158 ms)
      ✓ should return social-auth-error session data (157 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (156 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (155 ms)
      ✓ should return pending status when session not ready (155 ms)
      ✓ should handle database errors gracefully (157 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (156 ms)
      ✓ should handle database connection errors (159 ms)
      ✓ should handle missing required fields in social data (163 ms)

  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should login existing affiliate with social account

    TypeError: authController.socialLogin is not a function

      454 |       jwt.sign = jest.fn().mockReturnValue('jwt-token');
      455 |
    > 456 |       await authController.socialLogin(req, res);
          |                            ^
      457 |
      458 |       expect(Affiliate.findOne).toHaveBeenCalledWith({
      459 |         'socialAccounts.google.id': 'google123'

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:456:28)

  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should return error for non-existent social account

    TypeError: authController.socialLogin is not a function

      477 |       Customer.findOne = jest.fn().mockResolvedValue(null);
      478 |
    > 479 |       await authController.socialLogin(req, res);
          |                            ^
      480 |
      481 |       expect(res.status).toHaveBeenCalledWith(404);
      482 |       expect(res.json).toHaveBeenCalledWith({

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:479:28)

  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should login existing customer with social account

    TypeError: authController.socialLogin is not a function

      505 |       jwt.sign = jest.fn().mockReturnValue('customer-jwt-token');
      506 |
    > 507 |       await authController.socialLogin(req, res);
          |                            ^
      508 |
      509 |       expect(Affiliate.findOne).toHaveBeenCalledWith({
      510 |         'socialAccounts.facebook.id': 'facebook123'

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:507:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should link social account to existing affiliate

    TypeError: authController.linkSocialAccount is not a function

      563 |         .mockResolvedValueOnce(null); // Check if social account exists elsewhere
      564 |
    > 565 |       await authController.linkSocialAccount(req, res);
          |                            ^
      566 |
      567 |       expect(mockAffiliate.socialAccounts.linkedin).toEqual({
      568 |         id: 'linkedin789',

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:565:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should prevent linking already existing social account

    TypeError: authController.linkSocialAccount is not a function

      582 |         .mockResolvedValueOnce({ affiliateId: 'AFF999999' }); // Social account exists
      583 |
    > 584 |       await authController.linkSocialAccount(req, res);
          |                            ^
      585 |
      586 |       expect(res.status).toHaveBeenCalledWith(409);
      587 |       expect(res.json).toHaveBeenCalledWith({

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:584:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should handle user not found error

    TypeError: authController.linkSocialAccount is not a function

      607 |         .mockResolvedValueOnce(null); // No existing social account
      608 |
    > 609 |       await authController.linkSocialAccount(req, res);
          |                            ^
      610 |
      611 |       expect(res.status).toHaveBeenCalledWith(401);
      612 |       expect(res.json).toHaveBeenCalledWith({

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:609:28)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/unit/operator.test.js (11.587 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (225 ms)
      ✓ should require all mandatory fields (96 ms)
      ✓ should enforce email format validation (89 ms)
      ✓ should enforce unique email constraint (634 ms)
      ✓ should enforce unique username constraint (658 ms)
      ✓ should validate username format (90 ms)
      ✓ should validate shift time format (81 ms)
      ✓ should accept valid shift times (171 ms)
      ✓ should enforce quality score range (80 ms)
      ✓ should trim whitespace from string fields (202 ms)
      ✓ should convert email and username to lowercase (169 ms)
      ✓ should not allow role to be changed after creation (230 ms)
    Password Handling
      ✓ should hash password on save (199 ms)
      ✓ should verify correct password (255 ms)
      ✓ should reject incorrect password (267 ms)
      ✓ should not expose password in JSON output (175 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (253 ms)
      ✓ should lock account after 5 failed attempts (458 ms)
      ✓ should lock for 30 minutes (479 ms)
      ✓ should reset login attempts on successful login (312 ms)
      ✓ should reset attempts if lock has expired (271 ms)
      ✓ should correctly identify locked accounts (173 ms)
    Password Reset
      ✓ should generate password reset token (80 ms)
      ✓ should set password reset expiry to 30 minutes (81 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (80 ms)
        ✓ should correctly identify operator on shift during normal hours (82 ms)
        ✓ should correctly identify operator off shift (81 ms)
        ✓ should handle overnight shifts correctly (80 ms)
    Processing Statistics
      ✓ should update processing stats correctly (202 ms)
      ✓ should handle first order processing (224 ms)
      ✓ should update quality score with passing result (197 ms)
      ✓ should update quality score with failing result (199 ms)
    Static Methods
      findActive
        ✓ should find only active operators (299 ms)
      findOnShift
        ✓ should find only operators on shift (311 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (231 ms)
        ✓ should handle case-insensitive email search (306 ms)
        ✓ should return null for non-existent email (120 ms)
      findAvailableOperators
        ✓ should find operators with low order count (358 ms)
        ✓ should sort by current order count (307 ms)
        ✓ should respect limit parameter (1224 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (200 ms)
      ✓ should update updatedAt on modification (448 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (274 ms)
      ✓ should not override provided operator ID (170 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Failed to initiate W9 signing: Error: Template not found
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/w9ControllerDocuSign.test.js:250:58)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

  console.log
    Envelope mismatch: { expected: 'test_envelope_id', received: 'wrong_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

  console.log
    Envelope mismatch: { expected: undefined, received: 'test_envelope_id' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

PASS tests/unit/w9ControllerDocuSign.test.js (7.882 s)
  W9 Controller DocuSign Methods
    Check DocuSign Auth
      ✓ should return authorized true if valid token exists (163 ms)
      ✓ should return authorization URL if no valid token (125 ms)
      ✓ should handle service errors (130 ms)
    OAuth Callback
      ✓ should handle successful OAuth callback (129 ms)
      ✓ should handle missing authorization code (117 ms)
      ✓ should handle missing state parameter (114 ms)
      ✓ should display error page on token exchange failure (127 ms)
    Initiate W9 Signing
      ✓ should create new envelope and return signing URL (205 ms)
      ✓ should return existing envelope if one is in progress (172 ms)
      ✓ should require DocuSign authorization if no valid token (149 ms)
      ✓ should handle affiliate not found (176 ms)
      ✓ should handle envelope creation errors (153 ms)
    Get Envelope Status
      ✓ should return envelope status from DocuSign (737 ms)
      ✓ should handle mismatched envelope ID (176 ms)
      ✓ should handle affiliate with no W9 information (208 ms)
      ✓ should return local status if DocuSign API fails (179 ms)
      ✓ should clear envelope ID if declined (240 ms)
    DocuSign Webhook
      ✓ should process completed envelope webhook (247 ms)
      ✓ should reject webhook with invalid signature (134 ms)
      ✓ should handle affiliate not found (159 ms)
      ✓ should process completed W9 without downloading document (243 ms)
    Check Authorization Status
      ✓ should return authorized true if valid token exists (114 ms)
      ✓ should return authorized false if no valid token (114 ms)
      ✓ should handle service errors (119 ms)
    Get W9 Signing Status
      ✓ should return W9 status for affiliate (117 ms)
      ✓ should include tax info for verified W9 (115 ms)
      ✓ should check DocuSign status for in-progress envelopes (116 ms)
      ✓ should handle affiliate not found (131 ms)
      ✓ should handle errors gracefully (125 ms)
    Cancel W9 Signing
      ✓ should cancel W9 signing successfully (216 ms)
      ✓ should handle no W9 signing in progress (153 ms)
      ✓ should handle affiliate not found (124 ms)
      ✓ should handle void envelope errors (150 ms)
    Resend W9 Request
      ✓ should resend W9 request successfully (150 ms)
      ✓ should handle affiliate not found (116 ms)
      ✓ should continue if voiding existing envelope fails (176 ms)
      ✓ should handle envelope creation errors (116 ms)
    Send W9 To Affiliate
      ✓ should send W9 to affiliate successfully (151 ms)
      ✓ should handle affiliate not found (115 ms)
      ✓ should prevent sending to affiliate with verified W9 (121 ms)
      ✓ should prevent sending to affiliate with submitted W9 (120 ms)
      ✓ should handle authorization errors (115 ms)
      ✓ should handle template configuration errors (119 ms)
      ✓ should handle general errors (119 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.warn
    Welcome email could not be sent: Error: Email failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:159:64)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      101 |       // Email sent successfully - no need to check result
      102 |     } catch (emailError) {
    > 103 |       console.warn('Welcome email could not be sent:', emailError);
          |               ^
      104 |       // Continue with registration process even if email fails
      105 |     }
      106 |

      at Object.warn [as registerAffiliate] (server/controllers/affiliateController.js:103:15)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:161:7)

  console.error
    Affiliate registration error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:176:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error('Affiliate registration error:', error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       message: 'An error occurred during registration'

      at Object.error [as registerAffiliate] (server/controllers/affiliateController.js:113:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:178:7)

  console.error
    Error decrypting PayPal email: Error: Decryption failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:273:15)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:397:39
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:404:13)
        at Object.mockConstructor [as decrypt] (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-mock/build/index.js:148:19)
        at Object.decrypt [as getAffiliateProfile] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:175:28)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:276:7)

      176 |           : affiliate.paypalEmail;
      177 |       } catch (error) {
    > 178 |         console.error('Error decrypting PayPal email:', error);
          |                 ^
      179 |         // Don't include if decryption fails
      180 |       }
      181 |     }

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:178:17)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:276:7)

  console.error
    Get affiliate orders error: TypeError: Cannot read properties of undefined (reading 'forEach')
        at Object.forEach [as getAffiliateOrders] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/affiliateController.js:599:15)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:695:7)

      647 |     });
      648 |   } catch (error) {
    > 649 |     console.error('Get affiliate orders error:', error);
          |             ^
      650 |     res.status(500).json({
      651 |       success: false,
      652 |       message: 'An error occurred while retrieving orders'

      at Object.error [as getAffiliateOrders] (server/controllers/affiliateController.js:649:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:695:7)

  console.error
    Get affiliate profile error: Error: Database connection lost
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:904:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      187 |     });
      188 |   } catch (error) {
    > 189 |     console.error('Get affiliate profile error:', error);
          |             ^
      190 |     res.status(500).json({
      191 |       success: false,
      192 |       message: 'An error occurred while retrieving affiliate profile'

      at Object.error [as getAffiliateProfile] (server/controllers/affiliateController.js:189:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:906:7)

  console.error
    Delete affiliate data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/affiliateController.test.js:993:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      899 |     });
      900 |   } catch (error) {
    > 901 |     console.error('Delete affiliate data error:', error);
          |             ^
      902 |     res.status(500).json({
      903 |       success: false,
      904 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteAffiliateData] (server/controllers/affiliateController.js:901:13)
      at Object.<anonymous> (tests/unit/affiliateController.test.js:995:7)

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors (1 ms)
      ✓ should handle duplicate email or username
      ✓ should handle email service failure gracefully (29 ms)
      ✓ should handle database errors (2 ms)
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should handle decryption errors gracefully (12 ms)
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (9 ms)
      ✓ should handle password change (1 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should update payment method
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (1 ms)
      ✓ should handle date filters correctly (1 ms)
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully (1 ms)
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate
    Error handling
      ✓ should handle database connection errors (2 ms)
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment (1 ms)
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: TypeError: Administrator.find(...).select is not a function
        at select (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:54:8)
        at Object.getAdministrators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:156:15)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.getAdministrators (tests/unit/administratorControllerEnhanced.test.js:156:15)

  console.error
    Error updating operator profile: TypeError: updatedOperator.toObject is not a function
        at toObject (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2255:70)
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1073:9)

      2261 |     });
      2262 |   } catch (error) {
    > 2263 |     console.error('Error updating operator profile:', error);
           |             ^
      2264 |     res.status(500).json({
      2265 |       success: false,
      2266 |       message: 'An error occurred while updating the profile'

      at error (server/controllers/administratorController.js:2263:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1073:9)

  console.error
    Error fetching administrators: Error: Connection timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorControllerEnhanced.test.js:1088:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at error (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorControllerEnhanced.test.js:1091:7)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query
        ✓ should handle database errors (64 ms)
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId (10 ms)
      createAdministrator
        ✓ should create new administrator with valid data (79 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error (1 ms)
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ✓ should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully (2 ms)
        ✓ should prevent self-deletion (1 ms)
        ✓ should prevent deletion of last administrator
      resetAdministratorPassword
        ✓ should reset administrator password (65 ms)
        ✓ should handle email sending failure (55 ms)
      getPermissions
        ✓ should return all available permissions (1 ms)
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator (1 ms)
        ✓ should handle non-existent operator
      resetOperatorPassword
        ✓ should reset operator password and send email (1 ms)
      resetOperatorPin
        ✓ should reset operator PIN (1 ms)
        ✓ should validate PIN format (1 ms)
      deleteOperator
        ✓ should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment (1 ms)
      updateOperatorStats
        ✓ should update operator statistics (1 ms)
    Analytics Extensions
      getOperatorAnalytics
        ✓ should get operator analytics with date range (1 ms)
        ✓ should handle missing date range
      getAffiliateAnalytics
        ✓ should get affiliate analytics (1 ms)
      exportReport
        ✓ should export report as CSV (1 ms)
        ✓ should export report as JSON
        ✓ should reject invalid report type (1 ms)
    Operator Self-Management
      getOperatorSelf
        ✓ should get current operator profile
        ✓ should handle non-operator users (1 ms)
      updateOperatorSelf
        ✓ should allow operator to update own profile (1 ms)
        ✓ should prevent changing restricted fields (2 ms)
    Error Handling
      ✓ should handle database connection errors (2 ms)
      ✓ should handle validation errors (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.log
    Creating new customer with email: jane@example.com username: janesmith

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST123456

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

  console.error
    Delete customer data error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:460:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      610 |     });
      611 |   } catch (error) {
    > 612 |     console.error('Delete customer data error:', error);
          |             ^
      613 |     res.status(500).json({
      614 |       success: false,
      615 |       message: 'An error occurred while deleting data'

      at Object.error [as deleteCustomerData] (server/controllers/customerController.js:612:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:462:7)

  console.error
    Get customer dashboard stats error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:688:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      498 |     });
      499 |   } catch (error) {
    > 500 |     console.error('Get customer dashboard stats error:', error);
          |             ^
      501 |     res.status(500).json({
      502 |       success: false,
      503 |       message: 'An error occurred while retrieving dashboard statistics'

      at Object.error [as getCustomerDashboardStats] (server/controllers/customerController.js:500:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:690:7)

  console.error
    Update payment info error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:792:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      552 |     });
      553 |   } catch (error) {
    > 554 |     console.error('Update payment info error:', error);
          |             ^
      555 |     res.status(500).json({
      556 |       success: false,
      557 |       message: 'An error occurred while updating payment information'

      at Object.error [as updatePaymentInfo] (server/controllers/customerController.js:554:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:794:7)

  console.error
    Update customer password error: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:957:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      682 |     });
      683 |   } catch (error) {
    > 684 |     console.error('Update customer password error:', error);
          |             ^
      685 |     res.status(500).json({
      686 |       success: false,
      687 |       message: 'An error occurred while updating password'

      at Object.error [as updateCustomerPassword] (server/controllers/customerController.js:684:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:959:7)

  console.error
    Get customers for admin error: TypeError: Cannot read properties of undefined (reading 'search')
        at Object.search [as getCustomersForAdmin] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/customerController.js:702:19)
        at Object.getCustomersForAdmin (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1192:32)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      779 |     });
      780 |   } catch (error) {
    > 781 |     console.error('Get customers for admin error:', error);
          |             ^
      782 |     res.status(500).json({
      783 |       success: false,
      784 |       message: 'Failed to retrieve customers'

      at Object.error [as getCustomersForAdmin] (server/controllers/customerController.js:781:13)
      at Object.getCustomersForAdmin (tests/unit/customerController.test.js:1192:32)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.error
    Customer registration error: Error: Database save failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/customerController.test.js:1259:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      152 |     });
      153 |   } catch (error) {
    > 154 |     console.error('Customer registration error:', error);
          |             ^
      155 |     res.status(500).json({
      156 |       success: false,
      157 |       message: 'An error occurred during registration'

      at Object.error [as registerCustomer] (server/controllers/customerController.js:154:13)
      at Object.<anonymous> (tests/unit/customerController.test.js:1278:7)

  console.log
    Creating new customer with email: test@example.com username: testuser

      at Object.log [as registerCustomer] (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at Object.log [as registerCustomer] (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST999

      at Object.log [as registerCustomer] (server/controllers/customerController.js:121:13)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (19 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email (8 ms)
    getCustomerProfile
      ✓ should return customer profile for authorized customer (2 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer (2 ms)
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (1 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion (1 ms)
      ✓ should handle deletion errors (24 ms)
      ✓ should return 404 for non-existent customer (1 ms)
    getCustomerDashboardStats
      ✓ should return dashboard stats for authorized customer (2 ms)
      ✓ should return 404 for non-existent customer
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should allow affiliate access to their customer dashboard
      ✓ should handle database errors gracefully (2 ms)
    updatePaymentInfo
      ✓ should successfully update payment information (1 ms)
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should allow admin to update customer payment info (1 ms)
      ✓ should handle database errors (2 ms)
    updateCustomerPassword
      ✓ should successfully update password (1 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password length
      ✓ should return 404 for non-existent customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should handle missing new password
      ✓ should handle database errors (2 ms)
    getCustomersForAdmin
      ✓ should return all customers for admin (6 ms)
      ✓ should filter customers by search query (1 ms)
      ✓ should filter customers by affiliate (1 ms)
      ✓ should filter customers by active status
      ✓ should filter customers by inactive status
      ✓ should filter new customers with no orders (1 ms)
      ✓ should handle combined filters
      ✓ should handle database errors (12 ms)
      ✓ should ignore "all" filter values
    validation errors
      ✓ should return validation errors for registerCustomer (1 ms)
    error handling for registration
      ✓ should handle database save errors during registration (3 ms)
      ✓ should handle missing payment info gracefully (2 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1068:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)

  console.error
    Error in scanCustomer: Error: Database error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/operatorController.test.js:1595:42)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      672 |     res.json(response);
      673 |   } catch (error) {
    > 674 |     console.error('Error in scanCustomer:', error);
          |             ^
      675 |     if (logger && logger.error) {
      676 |       logger.error('Error scanning customer card:', error);
      677 |     }

      at Object.error [as scanCustomer] (server/controllers/operatorController.js:674:13)
      at Object.<anonymous> (tests/unit/operatorController.test.js:1597:7)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getOrderQueue
      ✓ should return available orders for operator workstation (3 ms)
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed (1 ms)
      ✓ should fail if order not found
      ✓ should handle database error during claim (1 ms)
    updateOrderStatus
      ✓ should update order status (1 ms)
      ✓ should handle invalid status transition (1 ms)
      ✓ should handle order not found
      ✓ should handle unauthorized operator (1 ms)
      ✓ should update workstation when washing status with new workstation (3 ms)
      ✓ should set processingCompleted when status is ready (1 ms)
      ✓ should handle database error
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check (1 ms)
      ✓ should handle database error during quality check
    getMyOrders
      ✓ should return orders assigned to operator
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should end shift successfully
      ✓ should handle database error (1 ms)
    getPerformanceStats
      ✓ should return operator performance statistics
    getCustomerDetails
      ✓ should return customer details for an order
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition
    Error handling in existing functions
      ✓ should handle error in getOrderQueue (1 ms)
      ✓ should handle different filters in getOrderQueue
      ✓ should handle operator at max capacity in claimOrder (1 ms)
      ✓ should handle quality check failure in performQualityCheck (1 ms)
      ✓ should handle workstation conflict in updateShiftStatus
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift (1 ms)
      ✓ should handle different time periods in getPerformanceStats
      ✓ should handle operator not found in getPerformanceStats (1 ms)
      ✓ should handle customer not found in getCustomerDetails
      ✓ should handle filters in getMyOrders
    scanCustomer
      ✓ should scan customer and return current order
      ✓ should handle customer not found
    scanBag
      ✓ should redirect to scanCustomer (7 ms)
      ✓ should handle error in scanBag (45 ms)
    receiveOrder
      ✓ should receive order and update status (2 ms)
      ✓ should handle order not found
    markBagProcessed
      ✓ should mark bag as processed (1 ms)
      ✓ should update order status when all bags processed (347 ms)
    confirmPickup
      ✓ should confirm pickup and complete order (1 ms)
      ✓ should handle partial pickup (1 ms)
    getTodayStats
      ✓ should return today's operator statistics (8 ms)
      ✓ should handle no orders for today (1 ms)
    getWorkstationStatus
      ✓ should return workstation status for all workstations (1 ms)
      ✓ should handle database error (1 ms)
    Additional coverage tests
      ✓ should handle error in getMyOrders (1 ms)
      ✓ should handle different performance stat periods (1 ms)
      ✓ should handle error in getPerformanceStats
      ✓ should handle error in getCustomerDetails (1 ms)
      ✓ should handle no active order in scanCustomer
      ✓ should handle different scan actions in scanCustomer (1 ms)
      ✓ should handle affiliate lookup in scanCustomer (1 ms)
      ✓ should handle error in scanCustomer (11 ms)
      ✓ should handle error in receiveOrder (1 ms)
      ✓ should handle order not found in markBagProcessed
      ✓ should handle error in markBagProcessed
      ✓ should handle order not found in confirmPickup (1 ms)
      ✓ should handle error in confirmPickup (1 ms)
      ✓ should handle error in getTodayStats (1 ms)
      ✓ should handle markOrderReady (deprecated function)
      ✓ should handle markOrderReady with affiliate notification (1 ms)
      ✓ should handle errors in markOrderReady

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error fetching administrators: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:375:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      71 |
      72 |   } catch (error) {
    > 73 |     console.error('Error fetching administrators:', error);
         |             ^
      74 |     res.status(500).json({
      75 |       success: false,
      76 |       message: 'Failed to fetch administrators'

      at Object.error [as getAdministrators] (server/controllers/administratorController.js:73:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:378:7)

  console.error
    Error fetching administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:809:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      109 |
      110 |   } catch (error) {
    > 111 |     console.error('Error fetching administrator:', error);
          |             ^
      112 |     res.status(500).json({
      113 |       success: false,
      114 |       message: 'Failed to fetch administrator'

      at Object.error [as getAdministratorById] (server/controllers/administratorController.js:111:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:812:7)

  console.error
    Error changing administrator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:924:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      544 |
      545 |   } catch (error) {
    > 546 |     console.error('Error changing administrator password:', error);
          |             ^
      547 |     res.status(500).json({
      548 |       success: false,
      549 |       message: 'Failed to change password'

      at Object.error [as changeAdministratorPassword] (server/controllers/administratorController.js:546:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:927:7)

  console.error
    Error fetching operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:991:47)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      849 |
      850 |   } catch (error) {
    > 851 |     console.error('Error fetching operator:', error);
          |             ^
      852 |     res.status(500).json({
      853 |       success: false,
      854 |       message: 'Failed to fetch operator details'

      at Object.error [as getOperatorById] (server/controllers/administratorController.js:851:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:994:7)

  console.error
    Error resetting operator password: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1057:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1034 |
      1035 |   } catch (error) {
    > 1036 |     console.error('Error resetting operator password:', error);
           |             ^
      1037 |     res.status(500).json({
      1038 |       success: false,
      1039 |       message: 'Failed to reset operator password'

      at Object.error [as resetOperatorPassword] (server/controllers/administratorController.js:1036:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1059:7)

  console.error
    Error fetching operator analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1112:41)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1510 |
      1511 |   } catch (error) {
    > 1512 |     console.error('Error fetching operator analytics:', error);
           |             ^
      1513 |     res.status(500).json({
      1514 |       success: false,
      1515 |       message: 'Failed to fetch operator analytics'

      at Object.error [as getOperatorAnalytics] (server/controllers/administratorController.js:1512:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1114:7)

  console.error
    Error fetching affiliate analytics: Error: Aggregation Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1166:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1612 |
      1613 |   } catch (error) {
    > 1614 |     console.error('Error fetching affiliate analytics:', error);
           |             ^
      1615 |     res.status(500).json({
      1616 |       success: false,
      1617 |       message: 'Failed to fetch affiliate analytics'

      at Object.error [as getAffiliateAnalytics] (server/controllers/administratorController.js:1614:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1168:7)

  console.error
    Error exporting report: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1288:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1677 |
      1678 |   } catch (error) {
    > 1679 |     console.error('Error exporting report:', error);
           |             ^
      1680 |     res.status(500).json({
      1681 |       success: false,
      1682 |       message: 'Failed to export report'

      at Object.error [as exportReport] (server/controllers/administratorController.js:1679:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1291:7)

  console.error
    Error fetching affiliates list: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1334:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1730 |     });
      1731 |   } catch (error) {
    > 1732 |     console.error('Error fetching affiliates list:', error);
           |             ^
      1733 |     res.status(500).json({
      1734 |       success: false,
      1735 |       message: 'Failed to fetch affiliates list',

      at Object.error [as getAffiliatesList] (server/controllers/administratorController.js:1732:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1337:7)

  console.error
    Error updating operator stats: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1515:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2080 |     });
      2081 |   } catch (error) {
    > 2082 |     console.error('Error updating operator stats:', error);
           |             ^
      2083 |     res.status(500).json({
      2084 |       success: false,
      2085 |       message: 'An error occurred while updating operator statistics'

      at Object.error [as updateOperatorStats] (server/controllers/administratorController.js:2082:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1517:7)

  console.error
    Error getting available operators: TypeError: Operator.find(...).sort(...).limit is not a function
        at Object.limit [as getAvailableOperators] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2103:8)
        at Object.getAvailableOperators (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1565:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2109 |     });
      2110 |   } catch (error) {
    > 2111 |     console.error('Error getting available operators:', error);
           |             ^
      2112 |     res.status(500).json({
      2113 |       success: false,
      2114 |       message: 'An error occurred while fetching available operators'

      at Object.error [as getAvailableOperators] (server/controllers/administratorController.js:2111:13)
      at Object.getAvailableOperators (tests/unit/administratorController.test.js:1565:37)

  console.error
    Error deleting operator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1619:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2159 |     });
      2160 |   } catch (error) {
    > 2161 |     console.error('Error deleting operator:', error);
           |             ^
      2162 |     res.status(500).json({
      2163 |       success: false,
      2164 |       message: 'An error occurred while deleting the operator'

      at Object.error [as deleteOperator] (server/controllers/administratorController.js:2161:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1621:7)

  console.error
    Error resetting operator PIN: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1679:43)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2207 |     });
      2208 |   } catch (error) {
    > 2209 |     console.error('Error resetting operator PIN:', error);
           |             ^
      2210 |     res.status(500).json({
      2211 |       success: false,
      2212 |       message: 'An error occurred while resetting the PIN'

      at Object.error [as resetOperatorPin] (server/controllers/administratorController.js:2209:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1681:7)

  console.error
    Error fetching environment variables: TypeError: Cannot read properties of undefined (reading 'DEFAULT_ADMIN_EMAIL')
        at Object.DEFAULT_ADMIN_EMAIL [as getEnvironmentVariables] (/var/www/wavemax/wavemax-affiliate-program/server/controllers/administratorController.js:2402:56)
        at Object.getEnvironmentVariables (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1727:37)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      2443 |
      2444 |   } catch (error) {
    > 2445 |     console.error('Error fetching environment variables:', error);
           |             ^
      2446 |     res.status(500).json({
      2447 |       success: false,
      2448 |       message: 'Failed to fetch environment variables'

      at Object.error [as getEnvironmentVariables] (server/controllers/administratorController.js:2445:13)
      at Object.getEnvironmentVariables (tests/unit/administratorController.test.js:1727:37)

  console.error
    Error updating administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1847:45)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      313 |
      314 |   } catch (error) {
    > 315 |     console.error('Error updating administrator:', error);
          |             ^
      316 |     res.status(500).json({
      317 |       success: false,
      318 |       message: 'Failed to update administrator'

      at Object.error [as updateAdministrator] (server/controllers/administratorController.js:315:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1850:7)

  console.error
    Error deleting administrator: Error: DB Error
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/unit/administratorController.test.js:1884:44)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      385 |
      386 |   } catch (error) {
    > 387 |     console.error('Error deleting administrator:', error);
          |             ^
      388 |     res.status(500).json({
      389 |       success: false,
      390 |       message: 'Failed to delete administrator'

      at Object.error [as deleteAdministrator] (server/controllers/administratorController.js:387:13)
      at Object.<anonymous> (tests/unit/administratorController.test.js:1886:7)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (2 ms)
      ✓ should handle errors (43 ms)
    createAdministrator
      ✓ should create administrator (2 ms)
      ✓ should handle validation errors (1 ms)
    updateAdministrator
      ✓ should update administrator
      ✓ should prevent self-deactivation
    deleteAdministrator
      ✓ should delete administrator (1 ms)
      ✓ should prevent self-deletion (7 ms)
    resetAdministratorPassword
      ✓ should reset password (1 ms)
    Operator Management
      ✓ createOperator should create new operator (1 ms)
      ✓ getOperators should return operators list (1 ms)
      ✓ updateOperator should update operator details (1 ms)
      ✓ deactivateOperator should deactivate operator (1 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (1 ms)
      ✓ getOrderAnalytics should return order analytics (1 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (1 ms)
      ✓ updateSystemConfig should update configuration
    getPermissions
      ✓ should return available permissions (1 ms)
    getAdministratorById
      ✓ should get administrator by id (1 ms)
      ✓ should handle not found
      ✓ should handle errors (3 ms)
    changeAdministratorPassword
      ✓ should change password successfully (1 ms)
      ✓ should reject incorrect current password (1 ms)
      ✓ should validate new password strength (1 ms)
      ✓ should handle errors (2 ms)
    getOperatorById
      ✓ should get operator by id (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    resetOperatorPassword
      ✓ should reset operator password (1 ms)
      ✓ should handle operator not found
      ✓ should handle errors (2 ms)
    getOperatorAnalytics
      ✓ should get operator analytics (1 ms)
      ✓ should handle errors (2 ms)
    getAffiliateAnalytics
      ✓ should get affiliate analytics
      ✓ should handle errors (3 ms)
    exportReport
      ✓ should export orders report (1 ms)
      ✓ should export operators report (1 ms)
      ✓ should handle invalid report type (1 ms)
      ✓ should handle errors (2 ms)
    getAffiliatesList
      ✓ should get affiliates list (1 ms)
      ✓ should handle errors (10 ms)
    getSystemHealth
      ✓ should get system health status (1 ms)
      ✓ should handle database connection issues (1 ms)
      ✓ should handle errors
    updateOperatorStats
      ✓ should update operator stats with processing time (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should validate processing time
      ✓ should handle errors (3 ms)
    getAvailableOperators
      ✓ should get available operators
      ✓ should handle errors (24 ms)
    deleteOperator
      ✓ should delete operator (1 ms)
      ✓ should prevent deletion with active orders (1 ms)
      ✓ should handle errors (3 ms)
    resetOperatorPin
      ✓ should reset operator PIN (1 ms)
      ✓ should handle operator not found (1 ms)
      ✓ should handle errors (2 ms)
    getEnvironmentVariables
      ✓ should get environment variables (1 ms)
      ✓ should handle errors (2 ms)
    Additional coverage for getAdministrators
      ✓ should handle search with active filter
    Additional coverage for createAdministrator
      ✓ should handle duplicate email (1 ms)
      ✓ should handle password validation failure (1 ms)
    Additional coverage for updateAdministrator
      ✓ should handle administrator not found
      ✓ should handle database errors (2 ms)
    Additional coverage for deleteAdministrator
      ✓ should prevent deleting last super admin
      ✓ should handle database errors (2 ms)
    Additional coverage for resetAdministratorPassword
      ✓ should handle admin not found (7 ms)
      ✓ should handle weak password (1 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

  console.error
    Error loading email template affiliate-password-reset: [Error: ENOENT: no such file or directory, open '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'] {
      errno: -2,
      code: 'ENOENT',
      syscall: 'open',
      path: '/var/www/wavemax/wavemax-affiliate-program/server/templates/emails/affiliate-password-reset.html'
    }

      75 |     }
      76 |   } catch (error) {
    > 77 |     console.error(`Error loading email template ${templateName}:`, error);
         |             ^
      78 |     // Return a basic template as fallback
      79 |     return `
      80 |       <!DOCTYPE html>

      at error (server/utils/emailService.js:77:13)
      at Object.<anonymous>.exports.sendAffiliatePasswordResetEmail (server/utils/emailService.js:871:22)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.warn
    Email template placeholder [EMAIL_CONTENT] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliatePasswordResetEmail] (server/utils/emailService.js:881:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:136:7)

  console.log
    Missing template: password-reset.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.log
    Missing template: order-confirmation.html

      at Object.log (tests/integration/emailService.integration.test.js:173:19)

  console.warn
    Email template placeholder [AFFILIATE_ID] not found in data

      128 |     } else {
      129 |       // If not found, return empty string for cleaner emails
    > 130 |       console.warn(`Email template placeholder [${placeholder}] not found in data`);
          |               ^
      131 |       return '';
      132 |     }
      133 |   });

      at warn (server/utils/emailService.js:130:15)
          at String.replace (<anonymous>)
      at replace (server/utils/emailService.js:116:19)
      at Object.fillTemplate [as sendAffiliateWelcomeEmail] (server/utils/emailService.js:336:18)
      at Object.<anonymous> (tests/integration/emailService.integration.test.js:223:9)

  console.log
    === EMAIL CONSOLE LOG ===

      at Object.log [as sendMail] (server/utils/emailService.js:18:17)

  console.log
    From: test@wavemax.promo

      at Object.log [as sendMail] (server/utils/emailService.js:19:17)

  console.log
    To: undefined

      at Object.log [as sendMail] (server/utils/emailService.js:20:17)

  console.log
    Subject: Welcome to WaveMAX Laundry Affiliate Program

      at Object.log [as sendMail] (server/utils/emailService.js:21:17)

  console.log
    HTML Preview: [HTML content logged to console]

      at Object.log [as sendMail] (server/utils/emailService.js:22:17)

  console.log
    ========================

      at Object.log [as sendMail] (server/utils/emailService.js:23:17)

  console.log
    Email sent: console-1751119218821

      at log (server/utils/emailService.js:154:13)

PASS tests/integration/emailService.integration.test.js
  Email Service Integration
    Email Service Configuration
      ✓ should load and configure the email service correctly (20 ms)
      ✓ should have all required email functions (4 ms)
    Console Email Provider
      ✓ should log affiliate welcome emails to console (12 ms)
      ✓ should log customer welcome emails to console (4 ms)
      ✓ should log password reset emails to console (19 ms)
    Email Template Verification
      ✓ should verify email templates directory exists (2 ms)
      ✓ should verify essential email templates exist (4 ms)
    Mailcow SMTP Configuration
      ✓ should handle Mailcow SMTP configuration (4 ms)
      ✓ should handle secure Mailcow SMTP on port 465 (3 ms)
    Error Handling
      ✓ should handle missing required fields gracefully (8 ms)
      ✓ should handle invalid email addresses (6 ms)
    Bulk Email Operations
      ✓ should handle multiple email sends efficiently (5 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:19.600Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:19.941Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c3ee7adf2b93e7903cc21b42fa05e7d2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 96dzlsfd-vDdt1yTrMp4BFeAh0aNF2fS19Aw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c3ee7adf2b93e7903cc21b42fa05e7d2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: I_heakLNUR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 18.589 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:20.517Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:20.861Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:20.862Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:20.962Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-73867062-fc95-48fa-97bb-f0617d3ef848",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 199.656 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:21.224Z"}
[32minfo[39m: Payment config accessed {"hasHash":true,"hostname":"127.0.0.1","ip":"::ffff:127.0.0.1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:21.227Z"}
[0mGET /api/v1/payments/config [32m200[0m 2.639 ms - 310[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.132Z"}
  console.log
    CSRF token generation: {
      sessionID: '72b25a558dd1b18738e28c44eb72df86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XBbi6Drh-ZwSI2s8FrUWy1uGaLQCHahxHzY4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 72b25a558dd1b18738e28c44eb72df86

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yvU0i7pzEa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.112 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.277Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.596Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.597Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.685Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-544fb4c1-84b8-486e-bcdb-6c7165574777",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 150.700 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.901Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb67w7-2axa6fn: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.935Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:22.969Z","token":"mcgb67w7-2axa6fn"}
[0mPOST /api/v1/payments/create-token [32m200[0m 68.437 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:23.736Z"}
  console.log
    CSRF token generation: {
      sessionID: '846a6db4ff8ed8bc50d07b37443545ed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JvbIAlEe-ZLwUBXFp3nuJFV4PTL_MgT-BrPU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 846a6db4ff8ed8bc50d07b37443545ed

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HNH-2yti3n...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.917 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:23.893Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.247Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.247Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.338Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-5317e47a-c383-4259-a3e7-eaf93d673129",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 151.069 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.554Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6964-atal9ss: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.587Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.619Z","token":"mcgb6964-atal9ss"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.100 ms - 283[0m
[34mdebug[39m: GET /api/v1/payments/check-status/mcgb6964-atal9ss {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:24.624Z"}
[0mGET /api/v1/payments/check-status/mcgb6964-atal9ss [32m200[0m 30.454 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:25.429Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ae8d7f4a8928745ba607eef9226a8d54',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Jkx6Xm2I-o1Odfkqe_9wikq4FJQhTs3O8wXQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ae8d7f4a8928745ba607eef9226a8d54

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rRv_Df9rg_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.843 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:25.578Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:25.895Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:25.895Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:25.986Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-16f49096-165a-48c2-832f-a494e6feb0d3",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 161.275 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.227Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6agl-yis3av1: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.274Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"test@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.310Z","token":"mcgb6agl-yis3av1"}
[0mPOST /api/v1/payments/create-token [32m200[0m 82.444 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcgb6agl-yis3av1 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.313Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcgb6agl-yis3av1 {
      sessionID: 'ae8d7f4a8928745ba607eef9226a8d54',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aae8d7f4a8928745ba607eef9226a8d54.KA0gMNaQyBw5WaNje86yQSgg99dwDdhV1OyruBApq34',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcgb6agl-yis3av1: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.417Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:26.418Z","token":"mcgb6agl-yis3av1"}
[0mPOST /api/v1/payments/cancel-token/mcgb6agl-yis3av1 [32m200[0m 105.935 ms - 73[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:27.184Z"}
  console.log
    CSRF token generation: {
      sessionID: '85ef922a0175f8c88521c2e08762689e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wcDuQ5ot-GBq3gKK-_uerr9OeF_oStTU8jjo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 85ef922a0175f8c88521c2e08762689e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4zS5sHgIT5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.651 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:27.330Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:27.656Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:27.657Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:27.781Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-b3ed585f-2b12-41cb-863e-cf8553f6afe6",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 172.092 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.022Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.026Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.029Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.032Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.035Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.038Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.041Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.045Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.048Z"}
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.052Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6bug-2pdze86: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.057Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6bun-0cdh249: {"callbackPath":"/api/v1/payments/callback/handler-3","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-3","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.065Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6but-eefit7k: {"callbackPath":"/api/v1/payments/callback/handler-5","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-5","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.072Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6buq-dz7xayp: {"callbackPath":"/api/v1/payments/callback/handler-4","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-4","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.075Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6buw-ey9ihe4: {"callbackPath":"/api/v1/payments/callback/handler-6","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-6","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.077Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6buz-kmsa2oo: {"callbackPath":"/api/v1/payments/callback/handler-7","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-7","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.079Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6bv2-ovmhez9: {"callbackPath":"/api/v1/payments/callback/handler-8","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-8","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.082Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6bv6-kiqikm3: {"callbackPath":"/api/v1/payments/callback/handler-9","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-9","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.085Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"customer0@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.088Z","token":"mcgb6bug-2pdze86"}
[0mPOST /api/v1/payments/create-token [32m200[0m 66.790 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-3","customerEmail":"customer2@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.096Z","token":"mcgb6bun-0cdh249"}
[0mPOST /api/v1/payments/create-token [32m200[0m 67.278 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-5","customerEmail":"customer4@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.105Z","token":"mcgb6but-eefit7k"}
[0mPOST /api/v1/payments/create-token [32m200[0m 70.395 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-7","customerEmail":"customer6@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.114Z","token":"mcgb6buz-kmsa2oo"}
[0mPOST /api/v1/payments/create-token [32m200[0m 72.930 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-4","customerEmail":"customer3@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.116Z","token":"mcgb6buq-dz7xayp"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-6","customerEmail":"customer5@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.117Z","token":"mcgb6buw-ey9ihe4"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-8","customerEmail":"customer7@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.117Z","token":"mcgb6bv2-ovmhez9"}
[0mPOST /api/v1/payments/create-token [32m200[0m 83.383 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 78.353 ms - 283[0m
[0mPOST /api/v1/payments/create-token [32m200[0m 72.605 ms - 283[0m
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-9","customerEmail":"customer8@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.122Z","token":"mcgb6bv6-kiqikm3"}
[0mPOST /api/v1/payments/create-token [32m200[0m 73.478 ms - 283[0m
[32minfo[39m: Acquired callback handler for payment token mcgb6bv9-frsdm5v: {"callbackPath":"/api/v1/payments/callback/handler-10","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-10","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.235Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-10","customerEmail":"customer9@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.267Z","token":"mcgb6bv9-frsdm5v"}
[0mPOST /api/v1/payments/create-token [32m200[0m 215.235 ms - 285[0m
[32minfo[39m: Acquired callback handler for payment token mcgb6buj-sn23kxy: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.307Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"customer1@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.351Z","token":"mcgb6buj-sn23kxy"}
[0mPOST /api/v1/payments/create-token [32m200[0m 325.841 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.370Z"}
[33mwarn[39m: No callback handlers available. All handlers are currently in use. {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:28.400Z"}
[0mPOST /api/v1/payments/create-token [31m503[0m 30.661 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:30.866Z"}
  console.log
    CSRF token generation: {
      sessionID: '440c3d4ce884536b36ac83b52ec3b380',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U8VPVJdn-RQLzcxumqWEDEn3EH5vYzqYLobs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 440c3d4ce884536b36ac83b52ec3b380

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: q3q3TRd-xZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.542 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:31.238Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:31.579Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:31.580Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:31.688Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-cf7ccd1a-880a-4d86-a248-373e68a79dd8",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 410.893 ms - 674[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.408Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6f89-k7ky147: {"callbackPath":"/api/v1/payments/callback/handler-1","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.440Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-1","customerEmail":"cancel@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.476Z","token":"mcgb6f89-k7ky147"}
[0mPOST /api/v1/payments/create-token [32m200[0m 68.588 ms - 283[0m
[34mdebug[39m: POST /api/v1/payments/cancel-token/mcgb6f89-k7ky147 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.479Z"}
  console.log
    CSRF check for: /api/v1/payments/cancel-token/mcgb6f89-k7ky147 {
      sessionID: '440c3d4ce884536b36ac83b52ec3b380',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A440c3d4ce884536b36ac83b52ec3b380.oIR%2FEcMmHGMLHbczWlmyiEwR0t%2BDKeV%2FAbsE%2BzVxmLw',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[32minfo[39m: Released callback handler for payment token mcgb6f89-k7ky147: {"callbackPath":"/api/v1/payments/callback/handler-1","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.574Z"}
[32minfo[39m: Payment token cancelled: {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.575Z","token":"mcgb6f89-k7ky147"}
[0mPOST /api/v1/payments/cancel-token/mcgb6f89-k7ky147 [32m200[0m 95.686 ms - 73[0m
[34mdebug[39m: POST /api/v1/payments/create-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.578Z"}
[32minfo[39m: Acquired callback handler for payment token mcgb6fcz-cpzaxtq: {"callbackPath":"/api/v1/payments/callback/handler-2","callbackUrl":"http://localhost:3005/api/v1/payments/callback/handler-2","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.609Z"}
[32minfo[39m: Payment token created with callback assignment: {"callbackPath":"/api/v1/payments/callback/handler-2","customerEmail":"new@example.com","service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:32.639Z","token":"mcgb6fcz-cpzaxtq"}
[0mPOST /api/v1/payments/create-token [32m200[0m 61.119 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:33.968Z"}
  console.log
    CSRF token generation: {
      sessionID: '8731193b269d8e58e6b6c1641115dbc0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Zi0OzLeZ-KhzD-P4aad1naMTlJoOJC3QioGg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8731193b269d8e58e6b6c1641115dbc0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X0UfH1TwxS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.278 ms - 67[0m
[32minfo[39m: Initializing callback pool... {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:34.349Z"}
[32minfo[39m: Initialized 10 callback handlers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:34.910Z"}
[32minfo[39m: Callback pool cleanup job started (runs every 5 minutes) {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:34.910Z"}
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:35.004Z"}
  console.log
    Customer affiliateId: AFF-TEST-123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: null

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: null

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST-4c6fec66-a863-4263-affd-be3e305ab7c9",
      "firstName": "Test",
      "lastName": "Customer",
      "email": "test@example.com",
      "phone": "+1234567890",
      "address": "123 Test St",
      "city": "Test City",
      "state": "TS",
      "zipCode": "12345",
      "affiliateId": "AFF-TEST-123",
      "affiliate": null
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 405.242 ms - 674[0m
[34mdebug[39m: GET /api/v1/payments/pool-stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:35.475Z"}
[0mGET /api/v1/payments/pool-stats [32m200[0m 31.548 ms - -[0m
[32minfo[39m: Callback pool cleanup job stopped {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:38.707Z"}
PASS tests/integration/payment.test.js (21.226 s)
  Payment Integration Tests
    Payment Configuration Tests
      ✓ should get payment configuration (2206 ms)
    Payment Token Tests
      ✓ should create payment token (1603 ms)
      ✓ should check payment status (1693 ms)
      ✓ should cancel payment token (1755 ms)
    Payment Callback Tests
      ✓ should return 503 when all callback handlers are locked (3682 ms)
      ✓ should release callback handler when payment is cancelled (3102 ms)
    Pool Statistics Tests
      ✓ should get pool statistics (4739 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:40.684Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:41.867Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:42.028Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 162.548 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:43.150Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:43.315Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 165.745 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-5f7cadad-2429-456b-8ca6-c8ee2470a7f5/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:43.326Z"}
[0mGET /api/v1/affiliates/AFF-5f7cadad-2429-456b-8ca6-c8ee2470a7f5/customers [32m200[0m 115.050 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:44.415Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:44.564Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 149.921 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-8e973485-6410-4979-a640-e67af5fd1e6a/customers?customerId=CUST-5d1dbe9d-53d0-4aba-9a73-6ea091d5153b {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:44.659Z"}
[0mGET /api/v1/affiliates/AFF-8e973485-6410-4979-a640-e67af5fd1e6a/customers?customerId=CUST-5d1dbe9d-53d0-4aba-9a73-6ea091d5153b [32m200[0m 118.336 ms - 437[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:45.708Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:45.852Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 144.634 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-99ec7e98-fcc5-4b64-9cd3-c67ea58c1d63/customers?customerId=NONEXISTENT123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:45.856Z"}
[0mGET /api/v1/affiliates/AFF-99ec7e98-fcc5-4b64-9cd3-c67ea58c1d63/customers?customerId=NONEXISTENT123 [32m200[0m 114.633 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:46.984Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:47.133Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.000 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-620e5aa2-ce3a-427f-9bef-537cd03e6be9/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:47.138Z"}
[0mGET /api/v1/affiliates/AFF-620e5aa2-ce3a-427f-9bef-537cd03e6be9/customers [33m401[0m 1.568 ms - 47[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:48.099Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:48.248Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.931 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:48.252Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:48.414Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 163.433 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c9585f9f-ad11-4542-b796-7295e5ee32be/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:48.419Z"}
[0mGET /api/v1/affiliates/AFF-c9585f9f-ad11-4542-b796-7295e5ee32be/customers [32m200[0m 121.974 ms - 437[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-c9585f9f-ad11-4542-b796-7295e5ee32be/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:48.545Z"}
[0mGET /api/v1/affiliates/AFF-c9585f9f-ad11-4542-b796-7295e5ee32be/dashboard [32m200[0m 188.330 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:49.688Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:49.848Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 159.983 ms - 629[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:50.805Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:50.956Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 151.640 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-d2eefecf-b8cc-4e7b-a4b4-e471f967f956 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:50.961Z"}
[0mGET /api/v1/affiliates/AFF-d2eefecf-b8cc-4e7b-a4b4-e471f967f956 [32m200[0m 59.478 ms - 573[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:51.997Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:52.152Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 155.370 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-7c51daca-71fb-4788-905c-7ea6917d8c36/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:52.157Z"}
[0mGET /api/v1/affiliates/AFF-7c51daca-71fb-4788-905c-7ea6917d8c36/dashboard [32m200[0m 147.856 ms - 217[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:53.339Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:53.503Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 164.230 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-47bcc5c2-9205-437b-8a0e-5ebaf9b62239/customers?customerId=INVALID_ID {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:53.509Z"}
[0mGET /api/v1/affiliates/AFF-47bcc5c2-9205-437b-8a0e-5ebaf9b62239/customers?customerId=INVALID_ID [32m200[0m 114.508 ms - 130[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:54.598Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:54.751Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 153.096 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/INVALID_AFFILIATE/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:54.756Z"}
[0mGET /api/v1/affiliates/INVALID_AFFILIATE/customers [33m403[0m 29.672 ms - 42[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:55.743Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:00:55.893Z","userType":"affiliate","username":"john@testaffiliate.com"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 150.942 ms - 629[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-33298028-372a-4f43-be58-67ec0dfa5fbd/customers {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:55.897Z"}
[0mGET /api/v1/affiliates/AFF-33298028-372a-4f43-be58-67ec0dfa5fbd/customers [32m200[0m 112.651 ms - 437[0m
PASS tests/integration/affiliateCustomerFiltering.test.js (16.994 s)
  Affiliate Customer Filtering Integration Tests
    Email URL Generation for Customer Filtering
      ✓ should generate correct dashboard URL with customer parameter (1910 ms)
    Affiliate Dashboard Customer Filtering API
      ✓ should return customers for authenticated affiliate (1286 ms)
      ✓ should filter customers by customerId when provided (1316 ms)
      ✓ should return empty array when filtering by non-existent customerId (1236 ms)
      ✓ should require authentication to access customer list (1133 ms)
    Complete Email-to-Dashboard Flow Simulation
      ✓ should handle complete flow from email generation to dashboard access (1588 ms)
      ✓ should handle URL parameters correctly throughout the flow (1117 ms)
    Dashboard Data Loading for Customer Highlighting
      ✓ should load affiliate profile data correctly (1173 ms)
      ✓ should load dashboard statistics correctly (1328 ms)
    Error Handling in Customer Filtering Flow
      ✓ should handle invalid customer ID gracefully (1282 ms)
      ✓ should handle invalid affiliate ID (1160 ms)
      ✓ should handle database connection issues gracefully (1227 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:57.871Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:58.223Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ecc849e49bed9c4ddd0bc490af51749',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XvrN2MlL-ndJZTEW5aU73hXbraGc-cowrcII

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ecc849e49bed9c4ddd0bc490af51749

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wp_QOIk57x...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.896 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:58.430Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 445.230 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:59.709Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b812040400c1429f1bf3a1357569841b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YD6KAcP7-9bCpOFvcE9n-Lxiy0N8cG7khr90

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b812040400c1429f1bf3a1357569841b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pVcHkN61cI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.485 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-e6102c1d-aac7-4d6f-965c-386360e0a6c8 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:00:59.750Z"}
[0mGET /api/v1/affiliates/AFF-e6102c1d-aac7-4d6f-965c-386360e0a6c8 [32m200[0m 56.264 ms - 495[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:00.581Z"}
  console.log
    CSRF token generation: {
      sessionID: '94762cebc429dc9e4e9a84ac4a808ac8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1TIBPaqJ-2ShjWMXB4wMd9lvxZa90xSMOyr8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 94762cebc429dc9e4e9a84ac4a808ac8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: R6RotjLbSx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.994 ms - 67[0m
[34mdebug[39m: PUT /api/v1/affiliates/AFF-0c83d363-2099-4297-954c-15d6a14781c0 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:00.626Z"}
[0mPUT /api/v1/affiliates/AFF-0c83d363-2099-4297-954c-15d6a14781c0 [32m200[0m 89.391 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:01.472Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ee5e2f9c75e44a9f5238a56aa2654d85',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JXI1p1St-ItzRMj0DptmRDYN8dCSq4aJzeFM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ee5e2f9c75e44a9f5238a56aa2654d85

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1o28BA9Se6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.931 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:01.621Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:01:01.785Z","userType":"affiliate","username":"testaffiliate"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 164.288 ms - 629[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:02.527Z"}
  console.log
    CSRF token generation: {
      sessionID: '65d7b160e1b2268e57a98a5a06e377ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Yaa3vtPZ-i_W0wTN8K0I6-l6_hoo5OGpi-VQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 65d7b160e1b2268e57a98a5a06e377ce

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6fOVFdNO8p...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.798 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-825d985b-a5f4-48e7-a4e5-9acbc492e4aa/customers?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:02.613Z"}
[0mGET /api/v1/affiliates/AFF-825d985b-a5f4-48e7-a4e5-9acbc492e4aa/customers?page=1&limit=10 [32m200[0m 111.666 ms - 689[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:03.466Z"}
  console.log
    CSRF token generation: {
      sessionID: '6973c191fc98d6f384263c8418d090a0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GmkVji8d-JLY9Hy-iMJjnplhDd0qvzNTSMAA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6973c191fc98d6f384263c8418d090a0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: M4htzM2Iwr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.904 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-11832e42-8e5e-467c-b9de-f3b7870c05a0/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:03.594Z"}
[0mGET /api/v1/affiliates/AFF-11832e42-8e5e-467c-b9de-f3b7870c05a0/orders?page=1&limit=10 [32m200[0m 125.325 ms - 576[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:04.448Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ee4c9eac2229dc08a1629d0176560e0a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MzAdhG6e-B4M05OQL2w3TKOYMdgTxifd3_jo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ee4c9eac2229dc08a1629d0176560e0a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NYI6njff8X...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.392 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF-16b9cf10-a03b-4392-ae95-a14c802c4481/transactions?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:04.525Z"}
[0mGET /api/v1/affiliates/AFF-16b9cf10-a03b-4392-ae95-a14c802c4481/transactions?page=1&limit=10 [32m200[0m 113.622 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:05.420Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c63196dc0d3458e4727c56532c58dbf2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S5y1x8aj-4pAKqGDTOLIukxwE9wR8p7_QTmA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c63196dc0d3458e4727c56532c58dbf2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kGoQgMXVkC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.124 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-9a34e064-1650-43a6-93c7-d18c3886ea4e/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:05.553Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-9a34e064-1650-43a6-93c7-d18c3886ea4e/delete-all-data {
      sessionID: 'c63196dc0d3458e4727c56532c58dbf2',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac63196dc0d3458e4727c56532c58dbf2.JqZcaqhs5SBfi8jW1VQ5LAgBtDWY7aXSgx%2F%2BLDcSaWE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-9a34e064-1650-43a6-93c7-d18c3886ea4e/delete-all-data [32m200[0m 214.022 ms - 191[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:06.578Z"}
  console.log
    CSRF token generation: {
      sessionID: '411633f94bccdbc777923ef57da7f689',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: S7hrdz7D-84kWhFMDxkRh9tlZUJYPpB2Ct64

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 411633f94bccdbc777923ef57da7f689

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JE6RLKw58m...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.848 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/affiliates/AFF-2cec807d-4f3d-4bd0-bda1-f01cd6622626/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:06.624Z"}
  console.log
    CSRF check for: /api/v1/affiliates/AFF-2cec807d-4f3d-4bd0-bda1-f01cd6622626/delete-all-data {
      sessionID: '411633f94bccdbc777923ef57da7f689',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A411633f94bccdbc777923ef57da7f689.TJc1djSxJx6c5QqRxGiEiddxvw7PrLweZi%2BYMLdWE64',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/affiliates/AFF-2cec807d-4f3d-4bd0-bda1-f01cd6622626/delete-all-data [33m403[0m 30.900 ms - 59[0m
PASS tests/integration/affiliate.test.js (10.372 s)
  Affiliate API
    ✓ should register a new affiliate (1499 ms)
    ✓ should get affiliate profile (871 ms)
    ✓ should update affiliate profile (892 ms)
    ✓ should login affiliate (1054 ms)
    ✓ should get affiliate's customers list (939 ms)
    ✓ should get affiliate's orders (982 ms)
    ✓ should get affiliate's earnings/transactions (972 ms)
    ✓ Delete all affiliate data (development only) (1157 ms)
    ✓ Reject delete in production environment (809 ms)

  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

PASS tests/integration/adminCreation.test.js (5.117 s)
  Admin Creation Integration Tests
    Direct Database Admin Creation
      ✓ should create admin with sequential ID when no admins exist (209 ms)
      ✓ should create admin with next sequential ID when admins exist (328 ms)
      ✓ should handle admin creation with all permissions (227 ms)
      ✓ should handle admin creation with partial permissions (213 ms)
    Admin Model Validation
      ✓ should require email field (161 ms)
      ✓ should save admins with different adminIds successfully (284 ms)
      ✓ should save admins with different emails successfully (284 ms)
    Password Handling
      ✓ should hash password before saving (203 ms)
      ✓ should validate password with verifyPassword method (327 ms)
    Admin Query Operations
      ✓ should find admin by adminId (347 ms)
      ✓ should find admin by email (335 ms)
      ✓ should find active admins only (346 ms)
      ✓ should find admins with specific permissions (340 ms)
      ✓ should get last admin for ID generation (400 ms)
    Email Integration
      ✓ should call email service after admin creation (228 ms)
      ✓ should handle email service failures gracefully (251 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:13.498Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/w9/check-auth {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.472Z"}
[0mGET /api/v1/w9/check-auth [32m200[0m 43.863 ms - 115[0m
[34mdebug[39m: GET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.521Z"}
[32minfo[39m: OAuth callback - token exchange completed {"hasAccessToken":true,"hasRefreshToken":true,"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.526Z"}
[0mGET /api/auth/docusign/callback?code=auth_code_from_docusign&state=test_state_123 [32m200[0m 5.302 ms - -[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.600Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"env_123456","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685ff5afb9e41dbe2081bac6","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T14:01:19.721Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 121.450 ms - 139[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/env_123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.753Z"}
[0mGET /api/v1/w9/envelope-status/env_123456 [32m200[0m 98.376 ms - 48[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:19.866Z"}
[32minfo[39m: W9 status updated for affiliate AFF000001: {"details":{"envelopeId":"env_123456","event":"envelope-completed","status":"completed","success":true},"docusignStatus":"completed","envelopeId":"env_123456","performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"system@docusign","userName":"DocuSign System","userType":"system"},"service":"wavemax-affiliate","status":"verified","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T14:01:19.933Z"}
[0mPOST /api/v1/w9/docusign-webhook [32m200[0m 66.955 ms - 70[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:20.897Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[0mPOST /api/v1/w9/initiate-signing [32m200[0m 58.472 ms - 156[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/declined_env {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:21.821Z"}
[0mGET /api/v1/w9/envelope-status/declined_env [32m200[0m 91.009 ms - 49[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:22.792Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

[32minfo[39m: W9 upload attempt via DocuSign {"action":"upload_attempt","details":{"envelopeId":"new_env_after_refresh","method":"docusign","success":true},"performedBy":{"ipAddress":"::ffff:127.0.0.1","userEmail":"test@example.com","userId":"685ff5b2b9e41dbe2081bb58","userName":"Test Affiliate","userType":"affiliate"},"service":"wavemax-affiliate","target":{"affiliateId":"AFF000001","affiliateName":"Test Affiliate"},"timestamp":"2025-06-28T14:01:22.890Z"}
[0mPOST /api/v1/w9/initiate-signing [32m200[0m 97.974 ms - 143[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:23.735Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Invalid template ID
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Invalid template ID {"service":"wavemax-affiliate","stack":"Error: Invalid template ID\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:290:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-28T14:01:23.815Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 80.737 ms - 79[0m
[34mdebug[39m: POST /api/v1/w9/initiate-signing {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:24.633Z"}
  console.log
    Skipping CSRF for authenticated request without session cookie

      at log (server/config/csrf-config.js:220:13)

  console.error
    Failed to initiate W9 signing: Error: Network timeout
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      258 |     });
      259 |   } catch (error) {
    > 260 |     console.error('Failed to initiate W9 signing:', error);
          |             ^
      261 |     logger.error('Failed to initiate W9 signing:', error);
      262 |     res.status(500).json({
      263 |       error: 'Failed to create W9 signing session',

      at error (server/controllers/w9ControllerDocuSign.js:260:13)

[31merror[39m: Failed to initiate W9 signing: Network timeout {"service":"wavemax-affiliate","stack":"Error: Network timeout\n    at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/docusignW9.test.js:307:9)\n    at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)\n    at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)","timestamp":"2025-06-28T14:01:24.693Z"}
[0mPOST /api/v1/w9/initiate-signing [31m500[0m 60.679 ms - 75[0m
[34mdebug[39m: POST /api/v1/w9/docusign-webhook {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:25.504Z"}
[33mwarn[39m: Invalid DocuSign webhook signature {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:25.505Z"}
[0mPOST /api/v1/w9/docusign-webhook [33m401[0m 1.793 ms - 29[0m
[34mdebug[39m: GET /api/v1/w9/envelope-status/other_envelope {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:26.368Z"}
  console.log
    Envelope mismatch: { expected: undefined, received: 'other_envelope' }

      at log (server/controllers/w9ControllerDocuSign.js:291:15)

[0mGET /api/v1/w9/envelope-status/other_envelope [33m403[0m 59.844 ms - 24[0m
[34mdebug[39m: GET /api/v1/w9/authorization-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:27.247Z"}
[0mGET /api/v1/w9/authorization-status [32m200[0m 28.613 ms - 65[0m
PASS tests/integration/docusignW9.test.js (15.433 s)
  DocuSign W9 Integration Tests
    Complete W9 Signing Flow
      ✓ should complete full W9 signing flow from authorization to completion (1797 ms)
    Resume Existing Signing Session
      ✓ should resume existing envelope instead of creating new one (917 ms)
    Handle Declined Envelope
      ✓ should reset W9 status when envelope is declined (982 ms)
    Token Refresh Flow
      ✓ should handle expired token and refresh automatically (969 ms)
    Error Handling
      ✓ should handle DocuSign service errors gracefully (903 ms)
      ✓ should handle network errors during envelope creation (870 ms)
    Security Tests
      ✓ should reject webhook with invalid signature (815 ms)
      ✓ should prevent accessing another affiliates envelope status (926 ms)
    Authorization Status Check
      ✓ should verify authorization after OAuth callback (878 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:29.075Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:30.378Z"}
[0mGET /api/v1/system/config/public [32m200[0m 32.452 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:31.657Z"}
[0mGET /api/v1/system/config/public [32m200[0m 29.364 ms - 472[0m
[34mdebug[39m: GET /api/v1/system/config/public/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:32.848Z"}
[0mGET /api/v1/system/config/public/wdf_base_rate_per_pound [32m200[0m 28.560 ms - 172[0m
[34mdebug[39m: GET /api/v1/system/config/public/non_existent_key {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:33.985Z"}
[0mGET /api/v1/system/config/public/non_existent_key [33m404[0m 28.350 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config/public/private_key {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:35.145Z"}
[0mGET /api/v1/system/config/public/private_key [33m404[0m 28.265 ms - 35[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:36.411Z"}
[0mGET /api/v1/system/config [32m200[0m 61.421 ms - -[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:37.603Z"}
[0mGET /api/v1/system/config [33m401[0m 1.481 ms - 47[0m
[34mdebug[39m: GET /api/v1/system/config {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:38.744Z"}
[0mGET /api/v1/system/config [33m403[0m 30.044 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:39.899Z"}
  console.log
    CSRF token generation: {
      sessionID: '259851f3221f3dcaf5f7bf961e0968a7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 026linZC-3FfYAGFcXEqzkgb0Rga7Aff8dt0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 259851f3221f3dcaf5f7bf961e0968a7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ouAND_j101...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.373 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:40.031Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '259851f3221f3dcaf5f7bf961e0968a7',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A259851f3221f3dcaf5f7bf961e0968a7.HUWXMdbMRmE%2BJ9Bbu6ksO%2BP0sWNEW%2Fx09Vt3PAov73M',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [32m200[0m 125.565 ms - 149[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:41.368Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ba7aea738a3ddd2f193ae873684c080',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: yP7EjUVv-yCdJudtwWzYFreor6u0Na4TnyeE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ba7aea738a3ddd2f193ae873684c080

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tnIFS9QK6R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.045 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:41.508Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '7ba7aea738a3ddd2f193ae873684c080',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7ba7aea738a3ddd2f193ae873684c080.8fjLfh%2BmByD3%2B2rlkBUoWyWmNJrRgARqucKgDYmxpS8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be a number for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:67:21)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 96.436 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:42.726Z"}
  console.log
    CSRF token generation: {
      sessionID: '5925a87408a8616dd5454b4cf5aed4d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OhL0mLEc-8ITMcjTZ6V40TBLmSA1Y5nepDR8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5925a87408a8616dd5454b4cf5aed4d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cvDxZ0L6rV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.284 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:42.849Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: '5925a87408a8616dd5454b4cf5aed4d5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5925a87408a8616dd5454b4cf5aed4d5.9lmmPd6okdhxg83p6xHxsCMWxu%2F57aV5lD3vR3D0YHw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Value must be at least 0.5 for key: wdf_base_rate_per_pound
        at model.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:72:23)
        at callMiddlewareFunction (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:628:27)
        at model.next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:93:7)
        at _next (/var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:146:10)
        at /var/www/wavemax/wavemax-affiliate-program/node_modules/kareem/index.js:653:30
        at processTicksAndRejections (node:internal/process/task_queues:77:11)

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m400[0m 86.201 ms - 71[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:44.082Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e0af4eaf0a8bebd4c15a63c7c13835e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PF826CGn-FWrKeR4hM5XBfazAt9-K2Kb-IJo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e0af4eaf0a8bebd4c15a63c7c13835e9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U8d41sTy3v...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.445 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/non_editable_config {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:44.240Z"}
  console.log
    CSRF check for: /api/v1/system/config/non_editable_config {
      sessionID: 'e0af4eaf0a8bebd4c15a63c7c13835e9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae0af4eaf0a8bebd4c15a63c7c13835e9.h%2FAUlQEYcYcgRYKmDf5MIAAtgp3bufTxvOCT19CYEac',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.error
    Error updating config: Error: Configuration is not editable: non_editable_config
        at Function.Object.<anonymous>.systemConfigSchema.statics.setValue (/var/www/wavemax/wavemax-affiliate-program/server/models/SystemConfig.js:140:11)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /var/www/wavemax/wavemax-affiliate-program/server/routes/systemConfigRoutes.js:83:20

      92 |     });
      93 |   } catch (error) {
    > 94 |     console.error('Error updating config:', error);
         |             ^
      95 |     res.status(400).json({ error: error.message });
      96 |   }
      97 | });

      at error (server/routes/systemConfigRoutes.js:94:13)

[0mPUT /api/v1/system/config/non_editable_config [33m400[0m 88.608 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:45.498Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ba8ed70b162dffd9963f337ad80d2c43',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XC2DI63b-7jke_Z5VIPVF8O7UvcVtp2Ipweo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ba8ed70b162dffd9963f337ad80d2c43

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: r6jR6o0mJc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.955 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:45.709Z"}
  console.log
    CSRF token generation: {
      sessionID: 'dc303a0b4d018081b713138c1d5ed29f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nFm5CEhS-NDlV5x4UDXiURN0sF4s49jRfau8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: dc303a0b4d018081b713138c1d5ed29f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xelIvDSEMz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.223 ms - 67[0m
[34mdebug[39m: PUT /api/v1/system/config/wdf_base_rate_per_pound {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:45.720Z"}
  console.log
    CSRF check for: /api/v1/system/config/wdf_base_rate_per_pound {
      sessionID: 'dc303a0b4d018081b713138c1d5ed29f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adc303a0b4d018081b713138c1d5ed29f.EfNFkN3zwJviZyRzAKZLXuiZSASxQMuNFqVNQXcJT08',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/system/config/wdf_base_rate_per_pound [33m403[0m 59.164 ms - 78[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:46.986Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b95e32c3d11e57ca7869dbea4adff37a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3ZaHjo1s-LERXotQfk7G6U2LUOl0pFMBnlQI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b95e32c3d11e57ca7869dbea4adff37a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Y4SLiySxvg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 14.911 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:47.038Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'b95e32c3d11e57ca7869dbea4adff37a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab95e32c3d11e57ca7869dbea4adff37a.boS6BsxoLs9Q%2FfiSc59faLhHAK3LUtXu9RJqUO3Ftpo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 348.073 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:48.560Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a6b3e354de21fca77cf4df579d9b46ce',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: T9CHGvgH-laqwSp7V9j9dhYSOXRJ2lp8VYL0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a6b3e354de21fca77cf4df579d9b46ce

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: GitKZBRals...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.468 ms - 67[0m
[34mdebug[39m: POST /api/v1/system/config/initialize {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:48.633Z"}
  console.log
    CSRF check for: /api/v1/system/config/initialize {
      sessionID: 'a6b3e354de21fca77cf4df579d9b46ce',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa6b3e354de21fca77cf4df579d9b46ce.37LvhtzW72gAN5kQ47T2U35PAMd1Lky2T9LqU2zhhok',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/system/config/initialize [32m200[0m 332.994 ms - 48[0m
PASS tests/integration/systemConfig.test.js (22.993 s)
  System Config API Tests
    Public Endpoints
      GET /api/v1/system/config/public
        ✓ should return all public configurations (1451 ms)
        ✓ should not return private configurations (1230 ms)
      GET /api/v1/system/config/public/:key
        ✓ should return a specific public configuration (1124 ms)
        ✓ should return 404 for non-existent config (1130 ms)
        ✓ should return 404 for private config accessed via public endpoint (1292 ms)
    Admin Endpoints
      GET /api/v1/system/config
        ✓ should return all configurations for admin (1190 ms)
        ✓ should return 401 without authentication (1129 ms)
        ✓ should return 403 for non-admin users (1166 ms)
      PUT /api/v1/system/config/:key
        ✓ should update a configuration value (1470 ms)
        ✓ should validate value based on data type (1368 ms)
        ✓ should validate value against min/max constraints (1327 ms)
        ✓ should not allow updating non-editable configs (1442 ms)
        ✓ should require system_config permission (1418 ms)
      POST /api/v1/system/config/initialize
        ✓ should initialize default configurations (1636 ms)
        ✓ should not overwrite existing configurations (1625 ms)
    Integration with Order Model
      ✓ should use SystemConfig WDF rate in new orders (1310 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:52.235Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:52.863Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad7230e14b1872d01073eff8f2d334dd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rOZeWNnG-_cW-DotF83UhN0y7TKH_l5JV8lk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad7230e14b1872d01073eff8f2d334dd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6HwsaGOUtJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.144 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:52.882Z"}
[0mGET /api/v1/auth/google [36m302[0m 2.647 ms - 0[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:59.072Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aca32905d62216a0a225398d26c93824',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Dwz3LLhw-JsNwEBmFPkwMJHWPbnEOAtQainY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aca32905d62216a0a225398d26c93824

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UqoAeEO_QC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.550 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:01:59.882Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b8e04f24051924c28f09f5dd4241505',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jlV3CTGV-trrUjfxP36z1_eA7jsPpspW6bp0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b8e04f24051924c28f09f5dd4241505

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AxtSgBLGVa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.522 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:00.669Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cb5690a379b2d134a863806b6af5b6ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Zwf1qch1-cXoFvs4FxPTHZV7zKTMvgXW--TU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cb5690a379b2d134a863806b6af5b6ef

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gVIbBjIPWA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.599 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/google {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:00.677Z"}
[0mGET /api/v1/auth/google [33m404[0m 1.341 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:01.454Z"}
  console.log
    CSRF token generation: {
      sessionID: '1eab85c447e6e8fed295f4eb0f05d879',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: u26zfz0A-kpBnVcjQoKSHB7TEidtwpVGkMQU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1eab85c447e6e8fed295f4eb0f05d879

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EdI5p8TAxa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.859 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:01.465Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-45555c52-b68f-49bf-a514-4a90cf93da91","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:02:01.690Z","userId":"685ff5d93936af8754a8ef44","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 225.739 ms - 785[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:02.553Z"}
  console.log
    CSRF token generation: {
      sessionID: '1697734edfd530e42567c1949ba89733',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4xZ0y241-F1awNzqoArLfytFj99CWK6FNync

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1697734edfd530e42567c1949ba89733

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EVQux0boFs...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.012 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:02.564Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.876 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:03.351Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fb87a69c201cfda70204eac64800e228',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9eKjb4AO-7Npkymzn6VHfDQSv1DyTd1DOdvY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fb87a69c201cfda70204eac64800e228

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: C1Jzi88SxV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.944 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:03.365Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.326 ms - 511[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:04.139Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e1ddab0f5dbba19410f3b00bfb82d6c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5Z1LZPlA-dhCJ8jIOiW8SvO73FxIvI36FqUY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e1ddab0f5dbba19410f3b00bfb82d6c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: e-vPGsRnjY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.429 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:04.240Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.010 ms - 661[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:05.018Z"}
  console.log
    CSRF token generation: {
      sessionID: '61ccef905462b7354655a006522d95ee',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UTrEO9Dg-AWwQ-gJnUOgC4StCIev6490tb68

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 61ccef905462b7354655a006522d95ee

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X3Qax1YqNc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.583 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:05.031Z"}
  console.log
    CSRF token generation: {
      sessionID: '930fc2c517c145d0ccb2278adf61ba44',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IThjFGPR-ASe4YxPY3_YqiG086NZUyaMQnP0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 930fc2c517c145d0ccb2278adf61ba44

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WtU75AI0x8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.151 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:05.144Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '930fc2c517c145d0ccb2278adf61ba44',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A930fc2c517c145d0ccb2278adf61ba44.ZvEK3qXGMn2yd%2BqEa0yEKMS6RMCOZYTpOq5QkwJwn%2FU',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m404[0m 4.333 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:05.950Z"}
  console.log
    CSRF token generation: {
      sessionID: '446b67bd53b9689fc6d6b72e800497f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pXrOZaZn-Em4ar3cvvJOXgT3yazTMIT4DCgI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 446b67bd53b9689fc6d6b72e800497f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ATwCQSqRDL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.418 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:05.970Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c141b4789ad75f4d00acbfcdaf6af8c5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gKojYuAS-cMO3fzZu4Pj5XmljSrV91VQQ8i8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c141b4789ad75f4d00acbfcdaf6af8c5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YpHclkOF2s...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.580 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:06.148Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: 'c141b4789ad75f4d00acbfcdaf6af8c5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac141b4789ad75f4d00acbfcdaf6af8c5.9wmu%2BssyDcbPHu%2BAoSEzRkTuMIb62uYCNWMUpszWoCI',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m404[0m 3.578 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:06.938Z"}
  console.log
    CSRF token generation: {
      sessionID: '777c21a23e566bf34f6fe9df63f737a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LbjYqal3-YU8ljbYtK1Ol7LL9ao7L9f1OlY4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 777c21a23e566bf34f6fe9df63f737a5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jFmQghL0Ff...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.621 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:06.949Z"}
  console.log
    CSRF token generation: {
      sessionID: '48b0f8ff9c6f289a353b4b16281299c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IPsnykjU-rCwsGUNlF1esKXUyCRuwl8Bc_7E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 48b0f8ff9c6f289a353b4b16281299c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: N12T3r06c-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.769 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:07.079Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '48b0f8ff9c6f289a353b4b16281299c9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A48b0f8ff9c6f289a353b4b16281299c9.5pBtkKH%2Bz40erxlFLj%2B%2FEB%2BABIV3I2RB%2FtdRBPR4yrQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 2.719 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:07.869Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe0493e2ae6139b26cf86a8f3563b8fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NcU5Jwoz-67SYlNLBpG9tqM0xYuTv3pLV7K4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe0493e2ae6139b26cf86a8f3563b8fd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8-B7E9OBJI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.750 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:07.881Z"}
  console.log
    CSRF token generation: {
      sessionID: '77a97aa2f4d16460dab1e4866422d931',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: p4JEt0NE-qYEQgoAhDUH1mp0bwhAFD-Af2Ic

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 77a97aa2f4d16460dab1e4866422d931

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jTWgCxXNaq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.579 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:08.006Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '77a97aa2f4d16460dab1e4866422d931',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A77a97aa2f4d16460dab1e4866422d931.02OFE%2BzNNpSWYYED1nIir%2FFY%2BMfadS1A5IHvAISodEA',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 3.433 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:08.810Z"}
  console.log
    CSRF token generation: {
      sessionID: '0459e37d11abcb34ea1379f947af024f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 2nfcahqS-O2NtJrAZbqkPek7HltTjOpyUBI0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0459e37d11abcb34ea1379f947af024f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2RiDvJAkAG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.988 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:08.820Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.241 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:09.604Z"}
  console.log
    CSRF token generation: {
      sessionID: '823544cf04900518158b02579871f99d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EOelkjbh-ZL-unvhTvs7KInbOllq7CUsxn1k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 823544cf04900518158b02579871f99d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DpibURUhGx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.460 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:09.614Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.692 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:10.404Z"}
  console.log
    CSRF token generation: {
      sessionID: 'be28079fe88ce88cf32eb041f428e598',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WIvBqzNJ-U2ihNGFuKHE_-nrOqa6x5NiQ2U4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: be28079fe88ce88cf32eb041f428e598

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BFkici3VZd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.989 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:10.414Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.806 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:11.188Z"}
  console.log
    CSRF token generation: {
      sessionID: '8fcccfd51573a70c69f496e5bea8ab96',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TyiNNwcR-3msWBvNDKa-bhhwQe-CQqcoN8Ao

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8fcccfd51573a70c69f496e5bea8ab96

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BCNBNvugv4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.732 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:11.198Z"}
  console.error
    Social registration error: Error: Database connection failed
        at Object.<anonymous> (/var/www/wavemax/wavemax-affiliate-program/tests/integration/socialAuth.test.js:583:62)
        at Promise.then.completed (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:121:9)
        at run (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/var/www/wavemax/wavemax-affiliate-program/node_modules/jest-runner/build/runTest.js:444:34)

      1439 |
      1440 |   } catch (error) {
    > 1441 |     console.error('Social registration error:', error);
           |             ^
      1442 |     res.status(500).json({
      1443 |       success: false,
      1444 |       message: 'Registration failed'

      at error (server/controllers/authController.js:1441:13)

[0mPOST /api/v1/auth/social/register [31m500[0m 90.270 ms - 49[0m
FAIL tests/integration/socialAuth.test.js (20.811 s)
  Social Authentication Integration Tests
    OAuth Initiation Endpoints
      ✓ should redirect to Google OAuth when Google auth is configured (6404 ms)
      ✓ should redirect to Facebook OAuth when Facebook auth is configured (811 ms)
      ✓ should redirect to LinkedIn OAuth when LinkedIn auth is configured (786 ms)
      ✓ should return 404 for unconfigured OAuth providers (786 ms)
    Social Registration Flow
      ✓ should complete social registration with all required fields (1091 ms)
      ✓ should reject social registration with invalid social token (796 ms)
      ✓ should reject social registration with missing required fields (797 ms)
      ✓ should prevent duplicate social registrations (877 ms)
    Account Linking Flow
      ✕ should link social account to existing affiliate by email (932 ms)
      ✕ should reject linking if social account already exists (988 ms)
    Social Login Flow
      ✕ should successfully login with existing social account (931 ms)
      ✕ should update social account tokens on login (938 ms)
    Security and Edge Cases
      ✓ should handle malformed social tokens gracefully (797 ms)
      ✓ should handle expired social tokens (799 ms)
      ✓ should sanitize social profile data (784 ms)
      ✓ should handle database errors during social registration (899 ms)

  ● Social Authentication Integration Tests › Account Linking Flow › should link social account to existing affiliate by email

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      326 |         .send(linkingData);
      327 |
    > 328 |       expect(response.status).toBe(200);
          |                               ^
      329 |       expect(response.body.success).toBe(true);
      330 |       expect(response.body.message).toContain('linked');
      331 |

      at Object.toBe (tests/integration/socialAuth.test.js:328:31)

  ● Social Authentication Integration Tests › Account Linking Flow › should reject linking if social account already exists

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      364 |         .send(linkingData);
      365 |
    > 366 |       expect(response.status).toBe(400);
          |                               ^
      367 |       expect(response.body.success).toBe(false);
      368 |       expect(response.body.message).toContain('already linked');
      369 |     });

      at Object.toBe (tests/integration/socialAuth.test.js:366:31)

  ● Social Authentication Integration Tests › Social Login Flow › should successfully login with existing social account

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      424 |         .send(loginData);
      425 |
    > 426 |       expect(response.status).toBe(200);
          |                               ^
      427 |       expect(response.body.success).toBe(true);
      428 |       expect(response.body.token).toBeDefined();
      429 |       expect(response.body.refreshToken).toBeDefined();

      at Object.toBe (tests/integration/socialAuth.test.js:426:31)

  ● Social Authentication Integration Tests › Social Login Flow › should update social account tokens on login

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      449 |         .send(loginData);
      450 |
    > 451 |       expect(response.status).toBe(200);
          |                               ^
      452 |
      453 |       // Verify tokens were updated
      454 |       const updatedAffiliate = await Affiliate.findById(affiliateId);

      at Object.toBe (tests/integration/socialAuth.test.js:451:31)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:13.064Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:14.570Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-8ca0c335-b57f-42bf-93a4-e6be22dc9ee6

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 100.023 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:16.707Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-8048844f-d774-4ac2-be70-9732c1eb2c0b

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 595.841 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:20.611Z"}
[0mGET /api/v1/quickbooks/vendors [33m404[0m 57.092 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:22.105Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 127.496 ms - 318[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:23.693Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=json [32m200[0m 404.755 ms - 955[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:27.384Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m400[0m 29.591 ms - 66[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2026-06-28&endDate=2026-06-28 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:29.845Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2026-06-28&endDate=2026-06-28 [33m404[0m 82.071 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:31.345Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 161.334 ms - 169[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:34.009Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-001&startDate=2025-01-01 [33m400[0m 28.753 ms - 81[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:35.434Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-QB-003&startDate=2025-01-01&endDate=2025-01-31 [33m400[0m 57.723 ms - 76[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:36.912Z"}
[0mGET /api/v1/quickbooks/commission-detail?affiliateId=AFF-NONEXISTENT&startDate=2025-01-01&endDate=2025-01-31 [33m404[0m 55.387 ms - 49[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:38.337Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-a78b256b-8ab4-4ffa-8a60-8fe48984209c

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 326.899 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:38.667Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 90.725 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:38.761Z"}
[0mGET /api/v1/quickbooks/history [32m200[0m 358.733 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:42.183Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-7445c1d8-045f-4142-adc1-b00a5222e5cd

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 356.981 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:42.543Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 599.107 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?type=vendor {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:43.145Z"}
[0mGET /api/v1/quickbooks/history?type=vendor [32m200[0m 579.443 ms - 940[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.428Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-3bb279e3-54f2-4659-879d-b709115c6393

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 94.242 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.526Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-01-01&endDate=2025-01-31&format=json [33m404[0m 81.097 ms - 83[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.610Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-3cb97894-124d-4292-be10-b4795fbf0ade

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 91.386 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.705Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-cf89819f-6e23-4c6f-ba9b-8c3a614002d0

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 91.770 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.800Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-deeb2981-93e0-413e-8f6f-20e9b6e618dd

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 89.302 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.891Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-0d703e0e-fa57-4334-ab0a-5b69a08481f5

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 88.523 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=json {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:47.983Z"}
  console.log
    QuickBooks vendor export: JSON, 2 records, exportId: EXP-94278d07-96b7-438f-80ef-24cf75be6ce2

      at log (server/controllers/quickbooksController.js:102:13)

[0mGET /api/v1/quickbooks/vendors?format=json [32m200[0m 103.569 ms - 909[0m
[34mdebug[39m: GET /api/v1/quickbooks/history?limit=3 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:48.089Z"}
[0mGET /api/v1/quickbooks/history?limit=3 [32m200[0m 85.154 ms - -[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:49.610Z"}
[0mGET /api/v1/quickbooks/vendors [33m401[0m 1.365 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:49.614Z"}
[0mGET /api/v1/quickbooks/payment-summary [33m401[0m 0.975 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/commission-detail {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:49.617Z"}
[0mGET /api/v1/quickbooks/commission-detail [33m401[0m 1.144 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/history {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:49.621Z"}
[0mGET /api/v1/quickbooks/history [33m401[0m 3.686 ms - 47[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:53.361Z"}
  console.log
    Authorization failed for path: /vendors - User role: affiliate Allowed roles: [ 'administrator' ]

      at log (server/middleware/auth.js:184:15)

[0mGET /api/v1/quickbooks/vendors [33m403[0m 286.945 ms - 54[0m
[34mdebug[39m: GET /api/v1/quickbooks/vendors?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:02:57.287Z"}
  console.log
    QuickBooks vendor export: CSV, 2 records, exportId: EXP-d7f0c15b-aeb8-4d9b-bb1b-5f8e61b1cc13

      at log (server/controllers/quickbooksController.js:94:15)

[0mGET /api/v1/quickbooks/vendors?format=csv [32m200[0m 582.806 ms - 354[0m
[34mdebug[39m: GET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:01.245Z"}
[0mGET /api/v1/quickbooks/payment-summary?startDate=2025-06-21&endDate=2025-06-28&format=csv [32m200[0m 118.968 ms - 318[0m
PASS tests/integration/quickbooks.test.js (49.917 s)
  QuickBooks Export Integration Tests
    Vendor Export
      ✓ should export verified vendors as CSV (2186 ms)
      ✓ should export vendors as JSON (4100 ms)
      ✓ should handle no verified vendors gracefully (1769 ms)
    Payment Summary Export
      ✓ should export payment summary for date range as CSV (1589 ms)
      ✓ should export payment summary as JSON with correct aggregations (3343 ms)
      ✓ should require date parameters (2631 ms)
      ✓ should handle empty date range (1686 ms)
    Commission Detail Export
      ✓ should export commission details for specific affiliate (2430 ms)
      ✓ should require all parameters (1690 ms)
      ✓ should reject unverified affiliate export (1483 ms)
      ✓ should handle non-existent affiliate (1441 ms)
    Export History
      ✓ should retrieve export history (3842 ms)
      ✓ should filter export history by type (5150 ms)
      ✓ should limit export history results (2258 ms)
    Security and Permissions
      ✓ should require admin authentication for all QuickBooks endpoints (3161 ms)
      ✓ should not allow affiliate access to QuickBooks exports (3788 ms)
    CSV Format Validation
      ✓ should generate QuickBooks-compatible vendor CSV (4450 ms)
      ✓ should generate QuickBooks-compatible payment CSV (1799 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:03.212Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:03.622Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b2d003423c00f6fbe2c8673b3b0a90a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Zk1qyLdW-XHmL8Kq4G72_bwNEAX10nWEsTOM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b2d003423c00f6fbe2c8673b3b0a90a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ljzXPoeBr-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.000 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:04.417Z"}
  console.log
    Creating new customer with email: bob@example.com username: bobjohnson

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-c4098cf6-a655-4c54-8780-cfd6b8b6f25c

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 206.971 ms - 297[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:05.518Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f2faef1f9be0f98e3b529cb386d2e88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eN1VF4gL-NMoR9s8vGztule-G3OyW9zh38F8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8f2faef1f9be0f98e3b529cb386d2e88

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TGFMfXKqRy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.210 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:05.814Z"}
[0mPOST /api/v1/customers/register [33m400[0m 30.478 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:06.661Z"}
  console.log
    CSRF token generation: {
      sessionID: '209d2965d49968933bcc579bb76683c4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: clpyUbOM-bv_e4n5DaWWbGOsddyKFO4w7UKI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 209d2965d49968933bcc579bb76683c4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oxqfZB-fOV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.562 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:06.986Z"}
[0mPOST /api/v1/customers/register [33m400[0m 58.163 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:07.823Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b2193fabb37deb791c690a4dd0069f3c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HFJEX3x3-9-MuABTRTxQqRHuNxqCLky338HE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b2193fabb37deb791c690a4dd0069f3c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Yj2zFA2NIX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.783 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:08.115Z"}
[0mPOST /api/v1/customers/register [33m400[0m 58.859 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:08.943Z"}
  console.log
    CSRF token generation: {
      sessionID: '9a6fa5b6f8a43ab70f33e2f9afb074f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Mvd3Gd0r-AiUhwGfSpdNgcF3sc_ykctvJQZw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9a6fa5b6f8a43ab70f33e2f9afb074f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: r0By1WoVG4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.303 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:09.212Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 89.152 ms - 472[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:10.070Z"}
  console.log
    CSRF token generation: {
      sessionID: '8eb3208077ae64b9cd62fa0b392b8e52',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZjsqSN9F-X00ziMri0HE1PYbGWqCe8Ja5bx8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8eb3208077ae64b9cd62fa0b392b8e52

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CcI7pB8UK-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.189 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:10.374Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 89.584 ms - 448[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:11.247Z"}
  console.log
    CSRF token generation: {
      sessionID: '902a4bb7d3b52b866a1d5cc4739d995d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L8Ud2D8l-LiUo2siZO_Xxke8GoYkSRSSz-0Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 902a4bb7d3b52b866a1d5cc4739d995d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ar39qBHHsK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.831 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:11.514Z"}
[0mGET /api/v1/customers/CUST123/profile [33m403[0m 57.705 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:12.351Z"}
  console.log
    CSRF token generation: {
      sessionID: '8df8d6edd5d91ba3712e892014f9ee06',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: b92fQ4b0-wNIhgeKFU3GodxZmLvaJT_wR4KQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8df8d6edd5d91ba3712e892014f9ee06

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: msDVmg7DOn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.774 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:12.632Z"}
[0mGET /api/v1/customers/CUST123/profile [32m200[0m 58.246 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:13.456Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe5d06baa6960637ecbba5d94f07d699',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bgWrRnoW-DAK_JvQob3sqg_TYndcwi5W7UaI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe5d06baa6960637ecbba5d94f07d699

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RmJtLJR05b...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.331 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:13.744Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 89.393 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:14.659Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fe57451e3adf950fff5ece703baa61ac',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SUIBANu4-b8EZQiKJ3nCJ-_mhudEcbrnlvuY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fe57451e3adf950fff5ece703baa61ac

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AH81_SSDIM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.738 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/profile {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:14.940Z"}
[0mPUT /api/v1/customers/CUST123/profile [32m200[0m 85.689 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:15.827Z"}
  console.log
    CSRF token generation: {
      sessionID: '6ce90a441da60a36d1f064a80aaac678',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MPMourPJ-2q3pazg0JjvkbMO2MiHGNJjD4Gc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6ce90a441da60a36d1f064a80aaac678

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Lg049aG7kR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.422 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?page=1&limit=10 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:16.158Z"}
[0mGET /api/v1/customers/CUST123/orders?page=1&limit=10 [32m200[0m 115.924 ms - 473[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:17.047Z"}
  console.log
    CSRF token generation: {
      sessionID: '9490e1c727a39e6d97737101f8b39daf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D0XWMjNF-Aaa5I6kKWSRkjpeDMYWkW16LqUM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9490e1c727a39e6d97737101f8b39daf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qEYaQVjVqU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.573 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/orders?status=complete {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:17.355Z"}
[0mGET /api/v1/customers/CUST123/orders?status=complete [32m200[0m 113.530 ms - 300[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:18.283Z"}
  console.log
    CSRF token generation: {
      sessionID: '5cd7cd0b0e3eb93547d516426d475386',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xA071jFC-nyhOEvkRtJiCYHH1XFv20gLu50U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5cd7cd0b0e3eb93547d516426d475386

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6W1vBtYP4J...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.419 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:18.563Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: '5cd7cd0b0e3eb93547d516426d475386',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5cd7cd0b0e3eb93547d516426d475386.3WN9oSkX1GPJ0rGKrA45TpdoWwXk0d6ebM2Ljc1DKdg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [32m200[0m 204.761 ms - 58[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:18.770Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 151.083 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:19.692Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b46bad8f226038d222752e05bc5cb2b8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0KraOLJo-VQnojMq7NqYO2ZA9bq76_PpS8wk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b46bad8f226038d222752e05bc5cb2b8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: iK15Y5F1yZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.209 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:20.022Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'b46bad8f226038d222752e05bc5cb2b8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab46bad8f226038d222752e05bc5cb2b8.tBMeSt7KMiH0uTrpxITRVIlvH1EdhZz%2BCsMkmKgEUa8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m401[0m 115.968 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:20.899Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f7d04ac57083b7fbfff2eb9425d9a2c9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Nbk1SduF-CFuIw53f6o0eGKqbu7Vx-hvy28M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f7d04ac57083b7fbfff2eb9425d9a2c9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CL-3eCJijK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.219 ms - 67[0m
[34mdebug[39m: PUT /api/v1/customers/CUST123/password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:21.180Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/password {
      sessionID: 'f7d04ac57083b7fbfff2eb9425d9a2c9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af7d04ac57083b7fbfff2eb9425d9a2c9.9cEVeROLkJ3vkrVOi61nfha4RoSWfGtbrzFEJ7H88zo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/customers/CUST123/password [33m400[0m 120.573 ms - 77[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:22.104Z"}
  console.log
    CSRF token generation: {
      sessionID: '7aa86ae7f670c3a3e7c667f5cd352497',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Uek7xv0f-VaJMaNjnSGkBrPEcrGB9ciMJs3U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7aa86ae7f670c3a3e7c667f5cd352497

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6Yj5zL5_nS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.575 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:22.397Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 141.518 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:23.329Z"}
  console.log
    CSRF token generation: {
      sessionID: '690bc4a9f431c6d3cc3e8add2f37ca9d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gRnZhqKh-5yDoRzHH-pc4XzuTaTGWCFZdvtw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 690bc4a9f431c6d3cc3e8add2f37ca9d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Wy44z2unnc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.060 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:23.662Z"}
[0mGET /api/v1/customers/CUST123/dashboard?includeMonthlyStats=true [32m200[0m 144.669 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:24.645Z"}
  console.log
    CSRF token generation: {
      sessionID: '88d0938038a23e0ffa97a5589ef1514e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hQCO1RqJ-ldwgdWaqtYZBcxkez2zFGuLYNpM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 88d0938038a23e0ffa97a5589ef1514e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1Tf80N_JaK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.288 ms - 67[0m
[34mdebug[39m: GET /api/v1/customers/CUST123/dashboard {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:24.968Z"}
[0mGET /api/v1/customers/CUST123/dashboard [32m200[0m 139.843 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:25.883Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ffa5c2338e5bb35698339c303a818062',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: im4kds5M-35CDK5FzuT3SLXNU4yhDH7RgNAQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ffa5c2338e5bb35698339c303a818062

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9l-MML_z1u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.253 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:26.222Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'ffa5c2338e5bb35698339c303a818062',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Affa5c2338e5bb35698339c303a818062.vLYXiQOXvNAVqj%2Fz0R396x2rivvJYa%2BOw8KKjHBlJgg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [32m200[0m 125.868 ms - 107[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:27.157Z"}
  console.log
    CSRF token generation: {
      sessionID: '3374af2cf2d65923d6e5937fd6a89d60',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qLX26y11-V8sEu-_J4kSVyxG-_rO-tVyvJdc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3374af2cf2d65923d6e5937fd6a89d60

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: uZ47WDHpa9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.685 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:27.455Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: '3374af2cf2d65923d6e5937fd6a89d60',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3374af2cf2d65923d6e5937fd6a89d60.Mhj2SLs%2BLDgKCdbf9Wkj655g7ke%2B31cyIv3Yg23XLUc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 32.403 ms - 59[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:28.247Z"}
  console.log
    CSRF token generation: {
      sessionID: 'acdb9325e6dd38d05e7dc7d620f2af9a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Mk9NiKf7-2Pu9aptQry1zrmUkMMzWPd2Px48

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: acdb9325e6dd38d05e7dc7d620f2af9a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K8me3rmqeI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.835 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/customers/CUST123/delete-all-data {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:28.636Z"}
  console.log
    CSRF check for: /api/v1/customers/CUST123/delete-all-data {
      sessionID: 'acdb9325e6dd38d05e7dc7d620f2af9a',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aacdb9325e6dd38d05e7dc7d620f2af9a.1XAPpz8i2SpE0rbte6Q11hICpParI3DnFWUspRFE%2FN4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/customers/CUST123/delete-all-data [33m403[0m 32.301 ms - 63[0m
PASS tests/integration/customer.test.js (27.212 s)
  Customer Integration Tests
    POST /api/v1/customers/register
      ✓ should register a new customer (1909 ms)
      ✓ should fail with invalid affiliate ID (1144 ms)
      ✓ should fail with duplicate email (1161 ms)
      ✓ should fail with duplicate username (1119 ms)
    GET /api/v1/customers/:customerId/profile
      ✓ should return customer profile for authenticated customer (1126 ms)
      ✓ should return customer profile for affiliate (1177 ms)
      ✓ should fail for unauthorized customer (1103 ms)
      ✓ should return limited data without authentication (1105 ms)
    PUT /api/v1/customers/:customerId/profile
      ✓ should update customer profile (1202 ms)
      ✓ should not update protected fields (1167 ms)
    GET /api/v1/customers/:customerId/orders
      ✓ should return customer orders with pagination (1221 ms)
      ✓ should filter orders by status (1236 ms)
    PUT /api/v1/customers/:customerId/password
      ✓ should update customer password (1408 ms)
      ✓ should fail with incorrect current password (1208 ms)
      ✓ should fail with weak new password (1205 ms)
    GET /api/v1/customers/:customerId/dashboard
      ✓ should return customer dashboard statistics (1225 ms)
      ✓ should return monthly statistics (1316 ms)
      ✓ should allow affiliate to view customer dashboard (1237 ms)
    DELETE /api/v1/customers/:customerId/delete-all-data
      ✓ should delete all customer data in development environment (1272 ms)
      ✓ should reject deletion in production environment (1090 ms)
      ✓ should reject unauthorized deletion (1280 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:30.555Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:31.500Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a30ed377cef60ebceda18079fbafa45b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nMV3UqG1-NJmb-YrUQPUojveZVE0eWo9FdfY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a30ed377cef60ebceda18079fbafa45b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Vgz4arXI5S...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.997 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:31.612Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.460 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:31.921Z"}
[0mGET /api/v1/administrators [32m200[0m 117.153 ms - 865[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:32.962Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ef5da0f0fb17917fd43cdf6e5b315ee7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Oi4gTlUq-dGmRWo57PR7Fl2NrhWB4j7st8ao

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ef5da0f0fb17917fd43cdf6e5b315ee7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: gzukMjEtQt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.361 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:33.074Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.060 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:33.317Z"}
[0mGET /api/v1/administrators?active=true [32m200[0m 110.546 ms - 376[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:34.298Z"}
  console.log
    CSRF token generation: {
      sessionID: '5503ba1a630c7fb0779e04bc09c44913',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wnDcMBh2-gGo9SOtqK0Jr-h9UYltXCgbxGbg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5503ba1a630c7fb0779e04bc09c44913

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RmuI5r88dG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.416 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:34.407Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.656 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:35.515Z"}
[0mGET /api/v1/administrators?page=2&limit=5 [32m200[0m 115.930 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:36.516Z"}
  console.log
    CSRF token generation: {
      sessionID: '0ff645766df6d2c46076b8d550e49727',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QKLWHs2V-jruABNT6DA8xuhEIdOPCttyNSGc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0ff645766df6d2c46076b8d550e49727

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9a41tSjj28...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.638 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:36.616Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.408 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:36.773Z"}
[0mGET /api/v1/administrators [33m401[0m 1.513 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:37.649Z"}
  console.log
    CSRF token generation: {
      sessionID: '94b0e411b1ead877d4adf9989ca80722',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: P6k0MBsP-RW3K3UYC-7NxvK5wk6Oz1ntwBk0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 94b0e411b1ead877d4adf9989ca80722

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: N9rxPy2ZCn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.168 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:37.762Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.447 ms - 615[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:38.020Z"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.754 ms - 555[0m
[34mdebug[39m: GET /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:38.176Z"}
[0mGET /api/v1/administrators [33m403[0m 37.130 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:39.096Z"}
  console.log
    CSRF token generation: {
      sessionID: '4ca0a66d310eb18a2f45d59929d645cf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1sqWaqEy-adsED7HPGwx6YiMpc5sf_QrkjIY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4ca0a66d310eb18a2f45d59929d645cf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Dy78lbOMXR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.249 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:39.198Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.310 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685ff63bcef4cd9ced259d09 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:39.443Z"}
[0mGET /api/v1/administrators/685ff63bcef4cd9ced259d09 [32m200[0m 88.948 ms - 283[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:40.401Z"}
  console.log
    CSRF token generation: {
      sessionID: '99a5c7bd8b53c2ddb88d027c03c64638',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DE0KJHg2-KmeAMKrHXqbFcHuZQ3hzpq07Ta0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 99a5c7bd8b53c2ddb88d027c03c64638

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ux3deGpJpj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.903 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:40.495Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.071 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/685ff63ccef4cd9ced259d34 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:40.653Z"}
[0mGET /api/v1/administrators/685ff63ccef4cd9ced259d34 [33m404[0m 85.005 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:41.615Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a0db0187bd61c2e1a383de94c312da61',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HScMaTNq-5R28vXhrajgySouLqdm0Et2NSao

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a0db0187bd61c2e1a383de94c312da61

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ejzYBusQsy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.280 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:41.732Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.718 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/invalid-id {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:41.886Z"}
[0mGET /api/v1/administrators/invalid-id [33m400[0m 56.453 ms - 54[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:42.813Z"}
  console.log
    CSRF token generation: {
      sessionID: '16d92bfd7b992bfbf55007d0002e4efd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: voyk1rNk-28iRmOlKedVtdYtKeHP7FO-5REY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 16d92bfd7b992bfbf55007d0002e4efd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oBHipYjyqq...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.999 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:42.918Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.529 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:43.073Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '16d92bfd7b992bfbf55007d0002e4efd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A16d92bfd7b992bfbf55007d0002e4efd.7%2FgKnTUDlmysyF0j74AAhuYqzI0IGpvXldIO88OddTk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [32m201[0m 203.843 ms - 329[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:43.281Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.393 ms - 677[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:44.332Z"}
  console.log
    CSRF token generation: {
      sessionID: '0a8a1925a22812dc05099449625b4acf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: se3MPqIE-xHmijSapLrtJP-ecz9qG5Tg4hTM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0a8a1925a22812dc05099449625b4acf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VukZ86uPS6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.128 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:44.430Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 168.418 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:44.602Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '0a8a1925a22812dc05099449625b4acf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0a8a1925a22812dc05099449625b4acf.K9EaogwHU8H3qI0PwB8%2B7cDQoA%2FgTuBZIQnnlR4CU3U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 60.780 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:45.560Z"}
  console.log
    CSRF token generation: {
      sessionID: '8d762ae54e31e711f48e8caa0bb73ef5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kGs2e49l-ztHvMOXgMmyQSHpZLVyD8w9N0-I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8d762ae54e31e711f48e8caa0bb73ef5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cQ2kuYhiem...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.069 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:45.658Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.127 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:45.819Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '8d762ae54e31e711f48e8caa0bb73ef5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8d762ae54e31e711f48e8caa0bb73ef5.YauuNk5L8LVaVNyJqLiYQbtCsGdUQHEd%2F8g4KKmcY2U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 61.800 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:46.751Z"}
  console.log
    CSRF token generation: {
      sessionID: '5148b85101b0c9086a3ec4bf7eaac6d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: UXJbER5m-H0-O6KNM7Zzsv5JUMQEjxV7kVB4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5148b85101b0c9086a3ec4bf7eaac6d4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FCuBIEqV-y...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.097 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:46.851Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.570 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:47.019Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '5148b85101b0c9086a3ec4bf7eaac6d4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5148b85101b0c9086a3ec4bf7eaac6d4.JJh5pcBsGe%2BuFe575bHTie6P%2BQJRyeN4sxOiTeH%2F8nw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 61.009 ms - 204[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:47.959Z"}
  console.log
    CSRF token generation: {
      sessionID: '2673f174413e16e30943ab8c67fee681',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ujsh8G9F-yG2d6srSjKbDFgiRxwkCdtmqFgI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2673f174413e16e30943ab8c67fee681

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZiFVZ_HNjd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.028 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:48.076Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.290 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:48.239Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '2673f174413e16e30943ab8c67fee681',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A2673f174413e16e30943ab8c67fee681.EK5fjjmQIcRc1qPUEmpZYKUGK887PNRnMQRascdZo30',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m409[0m 87.316 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:49.192Z"}
  console.log
    CSRF token generation: {
      sessionID: '39d19b77586b52dac6784a64d9d6f48a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aNMWpbSl-oQ9Zjl8cdx8piT6rpl2JHjUESQs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 39d19b77586b52dac6784a64d9d6f48a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 97NroFa6nC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.096 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:49.290Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.338 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:49.553Z"}
  console.log
    CSRF token generation: {
      sessionID: '683474bbded7a1f236656980f1feab66',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hisafcXJ-HAJvLDwSt1Chb7dGjaXimhazsFM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 683474bbded7a1f236656980f1feab66

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YUGWzOOYcT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.100 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:49.560Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.957 ms - 649[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:49.713Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '683474bbded7a1f236656980f1feab66',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A683474bbded7a1f236656980f1feab66.HuG87c03IqFeiBSBAP%2Bfi%2FErQYo3HN0tWsra5fMOnII',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m403[0m 57.138 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:50.652Z"}
  console.log
    CSRF token generation: {
      sessionID: '4748edbffd52322e9cd8990e6dc40912',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: clcJGH61-YbTRoTAZEdJKTYoRRy_qs0N1Xhg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4748edbffd52322e9cd8990e6dc40912

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: P7ZC3E0Mac...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.373 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:50.750Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.377 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff646cef4cd9ced259e85 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:51.001Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff646cef4cd9ced259e85 {
      sessionID: '4748edbffd52322e9cd8990e6dc40912',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4748edbffd52322e9cd8990e6dc40912.i%2Bb4KMMgarnR8Ehz2R8h2UnwIawXv9YB34mmXC3wbMI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff646cef4cd9ced259e85 [32m200[0m 91.452 ms - 337[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:51.972Z"}
  console.log
    CSRF token generation: {
      sessionID: '74661cd64bca80f690d7fd11bd943764',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bpI4Eee8--nbSa0z5gwbMObDkV2-d0L0HZfo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 74661cd64bca80f690d7fd11bd943764

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qOKjvHmw2W...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.272 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:52.071Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.002 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff648cef4cd9ced259eb0 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:52.332Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff648cef4cd9ced259eb0 {
      sessionID: '74661cd64bca80f690d7fd11bd943764',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A74661cd64bca80f690d7fd11bd943764.2GYpxdDy5LMZr3iidIzmyKbLpZbZvba%2BYrBVd2TVSY8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff648cef4cd9ced259eb0 [32m200[0m 133.046 ms - 318[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:53.392Z"}
  console.log
    CSRF token generation: {
      sessionID: '9cd1cd4779235bada86fc1f3325a9f86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 39nqHSmF-JXKkNf0M8PFJ1cgisWBMhIdODNs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9cd1cd4779235bada86fc1f3325a9f86

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Wa6py6XqBT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.706 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:53.507Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.253 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff649cef4cd9ced259edc {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:53.768Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff649cef4cd9ced259edc {
      sessionID: '9cd1cd4779235bada86fc1f3325a9f86',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9cd1cd4779235bada86fc1f3325a9f86.xgn5zicLG7%2BAkBeFmGItayhBGs%2FZ3Pibrb7t0Hq9jIk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff649cef4cd9ced259edc [32m200[0m 148.363 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:53.921Z"}
  console.log
    CSRF token generation: {
      sessionID: '2704f8cc4eb63cd9a81240fb5892397c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w1l6jFg2-TLR0AVFGYVsBYIm2MR_DOSrWD9c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2704f8cc4eb63cd9a81240fb5892397c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A9Yvsw2QdG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.698 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:53.930Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.219 ms - 645[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:54.993Z"}
  console.log
    CSRF token generation: {
      sessionID: '21e6032a42688d68b45a2c753bd87b9d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PsseD79p-2bYIWhFKtVFFjzkLpjRu2jvp-pA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 21e6032a42688d68b45a2c753bd87b9d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: J2DTVVMB_j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.341 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:55.112Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.403 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff64bcef4cd9ced259f0b {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:55.356Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff64bcef4cd9ced259f0b {
      sessionID: '21e6032a42688d68b45a2c753bd87b9d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A21e6032a42688d68b45a2c753bd87b9d.54%2F6t58YfGYon2CU4%2FwGd8mPkgKweerhbFL9XBY4JjE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff64bcef4cd9ced259f0b [32m200[0m 91.615 ms - 317[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:55.451Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 29.667 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:56.355Z"}
  console.log
    CSRF token generation: {
      sessionID: '5cc215891b3c67b177f083a82f50c5a9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GQWefsQM-wOK-rnr-68eaiiy94L8BQKcfWJs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5cc215891b3c67b177f083a82f50c5a9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5sfPAvAjfB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.269 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:56.455Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.113 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff64ccef4cd9ced259f37 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:56.720Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff64ccef4cd9ced259f37 {
      sessionID: '5cc215891b3c67b177f083a82f50c5a9',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5cc215891b3c67b177f083a82f50c5a9.oO%2B%2BS5CD8OLJieWjhV4oTGE2m6MfJInCQTTJnaS1UKE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff64ccef4cd9ced259f37 [32m200[0m 86.832 ms - 316[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:57.752Z"}
  console.log
    CSRF token generation: {
      sessionID: '1aa1fec2fe254de1757c842eb164a772',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: k9Ui3BGd-CAlNNfBonEyPst964-gPG4gPjXo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1aa1fec2fe254de1757c842eb164a772

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: MaIQLcP0Su...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.426 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:57.852Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.951 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff64ecef4cd9ced259f62 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:58.093Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff64ecef4cd9ced259f62 {
      sessionID: '1aa1fec2fe254de1757c842eb164a772',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A1aa1fec2fe254de1757c842eb164a772.ok4Yule2PGG1iY4AaoQIDIskTEIvvPUUTM49QZrCp%2Fc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff64ecef4cd9ced259f62 [33m409[0m 87.051 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:59.041Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a653c226348364901438671576da084',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: VGZHPce1-T8wzqfNwtnTVFD-IZtckoDKfgzI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a653c226348364901438671576da084

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nwMJoKWozJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.192 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:59.156Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.240 ms - 615[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff64fcef4cd9ced259f87 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:03:59.410Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff64fcef4cd9ced259f87 {
      sessionID: '7a653c226348364901438671576da084',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7a653c226348364901438671576da084.aJxyJKfMQFkaR%2BkIdlFQ1HwHghTyLxshCl8D4amO%2F0g',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff64fcef4cd9ced259f87 [33m400[0m 60.409 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:00.375Z"}
  console.log
    CSRF token generation: {
      sessionID: '42fe5d678c51bb705a6de1c41d528d1c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kgA1v5Tm-PTei5r_pucPPbpbDzfL4_hCi9Jo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 42fe5d678c51bb705a6de1c41d528d1c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7r6kShwmZD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.959 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:00.491Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.248 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:00.824Z"}
  console.log
    CSRF token generation: {
      sessionID: '506e184018f329e77b3fdda7720b0ac8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TB1G28a1-pGS4eYx_c-gTpfbFhCuNHd2VRWw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 506e184018f329e77b3fdda7720b0ac8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eifeLlbRYY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.578 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:00.833Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.319 ms - 650[0m
[34mdebug[39m: PATCH /api/v1/administrators/685ff650cef4cd9ced259fb7 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:01.006Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff650cef4cd9ced259fb7 {
      sessionID: '506e184018f329e77b3fdda7720b0ac8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A506e184018f329e77b3fdda7720b0ac8.I3RRKPNarIrOTOoMxZln6OO9GXpN9s7l68NXoq2T5LY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/administrators/685ff650cef4cd9ced259fb7 [33m403[0m 60.583 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:01.954Z"}
  console.log
    CSRF token generation: {
      sessionID: '89eb22a676db788910b6ce6b53a7883c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GuPn5hS7-i60Bz6O7UWFNWjnzqdt_JUz3zoc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 89eb22a676db788910b6ce6b53a7883c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zhg8QV4j-0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.091 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:02.063Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.355 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ff652cef4cd9ced259fe7 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:02.338Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff652cef4cd9ced259fe7 {
      sessionID: '89eb22a676db788910b6ce6b53a7883c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A89eb22a676db788910b6ce6b53a7883c.hG%2FNDT9FDO9B5MF3WUn1LZup8hftvFett6yISvo8GBM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ff652cef4cd9ced259fe7 [32m200[0m 118.681 ms - 63[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:03.339Z"}
  console.log
    CSRF token generation: {
      sessionID: '92f74324761656733cc43cd35c073d31',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KqHbERLu-1uLPAsC0ahDqMgjYsG-MjNQaEkQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 92f74324761656733cc43cd35c073d31

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eJ9uESvJTc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.311 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:03.463Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 171.721 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ff653cef4cd9ced25a00e {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:03.730Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff653cef4cd9ced25a00e {
      sessionID: '92f74324761656733cc43cd35c073d31',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A92f74324761656733cc43cd35c073d31.r%2FGxhfRtlgQjrB%2Bv62p8shmkVVQHMgSNuKEzsgCQP4o',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ff653cef4cd9ced25a00e [33m400[0m 57.561 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:04.654Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea8148e51d9f56f5aaacfa3ffa5f3ed5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: NU9TSSuB-SQ5W-It5jtxYt3OtHr1IuK5JHmQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea8148e51d9f56f5aaacfa3ffa5f3ed5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Wz4gnfNudk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.825 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:04.749Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.597 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ff654cef4cd9ced25a038 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:05.025Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff654cef4cd9ced25a038 {
      sessionID: 'ea8148e51d9f56f5aaacfa3ffa5f3ed5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aea8148e51d9f56f5aaacfa3ffa5f3ed5.fVMMkuLw%2BNEe2WDutmv%2BNLOQ86s%2FYxqQVl9hxW0jR7k',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ff654cef4cd9ced25a038 [33m400[0m 58.976 ms - 60[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:05.964Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cfacf4c566cbb264752b7d12f6455a1a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FGp3Wx5t-1JYDJpyrrY9CxEfo-u_faIOCApU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cfacf4c566cbb264752b7d12f6455a1a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VtMmyNbhV5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.284 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:06.084Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.576 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:06.449Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a5c781c4837c8cc87ddc129b5470654',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mJLfooGU-7g9NBMQZ9DOQVN3HEN-KabVuZ4M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a5c781c4837c8cc87ddc129b5470654

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QmbNwkzmYd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.655 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:06.459Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.306 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ff656cef4cd9ced25a069 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:06.610Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff656cef4cd9ced25a069 {
      sessionID: '7a5c781c4837c8cc87ddc129b5470654',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7a5c781c4837c8cc87ddc129b5470654.yILCeHL1hO%2FKQXQfoyroMvFfz%2FOG0jEvvcAZE9%2Fa5qE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ff656cef4cd9ced25a069 [33m403[0m 57.905 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:07.532Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fd6fec3f866e36a13483fd1700b67a95',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jW223tlX-2soN9oJv4ldZ_3GlqFiF6ojw5Zg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fd6fec3f866e36a13483fd1700b67a95

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: m855vG48uI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.766 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:07.632Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.535 ms - 615[0m
[34mdebug[39m: DELETE /api/v1/administrators/685ff657cef4cd9ced25a09b {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:07.891Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff657cef4cd9ced25a09b {
      sessionID: 'fd6fec3f866e36a13483fd1700b67a95',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afd6fec3f866e36a13483fd1700b67a95.0OLatZ202MMINZTIJwF6ej2LwTrj5drSBvZDB%2F55LQw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/administrators/685ff657cef4cd9ced25a09b [33m404[0m 112.864 ms - 53[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:08.880Z"}
  console.log
    CSRF token generation: {
      sessionID: '16b81787fab0311dc49caf4c5d00cf22',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4nmAOMeE-gAniCbVq-92wzQj8lgjtp7-JKYw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 16b81787fab0311dc49caf4c5d00cf22

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3msYlb9tMr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.112 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:08.978Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.239 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ff659cef4cd9ced25a0c6/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:09.239Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff659cef4cd9ced25a0c6/reset-password {
      sessionID: '16b81787fab0311dc49caf4c5d00cf22',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A16b81787fab0311dc49caf4c5d00cf22.QmA%2F4xdYenacdpeL8I3rKO0x%2FOeuZ4z8mOaXTSkt9ik',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ff659cef4cd9ced25a0c6/reset-password [32m200[0m 191.270 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:09.434Z"}
  console.log
    CSRF token generation: {
      sessionID: '447ff9bbe37df21db7cbee6e4d55af2e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 38kJRfFu-Bidfo6p35EWSs_DUjZ8bolzz_pY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 447ff9bbe37df21db7cbee6e4d55af2e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Oxn2fDXM-w...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.397 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:09.442Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.591 ms - 644[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:09.600Z"}
  console.log
    CSRF token generation: {
      sessionID: '5164cb6e2bae4d830ac2982bc720f996',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CyLyb2UJ-VR7xDy-mHPSZvIAK5utqMPICytc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5164cb6e2bae4d830ac2982bc720f996

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nIcVj4DN6t...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.946 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:09.613Z"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 138.375 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:10.613Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e50eca1ae9143c9713fc7faca846d894',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: E0DRp4mi-6ByhJHrKxtPbKqBXbHrVdR7j5y4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e50eca1ae9143c9713fc7faca846d894

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: b8RSrgeZY6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.551 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:10.713Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.716 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ff65acef4cd9ced25a0f8/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:11.034Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff65acef4cd9ced25a0f8/reset-password {
      sessionID: 'e50eca1ae9143c9713fc7faca846d894',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae50eca1ae9143c9713fc7faca846d894.l5Qi2dAomESdAoDV5jfjg71E7V6Oi7KBvoKBbE8C%2FAs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ff65acef4cd9ced25a0f8/reset-password [32m200[0m 181.784 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:12.106Z"}
  console.log
    CSRF token generation: {
      sessionID: '68ebd954e5e830309cfb6876baccef71',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hS9xDZUa-LepZ3ukFNc3w3-dNvl46Pz8bZ4k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 68ebd954e5e830309cfb6876baccef71

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _bgPVsQXEc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.443 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:12.215Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.650 ms - 615[0m
[34mdebug[39m: POST /api/v1/administrators/685ff65ccef4cd9ced25a126/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:12.467Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff65ccef4cd9ced25a126/reset-password {
      sessionID: '68ebd954e5e830309cfb6876baccef71',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A68ebd954e5e830309cfb6876baccef71.hmKZuxNdai5CkLWcTHx6kha%2Bc%2FGkJNRWtBwqtvPyauk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ff65ccef4cd9ced25a126/reset-password [33m400[0m 57.443 ms - 313[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:13.394Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5d01acad6c88c8aa8249c372af8f3f7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3Peg7iVk-2UGd6RGfITq3UKi5qX8YajB2CIs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5d01acad6c88c8aa8249c372af8f3f7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: H-7_xKh2CV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.702 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:13.489Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.164 ms - 615[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:13.816Z"}
  console.log
    CSRF token generation: {
      sessionID: '0d6d79914d5100852faef3de671a4c8b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xI7rZTis-R1LmmNSVrz89A19c_3XCnH0-ckQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0d6d79914d5100852faef3de671a4c8b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _nRpIsZuVi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.892 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:13.824Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.659 ms - 650[0m
[34mdebug[39m: POST /api/v1/administrators/685ff65dcef4cd9ced25a150/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:13.985Z"}
  console.log
    CSRF check for: /api/v1/administrators/685ff65dcef4cd9ced25a150/reset-password {
      sessionID: '0d6d79914d5100852faef3de671a4c8b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0d6d79914d5100852faef3de671a4c8b.o%2Fp%2FfZB%2BGXiXaej%2Boitgotdja%2BWI2Zvc36OZ0eO%2BZ1Q',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators/685ff65dcef4cd9ced25a150/reset-password [33m403[0m 59.237 ms - 86[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:14.918Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ff8cad1cad414a6c9cbbc1f7e5977d5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wNFI1c0x-4r7mOJ8OMOhijlIz2InbOktoOl0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ff8cad1cad414a6c9cbbc1f7e5977d5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u0UG81ySRJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.021 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:15.031Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 183.725 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:15.218Z"}
[0mGET /api/v1/administrators/permissions [32m200[0m 29.462 ms - 361[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:16.114Z"}
  console.log
    CSRF token generation: {
      sessionID: '765cfb3ae6677c39fab0a40504d423bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: n1JuTDVa-m01KXdIQvXcXQc33SCRYXHyyAds

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 765cfb3ae6677c39fab0a40504d423bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1GVzfL7gLb...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.814 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:16.249Z"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 148.065 ms - 615[0m
[34mdebug[39m: GET /api/v1/administrators/permissions {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:16.400Z"}
[0mGET /api/v1/administrators/permissions [33m401[0m 1.393 ms - 47[0m
PASS tests/integration/administrator.test.js (47.498 s)
  Administrator Integration Tests
    GET /api/v1/administrators
      ✓ should get all administrators with admin token (1928 ms)
      ✓ should filter by active status (1336 ms)
      ✓ should support pagination (2213 ms)
      ✓ should require admin authentication (1134 ms)
      ✓ should require administrator permissions (1449 ms)
    GET /api/v1/administrators/:id
      ✓ should get administrator by ID (1305 ms)
      ✓ should return 404 for non-existent administrator (1206 ms)
      ✓ should handle invalid ObjectId (1203 ms)
    POST /api/v1/administrators
      ✓ should create new administrator (1520 ms)
      ✓ should validate required fields (1223 ms)
      ✓ should validate email format (1195 ms)
      ✓ should validate password strength (1208 ms)
      ✓ should prevent duplicate emails (1233 ms)
      ✓ should require administrators.create permission (1447 ms)
    PATCH /api/v1/administrators/:id
      ✓ should update administrator details (1330 ms)
      ✓ should update email (1408 ms)
      ✓ should update password (1612 ms)
      ✓ should deactivate administrator (1365 ms)
      ✓ should not allow updating adminId (1346 ms)
      ✓ should validate email uniqueness on update (1339 ms)
      ✓ should prevent self-deactivation (1322 ms)
      ✓ should require administrators.update permission (1585 ms)
    DELETE /api/v1/administrators/:id
      ✓ should delete administrator (1389 ms)
      ✓ should prevent self-deletion (1315 ms)
      ✓ should prevent deleting last administrator with all permissions (1309 ms)
      ✓ should require administrators.delete permission (1569 ms)
      ✓ should handle non-existent administrator (1347 ms)
    POST /api/v1/administrators/:id/reset-password
      ✓ should reset administrator password (1733 ms)
      ✓ should clear login attempts on password reset (1493 ms)
      ✓ should validate password strength (1286 ms)
      ✓ should require administrators.update permission (1520 ms)
    GET /api/v1/administrators/permissions
      ✓ should get available permissions list (1193 ms)
      ✓ should require authentication (1156 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:18.184Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.323Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd72b5433fd2bf00a87a2d31c5fa1fc5b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: hCYwfxHO-IY3_kmeYEMBhXI6B4lcwJYullag

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d72b5433fd2bf00a87a2d31c5fa1fc5b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: kKZXfq_rhE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.429 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.346Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 8.815 ms - 148[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.358Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 3.271 ms - 241[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: weak, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'weak',
          msg: 'Password must be at least 8 characters long',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.374Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 3.091 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.380Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.401 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.390Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.487 ms - 160[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.395Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.940 ms - 253[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: 12345678, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '12345678',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.403Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.221 ms - 191[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.407Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.819 ms - 284[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: Password1, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'Password1',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.417Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.119 ms - 163[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.422Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.045 ms - 256[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: password123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'password123',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.431Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.166 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.435Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.791 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: ALLUPPERCASE123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'ALLUPPERCASE123!',
          msg: 'Password must contain at least one lowercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.443Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.790 ms - 168[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.447Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.639 ms - 261[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: alllowercase123!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'alllowercase123!',
          msg: 'Password must contain at least one uppercase letter',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.454Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.883 ms - 152[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.459Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.357 ms - 245[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoNumbers!, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoNumbers!',
          msg: 'Password must contain at least one number',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.468Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.103 ms - 199[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:19.481Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.379 ms - 292[0m
  console.log
    Email validation test - Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: '',
          msg: 'Valid email is required',
          path: 'email',
          location: 'body'
        },
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:77:17)

  console.log
    Test password: NoSpecialChars123, Status: 400, Body: {
      success: false,
      errors: [
        {
          type: 'field',
          value: 'NoSpecialChars123',
          msg: 'Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',
          path: 'password',
          location: 'body'
        }
      ]
    }

      at Object.log (tests/integration/passwordValidation.test.js:79:17)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.432Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cdd39cde4a1e228f8f9b989941122c2d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Txk4R89o-EUj4ay2DU2NUfENFxSoKYCkb_RA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cdd39cde4a1e228f8f9b989941122c2d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: EB-ZQZQI6C...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.577 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.442Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 119.881 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.565Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 113.796 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.682Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 116.772 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.802Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 131.785 ms - 120[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:20.937Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 116.726 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:21.907Z"}
  console.log
    CSRF token generation: {
      sessionID: '999eec4973def758bb1bfa0c364ee6fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: goH4FwTL-2oIm7O2wHToaTzDGL-AK4A24KFc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 999eec4973def758bb1bfa0c364ee6fd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: roOz2ouOb2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.300 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:21.919Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.476 ms - 166[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:22.769Z"}
  console.log
    CSRF token generation: {
      sessionID: '0bee2a1e90325ee698c88889e68146f5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: PAspblAG--Jg4MCJXAYGWSffpV8FMwcOpqf0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0bee2a1e90325ee698c88889e68146f5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VHSC9XyRD6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.684 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:22.780Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.146 ms - 167[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:23.667Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f406e6672e025d5029b33fe27c1c94c5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mqVprD5j-MswwEJTjNoHx7h3qn_EuNSEuQ7o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f406e6672e025d5029b33fe27c1c94c5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1E7bS7073w...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.128 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:23.676Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.871 ms - 180[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:23.681Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.672 ms - 181[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:23.685Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.633 ms - 182[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:23.690Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 1.732 ms - 182[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:24.578Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ad03cc7c75541781410c0756f96781b4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Nc0NdAZK-takdRmIrorOQg8sBSiH3z70Vmts

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ad03cc7c75541781410c0756f96781b4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: jnsvRsF5jX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.898 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:24.771Z"}
[0mPOST /api/v1/customers/register [33m400[0m 2.489 ms - 151[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:25.637Z"}
  console.log
    CSRF token generation: {
      sessionID: '964f80651f26242b6cb7f9cb237bfb41',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Y0Vgyzkp-T9LcVg0aONmjjNJJM0zAdwQ0svU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 964f80651f26242b6cb7f9cb237bfb41

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ayzy07iQZY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.740 ms - 67[0m
[34mdebug[39m: POST /api/v1/customers/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:25.797Z"}
  console.log
    Creating new customer with email: customer2@example.com username: customertest2

      at log (server/controllers/customerController.js:88:13)

  console.log
    Saving customer to database...

      at log (server/controllers/customerController.js:119:13)

  console.log
    Customer saved successfully with ID: CUST-0e941ca2-634b-4b32-b3f3-b6d3533a8792

      at log (server/controllers/customerController.js:121:13)

[0mPOST /api/v1/customers/register [32m201[0m 182.642 ms - 345[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:26.843Z"}
  console.log
    CSRF token generation: {
      sessionID: '8de61063a00f1a00bdeaefe81ef3ecb5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N0xvZv8V-RMZDKSzoRJicfRlCr4yyhk_3peI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8de61063a00f1a00bdeaefe81ef3ecb5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6BLeeqBBu6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.819 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:26.939Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:27.095Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:27.095Z","userId":"685ff66a50d1486736abf348","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.665 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:27.098Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '8de61063a00f1a00bdeaefe81ef3ecb5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A8de61063a00f1a00bdeaefe81ef3ecb5.Pd8hTq87%2FVxDquHLmJSMY8gwIt0fxvbBlN6jUS0Pcwc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/administrators [33m400[0m 62.345 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:28.021Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e5e26b1c7f9f6e025bd16232ff3b672',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HP3XeuCU-k97z8HwVP7YCr59w97xTNOKexmA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e5e26b1c7f9f6e025bd16232ff3b672

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0o4qaICIRQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.647 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:28.147Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:28.310Z","userType":"administrator","username":"setup@example.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:28.310Z","userId":"685ff66c50d1486736abf370","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.558 ms - 656[0m
[34mdebug[39m: POST /api/v1/administrators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:28.314Z"}
  console.log
    CSRF check for: /api/v1/administrators {
      sessionID: '3e5e26b1c7f9f6e025bd16232ff3b672',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3e5e26b1c7f9f6e025bd16232ff3b672.jcuMQHj2n7M3%2B1pQ%2FKEKN13gjvscwsg0Hnh9zoNT6qk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_ADMINISTRATOR","details":{"adminId":"ADM002","email":"newuser@example.com"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ff66c50d1486736abf37a","targetType":"administrator","timestamp":"2025-06-28T14:04:28.574Z","userId":"685ff66c50d1486736abf370","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/administrators [32m201[0m 261.707 ms - 341[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:29.442Z"}
  console.log
    CSRF token generation: {
      sessionID: '5a456cf5b4073375a6ab57ba314a0f19',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: eI9UlCjJ-bLnpPIIho97tXeFkUtxN2S4V3II

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5a456cf5b4073375a6ab57ba314a0f19

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oZQ2lVKoou...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.867 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:29.549Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:29.717Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:29.718Z","userId":"685ff66d50d1486736abf39c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.443 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:29.722Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '5a456cf5b4073375a6ab57ba314a0f19',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5a456cf5b4073375a6ab57ba314a0f19.jQDm%2Fqu9Kk65vu2bhY7AP%2BEKSm6RbzAZCROktTuvHwM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 61.427 ms - 207[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:30.639Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ea2cf04fc67e2f0fa3326b92af2466ba',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1YvGzeMM-UwJN34kgHXugQtkJsPqpPH_RdXc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ea2cf04fc67e2f0fa3326b92af2466ba

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HPJJvcY_aO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.024 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:30.753Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:30.924Z","userType":"administrator","username":"opsetup@example.com"}
info: undefined {"adminId":"ADMIN002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:30.924Z","userId":"685ff66e50d1486736abf3c4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 171.917 ms - 646[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:30.928Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'ea2cf04fc67e2f0fa3326b92af2466ba',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aea2cf04fc67e2f0fa3326b92af2466ba.mZcVoIbezEre6GAj%2BWriMKh18PmHAYfuEbeiQISyERg',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newoperator@example.com","operatorId":"OPRMCGBBJC8E1E9A4"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ff66f50d1486736abf3cd","targetType":"operator","timestamp":"2025-06-28T14:04:31.101Z","userId":"685ff66e50d1486736abf3c4","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 173.749 ms - 416[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:31.964Z"}
  console.log
    CSRF token generation: {
      sessionID: '0c047faf2b200297060be9acab9937e7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qLZhcY1J-8EdAxhvtE-HtWZ8kru8Y0IxhvUY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0c047faf2b200297060be9acab9937e7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: b8XAvKQ44k...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.623 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:32.074Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 62.687 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:32.168Z"}
[0mPOST /api/v1/auth/reset-password [33m400[0m 2.099 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:33.014Z"}
  console.log
    CSRF token generation: {
      sessionID: '0f888805894313836b7b89259f10e6f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xUnDgyNb-IHXIhC3YNWi4Htb-pUUTGP33qo0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0f888805894313836b7b89259f10e6f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lsrmNUAe2R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.009 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/forgot-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:33.130Z"}
[0mPOST /api/v1/auth/forgot-password [32m200[0m 60.463 ms - 54[0m
[34mdebug[39m: POST /api/v1/auth/reset-password {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:33.220Z"}
[0mPOST /api/v1/auth/reset-password [32m200[0m 117.494 ms - 65[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:34.194Z"}
  console.log
    CSRF token generation: {
      sessionID: 'acccfb7335174d0aeb59188f44ca6fb7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U3ghL8kV-HU0UGl6w-xg8tpgwRRxUl2aGtDc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: acccfb7335174d0aeb59188f44ca6fb7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: q6nCOR7Itm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 19.641 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:34.313Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:34.482Z","userType":"affiliate","username":"logintest"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 169.752 ms - 630[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:35.343Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b743c1dee74e397d3b8072374204603',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mP1pA48w-vdLdovMGlkj_T0pe_aC9wHifpEA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b743c1dee74e397d3b8072374204603

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yeDKIJcxw9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.051 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:35.355Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 3.041 ms - 164[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:36.213Z"}
  console.log
    CSRF token generation: {
      sessionID: '7177d6bda4f33b6c419801368657b106',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bHXY3o0T-0_0u8rpuRbFTzGwdFmQajR0AHEA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7177d6bda4f33b6c419801368657b106

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QUcZovYtdU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.822 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:36.228Z"}
[0mPOST /api/v1/affiliates/register [33m400[0m 2.730 ms - 185[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:37.078Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e27866e38468bbb6238e29050932a970',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: oBQJDsE1-TK6-6SoxLWoEvjZWA9iYIRSqBPY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e27866e38468bbb6238e29050932a970

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: O4P4sFZbQm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.690 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:37.090Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 137.624 ms - 120[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:38.080Z"}
  console.log
    CSRF token generation: {
      sessionID: '337d6867011956f2e6ca5928cb6ed4f8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WmjHKvgU-n5MtaHm4JDSji2-W6TZhjwnulEQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 337d6867011956f2e6ca5928cb6ed4f8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zwLIbPwCeM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 19.907 ms - 67[0m
[34mdebug[39m: POST /api/v1/affiliates/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:38.104Z"}
[0mPOST /api/v1/affiliates/register [32m201[0m 120.225 ms - 120[0m
PASS tests/integration/passwordValidation.test.js (21.657 s)
  Password Validation Integration Tests
    Affiliate Registration Password Validation
      ✓ should reject weak passwords during affiliate registration (1801 ms)
      ✓ should accept strong passwords during affiliate registration (1478 ms)
      ✓ should reject passwords containing username (859 ms)
      ✓ should reject passwords containing email (898 ms)
      ✓ should reject passwords with sequential characters (911 ms)
    Customer Registration Password Validation
      ✓ should enforce strong passwords for customer registration (1061 ms)
      ✓ should accept strong passwords for customer registration (1203 ms)
    Administrator Password Validation
      ✓ should enforce strong passwords for administrator creation (1178 ms)
      ✓ should accept strong passwords for administrator creation (1418 ms)
    Operator Password Validation
      ✓ should enforce strong passwords for operator creation (1198 ms)
      ✓ should accept strong passwords for operator creation (1327 ms)
    Password Reset Validation
      ✓ should enforce strong passwords during password reset (1052 ms)
      ✓ should accept strong passwords during password reset (1178 ms)
    Login with Updated Passwords
      ✓ should successfully login with strong password (1147 ms)
      ✓ should handle case-insensitive username/email validation during registration (871 ms)
    Password Strength Edge Cases
      ✓ should reject passwords with only special characters at the end (864 ms)
      ✓ should accept passwords with mixed character distribution (1003 ms)
      ✓ should handle Unicode characters in passwords appropriately (993 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:40.029Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:40.829Z"}
  console.log
    CSRF token generation: {
      sessionID: '8be401f1f5f7dbaa27e417af46abba55',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: t7NH94Wb-Yg6ED0O5kJXHvthjxO9QdPMpuR4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8be401f1f5f7dbaa27e417af46abba55

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ep1qBPzmki...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.651 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:40.938Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:41.113Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:41.113Z","userId":"685ff678922861ed8e281569","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 175.878 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:41.117Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a3d86c4346858da8ae7388109d025007',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZiV5pr9U-r9Qy7ZJklZPvJRa3wTBvRbxQjK4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a3d86c4346858da8ae7388109d025007

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OhcEpPKWNJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.710 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:41.222Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:41.384Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:41.384Z","userId":"685ff679922861ed8e28157b","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 163.087 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:41.388Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cbf13d2772032a574445d28afcb6ead3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4xDDJoHg-UcchMZIGQ1We4-yuxNTn2memFOs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cbf13d2772032a574445d28afcb6ead3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u_Ogu9lIN2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.334 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:41.676Z"}
[0mGET /api/v1/operators [32m200[0m 205.164 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:42.795Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd48eebafb7070c8fb982b9b4c7e1bdad',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: M7lyBaKY-RTOiX6VFFob_Y_kAcTQZ0dd23KA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d48eebafb7070c8fb982b9b4c7e1bdad

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: STJQpyCkKC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.414 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:42.890Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:43.040Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:43.040Z","userId":"685ff67a922861ed8e2815b4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.754 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:43.043Z"}
  console.log
    CSRF token generation: {
      sessionID: '7e73d8a37cb0e8a160e5d63928911a81',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Y1G4kkUm-S_WMrxC1ojc_nfl8pgQbWqgeU-A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7e73d8a37cb0e8a160e5d63928911a81

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OsftPRfSjo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.806 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:43.135Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:43.288Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:43.289Z","userId":"685ff67b922861ed8e2815ba","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 154.265 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:43.293Z"}
  console.log
    CSRF token generation: {
      sessionID: '7129b7a53e3b3a136ac55e9c23eb3fe8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JHHPblbc-zyHQJvDWSFP4L2s3F6_vjmw0ZIA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7129b7a53e3b3a136ac55e9c23eb3fe8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CnWuybM68F...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.048 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?active=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:43.403Z"}
[0mGET /api/v1/operators?active=true [32m200[0m 144.732 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:44.383Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd48c7b0668b4bbae3e573e7706681ea3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JJc8227h-0Qq3YZFlboWwa5uSw3oMlgC02Bg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d48c7b0668b4bbae3e573e7706681ea3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xpqJ5muyca...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.049 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:44.502Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:44.660Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:44.661Z","userId":"685ff67c922861ed8e2815e6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.323 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:44.666Z"}
  console.log
    CSRF token generation: {
      sessionID: '5f36cfd31f16505a487fcee725bf1151',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lNglCF3a-Pg8ajTmUJ__Jmimg8lEPbtoKBlY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5f36cfd31f16505a487fcee725bf1151

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: x-gs5LQlaW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 17.534 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:44.813Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:44.965Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:44.966Z","userId":"685ff67c922861ed8e2815ec","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.547 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:44.969Z"}
  console.log
    CSRF token generation: {
      sessionID: 'afeed5378c3aa805399f249f2bff247d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mHRCXjYU-aY2dWZHbqmMqYYOPq1-bZDUTcfs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: afeed5378c3aa805399f249f2bff247d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cxBLyISYc1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.135 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?onShift=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:45.082Z"}
[0mGET /api/v1/operators?onShift=true [32m200[0m 116.533 ms - 724[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:46.034Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e79535c8fbcf9ab5f45c170b40d24324',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: T1pTtlJK-CAWiu9PY1TU1BNZvlKQ3jZNrEAU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e79535c8fbcf9ab5f45c170b40d24324

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NjMT4Y1UlP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.626 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:46.135Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:46.293Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:46.293Z","userId":"685ff67e922861ed8e281617","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 159.174 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:46.298Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d81c8f07a68bfb4d3851fdd9520bb57',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 84CkMLeh-3Oedf5JyELBzNx0-sUPaGhpfFj8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4d81c8f07a68bfb4d3851fdd9520bb57

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2Kv17H7JJd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.320 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:46.418Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:46.568Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:46.568Z","userId":"685ff67e922861ed8e28161d","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.461 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:46.571Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e00993605dbae9a0661ebcfac6f81a1d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: SOMhCKuM-GD3CpnAowKfJJtCdTP2Y4TZUgXk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e00993605dbae9a0661ebcfac6f81a1d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: tCMwV4Vv-_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.971 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators?page=2&limit=5 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:47.576Z"}
[0mGET /api/v1/operators?page=2&limit=5 [32m200[0m 150.642 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:48.579Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b238d391c51212cbc47e5eee0b323acf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: FRYO95j2-c_Nr4vUPbna1Kn2GcFhX2KJMcKk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b238d391c51212cbc47e5eee0b323acf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Dmtqd1RsPm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.215 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:48.686Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:48.838Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:48.838Z","userId":"685ff680922861ed8e281666","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.484 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:48.842Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd9a99f985439849a7a0c708c23761c1b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Md0qez9s-JB3SqxqrydCzVsXFKLPrcJyR2OQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d9a99f985439849a7a0c708c23761c1b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cODQU_qhKL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.457 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:48.962Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:49.107Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:49.108Z","userId":"685ff680922861ed8e28166c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.433 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:49.111Z"}
  console.log
    CSRF token generation: {
      sessionID: '1a51b523f12d827e43b5c138bf5fb409',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8mQGsOFk-lejgseSXNxtv4WEcfuazS89bM54

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1a51b523f12d827e43b5c138bf5fb409

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: X_FvbRnwmh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.057 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:49.121Z"}
[0mGET /api/v1/operators [33m401[0m 1.222 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.024Z"}
  console.log
    CSRF token generation: {
      sessionID: '59d3a63f71741ecd03d05ec851d08136',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mXzyfHI7-KHbIXk2BjB5QH5_mVxZXRUaIumQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 59d3a63f71741ecd03d05ec851d08136

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 4caAyY7tSh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.496 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.167Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:50.349Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:50.350Z","userId":"685ff682922861ed8e281691","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 182.729 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.353Z"}
  console.log
    CSRF token generation: {
      sessionID: '246be63edd1e9ce4bf8b9572dff10cf3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kukj0Jcz-1U96ww0hzJQVE60Q6hd3waIElUA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 246be63edd1e9ce4bf8b9572dff10cf3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: I0RtmBV_Vh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.011 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.453Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:50.605Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:50.605Z","userId":"685ff682922861ed8e281697","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.526 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.609Z"}
  console.log
    CSRF token generation: {
      sessionID: '358f3588072a76a289330f593ab9195a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DaZnQQFo-UHWmE0X9LDBd2fR8PeUCItfer_k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 358f3588072a76a289330f593ab9195a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KTMGMrjaIT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.020 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.722Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:50.888Z","userType":"administrator","username":"limited@wavemax.com"}
info: undefined {"adminId":"LIMITED001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:50.889Z","userId":"685ff682922861ed8e28169d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 166.351 ms - 649[0m
[34mdebug[39m: GET /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:50.892Z"}
[0mGET /api/v1/operators [33m403[0m 58.368 ms - 79[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:51.821Z"}
  console.log
    CSRF token generation: {
      sessionID: '2136914407969097107a263374e8fb4a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: aLewwfII-6BOqtTdSsRtzyXuYY-2l_k_Buu0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2136914407969097107a263374e8fb4a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: HGhxlJBFSd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.412 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:51.934Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:52.084Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:52.084Z","userId":"685ff683922861ed8e2816c4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.248 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:52.088Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c9e33bb780ac079030ee82bab6cfc40',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: o4wSk7FP-j7cuVha4rtFU4WNZAZJsPO8JHdw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8c9e33bb780ac079030ee82bab6cfc40

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wu1aEN0k8u...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.239 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:52.203Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:52.364Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:52.366Z","userId":"685ff684922861ed8e2816ca","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 162.232 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:52.370Z"}
  console.log
    CSRF token generation: {
      sessionID: '2954a846b3b1a55ea17f06862d6b35eb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QGE1hMZp-YEtmEyyyJZkQ1MiDBfy54LTqfB8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2954a846b3b1a55ea17f06862d6b35eb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rrO9CjEat5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.947 ms - 67[0m
[34mdebug[39m: GET /api/v1/administrators/operators/685ff684922861ed8e2816d0 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:52.480Z"}
[0mGET /api/v1/administrators/operators/685ff684922861ed8e2816d0 [32m200[0m 117.693 ms - 761[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.449Z"}
  console.log
    CSRF token generation: {
      sessionID: '3f7e4b6de29dcaa4310ee995fb639cf1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v71gZaHw-oniVmsQhbTDN4hIrflAQlfS_RHg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3f7e4b6de29dcaa4310ee995fb639cf1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: faew8kHqVA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.390 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.549Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:53.705Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:53.705Z","userId":"685ff685922861ed8e2816f5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.489 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.709Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c8de4a87c5781b18f730e4b33bba7fa5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QhP25EhZ-0O2UNVZbi-I4WcJkpQalpVswFzI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c8de4a87c5781b18f730e4b33bba7fa5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VVPtPB2MNG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.289 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.804Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:53.961Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:53.961Z","userId":"685ff685922861ed8e2816fb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 156.701 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.964Z"}
  console.log
    CSRF token generation: {
      sessionID: '2e668073cd1c72e55f1f80b902f1bc5b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: JdFHmwIm-bnfRJXOdJJzfvwxG9IWxnfbYUIo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2e668073cd1c72e55f1f80b902f1bc5b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B5B_zJNsJT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.736 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ff685922861ed8e2816fb {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:53.974Z"}
[0mGET /api/v1/operators/685ff685922861ed8e2816fb [32m200[0m 87.173 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:54.913Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fca6062cc8d7a3e02958fd018c62bd87',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bIqmx2ox--W70jTFT1bRMm3MOEoE7o9fTmBQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fca6062cc8d7a3e02958fd018c62bd87

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Og_EGzdRil...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.490 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:55.014Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:55.176Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:55.177Z","userId":"685ff686922861ed8e281723","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 163.305 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:55.180Z"}
  console.log
    CSRF token generation: {
      sessionID: '5ef8795a232e85b330cf3280464f263e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Gl1hRHAh-WR-75dJ7BiFjbtJj3BAT78YyQXQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5ef8795a232e85b330cf3280464f263e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: _BntzDNoRk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.260 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:55.280Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:55.437Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:55.437Z","userId":"685ff687922861ed8e281729","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 157.033 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:55.441Z"}
  console.log
    CSRF token generation: {
      sessionID: '09ea098a5b817a164d9676c3177f2551',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xRTMb7Av-juZ9lzXGrUsVlgWapjnfKcR-tK4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 09ea098a5b817a164d9676c3177f2551

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rgN01O6U5h...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.465 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ff687922861ed8e28172f {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:55.547Z"}
[0mGET /api/v1/operators/685ff687922861ed8e28172f [33m403[0m 56.794 ms - 68[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.462Z"}
  console.log
    CSRF token generation: {
      sessionID: '5595eb3ec404a9421fd58bff65b5488c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gCStKWmL-aNPual_BZVhv-IHP6blFOMxntBc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5595eb3ec404a9421fd58bff65b5488c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: SCPbxcqRfP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.574 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.560Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:56.716Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:56.716Z","userId":"685ff688922861ed8e281752","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 156.409 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.719Z"}
  console.log
    CSRF token generation: {
      sessionID: '3543a419ef3b667abdf3f9dfd54056e4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WLUPVOQW-2fxHCc1C8Ja9q0ZPikGQ1xLCYKg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3543a419ef3b667abdf3f9dfd54056e4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6gQPq3bl4q...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.143 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.821Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:56.966Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:56.967Z","userId":"685ff688922861ed8e281758","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 145.237 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.970Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a7202b9e7ed9eb983c9cfeb52ba89b27',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0FQUUzx2-MuznVDPMgEnwnp3-g12Ex1q4h4U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a7202b9e7ed9eb983c9cfeb52ba89b27

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LZqhbiVWr5...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.781 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/685ff688922861ed8e28175e {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:56.980Z"}
[0mGET /api/v1/operators/685ff688922861ed8e28175e [33m404[0m 114.660 ms - 48[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.162Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b74350cc5420ae71c72a184726a2a840',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KuNxxygj-SHvytsASFI6M4yLg0XwDSoCpV7k

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b74350cc5420ae71c72a184726a2a840

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LMswfXZnQt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.396 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.262Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:58.408Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:04:58.409Z","userId":"685ff68a922861ed8e281782","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.606 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.412Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd895e4998d13983ec0d5dcf481fb3bf6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xYLjwQek-jXm-f5g68_Wjk9xIfJTRuE9Hfes

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d895e4998d13983ec0d5dcf481fb3bf6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pppIo5dmeB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.326 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.510Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:58.659Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:58.660Z","userId":"685ff68a922861ed8e281788","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.400 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.662Z"}
  console.log
    CSRF token generation: {
      sessionID: '12bfb8c8a7dc08c91fa3595c857f1e3f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 42nZp8Fe-2u8P-lhFOWe7E69gNq4Es6ecmGc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 12bfb8c8a7dc08c91fa3595c857f1e3f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LXodQxRb2H...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.322 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.671Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'd895e4998d13983ec0d5dcf481fb3bf6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad895e4998d13983ec0d5dcf481fb3bf6.yy%2B%2BxqjRTCPQdYmLmpKUGqtyXhtyydHnCCjmypsArvI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"CREATE_OPERATOR","details":{"email":"newop@wavemax.com","operatorId":"OPRMCGBC4QU557D7A"},"ip":"::ffff:127.0.0.1","method":"POST","path":"/","targetId":"685ff68a922861ed8e281791","targetType":"operator","timestamp":"2025-06-28T14:04:58.841Z","userId":"685ff68a922861ed8e281782","userRole":"administrator","userType":"administrator"}
[0mPOST /api/v1/operators [32m201[0m 170.952 ms - 449[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:58.844Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:04:58.993Z","userType":"operator","username":"newop@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPRMCGBC4QU557D7A","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:04:58.994Z","userId":"685ff68a922861ed8e281791","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.511 ms - 621[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:59.840Z"}
  console.log
    CSRF token generation: {
      sessionID: 'aaa9620d1532e790db8593d3e678b4ef',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HkXSedm3-K-FQ3hZSGFI7H5uAjk0hXkSdI_U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: aaa9620d1532e790db8593d3e678b4ef

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ZSQL7H8Pix...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.477 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:04:59.929Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:00.072Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:00.072Z","userId":"685ff68b922861ed8e2817b6","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 143.643 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:00.076Z"}
  console.log
    CSRF token generation: {
      sessionID: '3c4926c6f701f046c7678e1becc38dcf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gOtoU5wL-tgzhQOUJmcNSHsfTSOLcpaIFBu0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3c4926c6f701f046c7678e1becc38dcf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: K7Ls2y6jEr...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.824 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:00.171Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:00.323Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:00.323Z","userId":"685ff68c922861ed8e2817bc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.704 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:00.326Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce71897a6fd26d1759cddf5f8af46b64',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qCOl1nne-BUY-ENdvFcHu0AI4EHqNTEnGOCY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ce71897a6fd26d1759cddf5f8af46b64

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ie7xnlhs5r...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.101 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:00.335Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '3c4926c6f701f046c7678e1becc38dcf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3c4926c6f701f046c7678e1becc38dcf.lJH8%2FXhDoYC1DUiItZYEcU99biRUHIYjl%2FU%2B96Vh06k',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 58.721 ms - 309[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.266Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b5bc82cdfbfb9bdd644340c9ef96dc45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: U6XizHnN-6y4sZGKwPw2TGDUixxDIjTxPglc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b5bc82cdfbfb9bdd644340c9ef96dc45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: esYe8PQFRT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.794 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.364Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:01.509Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:01.509Z","userId":"685ff68d922861ed8e2817e3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 145.634 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.512Z"}
  console.log
    CSRF token generation: {
      sessionID: '37da69ae0b4bd3c29029a625ab7a7026',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DLRoVdSf-75SN1SheeOENpMj4K3Mwwh818bA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 37da69ae0b4bd3c29029a625ab7a7026

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Oibp8f4piS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.889 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.627Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:01.798Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:01.799Z","userId":"685ff68d922861ed8e2817e9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 171.970 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.803Z"}
  console.log
    CSRF token generation: {
      sessionID: '80daecc6c75c9c4ed4c9714f289215ae',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WI4pqHrl-RhIBaXcfmz2YGfpfRGwHwnYQl7E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 80daecc6c75c9c4ed4c9714f289215ae

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8noQFlCJnT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.685 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:01.816Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '37da69ae0b4bd3c29029a625ab7a7026',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A37da69ae0b4bd3c29029a625ab7a7026.QXtFsOHntJQ9C5BE8cwY3BLxKq50jfLh9C0R2j6pFQA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 75.508 ms - 170[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:02.787Z"}
  console.log
    CSRF token generation: {
      sessionID: '45b6cbf176fcb9080869aa06ed62d435',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OwqjUOmU-TG8Tg9f15ABw6gUAwaqtYOnjvlQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 45b6cbf176fcb9080869aa06ed62d435

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: smnUWSUsuB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 13.905 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:02.901Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:03.054Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:03.054Z","userId":"685ff68e922861ed8e281810","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 153.278 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:03.058Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e1c3c70f7cdfb3e37f3f2e86588ca35e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6HD9ctXM-AHh0yTW2Ci_iHjFVIxYh_-oDX8c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e1c3c70f7cdfb3e37f3f2e86588ca35e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ojd7v2mJhj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.499 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:03.162Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:03.310Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:03.311Z","userId":"685ff68f922861ed8e281816","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.640 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:03.316Z"}
  console.log
    CSRF token generation: {
      sessionID: '104e3f5969315a79fd66a7d1074d7412',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4W0Q2RcH-g10z47pGglohWt2HsFRzX5tCRcE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 104e3f5969315a79fd66a7d1074d7412

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2pPmBd1JXC...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.825 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:03.333Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: 'e1c3c70f7cdfb3e37f3f2e86588ca35e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae1c3c70f7cdfb3e37f3f2e86588ca35e.HcyrMvqfHN0kNBOrCDW0WM%2FdEDz9naL%2FmZjrT9pHAqU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m400[0m 59.081 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.241Z"}
  console.log
    CSRF token generation: {
      sessionID: '4b2058bf294a5d75c5d8d7093d9c9ff6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: V1YLTE90-JOrHkrn2HCsOh_o6pmlgpEPe8NI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4b2058bf294a5d75c5d8d7093d9c9ff6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pXtvlPvwTU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.590 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.358Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:04.508Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:04.509Z","userId":"685ff690922861ed8e28183d","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.069 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.512Z"}
  console.log
    CSRF token generation: {
      sessionID: '0b70d173c8e28203ef736182b541f079',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ghptggd7-4xCh9WrYoFgBO9XhyjqZDiOXeKY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0b70d173c8e28203ef736182b541f079

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rpwx6ZsKCZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.887 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.630Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:04.781Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:04.782Z","userId":"685ff690922861ed8e281843","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.915 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.787Z"}
  console.log
    CSRF token generation: {
      sessionID: '04b556755f2c6e99c176f1c6c3153f0b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WDq8SjBA-fTZy7CJ-NqLd9wtmoYiec3ANL7A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 04b556755f2c6e99c176f1c6c3153f0b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mk0x_tZtxS...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.203 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:04.801Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '0b70d173c8e28203ef736182b541f079',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0b70d173c8e28203ef736182b541f079.77eamgz1SpmzMKiDL9gbHpzhwJ6L5pC553wfDyydFoI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m409[0m 88.091 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:05.729Z"}
  console.log
    CSRF token generation: {
      sessionID: '17cb81fa20590c3e5f13e2bd140e9402',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7CpD6D5q-9SDILD72Yq1t1NswPcD82RzCmFs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 17cb81fa20590c3e5f13e2bd140e9402

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Cow54NUJhp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.678 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:05.833Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:05.990Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:05.990Z","userId":"685ff691922861ed8e28186b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.350 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:05.993Z"}
  console.log
    CSRF token generation: {
      sessionID: '4804a09fa49bddfd135e413c20c5c4d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Da56H9SE-nechGpIetcPVeLqvBVIjqCyPgGg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4804a09fa49bddfd135e413c20c5c4d4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QWNb7l66r1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.782 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:06.088Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:06.241Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:06.242Z","userId":"685ff692922861ed8e281871","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.933 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:06.246Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c87bc83f0dbd78386a56b2bed495ac89',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: asrCxGPd-x2UcDDjaIAqylDx7SZYjReENOxk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c87bc83f0dbd78386a56b2bed495ac89

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2LBbRrDl1r...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.573 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:06.354Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:06.505Z","userType":"administrator","username":"limited2@wavemax.com"}
info: undefined {"adminId":"LIMITED002","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:06.506Z","userId":"685ff692922861ed8e281877","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.930 ms - 655[0m
[34mdebug[39m: POST /api/v1/operators {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:06.508Z"}
  console.log
    CSRF check for: /api/v1/operators {
      sessionID: '17cb81fa20590c3e5f13e2bd140e9402',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A17cb81fa20590c3e5f13e2bd140e9402.1DdFzA8HKEcONGyk44VkbOl6sdGj6yt54T4Cl1FJJxk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/operators [33m403[0m 58.582 ms - 81[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:07.410Z"}
  console.log
    CSRF token generation: {
      sessionID: '594afedd071f49172658810254ba57e9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iKJlu4dy-WMYbD47TLUEWAk6Fmyf3xsOMD68

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 594afedd071f49172658810254ba57e9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dbKweWvzSD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.561 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:07.504Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:07.651Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:07.651Z","userId":"685ff693922861ed8e28189e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 147.822 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:07.654Z"}
  console.log
    CSRF token generation: {
      sessionID: '3835d7b17237f6c73377c0a9d7295ed1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zNs7Zomf-DJ37WRB111hmDIHnXnMQUeidGlo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3835d7b17237f6c73377c0a9d7295ed1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PXIwtAjnTv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.263 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:07.751Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:07.899Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:07.900Z","userId":"685ff693922861ed8e2818a4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.242 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:07.903Z"}
  console.log
    CSRF token generation: {
      sessionID: '25834b4ea530c0e92287408f4e8bba44',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4jFWzIfo-uB6H0le4OfxlNMOPF3eFCQAtC7g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 25834b4ea530c0e92287408f4e8bba44

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 8dfKipoSQX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.197 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff693922861ed8e2818aa {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:08.008Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff693922861ed8e2818aa {
      sessionID: '3835d7b17237f6c73377c0a9d7295ed1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3835d7b17237f6c73377c0a9d7295ed1.PVMZaKQVK%2Bjowan9m6bNn4MnHhVPqKo5QNt7ThldqQo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"firstName":"Updated","lastName":"Name","shiftEnd":"18:00","shiftStart":"10:00"}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ff693922861ed8e2818aa","targetId":"685ff693922861ed8e2818aa","targetType":"operator","timestamp":"2025-06-28T14:05:08.156Z","userId":"685ff693922861ed8e28189e","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ff693922861ed8e2818aa [32m200[0m 148.849 ms - 442[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.005Z"}
  console.log
    CSRF token generation: {
      sessionID: '361025e83ae5359c0471dc841381fae3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iDcH44Pn-Ork5kQ3rgezccpHdrRafGjgYj1o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 361025e83ae5359c0471dc841381fae3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 6EsrrN1X82...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.639 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.106Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:09.272Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:09.272Z","userId":"685ff695922861ed8e2818d0","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.990 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.275Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c7e604a81f94f1b9f2d8d3a0523a6cd6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: J2PTsjRz--xON8auxsYKBMaI29XJ0CNSn_F0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c7e604a81f94f1b9f2d8d3a0523a6cd6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WQrHrdD7zM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.423 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.372Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:09.514Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:09.514Z","userId":"685ff695922861ed8e2818d6","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 142.154 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.518Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ee46f57a1a0abe99d21fe6544e55b987',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uLUrRwmX-f6jV4Dpqa5MLyedqEhAl6QYOrJM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ee46f57a1a0abe99d21fe6544e55b987

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NGcPcnBSnv...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.260 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff695922861ed8e2818dc {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.623Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff695922861ed8e2818dc {
      sessionID: 'c7e604a81f94f1b9f2d8d3a0523a6cd6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac7e604a81f94f1b9f2d8d3a0523a6cd6.4rIheWXGkIj%2FB%2BzfCFPtk%2BwZ13E7OLcs5VGti2Y1OjI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ff695922861ed8e2818dc","targetId":"685ff695922861ed8e2818dc","targetType":"operator","timestamp":"2025-06-28T14:05:09.882Z","userId":"685ff695922861ed8e2818d0","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ff695922861ed8e2818dc [32m200[0m 259.809 ms - 445[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:09.887Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:10.039Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:10.040Z","userId":"685ff695922861ed8e2818dc","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.284 ms - 606[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:10.875Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e0d3751479cc24917f1e348c9bda227a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: AyZl8spd-hLQfzf716854O0uCoPcolFvjJ7Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e0d3751479cc24917f1e348c9bda227a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DaSc2K4A3d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.467 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:10.981Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:11.132Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:11.132Z","userId":"685ff696922861ed8e281908","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 151.329 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:11.135Z"}
  console.log
    CSRF token generation: {
      sessionID: '0afda8f871c0d5b93be6a5741e05c262',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5epkLQza-nmiy84Um-6JQnECAqDR9gTeW8ss

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0afda8f871c0d5b93be6a5741e05c262

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ow1rQ3naLJ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.256 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:11.232Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:11.376Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:11.376Z","userId":"685ff697922861ed8e28190e","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 143.581 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:11.379Z"}
  console.log
    CSRF token generation: {
      sessionID: '5f2d5c76951c0a20cc066b4cb0ee0b9b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6dLoUqXe-TnEwGjrHECgEFrJoNPaqkOQq7xI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5f2d5c76951c0a20cc066b4cb0ee0b9b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3EQHS-5iIW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.823 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff697922861ed8e281914 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:11.503Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff697922861ed8e281914 {
      sessionID: '0afda8f871c0d5b93be6a5741e05c262',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0afda8f871c0d5b93be6a5741e05c262.zCRnPPaHO7QinfsbhaFAlAsKpAiyjhQU8F0kt7VtfDE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{"isActive":false}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ff697922861ed8e281914","targetId":"685ff697922861ed8e281914","targetType":"operator","timestamp":"2025-06-28T14:05:11.650Z","userId":"685ff696922861ed8e281908","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ff697922861ed8e281914 [32m200[0m 147.281 ms - 446[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:11.653Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T14:05:11.682Z","userType":"operator","username":"target@wavemax.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.814 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:12.522Z"}
  console.log
    CSRF token generation: {
      sessionID: '7ac6e9141a548f763b6d02fa27e2dcd3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xTsHj5AG-ECQ-oWiWjxl2lTGtr3K5ePXWHkI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7ac6e9141a548f763b6d02fa27e2dcd3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: u_CKXrlGqK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.097 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:12.636Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:12.803Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:12.803Z","userId":"685ff698922861ed8e28193b","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 167.112 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:12.807Z"}
  console.log
    CSRF token generation: {
      sessionID: '19917d04181b66691c565b7227c4924e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7Z6tEQmU-VUHxoxSaClRQKL-NsZUoqhoQk4E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 19917d04181b66691c565b7227c4924e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: okNVjt2It8...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.302 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:12.938Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:13.090Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:13.091Z","userId":"685ff698922861ed8e281941","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.740 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:13.094Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4838221c35ea5b00b51993d016680b7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OeLQZFWK-r2m8VLQ3aAPIghR2HpFM2VcNjm8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4838221c35ea5b00b51993d016680b7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: vUsMJxeH08...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.175 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:13.197Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:13.346Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:13.347Z","userId":"685ff699922861ed8e281947","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.174 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff699922861ed8e281947 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:13.350Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff699922861ed8e281947 {
      sessionID: '7ac6e9141a548f763b6d02fa27e2dcd3',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7ac6e9141a548f763b6d02fa27e2dcd3.x14kD7qvU%2B9P0JlHlukGc33tjkCnqPPOgsDbQuFqKeM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff699922861ed8e281947 [32m200[0m 195.179 ms - 240[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:14.400Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b1bb85c9ee583de54d7b8f59df9f2766',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: DaPYwoDM-BjgYa67JlZtjXpWhgfaRU6khU1c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b1bb85c9ee583de54d7b8f59df9f2766

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oeLXqUv0Q4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.563 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:14.513Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:14.686Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:14.686Z","userId":"685ff69a922861ed8e281970","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 173.362 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:14.690Z"}
  console.log
    CSRF token generation: {
      sessionID: '0209f9861202bf14ecce2c8e40c570f9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9GQ8nk4E-kxnw7JL0hW4EBY3KgYt6pgHIAlA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0209f9861202bf14ecce2c8e40c570f9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 3Zbqul8UYH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.773 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:14.809Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:14.957Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:14.957Z","userId":"685ff69a922861ed8e281976","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.134 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:14.961Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a68858857de49c35304adf55cc0dba01',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: YfkBirMI-URguj14bMuVTsN5HPF_1XI2WcHI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a68858857de49c35304adf55cc0dba01

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -WUckW6k5D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.218 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:15.078Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:15.244Z","userType":"operator","username":"target@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"TARGET001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:15.245Z","userId":"685ff69a922861ed8e28197c","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 167.230 ms - 606[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff69a922861ed8e28197c {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:15.248Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff69a922861ed8e28197c {
      sessionID: 'b1bb85c9ee583de54d7b8f59df9f2766',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ab1bb85c9ee583de54d7b8f59df9f2766.N9kMwFLCLmUsKrLPlh9G%2FcUOp9au9CuppRN9VMSjp4A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff69a922861ed8e28197c [32m200[0m 119.708 ms - 245[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.215Z"}
  console.log
    CSRF token generation: {
      sessionID: '1cb13d04589b57517246d3448577ee34',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B5WdL1JK-2ij1Y1NT2oyZfKXSsIOFNe-gEe0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1cb13d04589b57517246d3448577ee34

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: mtmxGvZgLZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.410 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.312Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:16.457Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:16.458Z","userId":"685ff69c922861ed8e2819a5","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 146.309 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.461Z"}
  console.log
    CSRF token generation: {
      sessionID: '022c66e67c014485b489827a9f2d81bf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GSHSePUT-Wnb7IDGYvXoBTHH3-t6GgtUTRF8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 022c66e67c014485b489827a9f2d81bf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QXQeg7Ns5j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.394 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.555Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:16.709Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:16.710Z","userId":"685ff69c922861ed8e2819ab","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 155.686 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.713Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bce6b4dd0b2ae4996e5fa6251809e239',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GvtPtOzo-kLSs4WkwAXLzezW7EaEbPa0L3AM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bce6b4dd0b2ae4996e5fa6251809e239

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: WMc-bhfkZT...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.906 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff69c922861ed8e2819b1 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:16.831Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff69c922861ed8e2819b1 {
      sessionID: '022c66e67c014485b489827a9f2d81bf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A022c66e67c014485b489827a9f2d81bf.CykaM2JBblLQ23BVuDfZr%2FKK00LKTb7xBevQvRC%2FJ%2Bw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"action":"UPDATE_OPERATOR","details":{"updates":{}},"ip":"::ffff:127.0.0.1","method":"PATCH","path":"/685ff69c922861ed8e2819b1","targetId":"685ff69c922861ed8e2819b1","targetType":"operator","timestamp":"2025-06-28T14:05:16.976Z","userId":"685ff69c922861ed8e2819a5","userRole":"administrator","userType":"administrator"}
[0mPATCH /api/v1/operators/685ff69c922861ed8e2819b1 [32m200[0m 145.769 ms - 445[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:17.821Z"}
  console.log
    CSRF token generation: {
      sessionID: '999c0ff96afe8b1972413a0586d37935',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: iWqVNbh0-TSHc2HHWgzqq6qtUsUtdNdvFy7s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 999c0ff96afe8b1972413a0586d37935

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Sp61TZuGy9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.033 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:17.940Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:18.105Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:18.106Z","userId":"685ff69d922861ed8e2819d7","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.633 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:18.109Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd352b92063f406e89f2d13d5bbfe381e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: v7Urd7F8-0LlnmKo-7oMe7dQRJqH7YbJKZ6E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d352b92063f406e89f2d13d5bbfe381e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9xjQvHejt-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.448 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:18.209Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:18.394Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:18.394Z","userId":"685ff69e922861ed8e2819dd","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 185.282 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:18.397Z"}
  console.log
    CSRF token generation: {
      sessionID: '66bb8cc8ef41bdb10451462fb2653828',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dWTSMGAZ-LSkzQyMlxq2WJuUa-yjGXP9V1U0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66bb8cc8ef41bdb10451462fb2653828

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5hXZqRkiRe...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.079 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff69e922861ed8e2819e3 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:18.496Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff69e922861ed8e2819e3 {
      sessionID: 'd352b92063f406e89f2d13d5bbfe381e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ad352b92063f406e89f2d13d5bbfe381e.zoWREkMVlU6GXpQB2VSQSqh0lGX3KdAQqVtTTNeqnC8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff69e922861ed8e2819e3 [33m409[0m 142.246 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:19.484Z"}
  console.log
    CSRF token generation: {
      sessionID: '1dc38461587480063dd3305efbd0d30b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HcKZlz3F-oCV_8hXjGf6kuwxtEz7rJ6jPeg8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1dc38461587480063dd3305efbd0d30b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cMUflYh3II...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.663 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:19.587Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:19.737Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:19.737Z","userId":"685ff69f922861ed8e281a09","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.131 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:19.740Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bb75739bc7c37be04fb158812d34ff5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: fn5Af9IG-YdG_pXobFCC-bDrkKrt_bG2b2bE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bb75739bc7c37be04fb158812d34ff5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U0B3zHwY5O...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.321 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:19.847Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:20.007Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:20.007Z","userId":"685ff69f922861ed8e281a0f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 160.830 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:20.011Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ce6194a393f65d64fef973565d3853d9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3cnAzPFI-aq7cCyQefIic3rhA3PPMf3g9hyQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ce6194a393f65d64fef973565d3853d9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nW46lsfqUl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.725 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ff6a0922861ed8e281a15 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:20.119Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a0922861ed8e281a15 {
      sessionID: 'bb75739bc7c37be04fb158812d34ff5d',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abb75739bc7c37be04fb158812d34ff5d.exTEZ3VwGFNIOfSVgTE26iLdO4Qw4cXWs5SaTuk3JxA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"8","12":"6","13":"1","14":"e","15":"d","16":"8","17":"e","18":"2","19":"8","2":"5","20":"1","21":"a","22":"0","23":"9","3":"f","4":"f","5":"6","6":"9","7":"f","8":"9","9":"2","timestamp":"2025-06-28T14:05:20.266Z"}
[0mDELETE /api/v1/operators/685ff6a0922861ed8e281a15 [32m200[0m 146.730 ms - 58[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:20.875Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.149Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e816a4881c1d033a80ab93b2bf8b87f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CcDwnkDX-otaa3JdaL_o1Tktk5OwVRREIyWs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0e816a4881c1d033a80ab93b2bf8b87f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cL0W9ppLoG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.940 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.251Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:21.425Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:21.425Z","userId":"685ff6a1922861ed8e281a3c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 174.282 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.429Z"}
  console.log
    CSRF token generation: {
      sessionID: '66bc50b9873f737478e66f66dee21bf8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: s1XdKe21-xzBT_LZfIqpN6IIdPCVa6jwRtUo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66bc50b9873f737478e66f66dee21bf8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VsNqAhqmy2...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.306 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.534Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:21.683Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:21.684Z","userId":"685ff6a1922861ed8e281a42","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.495 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.687Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cf3bcc0b74f4e4a4aa9471c05523017b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mgcNt7Px-KPsyNcwitmuQ5YWQt4pNMeqpN0U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cf3bcc0b74f4e4a4aa9471c05523017b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Sc0IMId6QW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.531 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ff6a1922861ed8e281a48 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:21.823Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a1922861ed8e281a48 {
      sessionID: '66bc50b9873f737478e66f66dee21bf8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A66bc50b9873f737478e66f66dee21bf8.W1wuCR1%2BsGrFe7n1e8aeSTTJCMNBAyedzm0jhw5nwdA',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ff6a1922861ed8e281a48 [33m400[0m 117.240 ms - 71[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:22.599Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:22.791Z"}
  console.log
    CSRF token generation: {
      sessionID: '178c02d72e7c0174a84aaec071aea9fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: J58aovki-DoE-4XsaZwgQDNn6ZEr56fWPqLY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 178c02d72e7c0174a84aaec071aea9fd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Zk54FQQ3Eh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.474 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:22.887Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:23.038Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:23.039Z","userId":"685ff6a2922861ed8e281a6e","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.226 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:23.043Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c5f370ceafde9cf645f102f54ae2b9c3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7dXGVbw5-0gGG0GvkmxI68zwHvTI_JMdsBOo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c5f370ceafde9cf645f102f54ae2b9c3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: oLRxhkC1Fh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.929 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:23.146Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:23.297Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:23.297Z","userId":"685ff6a3922861ed8e281a74","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.275 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:23.300Z"}
  console.log
    CSRF token generation: {
      sessionID: '86a02bc6847fdb5245356f08b29d91af',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Eftsi0Yj-tUPtFyA2BE_CsbpksXzmXxqemk8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 86a02bc6847fdb5245356f08b29d91af

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nx0-s-mzVU...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.608 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:23.499Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:23.654Z","userType":"administrator","username":"limited3@wavemax.com"}
info: undefined {"adminId":"LIMITED003","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:23.654Z","userId":"685ff6a3922861ed8e281a7c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 155.248 ms - 655[0m
[34mdebug[39m: DELETE /api/v1/operators/685ff6a3922861ed8e281a7a {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:23.657Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a3922861ed8e281a7a {
      sessionID: '178c02d72e7c0174a84aaec071aea9fd',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A178c02d72e7c0174a84aaec071aea9fd.9IGu1%2FZ3E4ltoNBXuvCJ6bYvXNGwpWLQtBSxvX%2BiJHI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ff6a3922861ed8e281a7a [33m403[0m 60.377 ms - 81[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:24.248Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:24.578Z"}
  console.log
    CSRF token generation: {
      sessionID: '15b39d5aebad0e58f1e3ef53ca7110e1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: feORCdpk-ZU8iUp8x_GFudIFTj77kezYhf78

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 15b39d5aebad0e58f1e3ef53ca7110e1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Jv1voh1USy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.510 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:24.676Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:24.826Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:24.826Z","userId":"685ff6a4922861ed8e281aa3","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.220 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:24.829Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ac718667baec3c2ece6f9a782906d4d6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: lPlHxz0x-ye0BQzhClF1_RSUeiGeik3eUlaI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ac718667baec3c2ece6f9a782906d4d6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Yrj12pcWxG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.048 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:24.928Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:25.081Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:25.081Z","userId":"685ff6a4922861ed8e281aa9","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 153.038 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:25.085Z"}
  console.log
    CSRF token generation: {
      sessionID: '28d7caf453f0d4a4d393404000b2c8bd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ojrlddBD-lfNUO3O1SEhqFUS9cVg79t841w4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 28d7caf453f0d4a4d393404000b2c8bd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XjCNdKQX-S...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.742 ms - 67[0m
[34mdebug[39m: DELETE /api/v1/operators/685ff6a5922861ed8e281ab1 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:25.187Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a5922861ed8e281ab1 {
      sessionID: 'ac718667baec3c2ece6f9a782906d4d6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aac718667baec3c2ece6f9a782906d4d6.eND2jWB4DKmfBuEjkom3CvhUXk%2FDNWbnTMdufraJLkE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mDELETE /api/v1/operators/685ff6a5922861ed8e281ab1 [33m404[0m 86.051 ms - 48[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:25.897Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.120Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e5ae30c049b3bf6d599d988370698ed',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N8YUoOPh-OOkC83MrQze_VmZPIzkWjR8TmOU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e5ae30c049b3bf6d599d988370698ed

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: U7tb0iA2kL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.160 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.225Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:26.390Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:26.390Z","userId":"685ff6a6922861ed8e281ad4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.854 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.394Z"}
  console.log
    CSRF token generation: {
      sessionID: '05cf2a55b3d3a726f469efc4f5c2dee0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ZH5cPNv5-ssIossqMCgQW4y2manxpUqD9AKQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 05cf2a55b3d3a726f469efc4f5c2dee0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: lgciGYpnQR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.406 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.508Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:26.656Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:26.656Z","userId":"685ff6a6922861ed8e281ada","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.914 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.660Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c76aea68b598980f671ca5f5c61aa77a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 8yQ4X7jm-WpxSq9fUjSMWwKofjitvw6tJkLM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c76aea68b598980f671ca5f5c61aa77a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: JocUyZta3x...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.183 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ff6a6922861ed8e281ae0/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.761Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a6922861ed8e281ae0/reset-pin {
      sessionID: '05cf2a55b3d3a726f469efc4f5c2dee0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A05cf2a55b3d3a726f469efc4f5c2dee0.dm9ofrbidJ8wmGVxXHJKC3LbL0W%2FbARfOzpMf6D7XzM',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"8","12":"6","13":"1","14":"e","15":"d","16":"8","17":"e","18":"2","19":"8","2":"5","20":"1","21":"a","22":"d","23":"4","3":"f","4":"f","5":"6","6":"a","7":"6","8":"9","9":"2","timestamp":"2025-06-28T14:05:26.944Z"}
[0mPOST /api/v1/operators/685ff6a6922861ed8e281ae0/reset-pin [32m200[0m 183.834 ms - 51[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:26.948Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:27.100Z","userType":"operator","username":"pinreset@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"PIN001","path":"/operator/login","shift":"undefined - undefined","timestamp":"2025-06-28T14:05:27.100Z","userId":"685ff6a6922861ed8e281ae0","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 152.838 ms - 555[0m
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:27.658Z"}
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:27.949Z"}
  console.log
    CSRF token generation: {
      sessionID: '51d4f53137def51590d6a9e2309d7099',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 0CXYr98V-qkBt5FmeMw-hWGsbL7pauqKjymk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 51d4f53137def51590d6a9e2309d7099

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rDy2YJ7ZxA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.042 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:28.048Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:28.196Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:28.197Z","userId":"685ff6a8922861ed8e281b09","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.678 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:28.201Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ec86ab12bb451c1aeae90cddacb95467',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: IsB5Qxw2-4ATF5aLxfBOPsdc1LsRsA6e7vCM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ec86ab12bb451c1aeae90cddacb95467

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yZgBjCNcKn...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.652 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:28.297Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:28.468Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:28.468Z","userId":"685ff6a8922861ed8e281b0f","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 171.261 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:28.472Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e7654f6a9758a28968bb59afbaa2ac13',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GZvcGCpg-STN0etRc1UbYiVtpM4ygiucYGmA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e7654f6a9758a28968bb59afbaa2ac13

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: h81xlXd8WB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.430 ms - 67[0m
[34mdebug[39m: POST /api/v1/operators/685ff6a8922861ed8e281b15/reset-pin {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:28.620Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6a8922861ed8e281b15/reset-pin {
      sessionID: 'ec86ab12bb451c1aeae90cddacb95467',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aec86ab12bb451c1aeae90cddacb95467.H9NFIc%2FCOVZc4SihOeM5fSJVtZfgt%2FvHRGKppo56Ke4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

info: undefined {"0":"6","1":"8","10":"2","11":"8","12":"6","13":"1","14":"e","15":"d","16":"8","17":"e","18":"2","19":"8","2":"5","20":"1","21":"b","22":"0","23":"9","3":"f","4":"f","5":"6","6":"a","7":"8","8":"9","9":"2","timestamp":"2025-06-28T14:05:28.792Z"}
[0mPOST /api/v1/operators/685ff6a8922861ed8e281b15/reset-pin [32m200[0m 172.625 ms - 51[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:29.661Z"}
  console.log
    CSRF token generation: {
      sessionID: '6181ef703fc70935f32ac8d36e62159a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qetZbH2A-KCGgauEb0LHI-bNOKnVzUEQvweg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6181ef703fc70935f32ac8d36e62159a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: yLtAxNltiG...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.897 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:29.759Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:29.916Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:29.917Z","userId":"685ff6a9922861ed8e281b3c","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.424 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:29.920Z"}
  console.log
    CSRF token generation: {
      sessionID: 'db055fd3446f0b88801f91f4753cc23f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: My3gNRlL-vtRFYO9nVPGGKjHwahRQgFILxN4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: db055fd3446f0b88801f91f4753cc23f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ewP6D28fyg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.018 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:30.026Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:30.175Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:30.176Z","userId":"685ff6a9922861ed8e281b42","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.585 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:30.180Z"}
  console.log
    CSRF token generation: {
      sessionID: '238d782da62a9d98a958c0e102a59657',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: h40HgO3g-5eiJB2T5_2CG5kMn_0H7N4a15Gg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 238d782da62a9d98a958c0e102a59657

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: YVjZEDwkHm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.759 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:30.520Z"}
[0mGET /api/v1/operators/available [32m200[0m 87.441 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:31.445Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd5f95b4e63f4ea79a8630d26cbe5245d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zSowOoKW-4GQ1J92XF-B9rtCPtGkuBTEhmCM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d5f95b4e63f4ea79a8630d26cbe5245d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: R6C9uWSWCi...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.280 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:31.545Z"}
[31merror[39m: Error in callback pool cleanup job: Client must be connected before running operations {"errorLabelSet":{},"service":"wavemax-affiliate","stack":"MongoNotConnectedError: Client must be connected before running operations\n    at autoConnect (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:135:13)\n    at executeOperation (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/operations/execute_operation.ts:69:25)\n    at Collection.updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongodb/src/collection.ts:420:34)\n    at NativeCollection.<computed> [as updateMany] (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:246:33)\n    at model.Query._updateThunk (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4065:37)\n    at model.Query._updateMany (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4114:23)\n    at model.Query.exec (/var/www/wavemax/wavemax-affiliate-program/node_modules/mongoose/lib/query.js:4604:80)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runNextTicks (node:internal/process/task_queues:64:3)\n    at processTimers (node:internal/timers:516:9)\n    at Function.Object.<anonymous>.callbackPoolSchema.statics.releaseExpiredLocks (/var/www/wavemax/wavemax-affiliate-program/server/models/CallbackPool.js:682:30)\n    at Timeout._onTimeout (/var/www/wavemax/wavemax-affiliate-program/server/services/callbackPoolManager.js:1639:35)","timestamp":"2025-06-28T14:05:31.634Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:31.694Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:31.695Z","userId":"685ff6ab922861ed8e281b72","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 149.652 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:31.698Z"}
  console.log
    CSRF token generation: {
      sessionID: '80b25667fa421a74034b46c079e5276a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a8NArRGg-Dort5O-tGSWY9bDPNAaNzUECxhM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 80b25667fa421a74034b46c079e5276a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W9ZDKHXHFp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.180 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:31.800Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:31.965Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:31.966Z","userId":"685ff6ab922861ed8e281b78","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 165.262 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:31.969Z"}
  console.log
    CSRF token generation: {
      sessionID: '8bf473e729e6e664f88351eb7b01de45',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: vZuXS9TQ-Hic_9LFf8JPuNtpbcjFRLH35U9A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8bf473e729e6e664f88351eb7b01de45

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0e-hduQTLy...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.374 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available?limit=2 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:32.383Z"}
[0mGET /api/v1/operators/available?limit=2 [32m200[0m 83.197 ms - 536[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:33.287Z"}
  console.log
    CSRF token generation: {
      sessionID: '09b5657893acc74d035150c4f5193bcd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D5TtQyue-rPoHKH1bjPBJ2FlKmdbEp-TaWHs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 09b5657893acc74d035150c4f5193bcd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pAS-vgPdl3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.660 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:33.405Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:33.574Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:33.574Z","userId":"685ff6ad922861ed8e281ba8","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 169.279 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:33.578Z"}
  console.log
    CSRF token generation: {
      sessionID: '2c7acb311cbf4c92ffb062045b832722',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ARquNo08-ICdZrgPoHt8e0Gb1Nll_IJtEOiE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 2c7acb311cbf4c92ffb062045b832722

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Eg6wUK-XWd...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.256 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:33.670Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:33.819Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:33.819Z","userId":"685ff6ad922861ed8e281bae","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 149.299 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:33.823Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af442855ec8393e1715376c071d366cc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: B1s8fQCM-lSeufy-S4WX5ZGoXNQbHrEMcCOQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: af442855ec8393e1715376c071d366cc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QrdRKLjTeA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.374 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:34.098Z"}
[0mGET /api/v1/operators/available [32m200[0m 82.992 ms - 769[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:34.999Z"}
  console.log
    CSRF token generation: {
      sessionID: '46c58993a9626a3fd5cd21fdbd91c45a',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MeFbjfhb-4LClUd1csXUCm7Lm0tAUuxSCA1o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 46c58993a9626a3fd5cd21fdbd91c45a

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cc3uLyNdCf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.292 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:35.104Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:35.267Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:35.268Z","userId":"685ff6af922861ed8e281bde","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 164.359 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:35.271Z"}
  console.log
    CSRF token generation: {
      sessionID: '98c207f9aa83a391f1947bb9e4e6ef64',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WuRPPWl4-JAWEoII7YzEOr9uSUVx2suHjLh4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 98c207f9aa83a391f1947bb9e4e6ef64

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sznqPBFM2M...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.951 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:35.372Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:35.532Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:35.532Z","userId":"685ff6af922861ed8e281be4","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 159.742 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:35.535Z"}
  console.log
    CSRF token generation: {
      sessionID: '1b02624146088e07e8cacbfd104d9c35',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: WqHAANZO-SJ-9jPz2D8GceMbOMTBAxXJ0Ltc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1b02624146088e07e8cacbfd104d9c35

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BlfjxMQ6KX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.414 ms - 67[0m
[34mdebug[39m: GET /api/v1/operators/available {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:35.821Z"}
[0mGET /api/v1/operators/available [33m401[0m 1.072 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:36.670Z"}
  console.log
    CSRF token generation: {
      sessionID: '610d8f65021cf908e062d10b435aa879',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Z6JxbjuW-95rUzsGxher4IwcCTKP586j703I

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 610d8f65021cf908e062d10b435aa879

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: aFWnnuBwu6...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.004 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:36.782Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:36.947Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:36.947Z","userId":"685ff6b0922861ed8e281c11","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 165.234 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:36.950Z"}
  console.log
    CSRF token generation: {
      sessionID: '3afe7c6f517d4f0685850f923379c07e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: kPbqdhp7-lOL7pLmr2u3340xLcCAHycrkwmU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3afe7c6f517d4f0685850f923379c07e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: BjIdiGkNaW...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.657 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:37.060Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:37.210Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:37.210Z","userId":"685ff6b0922861ed8e281c17","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 150.080 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:37.214Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f501f3472b39fa1fbe16add6c55ec3a2',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g2oxuNY9-UozrbJxU1_s8HR1quQRng7ebiHs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f501f3472b39fa1fbe16add6c55ec3a2

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qXby77qsln...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.004 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff6b1922861ed8e281c1d/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:37.312Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6b1922861ed8e281c1d/stats {
      sessionID: '3afe7c6f517d4f0685850f923379c07e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3afe7c6f517d4f0685850f923379c07e.%2FxI2yFwvxeGKpF5QrgimvDO2iK3iqQQ7I7XO4CZvjTo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff6b1922861ed8e281c1d/stats [32m200[0m 118.985 ms - 267[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.272Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cc2aa005e95329204a69ad3772c242f0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pljwr7fq-5FrKdGlRKfaGKGeY6p7rhh44j6E

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cc2aa005e95329204a69ad3772c242f0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nqdlqaCwM-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.610 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.378Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:38.528Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:38.528Z","userId":"685ff6b2922861ed8e281c42","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 150.460 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.532Z"}
  console.log
    CSRF token generation: {
      sessionID: '9181768b9cb8b57d2e0c978c52dbd461',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1iKsHObP-KdLUf55FpxtrjYOFnSVPtKfhxsk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9181768b9cb8b57d2e0c978c52dbd461

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: L_MaQ-5tAc...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.744 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.648Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:38.800Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:38.800Z","userId":"685ff6b2922861ed8e281c48","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 151.674 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.803Z"}
  console.log
    CSRF token generation: {
      sessionID: '55d4b9edff5c59d8e6e37eea8a50e01e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: GluUDYws-Tx4sVJBk5yQBjULMZq-rKtZaOe0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 55d4b9edff5c59d8e6e37eea8a50e01e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: TCTypXthO9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.123 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff6b2922861ed8e281c4e/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:38.897Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6b2922861ed8e281c4e/stats {
      sessionID: '9181768b9cb8b57d2e0c978c52dbd461',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9181768b9cb8b57d2e0c978c52dbd461.6D6Do0aLXtHdjjZRky9JMW0eFBedPJdSO4De8v8m9dc',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff6b2922861ed8e281c4e/stats [32m200[0m 117.672 ms - 252[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:39.860Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ffb00bee6a0ee56a212ff6a0f6b04151',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: pV356jb1-qRVZKljWSln909tN9mWo2NXt5zU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ffb00bee6a0ee56a212ff6a0f6b04151

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5hSHComC8G...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.593 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:39.970Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:40.122Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:40.123Z","userId":"685ff6b3922861ed8e281c73","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.945 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:40.131Z"}
  console.log
    CSRF token generation: {
      sessionID: '50f6462c573c61a85fab213b51ed6c9b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qSqNJlKr-ooqHNWAToUrNeor9PE3FresrNqo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50f6462c573c61a85fab213b51ed6c9b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wCWGR3EB8k...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.006 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:40.233Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:40.379Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:40.380Z","userId":"685ff6b4922861ed8e281c79","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 146.536 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:40.383Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c3c480f2dc73dcdf384f9a91e059adb',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: rWYDMZd5-RIvH9R3OrXfeyxrgs43EioxLxh8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8c3c480f2dc73dcdf384f9a91e059adb

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: sHBMDl2oqt...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.734 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff6b4922861ed8e281c7f/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:40.477Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6b4922861ed8e281c7f/stats {
      sessionID: '50f6462c573c61a85fab213b51ed6c9b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A50f6462c573c61a85fab213b51ed6c9b.58QIOSBM%2BY5Z%2FcminKlzroeB36BT5irroeKlWHgfHow',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff6b4922861ed8e281c7f/stats [32m200[0m 119.636 ms - 268[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:41.468Z"}
  console.log
    CSRF token generation: {
      sessionID: '3df91b188bac9323451bf718eca2c6e6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: k7CuaUh4-StHoQ3OjD8O7yVV_GsWi7rV9GVc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3df91b188bac9323451bf718eca2c6e6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bHuDVea3bH...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.846 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:41.589Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:41.741Z","userType":"administrator","username":"superuser@wavemax.com"}
info: undefined {"adminId":"ADMIN001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:05:41.741Z","userId":"685ff6b5922861ed8e281ca4","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 152.410 ms - 618[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:41.745Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d20259ca53aea3ebfc4aa7637b9dbc1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 49PsXEwf-oMbjtMfEqflW1IwsCFZU3LpZWIM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d20259ca53aea3ebfc4aa7637b9dbc1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RVyjVr_ox9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 4.681 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:41.843Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:05:41.991Z","userType":"operator","username":"operator@wavemax.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:05:41.991Z","userId":"685ff6b5922861ed8e281caa","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 148.808 ms - 599[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:41.995Z"}
  console.log
    CSRF token generation: {
      sessionID: '1f438719bc85ea3229dd508fc4e9b396',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: gAajwIqE-0piix3INvAEvx7HGFnNvrW3rCXo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 1f438719bc85ea3229dd508fc4e9b396

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: W2G0DUWlXg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.287 ms - 67[0m
[34mdebug[39m: PATCH /api/v1/operators/685ff6b6922861ed8e281cb0/stats {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:42.090Z"}
  console.log
    CSRF check for: /api/v1/operators/685ff6b6922861ed8e281cb0/stats {
      sessionID: '3d20259ca53aea3ebfc4aa7637b9dbc1',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3d20259ca53aea3ebfc4aa7637b9dbc1.65PcyraT%2FCfUX%2Fsg0i4CYzhDMnjHoTwh7a%2F8ngDISWw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPATCH /api/v1/operators/685ff6b6922861ed8e281cb0/stats [33m400[0m 58.325 ms - 62[0m
PASS tests/integration/operator.test.js (63.882 s)
  Operator Integration Tests
    GET /api/v1/operators
      ✓ should get all operators with admin token (2370 ms)
      ✓ should filter by active status (1585 ms)
      ✓ should filter by on-shift status (1651 ms)
      ✓ should support pagination (2546 ms)
      ✓ should require authentication (1442 ms)
      ✓ should require operator management permissions (1798 ms)
    GET /api/v1/operators/:id
      ✓ should get operator by ID (1628 ms)
      ✓ should allow operators to view their own profile (1463 ms)
      ✓ should prevent operators from viewing other operators (1550 ms)
      ✓ should return 404 for non-existent operator (1702 ms)
    POST /api/v1/operators
      ✓ should create new operator (1678 ms)
      ✓ should validate required fields (1424 ms)
      ✓ should validate email format (1519 ms)
      ✓ should validate shift time format (1454 ms)
      ✓ should prevent duplicate emails (1491 ms)
      ✓ should require operators.manage permission (1680 ms)
    PATCH /api/v1/operators/:id
      ✓ should update operator details (1593 ms)
      ✓ should update password (1869 ms)
      ✓ should deactivate operator (1646 ms)
      ✓ should allow operators to update their own profile (limited fields) (1878 ms)
      ✓ should prevent operators from changing their own work station (1814 ms)
      ✓ should not allow updating operatorId (1602 ms)
      ✓ should validate email uniqueness on update (1669 ms)
    DELETE /api/v1/operators/:id
      ✓ should delete operator (1666 ms)
      ✓ should prevent deleting operator with active orders (1641 ms)
      ✓ should require operators.manage permission (1786 ms)
      ✓ should handle non-existent operator (1540 ms)
    POST /api/v1/operators/:id/reset-pin
      ✓ should reset operator PIN/password (1831 ms)
      ✓ should clear login attempts on PIN reset (1712 ms)
    GET /api/v1/operators/available
      ✓ should get available operators sorted by order count (1784 ms)
      ✓ should respect limit parameter (1841 ms)
      ✓ should only include active operators (1713 ms)
      ✓ should require authentication (1671 ms)
    PATCH /api/v1/operators/:id/stats
      ✓ should update processing statistics (1600 ms)
      ✓ should update quality score (1588 ms)
      ✓ should update both stats in one call (1582 ms)
      ✓ should validate processingTime is positive (1543 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:44.041Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:45.069Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Am953tjJ-2jHVPTWTjUO8qNSLW-VJrjQ-tmw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.631 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:46.143Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: C0yZFVsO-BI1N8LVm-jgZ6hlI_eoHKP9iaVE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.887 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/poll-test-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:46.187Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'poll-test-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-success',
        socialToken: 'mock-social-jwt-token',
        provider: 'facebook',
        socialId: 'facebook-user-456',
        email: 'poll@example.com',
        firstName: 'Poll',
        lastName: 'Test'
      }
    }

      at log (server/controllers/authController.js:1485:13)

[0mGET /api/v1/auth/oauth-session/poll-test-session-456 [32m200[0m 35.859 ms - 211[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:47.133Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Uy2FjPjy-b1sKl758YLEn_oDzJL7nl065g_s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.128 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/login-test-session-789 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:47.172Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'login-test-session-789',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-login',
        token: 'jwt-auth-token',
        refreshToken: 'refresh-token',
        affiliate: {
          affiliateId: 'AFF-123e4567-e89b-12d3-a456-426614174000',
          id: 'affiliate-id',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          businessName: 'Test Business'
        }
      }
    }

      at log (server/controllers/authController.js:1485:13)

[0mGET /api/v1/auth/oauth-session/login-test-session-789 [32m200[0m 33.406 ms - 295[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:48.095Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: z0549CXn-XJeFIZpBZYvkCTmlOaPec4xwcM8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.855 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/non-existent-session {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:48.110Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'non-existent-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1466:13)

[0mGET /api/v1/auth/oauth-session/non-existent-session [33m404[0m 28.578 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:48.998Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LzDfcL8C-HlWaUV331KeSxyyvzsj8HU57K4s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.889 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:49.042Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:49.043Z"}
[34mdebug[39m: GET /api/v1/auth/oauth-session/race-condition-session {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:49.046Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'found',
      resultData: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        sessionId: 'race-condition-session',
        provider: 'linkedin',
        socialId: 'linkedin-race-user',
        email: 'race@example.com',
        firstName: 'Race',
        lastName: 'Condition',
        context: 'affiliate'
      }
    }

      at log (server/controllers/authController.js:1485:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [32m200[0m 34.440 ms - 209[0m
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    OAuth Session Polling Debug: {
      sessionId: 'race-condition-session',
      sessionResult: 'not found',
      resultData: null
    }

      at log (server/controllers/authController.js:1466:13)

[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 35.279 ms - 58[0m
[0mGET /api/v1/auth/oauth-session/race-condition-session [33m404[0m 34.180 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:49.982Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LrV9uNzx-YPlq3rtW9fOYmGIoLxc0hR83ABk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.883 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:49.997Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-ca61e338-af2d-40bc-8a6a-90968e686d53","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:05:50.213Z","userId":"685ff6be3e89d791fd5fd081","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 217.491 ms - 798[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:51.158Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RICroheG-WlFz33C6wHDs3kdg6M8YPcclf-Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.616 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:51.169Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 3.475 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:52.071Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Tv7Ji3yh-KynUxOGxoqtLuvSHhwgGdTRG42U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.733 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:52.083Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-721801a2-2900-44ea-b492-c80408f67be9","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:05:52.289Z","userId":"685ff6c03e89d791fd5fd0cc","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 206.707 ms - 790[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:52.293Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 83.965 ms - 108[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:53.246Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: f0GTqIAZ-xHp9k-qQ7DWz_nK2KyeV-ugTyeM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.926 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:53.287Z"}
[0mPOST /api/v1/auth/social/register [33m409[0m 59.016 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:54.220Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OEcpFuzH-16Z2FmhLxwp-0WPJjTQInemweHE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.257 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:54.230Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-eb2a56bc-7330-484b-a32d-20f33cc19e5f","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:05:54.436Z","userId":"685ff6c23e89d791fd5fd11c","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 206.199 ms - 786[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:54.440Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-b15cc6a4-9ac1-407a-b2e4-ac8bd20402aa","provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:05:54.690Z","userId":"685ff6c23e89d791fd5fd124","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 250.168 ms - 788[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:54.695Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-eb03233a-4c4f-4730-9f9f-2e29411be92a","provider":"linkedin","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:05:54.978Z","userId":"685ff6c23e89d791fd5fd12d","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 282.754 ms - 788[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:55.888Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: X8x3ooz4-jfpfnhiNw7L4LZx4Dpxtgp08RSE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.592 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:55.931Z"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"affiliateId":"AFF999999","customerId":"CUST-4943519a-14c1-4493-9986-998ab6a57540","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/customer/social/register","timestamp":"2025-06-28T14:05:56.161Z","userId":"685ff6c43e89d791fd5fd159","userType":"customer"}
[0mPOST /api/v1/auth/customer/social/register [32m201[0m 231.105 ms - 828[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:57.059Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qjDvPXA2-HZxiGCpTm5hUtpotSJitcGsDNr8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.505 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:57.069Z"}
[0mPOST /api/v1/auth/customer/social/register [33m400[0m 110.132 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:58.047Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: N6lMV6v3-RKy4RvNRLaAivLYSssCldM6haYo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.616 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:58.089Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26b3a5d0febf88fca22e50bea0122edc.x6r8L11u7tUXJofLknM7CGTcfST5IgD9i095RWKPKDQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 2.981 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:58.963Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RkjtKy42-8jdB4E_b4RSpXyjt4ZabsRsAL5Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.887 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:59.044Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26b3a5d0febf88fca22e50bea0122edc.x6r8L11u7tUXJofLknM7CGTcfST5IgD9i095RWKPKDQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 3.509 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:59.920Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: p5XeN0KL-vUwLH3gHtMwH3ZXIWWmsDIuA_yk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.874 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/callback {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:05:59.928Z"}
  console.log
    CSRF check for: /api/v1/auth/social/callback {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26b3a5d0febf88fca22e50bea0122edc.x6r8L11u7tUXJofLknM7CGTcfST5IgD9i095RWKPKDQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/callback [33m404[0m 2.622 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:00.800Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tcSR5Y7W-A5fCS9uqV-YjQ8jn1u4aIc7Dgqk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.443 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/link {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:00.846Z"}
  console.log
    CSRF check for: /api/v1/auth/social/link {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A26b3a5d0febf88fca22e50bea0122edc.x6r8L11u7tUXJofLknM7CGTcfST5IgD9i095RWKPKDQ',
      hasCsrfSecret: true,
      hasAuth: false,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/social/link [33m404[0m 3.174 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:01.711Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 4hoJFXqt-hTQJ9r_XPG6Mx8fKEl32MUJlOko

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.886 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:01.727Z"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"affiliateId":"AFF-4ee48c9c-4c2d-4e61-843a-14e09659875d","provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","ip":"::ffff:127.0.0.1","method":"POST","path":"/social/register","timestamp":"2025-06-28T14:06:01.943Z","userId":"685ff6c93e89d791fd5fd233","userType":"affiliate"}
[0mPOST /api/v1/auth/social/register [32m201[0m 216.256 ms - 786[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:02.810Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cVJzRclB-RgNcsJDO6TYk-fxdtogksfu2e_w

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.005 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:02.821Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.739 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:03.686Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tHDQIMbU-00Ex-bTRnbD7kEBaz32DCq9_hhI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.751 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:03.695Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 1.829 ms - 76[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:04.561Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6cIloQdm-PyMrqiq9Oc7tjk4FFnix5wWXKrM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.806 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/social/register {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:04.577Z"}
[0mPOST /api/v1/auth/social/register [33m400[0m 2.244 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:05.444Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9Ldh7mqr-rikeepTOjOhibCYDKZQYsHbb0EU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.787 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:06.398Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xdmQUfRH-w5wdDuzlwVhR4TII64Q6AZMWeZI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.977 ms - 67[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:07.352Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: L2pd83yH-3Sx_MuGa_-fTxXlf5_26zJcOa7s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.940 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/conflict-test-session-123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:07.424Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'conflict-test-session-123',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with an affiliate account. Would you like to login as an affiliate instead?',
        provider: 'google',
        accountType: 'affiliate',
        affiliateData: {
          affiliateId: 'AFF123456',
          firstName: 'John',
          lastName: 'Affiliate',
          email: 'john.affiliate@example.com',
          businessName: 'Johns Business'
        }
      }
    }

      at log (server/controllers/authController.js:1485:13)

[0mGET /api/v1/auth/oauth-session/conflict-test-session-123 [32m200[0m 33.353 ms - 402[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:08.337Z"}
  console.log
    CSRF token generation: {
      sessionID: '26b3a5d0febf88fca22e50bea0122edc',
      hasSession: true,
      hasCsrfSecret: true
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7oMai5vy-h31qxvYZ-S7LhNCsfBlsD9BA5qQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 26b3a5d0febf88fca22e50bea0122edc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xh1wsLC7M0...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.330 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/oauth-session/customer-conflict-session-456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:08.410Z"}
  console.log
    OAuth Session Polling Debug: {
      sessionId: 'customer-conflict-session-456',
      sessionResult: 'found',
      resultData: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1466:13)

  console.log
    Sending OAuth response: {
      success: true,
      result: {
        type: 'social-auth-account-conflict',
        message: 'This social media account is already associated with a customer account. Would you like to login as a customer instead?',
        provider: 'google',
        accountType: 'customer',
        customerData: {
          firstName: 'Jane',
          lastName: 'Customer',
          email: 'jane.customer@example.com'
        }
      }
    }

      at log (server/controllers/authController.js:1485:13)

[0mGET /api/v1/auth/oauth-session/customer-conflict-session-456 [32m200[0m 33.134 ms - 336[0m
FAIL tests/integration/oAuthFlows.test.js (26.228 s)
  OAuth Authentication Integration Tests
    OAuth Session Management
      ✓ should create and store OAuth session on callback (1683 ms)
      ✓ should poll for OAuth session results with complete data structure (993 ms)
      ✓ should poll for OAuth login session results (960 ms)
      ✓ should return pending status for non-existent session (903 ms)
      ✓ should handle session polling race conditions (982 ms)
    Social Registration - Affiliates
      ✓ should complete affiliate social registration with valid data (1175 ms)
      ✓ should reject registration with malicious social data (915 ms)
      ✓ should prevent duplicate social account registration (1174 ms)
      ✓ should prevent duplicate email registration (975 ms)
      ✓ should generate unique usernames for social registrations (1667 ms)
    Social Registration - Customers
      ✓ should complete customer social registration with valid data (1172 ms)
      ✓ should reject customer registration with invalid affiliate ID (988 ms)
    Social Login
      ✕ should login existing affiliate with social account (916 ms)
      ✕ should login existing customer with social account (956 ms)
      ✕ should return error for non-existent social account (878 ms)
    Social Account Linking
      ✕ should link social account to existing affiliate (910 ms)
    Security and Error Handling
      ✓ should accept requests without CSRF token for social registration (1098 ms)
      ✓ should handle expired JWT tokens gracefully (878 ms)
      ✓ should handle invalid JWT tokens (874 ms)
      ✓ should validate required fields (883 ms)
    OAuth Session TTL and Cleanup
      ✓ should automatically expire OAuth sessions after TTL (955 ms)
      ✓ should preserve fresh OAuth sessions during cleanup (954 ms)
    OAuth Account Conflict Scenarios
      ✓ should create social-auth-account-conflict session for customer trying to register with affiliate Google account (986 ms)
      ✓ should create social-auth-account-conflict session for affiliate trying to register with customer Google account (1020 ms)

  ● OAuth Authentication Integration Tests › Social Login › should login existing affiliate with social account

    expected 200 "OK", got 404 "Not Found"

      589 |         .set('x-csrf-token', csrfToken)
      590 |         .send(loginData)
    > 591 |         .expect(200);
          |          ^
      592 |
      593 |       expect(response.body.success).toBe(true);
      594 |       expect(response.body.token).toBeDefined();

      at Object.expect (tests/integration/oAuthFlows.test.js:591:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● OAuth Authentication Integration Tests › Social Login › should login existing customer with social account

    expected 200 "OK", got 404 "Not Found"

      661 |         .set('x-csrf-token', csrfToken)
      662 |         .send(loginData)
    > 663 |         .expect(200);
          |          ^
      664 |
      665 |       expect(response.body.success).toBe(true);
      666 |       expect(response.body.token).toBeDefined();

      at Object.expect (tests/integration/oAuthFlows.test.js:663:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● OAuth Authentication Integration Tests › Social Login › should return error for non-existent social account

    expect(received).toBe(expected) // Object.is equality

    Expected: "No account found with this social media account"
    Received: "API endpoint not found"

      682 |
      683 |       expect(response.body.success).toBe(false);
    > 684 |       expect(response.body.message).toBe('No account found with this social media account');
          |                                     ^
      685 |     });
      686 |   });
      687 |

      at Object.toBe (tests/integration/oAuthFlows.test.js:684:37)

  ● OAuth Authentication Integration Tests › Social Account Linking › should link social account to existing affiliate

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 401, 403]

      738 |       // which is complex in integration tests.
      739 |       // The actual functionality is tested in unit tests.
    > 740 |       expect([200, 401, 403]).toContain(response.status); // Various auth states
          |                               ^
      741 |     });
      742 |   });
      743 |

      at Object.toContain (tests/integration/oAuthFlows.test.js:740:31)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:10.227Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:10.549Z"}
  console.log
    CSRF token generation: {
      sessionID: '3d97d935f9338919fd2482d18601a466',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: w1ZYQi39-cDSQphmkzEnUlcUgKfvVNMoPHkU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3d97d935f9338919fd2482d18601a466

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: m2Sf03VPCP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.604 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:11.197Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:11.352Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 155.701 ms - 544[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:12.184Z"}
  console.log
    CSRF token generation: {
      sessionID: '50af1e14ab207c476777d560eb22a3da',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nW4Mbwrm-LwaCQlzzWwbLdCSOEo02THCtdLs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 50af1e14ab207c476777d560eb22a3da

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: M1Sr0EHJGp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.165 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:12.444Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T14:06:12.527Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 83.333 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:13.254Z"}
  console.log
    CSRF token generation: {
      sessionID: '96b995efff5b61e91283198402e131a9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qwzKoH4s-9KG1ecRQMLH1l389aEzN4yo_BWI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96b995efff5b61e91283198402e131a9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Ey_I3NvwbA...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.764 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:13.394Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":"User not found","success":false,"timestamp":"2025-06-28T14:06:13.423Z","userType":"affiliate","username":"nonexistent"}
[0mPOST /api/v1/auth/affiliate/login [33m401[0m 28.474 ms - 58[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:14.199Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b635c5382bc912305618691c95ed8bda',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: zsoHIszN-Qrwv9mEWWJiY6T5ExFtcWhvs8Jw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b635c5382bc912305618691c95ed8bda

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: xtZgr86K7W...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.051 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:14.477Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 163.998 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:15.381Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd8241f9f5ff7e280a031012532ed765e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: EB6i9MmJ-3aMN0CuZV71S1ujWoZGrG28PbUw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d8241f9f5ff7e280a031012532ed765e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: wVii8xjMXh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.406 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:15.672Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 151.617 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:16.560Z"}
  console.log
    CSRF token generation: {
      sessionID: '64433354487755e596e84d11c6d7758c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5lvcclRJ-EquhhHcoUJTGNZkNfGaghRzdKKw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 64433354487755e596e84d11c6d7758c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eglCRzJdnI...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.560 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:16.817Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 143.622 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:17.705Z"}
  console.log
    CSRF token generation: {
      sessionID: '8c80677e28013125af49de08dece4f88',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bwnFicYS-ranMcnSYG_v023ZZsoZBY6TAV5s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8c80677e28013125af49de08dece4f88

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: OIP_eNR84K...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.690 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:17.971Z"}
  console.log
    Customer affiliateId: AFF123

      at log (server/controllers/authController.js:602:13)

  console.log
    Found affiliate: AFF123

      at log (server/controllers/authController.js:603:13)

  console.log
    Affiliate fees: min: 25, per-bag: 5

      at log (server/controllers/authController.js:604:13)

  console.log
    Sending customer login response: {
      "customerId": "CUST123",
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "phone": "555-987-6543",
      "address": "456 Oak Ave",
      "city": "Austin",
      "state": "TX",
      "zipCode": "78702",
      "affiliateId": "AFF123",
      "affiliate": {
        "affiliateId": "AFF123",
        "name": "John Doe",
        "minimumDeliveryFee": 25,
        "perBagDeliveryFee": 5
      }
    }

      at log (server/controllers/authController.js:637:13)

[0mPOST /api/v1/auth/customer/login [32m200[0m 151.252 ms - 659[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:18.856Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f9fa15d84ca460fdf062da19139a9e73',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mM5XCUcn-Hxuth8kQU01KHBK_AS04pRmuw7c

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f9fa15d84ca460fdf062da19139a9e73

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: VpqVSRKlRw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.263 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/customer/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:19.003Z"}
[0mPOST /api/v1/auth/customer/login [33m401[0m 27.686 ms - 64[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:19.768Z"}
  console.log
    CSRF token generation: {
      sessionID: '6db9a4150c7983b102904d4a15e89e10',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Re2Y8tU8-nVqNEB9Zu4tgQX_4eLGCZ6Od64M

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6db9a4150c7983b102904d4a15e89e10

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: -n-3bbJ87d...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.094 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:19.998Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:20.145Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 147.680 ms - 544[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:20.149Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.970 ms - 129[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:20.921Z"}
  console.log
    CSRF token generation: {
      sessionID: '8f7b9fbf055de66cea537e87990fe83e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XcsXNL7l-sydlQDz90qLzacU-Ioqesy207DY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 8f7b9fbf055de66cea537e87990fe83e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hEtP-KwwWO...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.111 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:21.061Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.324 ms - 43[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:21.784Z"}
  console.log
    CSRF token generation: {
      sessionID: '7eff6bb14e1a719699b743a8f7152af3',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: a4V4VIOb-c6d4yW_WMTP3arXX6DPi0EUIYlg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7eff6bb14e1a719699b743a8f7152af3

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zsF7dSk0v9...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.254 ms - 67[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:21.927Z"}
[0mGET /api/v1/auth/verify [33m401[0m 1.394 ms - 47[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:22.658Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af12f92539dc2b77e614421234943fe9',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: sSWr7fcX-_FMYprJWMmso3Yq1WISwk7YGO-A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: af12f92539dc2b77e614421234943fe9

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Lb9Y_jY5Xz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.217 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:22.892Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:23.040Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 148.605 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:23.043Z"}
[0mPOST /api/v1/auth/refresh-token [32m200[0m 122.649 ms - 409[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:23.899Z"}
  console.log
    CSRF token generation: {
      sessionID: '802c9346bb7fafa2fd676348b52b4a39',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: xobdjgcY-pMnBf3GhPo9fmLlgiJC4JF9102A

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 802c9346bb7fafa2fd676348b52b4a39

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DSO7bUfabP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.892 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:24.037Z"}
[0mPOST /api/v1/auth/refresh-token [33m400[0m 1.518 ms - 89[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:24.765Z"}
  console.log
    CSRF token generation: {
      sessionID: 'd3f8a14e5ad5b66148585e74c1b5bd86',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6tObhYBz-Z9GrsOS6aLEYCr7F0PQiLllwBeM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: d3f8a14e5ad5b66148585e74c1b5bd86

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pylgSnQmOo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.401 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:25.030Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.751 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:25.786Z"}
  console.log
    CSRF token generation: {
      sessionID: 'f3ff5291be473f6e9682d5f6eac1f793',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: MrurDOia-SXg_7z0O6bnqBpKurGPNKrIZWyU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: f3ff5291be473f6e9682d5f6eac1f793

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: miUuru0NO4...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.217 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:26.014Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:26.178Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 164.336 ms - 544[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:26.182Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: 'f3ff5291be473f6e9682d5f6eac1f793',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Af3ff5291be473f6e9682d5f6eac1f793.1vkriUWnhIVjIowPmJ5pwRyyTPjnC8F21%2Bg7bmBUBfU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 92.661 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:26.278Z"}
[0mGET /api/v1/auth/verify [33m401[0m 28.516 ms - 56[0m
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:26.309Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 27.656 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.071Z"}
  console.log
    CSRF token generation: {
      sessionID: '555ae64a5f660d6440d9b2b2d483c92e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OOUnvISZ-8CgzbQsCQBuPWRy13d8-dXmSZ-U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 555ae64a5f660d6440d9b2b2d483c92e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: g35MRrD9iZ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.600 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.321Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:27.473Z","userType":"affiliate","username":"johndoe"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 151.757 ms - 544[0m
  console.log
    Got refresh token: 6edc607a78c1dbc80e57c18ba1579f108f836ee9fa914fff2da5ff7a88bf00b10931c18a16e49cd3

      at Object.log (tests/integration/auth.test.js:805:15)

  console.log
    Starting concurrent requests...

      at Object.log (tests/integration/auth.test.js:819:15)

[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.490Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.494Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.496Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.499Z"}
[34mdebug[39m: POST /api/v1/auth/refresh-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:27.501Z"}
[0mPOST /api/v1/auth/refresh-token [33m401[0m 31.759 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 30.204 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 29.161 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [33m401[0m 28.885 ms - 62[0m
[0mPOST /api/v1/auth/refresh-token [32m200[0m 123.433 ms - 409[0m
  console.log
    Responses received: [
      {
        status: 200,
        body: {
          success: true,
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NWZmNmUzOTc5OWIwMWU5NjEzNmExMSIsImFmZmlsaWF0ZUlkIjoiQUZGMTIzIiwicm9sZSI6ImFmZmlsaWF0ZSIsImlhdCI6MTc1MTExOTU4NywiZXhwIjoxNzUxMTIzMTg3LCJhdWQiOiJ3YXZlbWF4LWNsaWVudCIsImlzcyI6IndhdmVtYXgtYXBpIn0.DZ_FxL8ildStG6AKN94b5jMHNgyNjK88KRMDstRNQvA',
          refreshToken: 'b6792024ac22aab567f11245d26e0e70f3bb0b6fe74efb9a126e842a9fdbdd3c62b85c66dd5fd74f'
        }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      },
      {
        status: 401,
        body: { success: false, message: 'Invalid or expired refresh token' }
      }
    ]

      at Object.log (tests/integration/auth.test.js:821:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:28.388Z"}
  console.log
    CSRF token generation: {
      sessionID: '0fe0cd16d47528c0357d82d6ef8c5278',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: b9lNWIa1-D5SB69e6sYtG09LvAmO9e_tbFL0

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0fe0cd16d47528c0357d82d6ef8c5278

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: UNHn_LU__1...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 12.476 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:28.627Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:28.772Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 145.841 ms - 547[0m
[34mdebug[39m: POST /api/v1/auth/affiliate/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:29.876Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/affiliate/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:30.033Z","userType":"affiliate","username":"johndoe999"}
[0mPOST /api/v1/auth/affiliate/login [32m200[0m 157.707 ms - 547[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.037Z"}
[0mGET /api/v1/auth/verify [32m200[0m 29.022 ms - 129[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.069Z"}
[0mGET /api/v1/auth/verify [32m200[0m 32.700 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.105Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '0fe0cd16d47528c0357d82d6ef8c5278',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0fe0cd16d47528c0357d82d6ef8c5278.G%2BBsPXMI1%2BTPQzFNLhqpWCe8uh4%2BRy6YMZmKpBPNt0E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 94.816 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.203Z"}
[0mGET /api/v1/auth/verify [33m401[0m 32.551 ms - 56[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.239Z"}
[0mGET /api/v1/auth/verify [32m200[0m 28.968 ms - 129[0m
[34mdebug[39m: POST /api/v1/auth/logout {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.272Z"}
  console.log
    CSRF check for: /api/v1/auth/logout {
      sessionID: '0fe0cd16d47528c0357d82d6ef8c5278',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A0fe0cd16d47528c0357d82d6ef8c5278.G%2BBsPXMI1%2BTPQzFNLhqpWCe8uh4%2BRy6YMZmKpBPNt0E',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/auth/logout [32m200[0m 90.985 ms - 52[0m
[34mdebug[39m: GET /api/v1/auth/verify {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:30.365Z"}
[0mGET /api/v1/auth/verify [33m401[0m 29.141 ms - 56[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:31.121Z"}
  console.log
    CSRF token generation: {
      sessionID: '0e5daaf32c964a361aed2268e40f3f4f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 66zHODRY-cHyomTwLdjAMXtJGtKfTAireT8o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0e5daaf32c964a361aed2268e40f3f4f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 2rmdUhCMIl...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.709 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:31.372Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:31.529Z","userType":"administrator","username":"admin@example.com"}
info: undefined {"adminId":"ADM001","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","timestamp":"2025-06-28T14:06:31.529Z","userId":"685ff6e79799b01e96136a79","userType":"administrator"}
[0mPOST /api/v1/auth/administrator/login [32m200[0m 157.332 ms - 684[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:32.261Z"}
  console.log
    CSRF token generation: {
      sessionID: '4dd0c62d15f069d92e4e1a37259962fd',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: RgrZyicP-xHFP3qWtEZaMmStGuNy8C5D3bfo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4dd0c62d15f069d92e4e1a37259962fd

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 1ZO5voIh0D...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.333 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:32.489Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T14:06:32.617Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 128.605 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:33.349Z"}
  console.log
    CSRF token generation: {
      sessionID: '66a0c897518ce2a818464c7d6652605c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: H0EQesST-a3eMkmCRXmVsg01_TP08d1OVQNU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 66a0c897518ce2a818464c7d6652605c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eSgDhkj1rh...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.116 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/administrator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:33.619Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/administrator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T14:06:33.647Z","userType":"administrator","username":"admin@example.com"}
[0mPOST /api/v1/auth/administrator/login [33m401[0m 28.841 ms - 90[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:34.376Z"}
  console.log
    CSRF token generation: {
      sessionID: '4c576bf31f1f1848b36a1c65b1156ab1',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: LKKQdoMn-3hOIFcVyKbYwCIku6we-okEZatY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4c576bf31f1f1848b36a1c65b1156ab1

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: cH93WEA_j3...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.425 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:34.693Z"}
info: undefined {"eventType":"LOGIN_SUCCESS","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":null,"success":true,"timestamp":"2025-06-28T14:06:34.862Z","userType":"operator","username":"operator@example.com"}
info: undefined {"ip":"::ffff:127.0.0.1","method":"POST","operatorId":"OPR001","path":"/operator/login","shift":"00:00 - 23:59","timestamp":"2025-06-28T14:06:34.862Z","userId":"685ff6ea9799b01e96136aeb","userType":"operator"}
[0mPOST /api/v1/auth/operator/login [32m200[0m 169.313 ms - 593[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:35.597Z"}
  console.log
    CSRF token generation: {
      sessionID: '4d0a834ad2f5c18b3653a7e885234552',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: jljQ5L2E-WUiZC7aF22FZjNNt-4vaIW0KlEY

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4d0a834ad2f5c18b3653a7e885234552

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A6yIycMYQF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.943 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:35.914Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Invalid password","success":false,"timestamp":"2025-06-28T14:06:36.041Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m401[0m 126.496 ms - 55[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:36.771Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e7b3d73f2b0fbbdee191f8ea560b750',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1f3WJabk-5TdWqQkrzI4s9MQIl38Dc_zvu0o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e7b3d73f2b0fbbdee191f8ea560b750

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CU7AGtrcvD...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.663 ms - 67[0m
[34mdebug[39m: POST /api/v1/auth/operator/login {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:37.122Z"}
info: undefined {"eventType":"LOGIN_FAILED","ip":"::ffff:127.0.0.1","method":"POST","path":"/operator/login","reason":"Account inactive","success":false,"timestamp":"2025-06-28T14:06:37.151Z","userType":"operator","username":"operator@example.com"}
[0mPOST /api/v1/auth/operator/login [33m403[0m 28.458 ms - 82[0m
PASS tests/integration/auth.test.js (28.393 s)
  Authentication Integration Tests
    POST /api/v1/auth/affiliate/login
      ✓ should login affiliate with valid credentials (1669 ms)
      ✓ should fail with invalid credentials (1069 ms)
      ✓ should fail with non-existent username (945 ms)
    POST /api/v1/auth/customer/login
      ✓ should login customer with valid credentials (1180 ms)
      ✓ should login customer using emailOrUsername field with email (1179 ms)
      ✓ should login customer using emailOrUsername field with username (1144 ms)
      ✓ should prioritize emailOrUsername over username field (1150 ms)
      ✓ should return error with invalid emailOrUsername (912 ms)
    GET /api/v1/auth/verify
      ✓ should verify valid token (1154 ms)
      ✓ should fail with invalid token (863 ms)
      ✓ should fail with missing token (873 ms)
    POST /api/v1/auth/refresh-token
      ✓ should refresh token successfully (1241 ms)
      ✓ should fail with invalid refresh token (865 ms)
      ✓ should fail with expired refresh token (1021 ms)
    POST /api/v1/auth/logout
      ✓ should logout successfully and blacklist tokens (1285 ms)
    Rate limiting tests
      ○ skipped should rate limit login attempts
      ○ skipped should rate limit refresh token requests
    Concurrent refresh token usage
      ✓ should handle concurrent refresh token requests safely (1315 ms)
    Token blacklisting after logout
      ✓ should blacklist all active tokens on logout (2735 ms)
    POST /api/v1/auth/administrator/login
      ✓ should login administrator with valid credentials (1140 ms)
      ✓ should fail with invalid administrator credentials (1087 ms)
      ✓ should fail when administrator is inactive (1024 ms)
    POST /api/v1/auth/operator/login
      ✓ should login operator with valid credentials (1223 ms)
      ✓ should fail with invalid operator credentials (1172 ms)
      ✓ should fail when operator is inactive (1123 ms)

[32minfo[39m: Test payment form enabled and available at /test-payment {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:38.984Z"}
(node:2015327) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
  console.log
    Connected to test database: mongodb+srv://***:***@cluster0.yiy75zr.mongodb.net/wavemax_test?retryWrites=true&w=majority

      at Object.log (tests/setup.js:60:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:39.307Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e11dbee5bc49776cd0b1320147765d62',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: dAOhsL03-a1kK7O-VIbxNSHKSQLOxrBe3NHc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e11dbee5bc49776cd0b1320147765d62

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: PJNyvZmOeo...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.723 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:40.053Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'e11dbee5bc49776cd0b1320147765d62',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae11dbee5bc49776cd0b1320147765d62.5rOD5wt73YIE9HWUo%2BFThO2jKJQxP%2BUCMhuVaDAvoQY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      specialPickupInstructions: 'Ring doorbell',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 250.616 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:41.182Z"}
  console.log
    CSRF token generation: {
      sessionID: 'df5eaee11676aeb102caf29686773ce0',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ofKhfYFu-cqcl1ciFYVFc-Dqh97HAoSnB6fE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: df5eaee11676aeb102caf29686773ce0

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NBU4qA0vtz...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.923 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:41.453Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'df5eaee11676aeb102caf29686773ce0',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Adf5eaee11676aeb102caf29686773ce0.n936ynNuEDx3OTstZ9zifrhZ7v08BAG80bTmpTRo8fQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 231.575 ms - 104[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:42.458Z"}
  console.log
    CSRF token generation: {
      sessionID: 'ab775eeaea5f7b7c4d3dcf79a5983895',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 33khAODA-RXRH_qxKeBDnRgW5Op_s3ERAHcA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: ab775eeaea5f7b7c4d3dcf79a5983895

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: bmxYA_YxV-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 11.569 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:42.733Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'ab775eeaea5f7b7c4d3dcf79a5983895',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aab775eeaea5f7b7c4d3dcf79a5983895.9IdNZAfD7beRJTMSAW2tNDBaXUDp7y%2BuDUqhLu4s06M',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'INVALID',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: INVALID

      at log (server/controllers/orderController.js:126:13)

  console.log
    Customer not found with ID: INVALID

      at log (server/controllers/orderController.js:130:15)

[0mPOST /api/v1/orders [33m400[0m 61.804 ms - 49[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:43.556Z"}
  console.log
    CSRF token generation: {
      sessionID: '7811d1b73c57aa94e450672ebf92fb3b',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 5hwe3qem-H9pFeV6blo_L0CqOkJ4zig_S6GM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7811d1b73c57aa94e450672ebf92fb3b

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: rvYwewWaiE...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.911 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:43.828Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '7811d1b73c57aa94e450672ebf92fb3b',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7811d1b73c57aa94e450672ebf92fb3b.frzlnIolRR%2B9rPjf7f9LW41BvW2MguULKYwyH2caIrE',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'INVALID',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: INVALID

      at log (server/controllers/orderController.js:155:13)

  console.log
    Affiliate not found with ID: INVALID

      at log (server/controllers/orderController.js:159:15)

[0mPOST /api/v1/orders [33m400[0m 119.956 ms - 50[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:44.712Z"}
  console.log
    CSRF token generation: {
      sessionID: '7a63c8ad42b2fb606e177f845a8655a5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: bQJPgRqd-_2nY3rhcauUqDUtPLm39c5t8GHc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 7a63c8ad42b2fb606e177f845a8655a5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XkIkC2PpCV...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.899 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:45.049Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '7a63c8ad42b2fb606e177f845a8655a5',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A7a63c8ad42b2fb606e177f845a8655a5.DgTpMqHwZrZTeW3sxol5mLU9R6%2BdXWdYuFMdV8wrGIs',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST999',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST999

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Bob Jones

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [33m403[0m 120.152 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:45.924Z"}
  console.log
    CSRF token generation: {
      sessionID: '87d01c6f3152f2ad9ee2e696c1b1227e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: M1H4uKI6-ad2hy_VFEJkV9dQwHY-5ZNaXstU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 87d01c6f3152f2ad9ee2e696c1b1227e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 5Q0GB34X9b...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.627 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:46.223Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '87d01c6f3152f2ad9ee2e696c1b1227e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A87d01c6f3152f2ad9ee2e696c1b1227e.ahuBWX6Hw0JFPP35bYP%2FvNHKJ%2B6FQpnVY%2B2kxu0NpX8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Validation errors: [
      {
        type: 'field',
        value: undefined,
        msg: 'Valid pickup date is required',
        path: 'pickupDate',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Invalid pickup time',
        path: 'pickupTime',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Number of bags must be at least 1',
        path: 'numberOfBags',
        location: 'body'
      },
      {
        type: 'field',
        value: undefined,
        msg: 'Estimated weight must be a positive number',
        path: 'estimatedWeight',
        location: 'body'
      }
    ]

      at log (server/controllers/orderController.js:105:15)

[0mPOST /api/v1/orders [33m400[0m 33.803 ms - 444[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:47.021Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c2759b65a63408c67b155b6b5f02f61c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 9eRpLsMr-yx0sGS4tUPIrYLrGTRdxnLvrTnM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c2759b65a63408c67b155b6b5f02f61c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: pJxwS_RJdP...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.907 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:47.327Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 112.926 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:48.195Z"}
  console.log
    CSRF token generation: {
      sessionID: 'b54474007a004fdd15b4db9ec7dad257',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: XIwGqRn9-cRyCe2er0M0aBT4lT485ICKcK4g

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: b54474007a004fdd15b4db9ec7dad257

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: B87LrGowiR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.422 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:48.507Z"}
[0mGET /api/v1/orders/ORD123456 [32m200[0m 114.456 ms - 591[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:49.400Z"}
  console.log
    CSRF token generation: {
      sessionID: '86ccd5154fad26db2549689ffcd92f04',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: mBRDOUy6-e9Fz77Lh5rTtoD3mHKMTByJO2vo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 86ccd5154fad26db2549689ffcd92f04

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: f5Ai_Jc0Cw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.716 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/ORD123456 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:49.723Z"}
[0mGET /api/v1/orders/ORD123456 [33m403[0m 58.642 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:50.542Z"}
  console.log
    CSRF token generation: {
      sessionID: '52c7f3748563f5ebfddfd5fb6e314413',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: qMBqkSoO-Q3HJOfGabsHQbGbZ5lhrRWAmNcw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 52c7f3748563f5ebfddfd5fb6e314413

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 9t2VsQ6JV-...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.505 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/NONEXISTENT {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:50.854Z"}
[0mGET /api/v1/orders/NONEXISTENT [33m404[0m 58.079 ms - 45[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:51.665Z"}
  console.log
    CSRF token generation: {
      sessionID: 'e1e1e5939ea07fee226b8417b2327d99',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: KsKjsYcL-glPc_Xn6f8U4Amsz374rGQVR_n4

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: e1e1e5939ea07fee226b8417b2327d99

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: RwWM3d73vB...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.417 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:52.003Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'e1e1e5939ea07fee226b8417b2327d99',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ae1e1e5939ea07fee226b8417b2327d99.tEjraO3ONox2d5wY64PUx2qIFowIowjAYczTSg1P3QU',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 150.967 ms - 131[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:52.944Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a3b8b9c3b82d7d745b00ef0a41c3f1d4',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: siiUZcNC-hcJ182TmD2u2gert-xKTzxol0rc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a3b8b9c3b82d7d745b00ef0a41c3f1d4

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: XxIE49osNX...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.881 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:53.305Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: 'a3b8b9c3b82d7d745b00ef0a41c3f1d4',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Aa3b8b9c3b82d7d745b00ef0a41c3f1d4.fs59l3eh4anUP5oNSV8MQ9gpUuecyXmgJyrizq7nyhI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [32m200[0m 147.865 ms - 172[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:54.235Z"}
  console.log
    CSRF token generation: {
      sessionID: '09e95fba3edf3d7b8146b5485a849bc6',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OfynOKGv-8F6B1SnpzqhmWL2Xjx6W2wA6L9Q

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 09e95fba3edf3d7b8146b5485a849bc6

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KKU9m4z2oY...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.411 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:54.582Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '09e95fba3edf3d7b8146b5485a849bc6',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A09e95fba3edf3d7b8146b5485a849bc6.v6cZfYDvQ6doNaKTO2pv7PWSCu0ieRfzIF3Yycsp%2Bvw',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m400[0m 60.172 ms - 80[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:55.405Z"}
  console.log
    CSRF token generation: {
      sessionID: '5988bde8785a81de29700daa5841d8ae',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: nU0x2Zni-uYx0zr_5Qfsk4Sbu-DVf7vQNtAA

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5988bde8785a81de29700daa5841d8ae

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: KUCsUV3mXR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.830 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:55.709Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '5988bde8785a81de29700daa5841d8ae',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A5988bde8785a81de29700daa5841d8ae.PmpOJXNSuFtfTbc5T5KS0lG4HqBJ3wz4PvWO2Ad9w0A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 58.627 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:56.526Z"}
  console.log
    CSRF token generation: {
      sessionID: '59a2387bddd4a83d888e1515e1574563',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TRlirwFp-11izlbS2Qyd8hT4G99WdZ6Li7bM

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 59a2387bddd4a83d888e1515e1574563

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dDdolvDOyf...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.308 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:56.864Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/status {
      sessionID: '59a2387bddd4a83d888e1515e1574563',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A59a2387bddd4a83d888e1515e1574563.x3x7LIS%2FYTzDoLBZicKFGcGSSAMuY9mCjYAVXGPq73c',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/status [33m403[0m 59.340 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:57.696Z"}
  console.log
    CSRF token generation: {
      sessionID: 'c4a5ecc5488ea3da303fa4377eb29273',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 1V2MxFgX-3_4qzWkoFGZyr4_5KBmUOzjIuRg

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: c4a5ecc5488ea3da303fa4377eb29273

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: NtQP5HWCTu...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.733 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:58.049Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'c4a5ecc5488ea3da303fa4377eb29273',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Ac4a5ecc5488ea3da303fa4377eb29273.c2KBIsTPaKZpDbxnk85rC7SunzoJMkyWG%2BJfS6F4LPI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 145.595 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:58.976Z"}
  console.log
    CSRF token generation: {
      sessionID: 'bbd800b04c8376a95215ae67ac546f7c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 3bRzHfkZ-BjbvHQC8fs1uvDRQCxlaDArzVlU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: bbd800b04c8376a95215ae67ac546f7c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: hFBrsuq5xa...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.839 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:06:59.291Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: 'bbd800b04c8376a95215ae67ac546f7c',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Abbd800b04c8376a95215ae67ac546f7c.LIOmN97isks%2FFaxKK8Nd0MqnUk8R5zANgSMQVenOBfk',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [32m200[0m 148.550 ms - 57[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:00.202Z"}
  console.log
    CSRF token generation: {
      sessionID: '432d174e7ca2244598caf37eb94b5d14',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: uCYpYF79-EmiVkEz2Mwxf3cM0k8QHRBdWsVc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 432d174e7ca2244598caf37eb94b5d14

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: A7LpZ97QVK...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.903 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:00.561Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '432d174e7ca2244598caf37eb94b5d14',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A432d174e7ca2244598caf37eb94b5d14.%2B%2FWhnSxXxaIYR3BXnFEAtI%2FDHdHo4D10R4bB%2FcJePqQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m400[0m 59.975 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:01.406Z"}
  console.log
    CSRF token generation: {
      sessionID: '9c206d2455683c90c5be3c3562f7eed8',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CfKIpGGj-kY4IL370VmxTdO_LLXxDDFyo2Hc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9c206d2455683c90c5be3c3562f7eed8

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: LdC1mKpw1K...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.847 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/ORD123456/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:01.736Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/cancel {
      sessionID: '9c206d2455683c90c5be3c3562f7eed8',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A9c206d2455683c90c5be3c3562f7eed8.zG%2BmNwU6LFx6pZ97AacKo1aP3HWSQwU%2FqiCj2WhmJ6A',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/ORD123456/cancel [33m403[0m 61.567 ms - 42[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:02.553Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd1e206b6565cae03686201ed9a4d3ec',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: CQPjbh3y-0sGniRR76MtUlN_oUIjEU0Of4uw

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cd1e206b6565cae03686201ed9a4d3ec

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: nHire6sO8R...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 9.365 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:02.865Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: 'cd1e206b6565cae03686201ed9a4d3ec',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd1e206b6565cae03686201ed9a4d3ec.V%2F7bmZsuBFgulp3c0%2FsguX2j5H%2BB%2BLt67pN8z3bkS1k',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 125.560 ms - 201[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:03.781Z"}
  console.log
    CSRF token generation: {
      sessionID: '3e8f4487a84272e589b1c31124ddd3fe',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 6w5FF6Ck-5lcnnnfl_oMBn_MQQ6kHnqrm2qs

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 3e8f4487a84272e589b1c31124ddd3fe

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: eaxSZhrSGF...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.542 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/bulk/status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:04.149Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/status {
      sessionID: '3e8f4487a84272e589b1c31124ddd3fe',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A3e8f4487a84272e589b1c31124ddd3fe.Kt2CwOSV6tuOoqxlp87ax%2FmRrphQRsKaVZvE0JsWRc8',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/bulk/status [32m200[0m 123.133 ms - 296[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:05.033Z"}
  console.log
    CSRF token generation: {
      sessionID: '838352e373fd68337a67d2adaf1f4f02',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ujdtTu6r-AFH12OAllhjbKSTbk0JSlkZhV3o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 838352e373fd68337a67d2adaf1f4f02

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: CcUio-hU5j...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 10.370 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders/bulk/cancel {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:05.350Z"}
  console.log
    CSRF check for: /api/v1/orders/bulk/cancel {
      sessionID: '838352e373fd68337a67d2adaf1f4f02',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A838352e373fd68337a67d2adaf1f4f02.4531a4hk55DeWnzLFLlXcTziHasn31DMA6nDHYo3mKI',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPOST /api/v1/orders/bulk/cancel [32m200[0m 155.102 ms - 161[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:06.290Z"}
  console.log
    CSRF token generation: {
      sessionID: 'af70ceba6d812da4d2519823022fd30c',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: D9stfcwg-yVjaDzpFDxqEvsEeNIzPD6AGF9o

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: af70ceba6d812da4d2519823022fd30c

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fvoMB7ynPL...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.880 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:06.609Z"}
[0mGET /api/v1/orders/export?format=csv&startDate=2025-05-01&endDate=2025-05-31&affiliateId=AFF123 [32m200[0m 90.223 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:07.472Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c1af495a59f70b07b032bf68d21c04d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 7ErYi62U-WQ-hsIRJ5xy0DH2dveN2JrsNJPE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c1af495a59f70b07b032bf68d21c04d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fhZ1NnAhXm...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.868 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:07.805Z"}
[0mGET /api/v1/orders/export?format=json&status=complete&affiliateId=AFF123 [32m200[0m 87.913 ms - -[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:08.647Z"}
  console.log
    CSRF token generation: {
      sessionID: '0edc70b5fce9b88b72d6c6942247f84d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: muFOpuvM-wcvq2c_cyCQwe9nSmVOBGVm17GQ

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 0edc70b5fce9b88b72d6c6942247f84d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: ElY3VYh4yk...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.338 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=excel&customerId=CUST123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:08.962Z"}
[0mGET /api/v1/orders/export?format=excel&customerId=CUST123 [31m501[0m 85.514 ms - 62[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:09.799Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c3b7675d620f545732465a69b344b5d',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: OupQDbdN-WuAHtCTZpCUXEqJ1rfjQSGMudBU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c3b7675d620f545732465a69b344b5d

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: zVaniot5Mg...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.488 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/export?format=csv {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:10.113Z"}
[0mGET /api/v1/orders/export?format=csv [33m403[0m 28.953 ms - 70[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:10.911Z"}
  console.log
    CSRF token generation: {
      sessionID: '4de24287b3f22db4eaa4559a3e53f356',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: Z6ivrUN6-HWu6g4Ljx3nmQVuVjMShKEisVbU

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 4de24287b3f22db4eaa4559a3e53f356

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: QlQnBQdvqw...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.106 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:11.213Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '4de24287b3f22db4eaa4559a3e53f356',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A4de24287b3f22db4eaa4559a3e53f356.s36gRvptWFpeBISptU1iJ8rMsSZX979vXqF%2Bcfbv%2F4U',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 88.403 ms - 223[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:12.094Z"}
  console.log
    CSRF token generation: {
      sessionID: '975f3d7f8b0216d7eff01076e89faa37',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: HWXLzLAK-quY-DuW09BOPts1q4UAMR1cMq2U

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 975f3d7f8b0216d7eff01076e89faa37

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 0tvd54EBKR...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.911 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:12.402Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '975f3d7f8b0216d7eff01076e89faa37',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A975f3d7f8b0216d7eff01076e89faa37.q%2B3C1bpuXDmQDCZZwwN50W0Ga1tHgF5iXs4eKu%2BK42s',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 94.054 ms - 180[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:13.241Z"}
  console.log
    CSRF token generation: {
      sessionID: '6c7fc9ef09f8558f599352f23572ca1e',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: tVZgo71E-pNxePGkbatcXMWGJTeNTe6yOQkI

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6c7fc9ef09f8558f599352f23572ca1e

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: AYoKCy60Lp...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.625 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:13.578Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '6c7fc9ef09f8558f599352f23572ca1e',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6c7fc9ef09f8558f599352f23572ca1e.HQ%2B8DhLsz8ph1snpq1%2F7hQwmFXoHJifICZpBNgM3A84',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [33m400[0m 58.587 ms - 82[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:14.392Z"}
  console.log
    CSRF token generation: {
      sessionID: '08a20217197043d41cbc4d3326ea2adf',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: TpYXFTBQ-Vaxca2zyCrEFNnfkJq3ScPminX8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 08a20217197043d41cbc4d3326ea2adf

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: Wdi25v7g0i...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.156 ms - 67[0m
[34mdebug[39m: PUT /api/v1/orders/ORD123456/payment-status {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:14.764Z"}
  console.log
    CSRF check for: /api/v1/orders/ORD123456/payment-status {
      sessionID: '08a20217197043d41cbc4d3326ea2adf',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A08a20217197043d41cbc4d3326ea2adf.CVWlySrQFiDU31whlRGPyoMkX5lEKB%2F3w7S9bR63ekY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

[0mPUT /api/v1/orders/ORD123456/payment-status [32m200[0m 90.038 ms - 319[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:15.606Z"}
  console.log
    CSRF token generation: {
      sessionID: 'a489bf231cc0e5dabe149638afd47e95',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ps5qWZZ2-n0qBC8G2o28qjA2rtMb7dgAW6h8

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: a489bf231cc0e5dabe149638afd47e95

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: l5bkHs0mZx...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.441 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/search?search=alice&affiliateId=AFF123 {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:15.975Z"}
[0mGET /api/v1/orders/search?search=alice&affiliateId=AFF123 [32m200[0m 143.032 ms - 552[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:16.879Z"}
  console.log
    CSRF token generation: {
      sessionID: '5c56ce67213857e919ed06405e58b0c7',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: QgubLqPm-pfINbPYfk_ct6zQrhM4L7LVqRmo

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5c56ce67213857e919ed06405e58b0c7

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: fYocsb-NUM...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.679 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=complete&date=month {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:17.224Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=complete&date=month [32m200[0m 110.482 ms - 116[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:18.090Z"}
  console.log
    CSRF token generation: {
      sessionID: '5e647d131d8f994f296355abe82f4b2f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: 20aqqXIv-wbOY7lZLakL2kVNwcCwz9nIADnk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 5e647d131d8f994f296355abe82f4b2f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: 7ZUTdfMqii...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 5.784 ms - 67[0m
[34mdebug[39m: GET /api/v1/affiliates/AFF123/orders?status=all {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:18.426Z"}
[0mGET /api/v1/affiliates/AFF123/orders?status=all [32m200[0m 114.606 ms - 945[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:19.340Z"}
  console.log
    CSRF token generation: {
      sessionID: '9e6c1b1494d6152ce3c5aa8151005df5',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: wcVhZtaD-da3REzQYgz1NeqoLIZvX9C31buk

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 9e6c1b1494d6152ce3c5aa8151005df5

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: DazV1Eb24c...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.225 ms - 67[0m
[34mdebug[39m: GET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:19.698Z"}
[0mGET /api/v1/orders/statistics?affiliateId=AFF123&includeStats=true [32m200[0m 57.601 ms - 239[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:20.512Z"}
  console.log
    CSRF token generation: {
      sessionID: '96b2b55b91f735da2a065d3edd761e72',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: j1O8RGiC-Ipl4AWOdG58-N_G1qIdXU4qrcXc

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 96b2b55b91f735da2a065d3edd761e72

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: qNBvTOncO_...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.350 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:21.208Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '96b2b55b91f735da2a065d3edd761e72',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A96b2b55b91f735da2a065d3edd761e72.vgiqjbHGJwuUe%2Ftv%2BPsjhMjfajjsL%2FWUKx7f09KI4mo',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 235.998 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:22.281Z"}
  console.log
    CSRF token generation: {
      sessionID: 'fbdd5971f74d7705a5e20286567bf09f',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: ABZrzcN4-c08XY4r26qq3p0p6f2PvJW1Bw3Y

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: fbdd5971f74d7705a5e20286567bf09f

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: FHnrlid2mj...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 8.079 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:23.071Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'fbdd5971f74d7705a5e20286567bf09f',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Afbdd5971f74d7705a5e20286567bf09f.t4EkUTE%2FV%2BfQCAYT9SsY9NouycVKWvAodVjMJt2Usd4',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 50,
      numberOfBags: 3
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 233.091 ms - 102[0m
  console.log
    Order baseRate: 2 Expected: 2.00

      at Object.log (tests/integration/order.test.js:1139:15)

[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:24.265Z"}
  console.log
    CSRF token generation: {
      sessionID: 'cd1ff94f263d70064a3e811c98ac87fc',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: cc4A9Fu6-x33zGxxA8T2ygNr2fbNLASgz6UE

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: cd1ff94f263d70064a3e811c98ac87fc

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: E_xdkjdAMQ...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 7.617 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:25.072Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'cd1ff94f263d70064a3e811c98ac87fc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd1ff94f263d70064a3e811c98ac87fc.vpYL18u7DqIuLRlXUbbYUWG3TxkViGHvjrfdDbejKUQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-0',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-0

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test0 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 226.152 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:25.392Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'cd1ff94f263d70064a3e811c98ac87fc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd1ff94f263d70064a3e811c98ac87fc.vpYL18u7DqIuLRlXUbbYUWG3TxkViGHvjrfdDbejKUQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-1',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-1

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test1 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 256.844 ms - 103[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:25.748Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: 'cd1ff94f263d70064a3e811c98ac87fc',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3Acd1ff94f263d70064a3e811c98ac87fc.vpYL18u7DqIuLRlXUbbYUWG3TxkViGHvjrfdDbejKUQ',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST-COMM-2',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-25',
      pickupTime: 'morning',
      estimatedWeight: 30,
      numberOfBags: 2
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST-COMM-2

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Test2 Customer

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 230.583 ms - 103[0m
[34mdebug[39m: GET /api/csrf-token {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:26.944Z"}
  console.log
    CSRF token generation: {
      sessionID: '6f143190472f46c281760b831423af59',
      hasSession: true,
      hasCsrfSecret: false
    }

      at log (server/config/csrf-config.js:296:11)

  console.log
    === Generated CSRF token ===

      at log (server/config/csrf-config.js:313:13)

  console.log
    Token: g47ex9h6-CR-sIoPwkhEBkJdxxJYwpyBwk7s

      at log (server/config/csrf-config.js:314:13)

  console.log
    Session ID: 6f143190472f46c281760b831423af59

      at log (server/config/csrf-config.js:315:13)

  console.log
    CSRF Secret: dT1oOTmU4U...

      at log (server/config/csrf-config.js:316:13)

  console.log
    ===========================

      at log (server/config/csrf-config.js:317:13)

[0mGET /api/csrf-token [32m200[0m 6.121 ms - 67[0m
[34mdebug[39m: POST /api/v1/orders {"service":"wavemax-affiliate","timestamp":"2025-06-28T14:07:27.643Z"}
  console.log
    CSRF check for: /api/v1/orders {
      sessionID: '6f143190472f46c281760b831423af59',
      hasSession: true,
      sessionCookie: 'wavemax.sid=s%3A6f143190472f46c281760b831423af59.o9ehIhOf3aE6hpsJeNYPbhnMDfxfEcLS1qLyf8QClsY',
      hasCsrfSecret: true,
      hasAuth: true,
      origin: undefined,
      referer: undefined,
      userAgent: undefined
    }

      at log (server/config/csrf-config.js:225:11)

  console.log
    Creating order with data: {
      customerId: 'CUST123',
      affiliateId: 'AFF123',
      pickupDate: '2025-05-26',
      pickupTime: 'morning',
      estimatedWeight: 15,
      numberOfBags: 1
    }

      at log (server/controllers/orderController.js:113:13)

  console.log
    Looking for customer with ID: CUST123

      at log (server/controllers/orderController.js:126:13)

  console.log
    Found customer: Jane Smith

      at log (server/controllers/orderController.js:136:13)

  console.log
    Looking for affiliate with ID: AFF123

      at log (server/controllers/orderController.js:155:13)

  console.log
    Found affiliate: John Doe

      at log (server/controllers/orderController.js:165:13)

[0mPOST /api/v1/orders [32m201[0m 226.625 ms - 104[0m
PASS tests/integration/order.test.js (50.702 s)
  Order Integration Tests
    POST /api/v1/orders
      ✓ should create order as customer (1895 ms)
      ✓ should create order as affiliate for their customer (1273 ms)
      ✓ should fail with invalid customer ID (1101 ms)
      ✓ should fail with invalid affiliate ID (1155 ms)
      ✓ should fail when customer tries to create order for another customer (1212 ms)
      ✓ should validate required fields (1095 ms)
    GET /api/v1/orders/:orderId
      ✓ should return order details for customer (1174 ms)
      ✓ should return order details for affiliate (1204 ms)
      ✓ should fail for unauthorized customer (1142 ms)
      ✓ should return 404 for non-existent order (1123 ms)
    PUT /api/v1/orders/:orderId/status
      ✓ should update order status as affiliate (1276 ms)
      ✓ should update weight when processing (1292 ms)
      ✓ should prevent invalid status transitions (1170 ms)
      ✓ should fail for unauthorized affiliate (1122 ms)
      ✓ should fail for customers (1168 ms)
    POST /api/v1/orders/:orderId/cancel
      ✓ should cancel order as customer (1281 ms)
      ✓ should cancel order as affiliate (1226 ms)
      ✓ should prevent cancelling non-cancellable orders (1205 ms)
      ✓ should fail for unauthorized user (1146 ms)
    Bulk order operations
      ✓ should update multiple orders status in bulk (1228 ms)
      ✓ should handle partial bulk update failures (1252 ms)
      ✓ should cancel multiple orders in bulk (1256 ms)
    Order export functionality
      ✓ should export orders as CSV (1182 ms)
      ✓ should export orders as JSON (1175 ms)
      ✓ should export orders as Excel (1152 ms)
      ✓ should respect export permissions (1112 ms)
    Payment status updates
      ✓ should update payment status (1183 ms)
      ✓ should handle payment failure (1146 ms)
      ✓ should prevent payment status update on non-complete orders (1150 ms)
      ✓ should record refund (1215 ms)
    Order filtering and search
      ✓ should search orders by customer name (1273 ms)
      ✓ should filter orders by multiple criteria (1211 ms)
      ✓ should filter by pickup time slots (1248 ms)
      ✓ should provide aggregated statistics with filters (1173 ms)
    Commission Calculation Tests
      ✓ should calculate commission correctly when order is completed (1767 ms)
      ✓ should use dynamic WDF rate from SystemConfig (1985 ms)
      ✓ should calculate commission for multiple orders (2680 ms)
      ✓ should handle high delivery fee scenarios (1774 ms)

-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                                                                                                                                       
-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                    |   86.03 |    73.94 |   91.16 |   85.93 |                                                                                                                                                                                                                                                                                                                                                                         
 config                      |   96.68 |    87.17 |     100 |   96.53 |                                                                                                                                                                                                                                                                                                                                                                         
  csrf-config.js             |    86.2 |    72.72 |     100 |    86.2 | 240-264,274-275,290,305-306                                                                                                                                                                                                                                                                                                                                             
  passport-config.js         |     100 |    86.66 |     100 |     100 | 19,210,225,250-251,304,330-331                                                                                                                                                                                                                                                                                                                                          
  paygistix.config.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  storeIPs.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
 controllers                 |   85.45 |    73.99 |   93.66 |   85.42 |                                                                                                                                                                                                                                                                                                                                                                         
  administratorController.js |    87.7 |    78.54 |   85.96 |    88.1 | 190-208,225,332,405,453-454,471,481,506,586-587,674-692,726,786-787,870,928-929,989-990,1212-1221,1251-1252,1383-1384,1650-1651,1698,1708,1710,1752,1763-1764,1795-1796,1836-1837,1846-1847,1981-1995,2020,2227,2295-2296,2419-2420                                                                                                                                     
  affiliateController.js     |   86.51 |    79.01 |   96.96 |   86.24 | 207,217,248-250,284-285,302,312,327,386-387,439-440,445,505-506,529,560-563,578,667,725-726,742,825-826,861,943-944,953-986                                                                                                                                                                                                                                             
  authController.js          |   64.38 |    50.81 |   84.21 |   64.38 | 130-131,143,176-181,185,215-216,234-235,279-288,340-341,355-436,451-452,460-461,490-491,541-542,589-590,640-641,656,668-673,702-710,718-719,734,752-763,779,782,804-805,830,871,895,905,915-916,959-974,1087,1092-1137,1165,1207-1248,1394,1457,1510-1511,1523-1567,1588-1651,1656-1702,1730,1766-1804,1816,1852,1866-1867,1880,1893,1950,1999-2000,2014-2053,2067-2106 
  customerController.js      |   91.52 |    83.64 |     100 |    91.3 | 135,214-215,234,247,270-286,296-297,316,329,341,343,345,379-380                                                                                                                                                                                                                                                                                                         
  operatorController.js      |   98.31 |    86.28 |     100 |   98.57 | 560,632,695-696,860                                                                                                                                                                                                                                                                                                                                                     
  orderController.js         |   83.74 |    72.03 |    92.3 |   83.71 | 145-146,228-229,240-293,381-382,401,469-470,538-539,564,574,627-632,643-644,659,669,682,695-700,723-724,863-870,909,926,968-969,989-991,996,1008-1009,1076-1077,1103-1104,1166-1167                                                                                                                                                                                     
  paymentController.js       |   94.84 |    80.85 |     100 |   94.84 | 192-193,212,249-250                                                                                                                                                                                                                                                                                                                                                     
  quickbooksController.js    |   94.73 |    81.81 |     100 |   94.35 | 269-270,332,408-409,438-439                                                                                                                                                                                                                                                                                                                                             
  w9ControllerDocuSign.js    |   93.96 |    84.78 |     100 |   93.96 | 207,222,280,285-286,334-336,421-422,475,676                                                                                                                                                                                                                                                                                                                             
 middleware                  |   88.07 |    83.91 |   94.73 |    87.5 |                                                                                                                                                                                                                                                                                                                                                                         
  auth.js                    |    72.3 |    74.57 |   66.66 |    72.3 | 67-93,121,134,157-159,200-210                                                                                                                                                                                                                                                                                                                                           
  errorHandler.js            |    72.3 |    63.26 |     100 |    72.3 | 10,81-96,102-103                                                                                                                                                                                                                                                                                                                                                        
  rbac.js                    |     100 |    95.45 |     100 |     100 | 248,268,274,301                                                                                                                                                                                                                                                                                                                                                         
  sanitization.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
 models                      |   92.54 |    82.58 |   92.66 |   92.74 |                                                                                                                                                                                                                                                                                                                                                                         
  Administrator.js           |   80.76 |    61.11 |   82.35 |   82.19 | 137-159,169-174                                                                                                                                                                                                                                                                                                                                                         
  Affiliate.js               |   86.04 |    79.54 |   84.61 |   86.04 | 89,213,217,232,237-244                                                                                                                                                                                                                                                                                                                                                  
  CallbackPool.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  Customer.js                |   86.66 |    85.71 |     100 |   86.66 | 103,107                                                                                                                                                                                                                                                                                                                                                                 
  DocuSignToken.js           |   86.36 |    81.81 |     100 |   86.36 | 101,126-127                                                                                                                                                                                                                                                                                                                                                             
  OAuthSession.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  Operator.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  Order.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  Payment.js                 |   88.09 |    55.55 |   88.88 |   88.09 | 237-245                                                                                                                                                                                                                                                                                                                                                                 
  PaymentExport.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  PaymentMethod.js           |   81.81 |    60.86 |   85.71 |   81.53 | 215-236,241-252                                                                                                                                                                                                                                                                                                                                                         
  PaymentToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  RefreshToken.js            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  SystemConfig.js            |     100 |     98.3 |     100 |     100 | 70                                                                                                                                                                                                                                                                                                                                                                      
  TokenBlacklist.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  Transaction.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
 routes                      |   95.95 |    86.98 |   90.47 |   95.95 |                                                                                                                                                                                                                                                                                                                                                                         
  administratorRoutes.js     |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  affiliateRoutes.js         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  authRoutes.js              |   96.87 |    83.33 |     100 |   96.87 | 65                                                                                                                                                                                                                                                                                                                                                                      
  coverageRoutes.js          |   96.96 |      100 |    87.5 |   96.96 | 96                                                                                                                                                                                                                                                                                                                                                                      
  customerRoutes.js          |   95.83 |    83.33 |     100 |   95.83 | 42                                                                                                                                                                                                                                                                                                                                                                      
  generalPaymentCallback.js  |   93.02 |    95.83 |     100 |   93.02 | 45-46,82-83,303-304                                                                                                                                                                                                                                                                                                                                                     
  operatorRoutes.js          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  orderRoutes.js             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  paymentCallbackRoute.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  paymentRoutes.js           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  quickbooksRoutes.js        |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  routingRoutes.js           |   83.33 |      100 |       0 |   83.33 | 7                                                                                                                                                                                                                                                                                                                                                                       
  socialAuthRoutes.js        |   78.26 |    55.88 |   71.42 |   78.26 | 80,131,167-176,199-208                                                                                                                                                                                                                                                                                                                                                  
  systemConfigRoutes.js      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  w9Routes.js                |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
 services                    |   84.82 |    68.18 |    92.1 |   85.13 |                                                                                                                                                                                                                                                                                                                                                                         
  callbackPoolManager.js     |   94.44 |    61.11 |     100 |   94.44 | 13-17                                                                                                                                                                                                                                                                                                                                                                   
  docusignService.js         |   81.76 |    69.56 |      85 |   82.14 | 67-75,172,231-244,265,276-280,360,453-454,509-510,527-531,572-573,595-596,625-626                                                                                                                                                                                                                                                                                       
 services/paygistix          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  index.js                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
 utils                       |   69.74 |    56.07 |   77.38 |   68.69 |                                                                                                                                                                                                                                                                                                                                                                         
  auditLogger.js             |     100 |    97.14 |     100 |     100 | 101                                                                                                                                                                                                                                                                                                                                                                     
  emailService.js            |    38.6 |    18.93 |   32.14 |    38.6 | 29-48,127,157-158,353,361-501,509-636,644-746,755-862,889,904-905,1122-1123,1131-1268,1276-1428,1436-1542,1550-1569,1581-1691,1699-1718,1730-1841,1849-1957,1965-2078,2088,2099-2107,2115-2123,2131-2190,2195-2232,2237-2272                                                                                                                                            
  encryption.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  fieldFilter.js             |   85.71 |    72.41 |     100 |   87.71 | 140,201-206                                                                                                                                                                                                                                                                                                                                                             
  helpers.js                 |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  logger.js                  |     100 |       50 |     100 |     100 | 11-30                                                                                                                                                                                                                                                                                                                                                                   
  paginationMiddleware.js    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
  passwordValidator.js       |   90.83 |    89.71 |     100 |   89.81 | 141-145,193,231-232,234-235,246-247                                                                                                                                                                                                                                                                                                                                     
  validators.js              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                                                                                                                                         
-----------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jest: "global" coverage threshold for branches (80%) not met: 73.94%
Summary of all failing tests
FAIL tests/unit/orderModelSimple.test.js
  ● Order Model - Line Coverage › Scheduled Status Timestamp (Lines 139-140) › should set scheduledAt when saving with scheduled status

    ValidationError: Order validation failed: status: `scheduled` is not a valid enum value for path `status`.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3343:32)
      at node_modules/mongoose/lib/document.js:3104:17
      at node_modules/mongoose/lib/schemaType.js:1407:9

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle orderProcessingStatus changes

    expect(received).toBeDefined()

    Received: undefined

      91 |       order.orderProcessingStatus = 'washing';
      92 |       await order.save();
    > 93 |       expect(order.processingStarted).toBeDefined();
         |                                       ^
      94 |       const washingStartTime = order.processingStarted;
      95 |       
      96 |       // Test drying status (should not overwrite processingStarted)

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:93:39)

  ● Order Model - Line Coverage › Order Processing Status (Lines 158-174) › should handle completed status without processingStarted

    expect(received).toBeDefined()

    Received: undefined

      136 |       await order.save();
      137 |       
    > 138 |       expect(order.processingCompleted).toBeDefined();
          |                                         ^
      139 |       expect(order.processingTimeMinutes).toBeUndefined(); // No start time to calculate from
      140 |     });
      141 |   });

      at Object.toBeDefined (tests/unit/orderModelSimple.test.js:138:41)

FAIL tests/unit/helpers.test.js
  ● Helpers Utility Functions › generateRandomString › should generate a string of default length 10

    TypeError: generateRandomString is not a function

      89 |   describe('generateRandomString', () => {
      90 |     it('should generate a string of default length 10', () => {
    > 91 |       const result = generateRandomString();
         |                      ^
      92 |       expect(result).toHaveLength(10);
      93 |       expect(result).toMatch(/^[A-Za-z0-9]+$/);
      94 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:91:22)

  ● Helpers Utility Functions › generateRandomString › should generate strings of specified length

    TypeError: generateRandomString is not a function

       95 |
       96 |     it('should generate strings of specified length', () => {
    >  97 |       expect(generateRandomString(5)).toHaveLength(5);
          |              ^
       98 |       expect(generateRandomString(20)).toHaveLength(20);
       99 |       expect(generateRandomString(0)).toHaveLength(0);
      100 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:97:14)

  ● Helpers Utility Functions › generateRandomString › should generate different strings on each call

    TypeError: generateRandomString is not a function

      103 |       const results = new Set();
      104 |       for (let i = 0; i < 10; i++) {
    > 105 |         results.add(generateRandomString());
          |                     ^
      106 |       }
      107 |       expect(results.size).toBeGreaterThan(5); // Very unlikely to get duplicates
      108 |     });

      at Object.generateRandomString (tests/unit/helpers.test.js:105:21)

  ● Helpers Utility Functions › generateRandomString › should only use alphanumeric characters

    TypeError: generateRandomString is not a function

      109 |
      110 |     it('should only use alphanumeric characters', () => {
    > 111 |       const result = generateRandomString(100);
          |                      ^
      112 |       expect(result).toMatch(/^[A-Za-z0-9]*$/);
      113 |     });
      114 |   });

      at Object.generateRandomString (tests/unit/helpers.test.js:111:22)

  ● Helpers Utility Functions › sanitizeForCSV › should return empty string for null and undefined

    TypeError: sanitizeForCSV is not a function

      116 |   describe('sanitizeForCSV', () => {
      117 |     it('should return empty string for null and undefined', () => {
    > 118 |       expect(sanitizeForCSV(null)).toBe('');
          |              ^
      119 |       expect(sanitizeForCSV(undefined)).toBe('');
      120 |     });
      121 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:118:14)

  ● Helpers Utility Functions › sanitizeForCSV › should convert non-string values to strings

    TypeError: sanitizeForCSV is not a function

      121 |
      122 |     it('should convert non-string values to strings', () => {
    > 123 |       expect(sanitizeForCSV(123)).toBe('123');
          |              ^
      124 |       expect(sanitizeForCSV(true)).toBe('true');
      125 |       expect(sanitizeForCSV(false)).toBe('false');
      126 |     });

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:123:14)

  ● Helpers Utility Functions › sanitizeForCSV › should leave simple strings unchanged

    TypeError: sanitizeForCSV is not a function

      127 |
      128 |     it('should leave simple strings unchanged', () => {
    > 129 |       expect(sanitizeForCSV('hello')).toBe('hello');
          |              ^
      130 |       expect(sanitizeForCSV('test123')).toBe('test123');
      131 |     });
      132 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:129:14)

  ● Helpers Utility Functions › sanitizeForCSV › should escape double quotes by doubling them

    TypeError: sanitizeForCSV is not a function

      132 |
      133 |     it('should escape double quotes by doubling them', () => {
    > 134 |       expect(sanitizeForCSV('She said "hello"')).toBe('"She said ""hello"""');
          |              ^
      135 |       expect(sanitizeForCSV('""')).toBe('""""""');
      136 |     });
      137 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:134:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing commas in quotes

    TypeError: sanitizeForCSV is not a function

      137 |
      138 |     it('should wrap strings containing commas in quotes', () => {
    > 139 |       expect(sanitizeForCSV('hello, world')).toBe('"hello, world"');
          |              ^
      140 |       expect(sanitizeForCSV('a,b,c')).toBe('"a,b,c"');
      141 |     });
      142 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:139:14)

  ● Helpers Utility Functions › sanitizeForCSV › should wrap strings containing newlines in quotes

    TypeError: sanitizeForCSV is not a function

      142 |
      143 |     it('should wrap strings containing newlines in quotes', () => {
    > 144 |       expect(sanitizeForCSV('hello\nworld')).toBe('"hello\nworld"');
          |              ^
      145 |       expect(sanitizeForCSV('line1\nline2\nline3')).toBe('"line1\nline2\nline3"');
      146 |     });
      147 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:144:14)

  ● Helpers Utility Functions › sanitizeForCSV › should handle complex strings with multiple special characters

    TypeError: sanitizeForCSV is not a function

      147 |
      148 |     it('should handle complex strings with multiple special characters', () => {
    > 149 |       expect(sanitizeForCSV('John "JD" Doe, CEO\nAcme Corp')).toBe('"John ""JD"" Doe, CEO\nAcme Corp"');
          |              ^
      150 |     });
      151 |   });
      152 |

      at Object.sanitizeForCSV (tests/unit/helpers.test.js:149:14)

  ● Helpers Utility Functions › calculatePercentage › should calculate percentage correctly

    TypeError: calculatePercentage is not a function

      153 |   describe('calculatePercentage', () => {
      154 |     it('should calculate percentage correctly', () => {
    > 155 |       expect(calculatePercentage(50, 100)).toBe(50);
          |              ^
      156 |       expect(calculatePercentage(25, 100)).toBe(25);
      157 |       expect(calculatePercentage(75, 150)).toBe(50);
      158 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:155:14)

  ● Helpers Utility Functions › calculatePercentage › should handle zero total

    TypeError: calculatePercentage is not a function

      159 |
      160 |     it('should handle zero total', () => {
    > 161 |       expect(calculatePercentage(10, 0)).toBe(0);
          |              ^
      162 |       expect(calculatePercentage(0, 0)).toBe(0);
      163 |     });
      164 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:161:14)

  ● Helpers Utility Functions › calculatePercentage › should handle null or undefined total

    TypeError: calculatePercentage is not a function

      164 |
      165 |     it('should handle null or undefined total', () => {
    > 166 |       expect(calculatePercentage(10, null)).toBe(0);
          |              ^
      167 |       expect(calculatePercentage(10, undefined)).toBe(0);
      168 |     });
      169 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:166:14)

  ● Helpers Utility Functions › calculatePercentage › should respect decimal places parameter

    TypeError: calculatePercentage is not a function

      169 |
      170 |     it('should respect decimal places parameter', () => {
    > 171 |       expect(calculatePercentage(1, 3, 0)).toBe(33);
          |              ^
      172 |       expect(calculatePercentage(1, 3, 1)).toBe(33.3);
      173 |       expect(calculatePercentage(1, 3, 2)).toBe(33.33);
      174 |       expect(calculatePercentage(1, 3, 3)).toBe(33.333);

      at Object.calculatePercentage (tests/unit/helpers.test.js:171:14)

  ● Helpers Utility Functions › calculatePercentage › should round correctly

    TypeError: calculatePercentage is not a function

      176 |
      177 |     it('should round correctly', () => {
    > 178 |       expect(calculatePercentage(2, 3, 2)).toBe(66.67);
          |              ^
      179 |       expect(calculatePercentage(1, 6, 2)).toBe(16.67);
      180 |     });
      181 |

      at Object.calculatePercentage (tests/unit/helpers.test.js:178:14)

  ● Helpers Utility Functions › calculatePercentage › should handle edge cases

    TypeError: calculatePercentage is not a function

      181 |
      182 |     it('should handle edge cases', () => {
    > 183 |       expect(calculatePercentage(0, 100)).toBe(0);
          |              ^
      184 |       expect(calculatePercentage(100, 100)).toBe(100);
      185 |       expect(calculatePercentage(200, 100)).toBe(200);
      186 |     });

      at Object.calculatePercentage (tests/unit/helpers.test.js:183:14)

  ● Helpers Utility Functions › calculatePercentage › should handle negative values

    TypeError: calculatePercentage is not a function

      187 |
      188 |     it('should handle negative values', () => {
    > 189 |       expect(calculatePercentage(-50, 100)).toBe(-50);
          |              ^
      190 |       expect(calculatePercentage(50, -100)).toBe(-50);
      191 |     });
      192 |   });

      at Object.calculatePercentage (tests/unit/helpers.test.js:189:14)

FAIL tests/unit/orderControllerAdditional.test.js
  ● Order Controller - Additional Coverage › Error handling in various methods › should handle error in createOrder when email service fails (lines 145-146)

    TypeError: Cannot read properties of undefined (reading 'mockRejectedValue')

      152 |       
      153 |       // Mock email service to throw error
    > 154 |       emailService.sendOrderConfirmationEmail.mockRejectedValue(new Error('Email failed'));
          |                                               ^
      155 |       emailService.sendNewOrderNotificationToAffiliate.mockRejectedValue(new Error('Email failed'));
      156 |
      157 |       const consoleSpy = jest.spyOn(console, 'error').mockImplementation();

      at Object.mockRejectedValue (tests/unit/orderControllerAdditional.test.js:154:47)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle CSV export with special characters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Content-Type", "text/csv"

    Number of calls: 0

      193 |       await orderController.exportOrders(req, res);
      194 |
    > 195 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Type', 'text/csv');
          |                             ^
      196 |       expect(res.setHeader).toHaveBeenCalledWith('Content-Disposition', 'attachment; filename=orders_export.csv');
      197 |       
      198 |       const csvContent = res.end.mock.calls[0][0];

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:195:29)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle JSON export

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "count": 1,
    -   "orders": Array [
    -     Object {
    -       "customerId": "CUST123",
    -       "orderId": "ORD001",
    -     },
    -   ],
    -   "success": true,
    +   "message": "Insufficient permissions for this export",
    +   "success": false,
      },

    Number of calls: 1

      218 |       await orderController.exportOrders(req, res);
      219 |
    > 220 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      221 |         success: true,
      222 |         count: 1,
      223 |         orders: [{ orderId: 'ORD001', customerId: 'CUST123' }]

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:220:24)

  ● Order Controller - Additional Coverage › exportOrders edge cases (lines 240-293) › should handle export errors

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error exporting orders:", Any<Error>

    Number of calls: 0

      238 |       await orderController.exportOrders(req, res);
      239 |
    > 240 |       expect(consoleSpy).toHaveBeenCalledWith('Error exporting orders:', expect.any(Error));
          |                          ^
      241 |       expect(res.status).toHaveBeenCalledWith(500);
      242 |       
      243 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:240:26)

  ● Order Controller - Additional Coverage › updateOrderStatus edge cases › should handle invalid status transitions (lines 381-382)

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      264 |       await orderController.updateOrderStatus(req, res);
      265 |
    > 266 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      267 |       expect(res.status).toHaveBeenCalledWith(500);
      268 |       
      269 |       consoleSpy.mockRestore();

      at Object.toHaveBeenCalled (tests/unit/orderControllerAdditional.test.js:266:26)

  ● Order Controller - Additional Coverage › cancelOrder method (lines 469-470, 488) › should handle cancellation of already cancelled order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Order is already cancelled",
    +   "message": "Orders in cancelled status cannot be cancelled. Only pending orders can be cancelled.",
        "success": false,
      },

    Number of calls: 1

      304 |
      305 |       expect(res.status).toHaveBeenCalledWith(400);
    > 306 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      307 |         success: false,
      308 |         message: 'Order is already cancelled'
      309 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:306:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle missing payment data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400
    Received: 404

    Number of calls: 1

      319 |       await orderController.updatePaymentStatus(req, res);
      320 |
    > 321 |       expect(res.status).toHaveBeenCalledWith(400);
          |                          ^
      322 |       expect(res.json).toHaveBeenCalledWith({
      323 |         success: false,
      324 |         message: 'Payment status is required'

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:321:26)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund without completed payment

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Can only refund completed payments",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      346 |
      347 |       expect(res.status).toHaveBeenCalledWith(400);
    > 348 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      349 |         success: false,
      350 |         message: 'Can only refund completed payments'
      351 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:348:24)

  ● Order Controller - Additional Coverage › updatePaymentStatus edge cases (lines 538-539, 555, 564, 574, 585) › should handle refund amount greater than order total

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Refund amount cannot exceed order total",
    +   "message": "Cannot update payment status for non-complete orders",
        "success": false,
      },

    Number of calls: 1

      372 |
      373 |       expect(res.status).toHaveBeenCalledWith(400);
    > 374 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      375 |         success: false,
      376 |         message: 'Refund amount cannot exceed order total'
      377 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:374:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle empty order IDs array

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "No orders specified",
    +   "message": "Order IDs must be provided as an array",
        "success": false,
      },

    Number of calls: 1

      390 |
      391 |       expect(res.status).toHaveBeenCalledWith(400);
    > 392 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      393 |         success: false,
      394 |         message: 'No orders specified'
      395 |       });

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:392:24)

  ● Order Controller - Additional Coverage › bulkUpdateOrderStatus edge cases (lines 627-632, 643-644) › should handle some orders not found

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "message": "Orders updated",
    -   "notFoundCount": 1,
    -   "results": Any<Array>,
    -   "success": true,
    -   "updatedCount": 2,
    +   "message": "Unauthorized",
    +   "success": false,
      },

    Number of calls: 1

      413 |       await orderController.bulkUpdateOrderStatus(req, res);
      414 |
    > 415 |       expect(res.json).toHaveBeenCalledWith({
          |                        ^
      416 |         success: true,
      417 |         message: 'Orders updated',
      418 |         updatedCount: 2,

      at Object.toHaveBeenCalledWith (tests/unit/orderControllerAdditional.test.js:415:24)

FAIL tests/unit/authControllerEnhanced.test.js (6.689 s)
  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should login existing affiliate with social account

    TypeError: authController.socialLogin is not a function

      454 |       jwt.sign = jest.fn().mockReturnValue('jwt-token');
      455 |
    > 456 |       await authController.socialLogin(req, res);
          |                            ^
      457 |
      458 |       expect(Affiliate.findOne).toHaveBeenCalledWith({
      459 |         'socialAccounts.google.id': 'google123'

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:456:28)

  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should return error for non-existent social account

    TypeError: authController.socialLogin is not a function

      477 |       Customer.findOne = jest.fn().mockResolvedValue(null);
      478 |
    > 479 |       await authController.socialLogin(req, res);
          |                            ^
      480 |
      481 |       expect(res.status).toHaveBeenCalledWith(404);
      482 |       expect(res.json).toHaveBeenCalledWith({

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:479:28)

  ● Enhanced Auth Controller - OAuth Methods › socialLogin › should login existing customer with social account

    TypeError: authController.socialLogin is not a function

      505 |       jwt.sign = jest.fn().mockReturnValue('customer-jwt-token');
      506 |
    > 507 |       await authController.socialLogin(req, res);
          |                            ^
      508 |
      509 |       expect(Affiliate.findOne).toHaveBeenCalledWith({
      510 |         'socialAccounts.facebook.id': 'facebook123'

      at Object.socialLogin (tests/unit/authControllerEnhanced.test.js:507:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should link social account to existing affiliate

    TypeError: authController.linkSocialAccount is not a function

      563 |         .mockResolvedValueOnce(null); // Check if social account exists elsewhere
      564 |
    > 565 |       await authController.linkSocialAccount(req, res);
          |                            ^
      566 |
      567 |       expect(mockAffiliate.socialAccounts.linkedin).toEqual({
      568 |         id: 'linkedin789',

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:565:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should prevent linking already existing social account

    TypeError: authController.linkSocialAccount is not a function

      582 |         .mockResolvedValueOnce({ affiliateId: 'AFF999999' }); // Social account exists
      583 |
    > 584 |       await authController.linkSocialAccount(req, res);
          |                            ^
      585 |
      586 |       expect(res.status).toHaveBeenCalledWith(409);
      587 |       expect(res.json).toHaveBeenCalledWith({

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:584:28)

  ● Enhanced Auth Controller - OAuth Methods › linkSocialAccount › should handle user not found error

    TypeError: authController.linkSocialAccount is not a function

      607 |         .mockResolvedValueOnce(null); // No existing social account
      608 |
    > 609 |       await authController.linkSocialAccount(req, res);
          |                            ^
      610 |
      611 |       expect(res.status).toHaveBeenCalledWith(401);
      612 |       expect(res.json).toHaveBeenCalledWith({

      at Object.linkSocialAccount (tests/unit/authControllerEnhanced.test.js:609:28)

FAIL tests/integration/socialAuth.test.js (20.811 s)
  ● Social Authentication Integration Tests › Account Linking Flow › should link social account to existing affiliate by email

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      326 |         .send(linkingData);
      327 |
    > 328 |       expect(response.status).toBe(200);
          |                               ^
      329 |       expect(response.body.success).toBe(true);
      330 |       expect(response.body.message).toContain('linked');
      331 |

      at Object.toBe (tests/integration/socialAuth.test.js:328:31)

  ● Social Authentication Integration Tests › Account Linking Flow › should reject linking if social account already exists

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      364 |         .send(linkingData);
      365 |
    > 366 |       expect(response.status).toBe(400);
          |                               ^
      367 |       expect(response.body.success).toBe(false);
      368 |       expect(response.body.message).toContain('already linked');
      369 |     });

      at Object.toBe (tests/integration/socialAuth.test.js:366:31)

  ● Social Authentication Integration Tests › Social Login Flow › should successfully login with existing social account

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      424 |         .send(loginData);
      425 |
    > 426 |       expect(response.status).toBe(200);
          |                               ^
      427 |       expect(response.body.success).toBe(true);
      428 |       expect(response.body.token).toBeDefined();
      429 |       expect(response.body.refreshToken).toBeDefined();

      at Object.toBe (tests/integration/socialAuth.test.js:426:31)

  ● Social Authentication Integration Tests › Social Login Flow › should update social account tokens on login

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      449 |         .send(loginData);
      450 |
    > 451 |       expect(response.status).toBe(200);
          |                               ^
      452 |
      453 |       // Verify tokens were updated
      454 |       const updatedAffiliate = await Affiliate.findById(affiliateId);

      at Object.toBe (tests/integration/socialAuth.test.js:451:31)

FAIL tests/integration/oAuthFlows.test.js (26.228 s)
  ● OAuth Authentication Integration Tests › Social Login › should login existing affiliate with social account

    expected 200 "OK", got 404 "Not Found"

      589 |         .set('x-csrf-token', csrfToken)
      590 |         .send(loginData)
    > 591 |         .expect(200);
          |          ^
      592 |
      593 |       expect(response.body.success).toBe(true);
      594 |       expect(response.body.token).toBeDefined();

      at Object.expect (tests/integration/oAuthFlows.test.js:591:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● OAuth Authentication Integration Tests › Social Login › should login existing customer with social account

    expected 200 "OK", got 404 "Not Found"

      661 |         .set('x-csrf-token', csrfToken)
      662 |         .send(loginData)
    > 663 |         .expect(200);
          |          ^
      664 |
      665 |       expect(response.body.success).toBe(true);
      666 |       expect(response.body.token).toBeDefined();

      at Object.expect (tests/integration/oAuthFlows.test.js:663:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● OAuth Authentication Integration Tests › Social Login › should return error for non-existent social account

    expect(received).toBe(expected) // Object.is equality

    Expected: "No account found with this social media account"
    Received: "API endpoint not found"

      682 |
      683 |       expect(response.body.success).toBe(false);
    > 684 |       expect(response.body.message).toBe('No account found with this social media account');
          |                                     ^
      685 |     });
      686 |   });
      687 |

      at Object.toBe (tests/integration/oAuthFlows.test.js:684:37)

  ● OAuth Authentication Integration Tests › Social Account Linking › should link social account to existing affiliate

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 401, 403]

      738 |       // which is complex in integration tests.
      739 |       // The actual functionality is tested in unit tests.
    > 740 |       expect([200, 401, 403]).toContain(response.status); // Various auth states
          |                               ^
      741 |     });
      742 |   });
      743 |

      at Object.toContain (tests/integration/oAuthFlows.test.js:740:31)


Test Suites: 6 failed, 80 passed, 86 total
Tests:       46 failed, 2 skipped, 1915 passed, 1963 total
Snapshots:   0 total
Time:        599.629 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
