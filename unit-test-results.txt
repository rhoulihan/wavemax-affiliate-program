
> wavemax-affiliate-program@1.0.0 test
> jest --runInBand --forceExit tests/unit/ --silent

PASS tests/unit/logger.test.js
  Logger Utility
    ✓ should export logger methods (72 ms)
    ✓ should be a winston logger instance (14 ms)

PASS tests/unit/encryption.test.js
  Encryption Utility
    ✓ should hash password correctly (54 ms)
    ✓ should verify password correctly (150 ms)
    ✓ should encrypt and decrypt data correctly (2 ms)

PASS tests/unit/paginationMiddleware.test.js
  Pagination Middleware
    ✓ should set default pagination values when no query params provided (3 ms)
    ✓ should parse page and limit from query params
    ✓ should enforce minimum values (1 ms)
    ✓ should enforce maximum limit
    ✓ should handle non-numeric values
    ✓ should calculate skip correctly for different pages (1 ms)
    ✓ should handle floating point numbers
    ✓ should preserve other query parameters

PASS tests/unit/passportGoogleOnly.test.js
  Google OAuth Passport Configuration - Isolated
    ✓ should handle Google OAuth callback correctly (1 ms)
    ✓ should configure Google strategy with correct parameters (1 ms)
    ✓ should support state parameter for context detection

PASS tests/unit/passportFacebookOnly.test.js
  Facebook OAuth Passport Configuration - Isolated
    ✓ should handle Facebook OAuth callback correctly (1 ms)
    ✓ should configure Facebook strategy with profile fields (1 ms)
    ✓ should configure Facebook strategy with correct parameters

PASS tests/unit/passportLinkedInOnly.test.js
  LinkedIn OAuth Passport Configuration - Isolated
    ✓ should handle LinkedIn OAuth callback correctly (1 ms)
    ✓ should configure LinkedIn strategy with correct scope (1 ms)
    ✓ should configure LinkedIn strategy with correct parameters

PASS tests/unit/affiliateLoginInit.test.js
  Affiliate Login Initialization
    Module Loading
      ✓ should initialize when form is found (4 ms)
      ✓ should handle missing form gracefully (1 ms)
    URL Parameter Handling Logic
      ✓ should correctly parse customer parameter from URL
      ✓ should handle URL without customer parameter
      ✓ should construct redirect URL correctly with customer parameter
      ✓ should construct redirect URL correctly without customer parameter (1 ms)
    URL Validation
      ✓ should validate customer ID format (1 ms)
      ✓ should handle URL encoding correctly
    Integration with Email URLs
      ✓ should parse email-generated URLs correctly (1 ms)
      ✓ should handle both login and customer parameters together (1 ms)
    Parameter Preservation Logic
      ✓ should preserve customer parameter through login flow
      ✓ should handle multiple URL parameters correctly (1 ms)

PASS tests/unit/administratorEmailService.test.js
  Administrator Email Service Tests
    sendAdministratorWelcomeEmail
      ✓ should call sendAdministratorWelcomeEmail function (1 ms)
      ✓ should handle admin with different permission sets
      ✓ should handle admin with single permission (1 ms)
      ✓ should handle admin with no permissions
    sendAdministratorPasswordResetEmail
      ✓ should call sendAdministratorPasswordResetEmail function
      ✓ should handle different reset URLs (1 ms)
    Email template data processing
      ✓ should replace uppercase placeholders correctly
      ✓ should handle missing placeholders gracefully
      ✓ should include current year in template data (1 ms)
      ✓ should format permissions correctly as comma-separated string
      ✓ should handle empty permissions array (1 ms)
      ✓ should handle single permission
    Email service integration
      ✓ should be available as a module export
      ✓ should not throw error when sending welcome email (1 ms)
      ✓ should not throw error when sending password reset email
    Admin data validation
      ✓ should handle admin with required fields (1 ms)
      ✓ should handle admin with different adminId formats
      ✓ should handle admin with different email formats (1 ms)

PASS tests/unit/authMiddleware.test.js
  Auth Middleware
    authenticate
      ✓ should authenticate valid Bearer token (370 ms)
      ✓ should authenticate valid x-auth-token header (254 ms)
      ✓ should reject request with no token (222 ms)
      ✓ should reject request with invalid token (209 ms)
      ✓ should reject request with expired token (210 ms)
      ✓ should handle malformed Authorization header (218 ms)
      ✓ should reject blacklisted token (216 ms)
    authorize
      ✓ should authorize user with correct role (211 ms)
      ✓ should authorize user with one of multiple roles (211 ms)
      ✓ should reject user with incorrect role (209 ms)
      ✓ should reject user with no role (212 ms)
      ✓ should reject when user is not set (217 ms)
    authLimiter
      ✓ should be a function (212 ms)
      ✓ should have rate limit configuration (213 ms)

PASS tests/unit/createAdminDirectly.test.js
  Create Admin Directly Script Unit Tests
    generateAdminId function
      ✓ should generate ADM001 when no administrators exist (1 ms)
      ✓ should generate next sequential ID when administrators exist (1 ms)
      ✓ should handle double-digit admin IDs correctly
    Permission selection
      ✓ should handle "all" permission selection (1 ms)
      ✓ should handle specific permission selection
      ✓ should filter out invalid permission numbers (1 ms)
    Database operations
      ✓ should connect to MongoDB successfully
      ✓ should create administrator with correct data (1 ms)
      ✓ should handle database save errors
    Email functionality
      ✓ should send welcome email after admin creation
      ✓ should handle email sending errors gracefully
    Input validation
      ✓ should handle empty input fields
      ✓ should handle whitespace in permission input (1 ms)
    Error handling
      ✓ should handle MongoDB connection errors
      ✓ should close database connection in finally block
      ✓ should close readline interface in finally block (1 ms)

PASS tests/unit/affiliateDashboardInit.test.js
  Affiliate Dashboard Customer Filtering
    URL Parameter Detection Logic
      ✓ should detect customer parameter from URL search params (1 ms)
      ✓ should handle URL without customer parameter
      ✓ should parse customer parameter from complex URL
      ✓ should handle regex pattern matching for customer parameter
    Customer Highlighting Logic
      ✓ should identify highlighted customer correctly
      ✓ should generate correct CSS classes for highlighted customer (1 ms)
      ✓ should generate correct HTML content for highlighted customer
      ✓ should not highlight non-matching customers
    Tab Switching Logic
      ✓ should determine correct tab activation based on customer parameter
      ✓ should not switch tabs when no customer parameter
      ✓ should handle empty string customer parameter
    Authentication Check Logic
      ✓ should identify authenticated state correctly
      ✓ should identify unauthenticated state when missing token (1 ms)
      ✓ should identify unauthenticated state when missing affiliate
    Customer Data Processing
      ✓ should handle empty customer list
      ✓ should process customer list without filtering (1 ms)
      ✓ should filter customer list by customer ID
    URL Construction and Validation
      ✓ should construct API URLs correctly
      ✓ should validate customer ID format (1 ms)
    Timing and Delays
      ✓ should calculate correct delay for tab switching
      ✓ should handle immediate execution when no customer parameter

PASS tests/unit/errorHandler.test.js
  Error Handler Middleware
    errorHandler
      ✓ should handle generic errors with 500 status (9 ms)
      ✓ should handle custom status codes (1 ms)
      ✓ should handle Mongoose validation errors (1 ms)
      ✓ should handle MongoDB duplicate key errors
      ✓ should handle JWT errors (1 ms)
      ✓ should handle JWT token expiration errors (1 ms)
      ✓ should handle rate limiting errors
      ✓ should handle CastError (invalid MongoDB ObjectId) (1 ms)
      ✓ should include user context when available (1 ms)
      ✓ should handle errors with customer context (1 ms)
      ✓ should hide error details in production
      ✓ should show error details in development (1 ms)
      ✓ should use original message for non-500 errors in production (1 ms)
      ✓ should handle errors without message
      ✓ should handle errors with code property (5 ms)
      ✓ should log all console error sections (1 ms)
    AppError
      ✓ should create custom error with status code
      ✓ should have stack trace (1 ms)
      ✓ should work with error handler
    Edge cases
      ✓ should handle null error (1 ms)
      ✓ should handle undefined error (1 ms)
      ✓ should handle non-error objects
      ✓ should handle errors thrown from within error handler (1 ms)

PASS tests/unit/coverageRoutes.test.js
  Coverage Routes
    Access Control Middleware
      ✓ should allow access in development environment (24 ms)
      ✓ should allow access in test environment (5 ms)
      ✓ should deny access in production without key
      ✓ should allow access in production with valid key (5 ms)
      ✓ should deny access in production with invalid key (4 ms)
    Embedded Access Prevention
      ✓ should deny access when Sec-Fetch-Dest is iframe (3 ms)
      ✓ should deny access when X-Frame-Options is present (2 ms)
      ✓ should deny access when referer contains /embed (2 ms)
      ✓ should allow access with normal referer (2 ms)
    Route Handlers
      ✓ should serve index.html at root path (3 ms)
      ✓ should serve critical-files page (3 ms)
      ✓ should serve test-templates page (3 ms)
      ✓ should serve action-plan page (3 ms)
      ✓ should return 404 for non-existent pages (3 ms)
    Static File Headers
      ✓ should set no-cache headers for static files (3 ms)
    Environment Variable Handling
      ✓ should handle missing COVERAGE_ACCESS_KEY (3 ms)
      ✓ should handle empty COVERAGE_ACCESS_KEY (3 ms)
    Multiple Middleware Interaction
      ✓ should check embedded access before access control (2 ms)
      ✓ should apply X-Frame-Options even with valid access (8 ms)
    HTML Response Validation
      ✓ should return valid HTML for access denied page (3 ms)
      ✓ should return valid HTML for 404 page (2 ms)
    Query Parameter Handling
      ✓ should ignore extra query parameters (10 ms)
      ✓ should handle URL-encoded keys (3 ms)
    Edge Cases
      ✓ should handle root path without trailing slash (3 ms)
      ✓ should handle specific route handlers (3 ms)

PASS tests/unit/orderWithSystemConfig.test.js (10.314 s)
  Order Model with SystemConfig Integration
    Dynamic WDF Pricing
      ✓ should fetch base rate from SystemConfig on order creation (891 ms)
      ✓ should use default rate when SystemConfig is not available (954 ms)
      ✓ should calculate estimated total using SystemConfig rate (664 ms)
      ✓ should calculate actual total using SystemConfig rate (669 ms)
    Commission Calculations
      ✓ should calculate affiliate commission correctly with custom WDF rate (679 ms)
      ✓ should calculate commission for zero delivery fee (755 ms)
      ✓ should handle commission calculation for large orders (781 ms)
    Edge Cases
      ✓ should handle commission when only estimated size is available (681 ms)
      ✓ should update calculations when base rate changes (828 ms)
      ✓ should validate minimum and maximum base rates (918 ms)
    Revenue Calculator Scenarios
      ✓ should match revenue calculator example - 10 customers scenario (1221 ms)
      ✓ should match revenue calculator with different parameters (666 ms)

PASS tests/unit/tokenBlacklist.test.js
  TokenBlacklist Model
    Schema Validation
      ✓ should create a valid token blacklist entry (275 ms)
      ✓ should use default values for blacklistedAt and reason (113 ms)
      ✓ should require all mandatory fields (78 ms)
      ✓ should enforce unique token constraint (256 ms)
      ✓ should validate userType enum (79 ms)
      ✓ should accept all valid userTypes (212 ms)
    Static Methods
      blacklistToken
        ✓ should successfully blacklist a token (115 ms)
        ✓ should use default reason when not provided (111 ms)
        ✓ should return null when token already blacklisted (229 ms)
        ✓ should handle custom reasons (116 ms)
        ✓ should propagate non-duplicate errors (77 ms)
      isBlacklisted
        ✓ should return true for blacklisted token (141 ms)
        ✓ should return false for non-blacklisted token (103 ms)
        ✓ should handle empty token (102 ms)
        ✓ should handle null token (102 ms)
      cleanupExpired
        ✓ should delete expired tokens (236 ms)
        ✓ should return 0 when no expired tokens (196 ms)
        ✓ should handle empty collection (107 ms)
    Index Configuration
      ○ skipped should have required indexes
    TTL Behavior
      ○ skipped should have TTL index configured for 24 hours

PASS tests/unit/adminIdGeneration.test.js
  Admin ID Generation Logic Tests
    generateAdminId function logic
      ✓ should generate ADM001 when no administrators exist (326 ms)
      ✓ should generate ADM002 when ADM001 exists (221 ms)
      ✓ should generate ADM003 when ADM001 and ADM002 exist (291 ms)
      ✓ should handle non-sequential admin IDs correctly (278 ms)
      ✓ should handle double-digit admin IDs (215 ms)
      ✓ should handle triple-digit admin IDs (212 ms)
      ✓ should handle large admin ID numbers (238 ms)
    Admin ID format validation
      ✓ should maintain three-digit padding for numbers below 100 (106 ms)
      ✓ should handle numbers above 999 without padding issues (102 ms)
    Admin ID parsing logic
      ✓ should correctly parse admin ID numbers (103 ms)
      ✓ should handle edge cases in admin ID parsing (106 ms)
    Admin ID generation with mixed data
      ✓ should work correctly with inactive administrators (272 ms)
      ✓ should work correctly with different creation dates (287 ms)
      ✓ should work correctly with different permissions (276 ms)
    Performance and reliability
      ✓ should handle database query efficiently (227 ms)
      ✓ should handle concurrent admin creation scenario (381 ms)

PASS tests/unit/encryptionEnhanced.test.js
  Encryption Utility - Enhanced Coverage
    Encryption Error Paths
      ✓ should return null for falsy inputs (1 ms)
      ✓ should throw error with invalid encryption key length (9 ms)
      ✓ should throw error when encryption key is missing (1 ms)
      ✓ should handle crypto errors gracefully (1 ms)
    Decryption Error Paths
      ✓ should return null for falsy inputs
      ✓ should throw error with invalid encrypted object structure (5 ms)
      ✓ should throw error with tampered data (1 ms)
      ✓ should throw error with wrong encryption key (1 ms)
      ✓ should handle corrupted encrypted data (1 ms)
    Password Hashing Error Paths
      ✓ should handle crypto.randomBytes failure (1 ms)
      ✓ should handle crypto.pbkdf2Sync failure (1 ms)
      ✓ should handle empty password (52 ms)
    Password Verification Error Paths
      ✓ should throw error when pbkdf2Sync fails (1 ms)
      ✓ should handle invalid inputs gracefully (182 ms)
      ✓ should return false for invalid salt format (54 ms)
    Token and Barcode Generation
      ✓ should generate tokens of correct length (1 ms)
      ✓ should generate unique tokens (1 ms)
      ✓ should handle token generation errors (1 ms)
      ✓ should generate barcodes with correct format (1 ms)
      ✓ should generate unique barcodes (1 ms)
      ✓ should handle barcode generation errors (1 ms)
    Edge Cases and Security Tests
      ✓ should handle large data encryption/decryption (4 ms)
      ✓ should handle unicode and special characters (2 ms)
      ✓ should produce different IVs for same input (2 ms)
      ✓ should validate encryption output structure (1 ms)
      ✓ should handle password edge cases (1252 ms)

PASS tests/unit/models.test.js (6.381 s)
  Model Tests
    Affiliate Model
      ✓ should create a valid affiliate (573 ms)
      ✓ should require required fields (320 ms)
      ✓ should enforce unique constraints (595 ms)
      ✓ should handle payment information correctly (342 ms)
    Customer Model
      ✓ should create a valid customer (345 ms)
    Order Model
      ✓ should create a valid order (371 ms)
      ✓ should calculate estimated total correctly (367 ms)
      ✓ should calculate actual total and commission when weight is set (367 ms)
      ✓ should update timestamps for status changes (491 ms)
    Transaction Model
      ✓ should create a valid transaction (366 ms)
      ✓ should validate transaction type (328 ms)
      ✓ should validate transaction status (304 ms)
    RefreshToken Model
      ✓ should create a valid refresh token (343 ms)
      ✓ should validate user type (304 ms)
      ✓ should check if token is expired (381 ms)

PASS tests/unit/csrfConfig.test.js
  CSRF Configuration
    CSRF_CONFIG
      ✓ should define all endpoint categories (1 ms)
      ✓ should have valid endpoint patterns (4 ms)
      ✓ should not have duplicate endpoints across categories (1 ms)
      ✓ should include critical security endpoints
      ✓ should exclude authentication endpoints from CSRF (1 ms)
      ✓ should exclude registration endpoints from CSRF
    shouldEnforceCsrf
      HTTP method checks
        ✓ should not enforce CSRF for GET requests
        ✓ should not enforce CSRF for HEAD requests
        ✓ should not enforce CSRF for OPTIONS requests
        ✓ should consider CSRF for POST requests
        ✓ should consider CSRF for PUT requests (1 ms)
        ✓ should consider CSRF for DELETE requests
        ✓ should consider CSRF for PATCH requests
      Public endpoints
        ✓ should not enforce CSRF for public endpoints
        ✓ should not enforce CSRF for health check endpoints (1 ms)
      Authentication endpoints
        ✓ should not enforce CSRF for login endpoints
        ✓ should not enforce CSRF for forgot password
        ✓ should not enforce CSRF for refresh token
      Registration endpoints
        ✓ should not enforce CSRF for affiliate registration (1 ms)
        ✓ should not enforce CSRF for customer registration
      Critical endpoints
        ✓ should enforce CSRF for logout
        ✓ should enforce CSRF for order creation
        ✓ should enforce CSRF for order cancellation (1 ms)
        ✓ should enforce CSRF for password changes
        ✓ should enforce CSRF for data deletion (1 ms)
        ✓ should enforce CSRF for admin operations
        ✓ should enforce CSRF for operator shift changes
        ✓ should enforce CSRF for order status updates
      High priority endpoints
        ✓ should not enforce CSRF for high priority endpoints when CSRF_PHASE < 2
        ✓ should enforce CSRF for high priority endpoints when CSRF_PHASE >= 2 (1 ms)
        ✓ should handle bag management endpoints based on phase
        ✓ should handle payment updates based on phase
      Read-only endpoints
        ✓ should not enforce CSRF for dashboard endpoints (1 ms)
        ✓ should enforce CSRF for search endpoints with state-changing methods (4 ms)
        ✓ should enforce CSRF for export endpoints with state-changing methods
      Pattern matching
        ✓ should match parameterized routes
        ✓ should match nested parameterized routes (1 ms)
        ✓ should not match partial paths
        ✓ should handle complex IDs in paths
      Default behavior
        ✓ should enforce CSRF for unknown state-changing endpoints (1 ms)
        ✓ should enforce CSRF for unmatched PUT requests
        ✓ should not enforce CSRF for unknown GET endpoints
      Edge cases
        ✓ should handle missing CSRF_PHASE environment variable
        ✓ should handle non-numeric CSRF_PHASE (1 ms)
        ✓ should handle paths with query parameters
        ✓ should handle paths with trailing slashes

PASS tests/unit/fieldFilter.test.js
  Field Filter Utility
    filterFields
      ✓ should filter object to include only allowed fields (1 ms)
      ✓ should handle empty allowed fields array
      ✓ should handle null or undefined objects
      ✓ should handle non-object inputs
      ✓ should handle missing fields gracefully (1 ms)
      ✓ should not include inherited properties
      ✓ should handle nested objects without deep filtering
    filterArray
      ✓ should filter array of objects (1 ms)
      ✓ should handle empty array
      ✓ should handle non-array inputs
      ✓ should handle arrays with mixed types (1 ms)
    fieldDefinitions
      ✓ should have definitions for all data types
      ✓ should have different field sets for different roles (1 ms)
      ✓ should not expose sensitive fields in public view
      ✓ should include appropriate fields for each role
    getFilteredData
      ✓ should filter data based on admin role
      ✓ should filter data based on public role
      ✓ should handle self context for customers
      ✓ should handle arrays of data (1 ms)
      ✓ should return data as-is for unknown data types
      ✓ should handle null or undefined data
      ✓ should use fallback field definitions
    responseFilter middleware
      ✓ should create filtered json method (1 ms)
      ✓ should filter response data when _filterType is provided
      ✓ should not filter when _filterType is not provided (1 ms)
      ✓ should handle public role when user is not authenticated
      ✓ should extract user ID from different user types (1 ms)
      ✓ should preserve other response properties
      ✓ should handle responses without data property
      ✓ should maintain this context in json method (1 ms)

PASS tests/unit/sanitization.test.js
  Sanitization Middleware
    sanitizeInput
      ✓ should sanitize string input (2 ms)
      ✓ should sanitize arrays recursively
      ✓ should sanitize objects recursively
      ✓ should handle null values (1 ms)
      ✓ should handle undefined values
      ✓ should handle numbers
      ✓ should handle booleans (1 ms)
      ✓ should handle deeply nested objects
      ✓ should handle arrays of objects
      ✓ should not modify prototype properties (1 ms)
    sanitizeRequest
      ✓ should sanitize request body
      ✓ should sanitize query parameters (1 ms)
      ✓ should sanitize URL parameters
      ✓ should handle missing request properties (1 ms)
      ✓ should handle all properties in one request
    sanitizeEmail
      ✓ should sanitize and validate email (1 ms)
      ✓ should remove HTML from email
      ✓ should return empty string for invalid email (1 ms)
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should handle empty string (1 ms)
      ✓ should validate complex email formats (3 ms)
    sanitizePhone
      ✓ should keep only allowed characters (1 ms)
      ✓ should remove invalid characters
      ✓ should handle international format
      ✓ should remove HTML and special characters
      ✓ should handle null and undefined
      ✓ should handle non-string inputs
      ✓ should trim whitespace
      ✓ should handle empty string (1 ms)
    sanitizeId
      ✓ should keep alphanumeric characters and hyphens
      ✓ should remove special characters
      ✓ should remove spaces (1 ms)
      ✓ should handle script injection attempts
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should trim whitespace
      ✓ should handle empty string
      ✓ should handle MongoDB ObjectId format
    sanitizePath
      ✓ should allow valid file paths (1 ms)
      ✓ should remove directory traversal attempts
      ✓ should remove multiple directory traversal attempts
      ✓ should allow valid characters in paths
      ✓ should remove invalid characters
      ✓ should handle Windows-style paths
      ✓ should handle null and undefined
      ✓ should handle non-string inputs (1 ms)
      ✓ should handle empty string
      ✓ should handle complex path traversal attempts
      ✓ should preserve forward slashes (1 ms)
    Integration tests
      ✓ should work with express middleware chain
      ✓ should handle complex nested structures

PASS tests/unit/passwordValidator.test.js
  Password Validator Utility
    validatePasswordStrength
      Basic Requirements
        ✓ should validate minimum length requirement (2 ms)
        ✓ should require uppercase letters
        ✓ should require lowercase letters (1 ms)
        ✓ should require numbers
        ✓ should require special characters
      Security Validations
        ✓ should reject common passwords
        ✓ should reject passwords containing username (1 ms)
        ✓ should reject passwords containing email
        ✓ should reject sequential characters (1 ms)
        ✓ should reject repeated characters (1 ms)
      Valid Passwords
        ✓ should accept strong valid passwords (1 ms)
      Edge Cases
        ✓ should handle empty password
        ✓ should handle null/undefined password (1 ms)
        ✓ should handle case-insensitive username/email checks
    customPasswordValidator
      ✓ should work as express-validator custom validator (13 ms)
      ✓ should include validation errors in thrown message
    passwordValidationMiddleware
      ✓ should create middleware function
      ✓ should validate password and call next on success
      ✓ should return error response on validation failure (1 ms)
    isPasswordInHistory
      ✓ should return false for empty history (1 ms)
      ✓ should return false for password not in history (48 ms)
      ✓ should handle null/undefined history (1 ms)
    getPasswordStrength
      ✓ should return higher scores for stronger passwords
      ✓ should score length appropriately (1 ms)
      ✓ should score character variety
      ✓ should penalize common patterns
    commonPasswords array
      ✓ should contain common passwords
      ✓ should contain domain-specific passwords

PASS tests/unit/orderController.test.js
  Order Controller
    createOrder
      ✓ should successfully create a new order (316 ms)
      ✓ should handle email sending failures gracefully (104 ms)
      ✓ should return error for invalid customer (53 ms)
      ✓ should return error for invalid affiliate (55 ms)
      ✓ should enforce authorization (52 ms)
    getOrderDetails
      ✓ should return order details for authorized user (52 ms)
      ✓ should return 404 for non-existent order (52 ms)
      ✓ should enforce authorization for customers (52 ms)
    updateOrderStatus
      ✓ should successfully update order status (58 ms)
      ✓ should update actual weight when processing (53 ms)
      ✓ should validate status transitions (52 ms)
      ✓ should send commission email when delivered (52 ms)
    cancelOrder
      ✓ should successfully cancel an order (53 ms)
      ✓ should prevent cancelling non-cancellable orders (52 ms)

PASS tests/unit/administratorController.test.js
  Administrator Controller
    getAdministrators
      ✓ should get administrators with pagination (54 ms)
      ✓ should handle errors (52 ms)
    createAdministrator
      ✓ should create administrator (53 ms)
      ✓ should handle validation errors (65 ms)
    updateAdministrator
      ✓ should update administrator (53 ms)
      ✓ should prevent self-deactivation (53 ms)
    deleteAdministrator
      ✓ should delete administrator (53 ms)
      ✓ should prevent self-deletion (52 ms)
    resetAdministratorPassword
      ✓ should reset password (53 ms)
    Operator Management
      ✓ createOperator should create new operator (53 ms)
      ✓ getOperators should return operators list (52 ms)
      ✓ updateOperator should update operator details (56 ms)
      ✓ deactivateOperator should deactivate operator (53 ms)
    Analytics Functions
      ✓ getDashboard should return dashboard data (53 ms)
      ✓ getOrderAnalytics should return order analytics (54 ms)
    System Configuration
      ✓ getSystemConfig should return configurations (52 ms)
      ✓ updateSystemConfig should update configuration (53 ms)
    getPermissions
      ✓ should return available permissions (53 ms)

PASS tests/unit/auditLogger.test.js
  Audit Logger
    AuditEvents
      ✓ should define all audit event types (1 ms)
      ✓ should have unique event names
    logAuditEvent
      ✓ should log basic audit event
      ✓ should add request context when provided
      ✓ should handle customer context
      ✓ should use error level for critical events (1 ms)
      ✓ should use info level for non-critical events (1 ms)
      ✓ should handle missing user context
      ✓ should handle connection.remoteAddress fallback (1 ms)
    auditMiddleware
      ✓ should create middleware that logs on response finish
      ✓ should log successful responses (1 ms)
      ✓ should not log failed responses
      ✓ should include request context in logs (1 ms)
    logLoginAttempt
      ✓ should log successful login (6 ms)
      ✓ should log failed login with reason
      ✓ should handle null reason
    logSensitiveDataAccess
      ✓ should log sensitive data access
      ✓ should handle different data types and actions
    logPaymentActivity
      ✓ should log payment info access (1 ms)
      ✓ should log payment info update
      ✓ should handle additional details (1 ms)
    logSuspiciousActivity
      ✓ should log suspicious activity with error level (2 ms)
      ✓ should include request context
      ✓ should merge all details (1 ms)
    Logger configuration
      ✓ should export audit logger with required methods (1 ms)
      ✓ should not add console transport in production (1 ms)

PASS tests/unit/customerController.test.js
  Customer Controller
    registerCustomer
      ✓ should successfully register a new customer (3 ms)
      ✓ should return error for invalid affiliate
      ✓ should return error for duplicate email
    getCustomerProfile
      ✓ should return customer profile for authorized customer (1 ms)
      ✓ should return 403 for unauthorized access
      ✓ should return 404 for non-existent customer (1 ms)
    updateCustomerProfile
      ✓ should successfully update customer profile (1 ms)
      ✓ should prevent updating protected fields (2 ms)
    getCustomerOrders
      ✓ should return customer orders with pagination (1 ms)
    deleteCustomerData
      ✓ should delete all customer data in development environment
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

PASS tests/unit/createAdminScript.test.js (9.432 s)
  Create Admin Script Tests
    Script File Structure
      ✓ should exist and be readable (480 ms)
      ✓ should contain required functionality markers (364 ms)
    Admin ID Generation Logic
      ✓ should generate sequential admin IDs starting from ADM001 (579 ms)
      ✓ should calculate next admin ID correctly (621 ms)
    Password Security Requirements
      ✓ should enforce strong password requirements for admins (354 ms)
      ✓ should accept strong passwords for admins (687 ms)
    Permission System Validation
      ✓ should validate all permission types (466 ms)
      ✓ should handle partial permission sets (468 ms)
    Unique Constraint Validation
      ✓ should prevent duplicate administrator IDs (531 ms)
      ✓ should prevent duplicate emails (507 ms)
    Email Integration
      ✓ should handle admin creation with welcome email sending (419 ms)
    Data Validation and Sanitization
      ✓ should handle special characters in names correctly (434 ms)
      ✓ should normalize email addresses (457 ms)
      ✓ should validate email format (359 ms)
    Administrator Model Integration
      ✓ should integrate with existing administrator model schema (428 ms)
      ✓ should work with password hashing middleware (419 ms)
    Script Error Handling
      ✓ should handle database connection errors gracefully (344 ms)
      ✓ should handle invalid input gracefully (329 ms)
    Security Considerations
      ✓ should not log or expose passwords (358 ms)
      ✓ should generate secure random passwords when needed (367 ms)

PASS tests/unit/oAuthSession.test.js (6.545 s)
  OAuthSession Model
    Schema Validation
      ✓ should create a valid OAuth session with all required fields (404 ms)
      ✓ should require sessionId field (202 ms)
      ✓ should require result field (192 ms)
      ✓ should automatically set createdAt (234 ms)
      ✓ should automatically set expiresAt to 5 minutes from now (253 ms)
      ✓ should enforce unique sessionId (288 ms)
      ✓ should allow complex result objects (242 ms)
    Static Methods
      createSession
        ✓ should create and save a new OAuth session (265 ms)
        ✓ should throw error for duplicate session IDs (269 ms)
        ✓ should handle database errors (199 ms)
      getSession
        ✓ should retrieve existing session result by sessionId (255 ms)
        ✓ should return null for non-existent session (218 ms)
      consumeSession
        ✓ should retrieve and delete session in one operation (284 ms)
        ✓ should return null when consuming non-existent session (234 ms)
        ✓ should handle race conditions safely (285 ms)
      cleanupExpired
        ✓ should manually delete expired sessions (446 ms)
        ✓ should return zero deletions when no expired sessions exist (285 ms)
    TTL Behavior
      ✓ should have TTL index configured on expiresAt field (238 ms)
      ✓ should respect custom expiresAt when provided (229 ms)
    Data Integrity
      ✓ should preserve all data types in result field (232 ms)
      ✓ should handle empty and minimal result objects (353 ms)
    Error Handling
      ✓ should handle MongoDB connection errors gracefully (200 ms)
      ✓ should handle very large result objects (293 ms)

PASS tests/unit/socialAuthRoutes.test.js
  Social Auth Routes - Simple Tests
    Google OAuth Routes
      ✓ should initiate Google OAuth when configured (9 ms)
      ✓ should return 404 when Google OAuth is not configured (3 ms)
      ✓ should handle Google OAuth callback (2 ms)
    Facebook OAuth Routes
      ✓ should initiate Facebook OAuth when configured (2 ms)
      ✓ should return 404 when Facebook OAuth is not configured (2 ms)
      ✓ should handle Facebook OAuth callback (1 ms)
    LinkedIn OAuth Routes
      ✓ should initiate LinkedIn OAuth when configured (2 ms)
      ✓ should return 404 when LinkedIn OAuth is not configured (2 ms)
      ✓ should handle LinkedIn OAuth callback (6 ms)
    Social Registration Route
      ✓ should handle social registration with valid data (10 ms)
      ✓ should validate required fields for social registration (2 ms)
      ✓ should validate service radius range (3 ms)
      ✓ should validate payment method (3 ms)
    Social Account Linking Route
      ✓ should handle social account linking (2 ms)
      ✓ should validate provider for account linking (2 ms)
      ✓ should require social token for account linking (2 ms)
    Social Login Callback Route
      ✓ should handle social login callback (2 ms)
      ✓ should validate social login data (2 ms)
    Customer OAuth Routes
      ✓ should initiate Google OAuth for customers (2 ms)
      ✓ should handle customer Google OAuth callback redirect (2 ms)
      ✓ should handle customer Facebook callback (2 ms)
      ✓ should handle customer LinkedIn callback (2 ms)
    Customer Social Registration Route
      ✓ should handle customer social registration (3 ms)
      ✓ should validate customer registration fields (3 ms)
      ✓ should validate service frequency (2 ms)
    Error Handling
      ✓ should handle errors gracefully (14 ms)

PASS tests/unit/authController.test.js
  Auth Controller
    affiliateLogin
      ✓ should successfully login an affiliate with valid credentials (3 ms)
      ✓ should return 401 for non-existent affiliate
      ✓ should return 401 for incorrect password
    customerLogin
      ✓ should successfully login a customer with valid credentials (1 ms)
      ✓ should return 401 for non-existent customer (1 ms)
    verifyToken
      ✓ should verify a valid JWT token
      ✓ should handle missing user data (1 ms)
      ✓ should return customer user data
    refreshToken
      ✓ should refresh token successfully (2 ms)
      ✓ should return error for invalid refresh token
      ✓ should return error for expired refresh token (1 ms)
    administratorLogin
      ✓ should successfully login administrator (1 ms)
      ✓ should handle locked account
      ✓ should handle inactive administrator (1 ms)
    operatorLogin
      ✓ should successfully login operator with PIN (1 ms)
      ✓ should increment login attempts on failure
    logout
      ✓ should logout user and blacklist token (1 ms)
    forgotPassword
      ✓ should send password reset email for affiliate
      ✓ should handle non-existent email gracefully (1 ms)
    resetPassword
      ✓ should reset password with valid token (1 ms)
      ✓ should reject expired token

PASS tests/unit/administrator.test.js (7.561 s)
  Administrator Model
    Schema Validation
      ✓ should create a valid administrator (343 ms)
      ✓ should require all mandatory fields (79 ms)
      ✓ should enforce email format validation (82 ms)
      ✓ should enforce unique email constraint (520 ms)
      ✓ should enforce unique adminId constraint (468 ms)
      ✓ should validate permission enum values (82 ms)
      ✓ should accept valid permissions (168 ms)
      ✓ should trim whitespace from string fields (171 ms)
      ✓ should convert email to lowercase (175 ms)
      ✓ should not allow role to be changed after creation (254 ms)
    Password Handling
      ✓ should hash password on save (197 ms)
      ✓ should verify correct password (238 ms)
      ✓ should reject incorrect password (242 ms)
      ✓ should not expose password in JSON output (163 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (229 ms)
      ✓ should lock account after 5 failed attempts (253 ms)
      ✓ should reset login attempts on successful login (244 ms)
      ✓ should reset attempts if lock has expired (218 ms)
      ✓ should correctly identify locked accounts (177 ms)
    Password Reset
      ✓ should generate password reset token (165 ms)
      ✓ should set password reset expiry to 30 minutes (166 ms)
    Permissions
      ✓ should check single permission correctly (160 ms)
      ✓ should check multiple permissions with AND operation (171 ms)
      ✓ should check multiple permissions with OR operation (162 ms)
      ✓ should set default permissions if none provided (162 ms)
    Static Methods
      ✓ should find active administrators (443 ms)
      ✓ should find administrator by email with password (189 ms)
      ✓ should handle case-insensitive email search (221 ms)
      ✓ should return null for non-existent email (102 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (162 ms)
      ✓ should update updatedAt on modification (295 ms)
    Admin ID Generation
      ✓ should auto-generate unique admin ID (244 ms)
      ✓ should not override provided admin ID (174 ms)

PASS tests/unit/passwordValidatorEnhanced.test.js
  Enhanced Password Validator
    validatePasswordStrength
      Length Requirements
        ✓ should reject passwords shorter than 8 characters (2 ms)
        ✓ should accept passwords with 8 or more characters (1 ms)
      Character Type Requirements
        ✓ should require at least one uppercase letter
        ✓ should require at least one lowercase letter
        ✓ should require at least one number
        ✓ should require at least one special character (1 ms)
        ✓ should accept passwords with all required character types
      Common Password Detection
        ✓ should reject common passwords (1 ms)
        ✓ should accept non-common passwords (1 ms)
      Sequential Character Detection
        ✓ should reject passwords with sequential numbers
        ✓ should reject passwords with sequential letters
        ✓ should accept passwords without sequential characters
      Repeated Character Detection
        ✓ should reject passwords with too many repeated characters (1 ms)
        ✓ should accept passwords with acceptable repeated characters
      Username/Email Inclusion Check
        ✓ should reject passwords containing username (10 ms)
        ✓ should reject passwords containing email (1 ms)
        ✓ should accept passwords not containing username or email (1 ms)
      Password History Check
        ✓ should reject passwords in history
        ✓ should accept passwords not in history
      Complete Valid Passwords
        ✓ should accept completely valid passwords (1 ms)
    getPasswordStrength
      ✓ should return correct strength scores
      ✓ should return correct strength labels
    isPasswordInHistory
      ✓ should return true for passwords in history
      ✓ should return false for passwords not in history
      ✓ should handle empty history
    customPasswordValidator
      ✓ should return custom validator function
      ✓ should validate passwords correctly in express-validator context (1 ms)
      ✓ should throw for invalid passwords in express-validator context (13 ms)
      ✓ should include admin-specific validation when userType is admin (1 ms)
      ✓ should include admin-specific validation when userType is operator
    passwordValidationMiddleware
      ✓ should call next() for valid passwords
      ✓ should return 400 error for invalid passwords (1 ms)
      ✓ should skip validation if no password in request (1 ms)
      ✓ should include strength assessment in response for invalid passwords
    Edge Cases and Security
      ✓ should handle null and undefined inputs gracefully (1 ms)
      ✓ should handle very long passwords
      ✓ should handle special Unicode characters
      ✓ should be case-sensitive for username/email checks

PASS tests/unit/rbac.test.js
  RBAC Middleware
    Role Hierarchy
      ✓ should define correct role hierarchy (1 ms)
      ✓ should define allowed roles
    checkRole Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should reject when user has no role
      ✓ should reject when user has invalid role
      ✓ should accept when user has exact required role
      ✓ should accept when user has higher role in hierarchy
      ✓ should reject when user has lower role in hierarchy
      ✓ should handle array of required roles (1 ms)
      ✓ should accept administrator accessing operator resources
      ✓ should reject operator accessing administrator resources (1 ms)
    checkAllRoles Middleware
      ✓ should reject when no user is present
      ✓ should accept when user has access to all required roles
      ✓ should reject when user lacks access to any required role (1 ms)
      ✓ should accept admin for any combination of roles
    checkResourceOwnership Middleware
      ✓ should reject when no user is present (1 ms)
      ✓ should allow admin access to any resource
      ✓ should allow administrator access to any resource
      ✓ should allow affiliate access to own resource via params (1 ms)
      ✓ should allow customer access to own resource via body
      ✓ should allow operator access to own resource (1 ms)
      ✓ should reject affiliate access to another affiliate resource
      ✓ should prefer params over body for resource ID
    checkAdminPermission Middleware
      ✓ should reject when user is not administrator (1 ms)
      ✓ should reject when administrator not found
      ✓ should reject when administrator is not active
      ✓ should accept when administrator has required permission
      ✓ should handle array of required permissions
      ✓ should reject when administrator lacks any required permission (1 ms)
      ✓ should handle database errors
    checkOperatorStatus Middleware
      ✓ should skip check for non-operators (1 ms)
      ✓ should reject when operator not found
      ✓ should reject when operator is not active
      ✓ should reject when operator is not on shift (1 ms)
      ✓ should accept active operator on shift (5 ms)
      ✓ should handle database errors (1 ms)
    filterResponseFields Middleware
      ✓ should pass through data when no user present
      ✓ should pass through data when user has no role (1 ms)
      ✓ should pass through all fields when role has wildcard permission
      ✓ should filter fields based on role permissions
      ✓ should handle nested field permissions (1 ms)
      ✓ should handle array data
      ✓ should handle standard response format with data property
      ✓ should use default permissions when role not specified
      ✓ should handle deeply nested fields
      ✓ should handle non-object data gracefully (1 ms)
      ✓ should handle empty allowed fields

PASS tests/unit/passportConfig.test.js
  Passport Configuration Tests
    Strategy Configuration
      ✓ should configure Google strategy when credentials are present (3 ms)
      ✓ should not configure Google strategy without credentials (1 ms)
      ✓ should configure Facebook strategy when credentials are present (1 ms)
      ✓ should not configure Facebook strategy without credentials
      ✓ should configure LinkedIn strategy when credentials are present (8 ms)
    Google OAuth Strategy
      ✓ should handle database errors (1 ms)
      Customer Context
        ✓ should handle existing customer with Google account (1 ms)
        ✓ should link Google account to existing customer (1 ms)
        ✓ should handle existing affiliate conflict (1 ms)
        ✓ should return new user data
      Affiliate Context
        ✓ should handle existing affiliate with Google account (1 ms)
        ✓ should handle customer conflict (1 ms)
        ✓ should link Google account to existing affiliate with email (2 ms)
        ✓ should return new affiliate user data (1 ms)
    Facebook OAuth Strategy
      ✓ should handle existing affiliate (1 ms)
      ✓ should return new user data for registration
      ✓ should link Facebook account to existing affiliate (1 ms)
      ✓ should handle Facebook error (1 ms)
    LinkedIn OAuth Strategy
      ✓ should handle existing affiliate
      ✓ should link LinkedIn account to existing affiliate
      ✓ should return new LinkedIn user data (1 ms)
      ✓ should handle LinkedIn error (1 ms)
    Serialization
      ✓ should serialize user with _id (1 ms)
      ✓ should serialize user with socialId (1 ms)
      ✓ should deserialize user (1 ms)
      ✓ should handle deserialization errors

PASS tests/unit/systemConfig.test.js (8.538 s)
  SystemConfig Model
    Schema Validation
      ✓ should create a valid system config (280 ms)
      ✓ should require mandatory fields (78 ms)
      ✓ should enforce unique key constraint (291 ms)
      ✓ should validate category enum (79 ms)
      ✓ should validate dataType enum (78 ms)
      ✓ should accept all valid categories (408 ms)
      ✓ should accept all valid data types (470 ms)
      ✓ should trim string fields (107 ms)
    Value Validation
      Number validation
        ✓ should reject non-number values for number dataType (78 ms)
        ✓ should enforce minimum value validation (78 ms)
        ✓ should enforce maximum value validation (82 ms)
        ✓ should accept valid number within range (112 ms)
      Boolean validation
        ✓ should reject non-boolean values for boolean dataType (110 ms)
        ✓ should accept boolean values (112 ms)
      String validation
        ✓ should reject non-string values for string dataType (81 ms)
        ✓ should enforce regex validation (78 ms)
        ✓ should accept valid string matching regex (112 ms)
      Array validation
        ✓ should reject non-array values for array dataType (81 ms)
        ✓ should accept array values (113 ms)
      Object validation
        ✓ should reject non-object values for object dataType (78 ms)
        ✓ should reject arrays for object dataType (80 ms)
        ✓ should accept object values (114 ms)
      Allowed values validation
        ✓ should enforce allowed values (79 ms)
        ✓ should accept allowed values (112 ms)
    Static Methods
      getValue
        ✓ should return config value (139 ms)
        ✓ should return defaultValue when value is undefined (145 ms)
        ✓ should return provided default when config not found (105 ms)
        ✓ should return null when config not found and no default provided (102 ms)
      setValue
        ✓ should update config value (182 ms)
        ✓ should throw error for non-existent config (103 ms)
        ✓ should throw error for non-editable config (138 ms)
        ✓ should update updatedBy when provided (167 ms)
        ✓ should validate new value according to dataType (140 ms)
      getByCategory
        ✓ should return all configs for a category (335 ms)
        ✓ should return only public configs when specified (147 ms)
        ✓ should return empty array for non-existent category (152 ms)
        ✓ should sort by key (184 ms)
      getPublicConfigs
        ✓ should return only public configs (145 ms)
        ✓ should sort by category then key (154 ms)
      initializeDefaults
        ✓ should create default configurations (507 ms)
        ✓ should not overwrite existing configurations (485 ms)
        ✓ should add missing configurations (481 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (111 ms)
      ✓ should update updatedAt on modification (244 ms)
    toJSON transformation
      ✓ should include currentValue in JSON output (111 ms)
      ✓ should use defaultValue when value is undefined (110 ms)
    Edge Cases
      ✓ should handle mixed types for value and defaultValue (117 ms)
      ✓ should handle empty validation object (111 ms)
      ✓ should skip validation when value is not modified (143 ms)

info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-08T03:41:39.379Z","userType":"affiliate","username":"johndoe"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-08T03:41:39.909Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_REGISTRATION","details":{"provider":"google","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-08T03:41:40.556Z","userType":"affiliate"}
info: undefined {"action":"SOCIAL_CUSTOMER_REGISTRATION","details":{"provider":"facebook","registrationMethod":"social"},"eventType":"ACCOUNT_CREATED","timestamp":"2025-06-08T03:41:40.911Z","userType":"customer"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-08T03:41:41.377Z","userType":"affiliate"}
info: undefined {"affiliateId":"AFF123456","loginMethod":"social","provider":"google","timestamp":"2025-06-08T03:41:41.378Z","userType":"affiliate"}
info: undefined {"eventType":"LOGIN_SUCCESS","reason":"Social login successful","success":true,"timestamp":"2025-06-08T03:41:41.683Z","userType":"customer"}
info: undefined {"action":"SOCIAL_ACCOUNT_LINKED","details":{"provider":"linkedin","socialAccountId":"linkedin789"},"eventType":"ACCOUNT_UPDATED","timestamp":"2025-06-08T03:41:41.837Z","userId":"507f1f77bcf86cd799439011","userType":"affiliate"}
PASS tests/unit/authControllerEnhanced.test.js (6.5 s)
  Enhanced Auth Controller - OAuth Methods
    handleSocialCallback
      ✓ should create OAuth session and redirect for affiliate context (428 ms)
      ✓ should handle customer context from state parameter (186 ms)
      ✓ should handle missing user data gracefully (179 ms)
      ✓ should handle OAuth session creation errors (156 ms)
      ✓ should extract profile data correctly for different providers (159 ms)
    handleCustomerSocialCallback
      ✓ should create customer OAuth session (165 ms)
    completeSocialRegistration
      ✓ should complete social registration successfully (213 ms)
      ✓ should sanitize social data and reject if fields become empty (163 ms)
      ✓ should check for existing email and username (160 ms)
      ✓ should check for existing social account (160 ms)
      ✓ should generate unique username from social data (154 ms)
      ✓ should handle JWT verification errors (151 ms)
    completeSocialCustomerRegistration
      ✓ should complete customer social registration successfully (209 ms)
      ✓ should validate affiliate existence (153 ms)
      ✓ should sanitize customer social data (154 ms)
    socialLogin
      ✓ should login existing affiliate with social account (153 ms)
      ✓ should return error for non-existent social account (151 ms)
      ✓ should login existing customer with social account (155 ms)
    linkSocialAccount
      ✓ should link social account to existing affiliate (152 ms)
      ✓ should prevent linking already existing social account (152 ms)
      ✓ should handle user not found error (155 ms)
    pollOAuthSession
      ✓ should return complete session data when available (152 ms)
      ✓ should return social-auth-login session data (157 ms)
      ✓ should return social-auth-error session data (153 ms)
      ✓ should return social-auth-account-conflict session data for affiliate conflict (152 ms)
      ✓ should return social-auth-account-conflict session data for customer conflict (154 ms)
      ✓ should return pending status when session not ready (152 ms)
      ✓ should handle database errors gracefully (166 ms)
    Error Handling and Edge Cases
      ✓ should handle malformed JWT tokens (227 ms)
      ✓ should handle database connection errors (152 ms)
      ✓ should handle missing required fields in social data (151 ms)

PASS tests/unit/operator.test.js (11.085 s)
  Operator Model
    Schema Validation
      ✓ should create a valid operator (355 ms)
      ✓ should require all mandatory fields (82 ms)
      ✓ should enforce email format validation (87 ms)
      ✓ should enforce unique email constraint (666 ms)
      ✓ should enforce unique operatorId constraint (685 ms)
      ✓ should validate shift time format (83 ms)
      ✓ should accept valid shift times (165 ms)
      ✓ should enforce quality score range (85 ms)
      ✓ should trim whitespace from string fields (173 ms)
      ✓ should convert email to lowercase (166 ms)
      ✓ should not allow role to be changed after creation (230 ms)
    Password Handling
      ✓ should hash password on save (192 ms)
      ✓ should verify correct password (250 ms)
      ✓ should reject incorrect password (250 ms)
      ✓ should not expose password in JSON output (165 ms)
    Login Attempts and Account Locking
      ✓ should increment login attempts (224 ms)
      ✓ should lock account after 5 failed attempts (238 ms)
      ✓ should lock for 30 minutes (223 ms)
      ✓ should reset login attempts on successful login (232 ms)
      ✓ should reset attempts if lock has expired (225 ms)
      ✓ should correctly identify locked accounts (167 ms)
    Password Reset
      ✓ should generate password reset token (162 ms)
      ✓ should set password reset expiry to 30 minutes (177 ms)
    Shift Management
      isOnShift virtual
        ✓ should return true when no shift times are set (178 ms)
        ✓ should correctly identify operator on shift during normal hours (170 ms)
        ✓ should correctly identify operator off shift (170 ms)
        ✓ should handle overnight shifts correctly (175 ms)
    Processing Statistics
      ✓ should update processing stats correctly (202 ms)
      ✓ should handle first order processing (203 ms)
      ✓ should update quality score with passing result (197 ms)
      ✓ should update quality score with failing result (201 ms)
    Static Methods
      findActive
        ✓ should find only active operators (456 ms)
      findOnShift
        ✓ should find only operators on shift (344 ms)
      findByEmailWithPassword
        ✓ should find operator by email with password (194 ms)
        ✓ should handle case-insensitive email search (199 ms)
        ✓ should return null for non-existent email (105 ms)
      findAvailableOperators
        ✓ should find operators with low order count (520 ms)
        ✓ should sort by current order count (311 ms)
        ✓ should respect limit parameter (820 ms)
    Timestamps
      ✓ should auto-generate timestamps on creation (161 ms)
      ✓ should update updatedAt on modification (329 ms)
    Operator ID Generation
      ✓ should auto-generate unique operator ID (254 ms)
      ✓ should not override provided operator ID (177 ms)

PASS tests/unit/administratorControllerEnhanced.test.js
  Administrator Controller - Enhanced Coverage
    Administrator Management
      getAdministrators
        ✓ should get all administrators with pagination (2 ms)
        ✓ should filter administrators by search query (1 ms)
        ✓ should handle database errors
      getAdministratorById
        ✓ should get administrator by ID (1 ms)
        ✓ should return 404 for non-existent administrator
        ✓ should return 400 for invalid ObjectId (1 ms)
      createAdministrator
        ✓ should create new administrator with valid data (1 ms)
        ✓ should return validation errors
        ✓ should handle duplicate email error (1 ms)
      updateAdministrator
        ✓ should update administrator successfully (1 ms)
        ○ skipped should not allow self-demotion of last super admin
      deleteAdministrator
        ✓ should delete administrator successfully
        ✓ should prevent self-deletion (1 ms)
        ✓ should prevent deletion of last administrator
      resetAdministratorPassword
        ✓ should reset administrator password (1 ms)
        ✓ should handle email sending failure
      getPermissions
        ✓ should return all available permissions (1 ms)
    Operator Management Extensions
      deactivateOperator
        ✓ should deactivate operator
        ✓ should handle non-existent operator (1 ms)
      resetOperatorPassword
        ○ skipped should reset operator password and send email
      resetOperatorPin
        ✓ should validate PIN format
        ○ skipped should reset operator PIN
      deleteOperator
        ○ skipped should delete operator permanently
      getAvailableOperators
        ✓ should get available operators for assignment (1 ms)
      updateOperatorStats
        ○ skipped should update operator statistics
    Analytics Extensions
      getOperatorAnalytics
        ○ skipped should get operator analytics with date range
        ○ skipped should handle missing date range
      getAffiliateAnalytics
        ○ skipped should get affiliate analytics
      exportReport
        ○ skipped should export report as CSV
        ○ skipped should export report as JSON
        ○ skipped should reject invalid format
    Operator Self-Management
      getOperatorSelf
        ○ skipped should get current operator profile
        ○ skipped should handle non-operator users
      updateOperatorSelf
        ✓ should prevent changing restricted fields
        ○ skipped should allow operator to update own profile
    Error Handling
      ○ skipped should handle database connection errors
      ○ skipped should handle validation errors

PASS tests/unit/affiliateController.test.js
  Affiliate Controller
    registerAffiliate
      ✓ should successfully register a new affiliate (2 ms)
      ✓ should return validation errors
      ✓ should handle duplicate email or username (1 ms)
      ✓ should handle email service failure gracefully (1 ms)
      ✓ should handle database errors
    getAffiliateProfile
      ✓ should return affiliate profile for authorized user (1 ms)
      ✓ should return 404 for non-existent affiliate
      ✓ should return 403 for unauthorized access (1 ms)
      ✓ should handle decryption errors gracefully
    updateAffiliateProfile
      ✓ should successfully update affiliate profile (1 ms)
      ✓ should handle password change (1 ms)
      ✓ should reject incorrect current password
      ✓ should update payment method (1 ms)
    getAffiliateEarnings
      ✓ should return earnings for specified period (1 ms)
      ✓ should handle different time periods
      ✓ should handle missing customers gracefully (1 ms)
    getAffiliateCustomers
      ✓ should return paginated customers with search (1 ms)
      ✓ should handle different sort options
    getAffiliateOrders
      ✓ should return filtered orders (2 ms)
      ✓ should handle date filters correctly
    getAffiliateTransactions
      ✓ should return paginated transactions (1 ms)
    getAffiliateDashboardStats
      ✓ should return comprehensive dashboard statistics (1 ms)
      ✓ should handle empty data gracefully
    getPublicAffiliateInfo
      ✓ should return only public affiliate information (1 ms)
      ✓ should return 404 for non-existent affiliate
    Error handling
      ✓ should handle database connection errors
    deleteAffiliateData
      ✓ should delete all affiliate data in development environment (1 ms)
      ✓ should reject deletion in production environment
      ✓ should reject unauthorized deletion
      ✓ should handle deletion errors (1 ms)

PASS tests/unit/operatorController.test.js
  Operator Controller
    getDashboard
      ✓ should return operator dashboard data (1 ms)
    getOrderQueue
      ✓ should return available orders for operator workstation
    claimOrder
      ✓ should allow operator to claim an order (1 ms)
      ✓ should fail if order is already claimed (1 ms)
      ✓ should fail if order not found
      ✓ should handle database error during claim
    updateOrderStatus
      ✓ should update order status
      ✓ should handle invalid status transition (1 ms)
      ✓ should handle order not found
      ✓ should handle unauthorized operator
      ✓ should update workstation when washing status with new workstation (1 ms)
      ✓ should set processingCompleted when status is ready
      ✓ should handle database error (1 ms)
    performQualityCheck
      ✓ should record quality check results (1 ms)
      ✓ should handle order not found
      ✓ should handle order not ready for quality check
      ✓ should handle database error during quality check (1 ms)
    getMyOrders
      ✓ should return orders assigned to operator
    updateShiftStatus
      ✓ should update operator shift status (1 ms)
      ✓ should handle operator not found
      ✓ should end shift successfully (1 ms)
      ✓ should handle database error
    getPerformanceStats
      ✓ should return operator performance statistics (1 ms)
    getCustomerDetails
      ✓ should return customer details for an order
    addCustomerNote
      ✓ should add a note to an order (1 ms)
      ✓ should handle customer not found
      ✓ should handle errors during note addition (1 ms)
    Error handling in existing functions
      ✓ should handle error in getDashboard when operator not found
      ✓ should handle database error in getDashboard
      ✓ should handle error in getOrderQueue (1 ms)
      ✓ should handle different filters in getOrderQueue
      ✓ should handle operator at max capacity in claimOrder (1 ms)
      ✓ should handle quality check failure in performQualityCheck
      ✓ should handle workstation conflict in updateShiftStatus (1 ms)
      ✓ should handle incomplete orders when ending shift
      ✓ should handle invalid action in updateShiftStatus
      ✓ should handle missing workstation when starting shift (1 ms)
      ✓ should handle different time periods in getPerformanceStats
      ✓ should handle operator not found in getPerformanceStats
      ✓ should handle customer not found in getCustomerDetails (6 ms)
      ✓ should handle filters in getMyOrders (1 ms)

Test Suites: 40 passed, 40 total
Tests:       18 skipped, 914 passed, 932 total
Snapshots:   0 total
Time:        101.318 s
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
